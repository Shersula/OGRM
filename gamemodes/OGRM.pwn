 #include <a_samp>
#include <crashdetect>
#include <sscanf2>
#include <nex-ac_ru.lang>
#include <streamer>
#include <nex-ac>
#include <a_mysql>
#include <foreach>
#include <Pawn.Regex>
#include <Pawn.CMD>
#include <mxdate>
#include <mapandreas>
#include <timerfix>
#include <zvehcomp>
#include <Pawn.RakNet>
#include <mapping/mapfix>

#define E_STREAMER_CUSTOM(%0) ((%0) | 0x40000000 & ~0x80000000)
#define Array_Type_Spike			1
#define Array_Type_Pickups			2
#define Array_Type_House			3
#define Array_Type_Business			4
#define Array_Type_FractionWare		5
#define Array_Type_Gate				6
#define Array_Type_Shipment			7
#define Array_Type_Car				8
#define E_STREAMER_ARRAY_TYPE 	E_STREAMER_CUSTOM(0xFE)
#define E_STREAMER_INDX 		E_STREAMER_CUSTOM(0xFF)
//////////////////////COLOR////////////////////////////////////////////////////
#define Main_Color 		"{D8816E}"
#define Color_Blue		"{29CDDF}"
#define Color_Red 		"{FF0000}"
#define Color_Red2 		"{E66761}"
#define Color_Grey 		"{AFAFAF}"
#define Color_White 	"{FFFFFF}"
#define Color_Yellow 	"{FFFF00}"
#define Color_Gold		"{FFD700}"
#define Color_News		"{CCAD00}"
#define Color_Orange	"{eb8d00}"
#define Color_Green		"{2ED13E}"
#define Color_Blue2		"{42aaff}"
#define Color_Do		"{2273b5}"
#define Color_Me		"{C2A2DA}"
#define Color_R 		"{8D8DFF}"
#define Color_D 		"{FF9595}"
#define Color_GOV 		"{2E35FE}"
#define Color_Live 		"{C1DC8F}"

#define BitColor_Main	0xD8816EFF
#define BitColor_Green	0x2ED13EFF
#define BitColor_Yellow	0xFFFF00FF
#define BitColor_Me		0xC2A2DAFF
#define BitColor_White	0xFFFFFFFF
#define BitColor_Do		0x2273b5FF
#define BitColor_S		0x008cf0FF
#define BitColor_R 		0x8D8DFFFF
#define BitColor_F		0x16F0FFFF
#define BitColor_D 		0xFF9595FF
#define BitColor_GOV	0x2E35FEFF
#define BitColor_Live	0xC1DC8FFF
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////Anim Indx////////////////////////////////////////
#define Animation_Wank_Loop		993
#define Animation_Dance_1 		403
#define Animation_Dance_13		415
///////////////////////////////////////////////////////////////////////////////

#define LogTypeMoney	1
#define LogTypeAdmin	2
#define LogTypeAccount	3
#define LogTypeFraction	4

#define Project_Name 		"Old Good RPG mod"
#define Short_Project_Name 	"OGRM"

new MySQL:DB;
new AdminBoard; //Объект с информацией об администраторах в Мэрии
new LeaderBoard; //Объект с информацией о лидерах онлайн в Мэрии
new PlayerBoard; //Объект с информацией о топе игроков в Мэрии
new DonateBoard; //Объект с информацией о топе донатов в Мэрии

new PlayerText:FuelPTD[MAX_PLAYERS];
new PlayerText:SpeedPTD[MAX_PLAYERS];
new PlayerText:LevelPTD[MAX_PLAYERS];
new PlayerText:SpecPanelPTD[MAX_PLAYERS][8];
new PlayerText:FisherPTD[MAX_PLAYERS];
new PlayerText:GaragePTD[MAX_PLAYERS][3];
new PlayerText:CarUpgradePTD[MAX_PLAYERS][11];
new PlayerText:CarUpgradePTDText[MAX_PLAYERS][36];
new PlayerText:SkinSelectPTD[MAX_PLAYERS];
new PlayerText:CasinoPTD[MAX_PLAYERS][8];
new PlayerText:GangWarPTD[MAX_PLAYERS][3];

new Text:Background;
new Text:GlobalTimeTD;
new Text:SiteTD;
new Text:SpecPanelTD[19];
new Text:CheaterPanelTD[4];
new Text:FisherTD[22];
new Text:GarageTD;
new Text:CarUpgradeTD;
new Text:SkinSelectTD[3];

new CheaterPanelID[10] = {-1, ...};

new AntiCheatNaming[53][] = {
	{"АирБрейк"},
	{"АирБрейк (машина)"},
	{"Телепорт"},
	{"Телепорт (машина)"},
	{"Телепорт (к машине)"},
	{"Телепорт (машину к себе)"},
	{"Телепорт (к пикапу)"},
	{"ФлайХак"},
	{"ФлайХак (машина)"},
	{"СпидХак"},
	{"СпидХак (машина)"},
	{"Health hack (машина)"},
	{"Health hack"},
	{"Armour hack"},
	{"Money hack"},
	{"Weapon hack"},
	{"Ammo hack (add)"},
	{"Ammo hack (infinite)"},
	{"Special actions hack"},
	{"GodMode"},
	{"GodMode (машина)"},
	{"Invisible hack"},
	{"lagcomp-spoof"},
	{"Tuning hack"},
	{"Parkour mod"},
	{"Быстрый поворот"},
	{"Rapid fire"},
	{"FakeSpawn"},
	{"FakeKill"},
	{"Pro Aim"},
	{"CJ run"},
	{"CarShot"},
	{"CarJack"},
	{"UnFreeze"},
	{"AFK Ghost"},
	{"Full Aiming"},
	{"Fake NPC"},
	{"Reconnect"},
	{"Высокий пинг"},
	{"Подмена диалога"},
	{"Песочница"},
	{"Подмена версии самп"},
	{"Взлом Rcon"},
	{"Крашер тюнингом"},
	{"Крашер неверным местом в машине"},
	{"Крашер диалогами"},
	{"Attached object crasher"},
	{"Крашер оружием"},
	{"Флуд коннектом в один слот"},
	{"callback flood"},
	{"Флуд сменой мест в машине"},
	{"DoS"},
	{"NOPs"}
};

new AntiCheatNamingNOP[12][] = {
	{"NOP Выдача оружия"},
	{"NOP Выдача патрон"},
	{"NOP Изменение инт."},
	{"NOP Устанрвка здоровья"},
	{"NOP Починка ТС"},
	{"NOP Установка брони"},
	{"NOP Спец.анимации"},
	{"NOP Посадка в машину"},
	{"NOP Уход в режим наблюдения"},
	{"NOP Спавн"},
	{"NOP Изменение поз."},
	{"NOP Выкидывание из машины"}
};

new AntiCheatCode[53];
new AntiCheatCodeNOP[12];

#define OfferID_Kiss			1
#define OfferID_Repair			2
#define OfferID_Fill			3
#define OfferID_Free			4
#define OfferID_GiveKey			5
#define OfferID_SellHouse		6
#define OfferID_ExcangeHouse	7
#define OfferID_SellBusiness	8
#define OfferID_ExcangeBusiness	9
#define OfferID_SellGun			10
#define OfferID_SellDrugs		11

new PlayerColors[100] = {
0xFFFFFF50,0xC715FFFF,0x20B2AAFF,0xDC143CFF,0x6495EDFF,0xf0e68cFF,0x778899FF,0xFF1493FF,0xF4A460FF,0xEE82EEFF,0xFFD720FF,0x8b4513FF,0x4949A0FF,0x148b8bFF,0x14ff7fFF,0x556b2fFF,0x0FD9FAFF,0x10DC29FF,0x534081FF,0x0495CDFF,0xEF6CE8FF,0xBD34DAFF,
0x247C1BFF,0x0C8E5DFF,0x635B03FF,0xCB7ED3FF,0x65ADEBFF,0x5C1ACCFF,0xF2F853FF,0x11F891FF,0x7B39AAFF,0x53EB10FF,0x54137DFF,0x275222FF,0xF09F5BFF,0x3D0A4FFF,0x22F767FF,0xD63034FF,0x9A6980FF,0xDFB935FF,0x3793FAFF,0x90239DFF,0xE9AB2FFF,0xAF2FF3FF,
0x057F94FF,0xB98519FF,0x388EEAFF,0x028151FF,0xA55043FF,0x0DE018FF,0x93AB1CFF,0x95BAF0FF,0x369976FF,0x18F71FFF,0x4B8987FF,0x491B9EFF,0x829DC7FF,0xBCE635FF,0xCEA6DFFF,0x20D4ADFF,0x2D74FDFF,0x3C1C0DFF,0x12D6D4FF,0x48C000FF,0x2A51E2FF,0xE3AC12FF,
0xFC42A8FF,0x2FC827FF,0x1A30BFFF,0xB740C2FF,0x42ACF5FF,0x2FD9DEFF,0xFAFB71FF,0x05D1CDFF,0xC471BDFF,0x94436EFF,0xC1F7ECFF,0xCE79EEFF,0xBD1EF2FF,0x93B7E4FF,0x3214AAFF,0x184D3BFF,0xAE4B99FF,0x7E49D7FF,0x4C436EFF,0xFA24CCFF,0xCE76BEFF,0xA04E0AFF,
0x9F945CFF,0xDCDE3DFF,0x10C9C5FF,0x70524DFF,0x0BE472FF,0x8A2CD7FF,0x6152C2FF,0xCF72A9FF,0xE59338FF,0xEEDC2DFF,0xD8C762FF,0x3FE65CFF
};

new PlayerColorsHEX[100][] = {
"{FFFFFF}","{C715FF}","{20B2AA}","{DC143C}","{6495ED}","{f0e68c}","{778899}","{FF1493}","{F4A460}","{EE82EE}","{FFD720}","{8b4513}","{4949A0}","{148b8b}","{14ff7f}","{556b2f}","{0FD9FA}","{10DC29}","{534081}","{0495CD}","{EF6CE8}","{BD34DA}",
"{247C1B}","{0C8E5D}","{635B03}","{CB7ED3}","{65ADEB}","{5C1ACC}","{F2F853}","{11F891}","{7B39AA}","{53EB10}","{54137D}","{275222}","{F09F5B}","{3D0A4F}","{22F767}","{D63034}","{9A6980}","{DFB935}","{3793FA}","{90239D}","{E9AB2F}","{AF2FF3}",
"{057F94}","{B98519}","{388EEA}","{028151}","{A55043}","{0DE018}","{93AB1C}","{95BAF0}","{369976}","{18F71F}","{4B8987}","{491B9E}","{829DC7}","{BCE635}","{CEA6DF}","{20D4AD}","{2D74FD}","{3C1C0D}","{12D6D4}","{48C000}","{2A51E2}","{E3AC12}",
"{FC42A8}","{2FC827}","{1A30BF}","{B740C2}","{42ACF5}","{2FD9DE}","{FAFB71}","{05D1CD}","{C471BD}","{94436E}","{C1F7EC}","{CE79EE}","{BD1EF2}","{93B7E4}","{3214AA}","{184D3B}","{AE4B99}","{7E49D7}","{4C436E}","{FA24CC}","{CE76BE}","{A04E0A}",
"{9F945C}","{DCDE3D}","{10C9C5}","{70524D}","{0BE472}","{8A2CD7}","{6152C2}","{CF72A9}","{E59338}","{EEDC2D}","{D8C762}","{3FE65C}"
};

#define CarUpgradeTypeRegular	0
#define CarUpgradeTypeVIP1		1
#define CarUpgradeTypeVIP2		2
enum CarUpgradeInfo
{
	cuCarModel,
	cuCarType,
	cuCarPrice
};

new CarUpgradeDonate[][CarUpgradeInfo] = {
	{573, CarUpgradeTypeRegular, 200},
	{495, CarUpgradeTypeRegular, 200},
	{504, CarUpgradeTypeRegular, 200},
	{494, CarUpgradeTypeRegular, 200},
	{502, CarUpgradeTypeRegular, 200},
	{503, CarUpgradeTypeRegular, 200},
	{444, CarUpgradeTypeRegular, 200},
	{556, CarUpgradeTypeRegular, 200},
	{557, CarUpgradeTypeRegular, 200}
};

new CarUpgrade[][CarUpgradeInfo] = {
	{568, CarUpgradeTypeRegular, 100000},
	{603, CarUpgradeTypeRegular, 75000},
	{402, CarUpgradeTypeRegular, 200000},
	{507, CarUpgradeTypeRegular, 120000},
	{585, CarUpgradeTypeRegular, 75000},
	{466, CarUpgradeTypeRegular, 120000},
	{587, CarUpgradeTypeRegular, 100000},
	{424, CarUpgradeTypeRegular, 250000},
	{602, CarUpgradeTypeRegular, 100000},
	{492, CarUpgradeTypeRegular, 120000},
	{579, CarUpgradeTypeRegular, 300000},
	{559, CarUpgradeTypeRegular, 350000},
	{482, CarUpgradeTypeRegular, 150000},
	{496, CarUpgradeTypeRegular, 120000},
	{542, CarUpgradeTypeRegular, 50000},
	{400, CarUpgradeTypeRegular, 200000},
	{551, CarUpgradeTypeRegular, 120000},
	{475, CarUpgradeTypeRegular, 150000},
	{561, CarUpgradeTypeRegular, 200000},
	{550, CarUpgradeTypeRegular, 100000},
	{566, CarUpgradeTypeRegular, 250000},
	{554, CarUpgradeTypeRegular, 200000},
	{445, CarUpgradeTypeRegular, 150000},
	{463, CarUpgradeTypeRegular, 250000},
	{558, CarUpgradeTypeRegular, 150000},
	{536, CarUpgradeTypeRegular, 300000},
	{567, CarUpgradeTypeRegular, 300000},
	{545, CarUpgradeTypeRegular, 250000},
	{442, CarUpgradeTypeRegular, 120000},
	{483, CarUpgradeTypeRegular, 250000},
	{535, CarUpgradeTypeRegular, 350000},
	{576, CarUpgradeTypeRegular, 300000},
	{412, CarUpgradeTypeRegular, 250000},
	{489, CarUpgradeTypeRegular, 150000},
	{491, CarUpgradeTypeRegular, 100000},
	{500, CarUpgradeTypeRegular, 100000},
	{555, CarUpgradeTypeRegular, 120000},
	{589, CarUpgradeTypeRegular, 100000},
	{439, CarUpgradeTypeRegular, 120000},
	{404, CarUpgradeTypeRegular, 75000},
	{405, CarUpgradeTypeRegular, 250000},
	{549, CarUpgradeTypeRegular, 120000},
	{474, CarUpgradeTypeRegular, 200000},
	{581, CarUpgradeTypeRegular, 170000},
	{461, CarUpgradeTypeRegular, 300000},
	{547, CarUpgradeTypeRegular, 50000},
	{426, CarUpgradeTypeRegular, 200000},
	{458, CarUpgradeTypeRegular, 100000},
	{586, CarUpgradeTypeRegular, 200000},
	{468, CarUpgradeTypeRegular, 300000},
	{471, CarUpgradeTypeRegular, 250000},
	{467, CarUpgradeTypeRegular, 150000},
	{534, CarUpgradeTypeRegular, 350000},
	{600, CarUpgradeTypeRegular, 120000},
	{415, CarUpgradeTypeVIP1, 600000},
	{580, CarUpgradeTypeVIP1, 250000},
	{451, CarUpgradeTypeVIP1, 500000},
	{411, CarUpgradeTypeVIP2, 1200000},
	{480, CarUpgradeTypeVIP2, 650000},
	{477, CarUpgradeTypeVIP2, 700000},
	{429, CarUpgradeTypeVIP1, 650000},
	{506, CarUpgradeTypeVIP1, 450000},
	{575, CarUpgradeTypeVIP1, 300000},
	{541, CarUpgradeTypeVIP2, 750000},
	{409, CarUpgradeTypeVIP2, 900000},
	{434, CarUpgradeTypeVIP2, 400000},
	{522, CarUpgradeTypeVIP1, 650000},
	{521, CarUpgradeTypeVIP1, 550000},
	{517, CarUpgradeTypeVIP1, 250000},
	{560, CarUpgradeTypeVIP2, 800000},
	{562, CarUpgradeTypeVIP2, 500000},
	{565, CarUpgradeTypeVIP2, 600000}
};

#define MAX_ICONS	50
enum IconsInfo
{
	IconID,
	IconStreamerID,
	IconModel,
	IconColor,
	IconVW,
	IconInt,
	Float:IconX,
	Float:IconY,
	Float:IconZ,
	IconComment[51]
};
new Icons[MAX_ICONS][IconsInfo];
stock ClearMapIcon(indx)
{
	Icons[indx][IconID] = 0;
	Icons[indx][IconModel] = 0;
	if(Icons[indx][IconStreamerID] && IsValidDynamicMapIcon(Icons[indx][IconStreamerID])) DestroyDynamicMapIcon(Icons[indx][IconStreamerID]);
	Icons[indx][IconStreamerID] = 0;
	Icons[indx][IconColor] = 0;
	Icons[indx][IconVW] = 0;
	Icons[indx][IconInt] = 0;
	Icons[indx][IconX] = 0.0;
	Icons[indx][IconY] = 0.0;
	Icons[indx][IconZ] = 0.0;
	Icons[indx][IconComment][0] = EOS;
	return 1;
}

#define MAX_GPS_TITLE	11
#define MAX_GPS 		20

enum GPSTitleInfo
{
	GpsTitleID,
	GpsTitleName[100]
};
new GPSTitle[MAX_GPS_TITLE][GPSTitleInfo];

enum GPSInfo
{
	GpsID,
	GpsName[100],
	Float:GpsX,
	Float:GpsY,
	Float:GpsZ,
};
new GPS[MAX_GPS_TITLE][MAX_GPS][GPSInfo];

new bool:PayDayCalled;

#define LotteryStartMoney 16000+random(9001)
new bool:LotteryStarted;
new LotteryMoney;

new Float:RandomDemorganPos[9][4] = {
	{21.4084,920.9936,1967.2623,50.5059},
	{13.8188,918.6223,1967.2623,243.2077},
	{21.3874,917.2114,1967.2623,118.1867},
	{27.3438,929.2750,1967.2623,181.1674},
	{25.2427,922.0132,1967.2623,35.4661},
	{21.9035,928.6044,1967.2623,164.5605},
	{13.9292,928.9687,1967.2623,178.6606},
	{11.1695,921.5400,1967.2623,349.7188},
	{9.2168,928.6724,1967.2623,155.7870}
};

enum
{
	AttachFreeSlot1,
	AttachFreeSlot2,
	AttachFreeSlot3,
	AttachFreeSlot4,
	AttachFreeSlot5,
	AttachFreeSlot6,
	AttachFreeSlot7,
	AttachFreeSlot8,
	AttachFreeSlot9,
	AttachSlotJob
};

#define Job_None			0
#define Job_Trucker			1
#define Job_CarThief		2
#define Job_TrashCollector	3
#define Job_Mechanic		4
#define Job_Pilot			5
#define Job_Fisher			6
#define Job_DriverDelivery	7
#define Job_Lawyer			8
#define Job_Bus				9
#define Job_Lumberjack		10
#define Job_Farm			11
#define Job_Mine			12
#define Job_FarmDeliver		13
#define GunDealler			14
#define DrugDealler			15
#define Max_Job				16

enum JobInfo
{
	JobNames[30],
	MaxSkillLevel,
	JobLeveling[5],
	bool:IsUnofficial
};
new Jobs[Max_Job][JobInfo] = {
//	JobNames	MaxSkillLevel	JobLeveling				IsUnofficial
	{"Отсутствует",			0,	{0, 0, 0, 0, 0},		false}, //Job_None
	{"Дальнобойщик",		5,	{0,	50,	50,	100, 100},	false}, //Job_Trucker
	{"Автоугонщик",			5,	{0,	10,	20,	50, 60},	false}, //Job_CarThief
	{"Мусорщик",			5,	{0,	10,	20,	50, 60},	false}, //Job_TrashCollector
	{"Механик",				5,	{0,	50,	50,	100, 100},	false}, //Job_Mechanic
	{"Пилот",				5,	{0,	10,	20,	30, 40},	false}, //Job_Pilot
	{"Рыбак",				5,	{0,	50,	60,	70, 90},	false}, //Job_Fisher
	{"Водитель экспедитор",	5,	{0,	50,	50,	100, 100},	false}, //Job_DriverDelivery
	{"Адвокат",				5,	{0,	50,	50,	100, 100},	false}, //Job_Lawyer
	{"Водитель автобуса",	5,	{0,	10,	20,	30, 40},	false}, //Job_Bus
	{"Лесоруб",				0,	{0,	0,	0,	0, 0},		true}, //Job_Lumberjack
	{"Фермер",				0,	{0,	0,	0,	0, 0},		true}, //Job_Farm
	{"Шахтер",				0,	{0,	0,	0,	0, 0},		true}, //Job_Mine
	{"Фермер-развозчик",	0,	{0,	0,	0,	0, 0},		true}, //Job_FarmDeliver
	{"Гандиллер",			5,	{0,	50,	50,	100, 100},	false}, //GunDealler
	{"Наркодиллер",			5,	{0,	50,	50,	100, 100},	false} //DrugDealler
};

//Дальнобойщик
new TruckerStatus = 0;
new TruckerTimer = 0;
new TruckerQueue[20] = {-1, ...};
/////////////////////////////////
//Лесопилка
enum TreeInfo
{
	TreeID,
	Float:TreeX,
	Float:TreeY,
	Float:TreeZ,
	Text3D:TreeText,
	TreeTimer,
	TreeArea
};
new LumberjackTree[][TreeInfo] = {
	{0, -1624.52917, -2205.47729, 27.35292, Text3D:0, 0, 0},
	{0, -1607.08960, -2205.05176, 22.82594, Text3D:0, 0, 0},
	{0, -1602.52759, -2226.27979, 22.82594, Text3D:0, 0, 0},
	{0, -1614.94458, -2233.73022, 25.81105, Text3D:0, 0, 0},
	{0, -1614.56506, -2249.91626, 27.97181, Text3D:0, 0, 0},
	{0, -1596.90955, -2251.81152, 23.75467, Text3D:0, 0, 0},
	{0, -1607.64087, -2259.68359, 27.93770, Text3D:0, 0, 0},
	{0, -1605.83215, -2246.26318, 25.69940, Text3D:0, 0, 0},
	{0, -1604.57813, -2236.55518, 24.12310, Text3D:0, 0, 0},
	{0, -1616.61792, -2221.42383, 25.90269, Text3D:0, 0, 0},
	{0, -1596.07568, -2213.83276, 20.48598, Text3D:0, 0, 0},
	{0, -1631.71423, -2215.50732, 29.26628, Text3D:0, 0, 0},
	{0, -1623.69653, -2258.33130, 30.78054, Text3D:0, 0, 0},
	{0, -1599.71008, -2261.11646, 26.24806, Text3D:0, 0, 0},
	{0, -1593.77722, -2230.81079, 20.49906, Text3D:0, 0, 0},
	{0, -1590.64844, -2220.88965, 18.88395, Text3D:0, 0, 0},
	{0, -1596.40295, -2240.77441, 22.21609, Text3D:0, 0, 0},
	{0, -1592.42102, -2247.51392, 20.85000, Text3D:0, 0, 0},
	{0, -1588.67017, -2238.37134, 18.95695, Text3D:0, 0, 0},
	{0, -1587.18970, -2253.06250, 19.65602, Text3D:0, 0, 0},
	{0, -1587.24866, -2262.17505, 21.14557, Text3D:0, 0, 0},
	{0, -1615.24866, -2262.29028, 30.01097, Text3D:0, 0, 0},
	{0, -1614.68799, -2242.02417, 26.85041, Text3D:0, 0, 0},
	{0, -1621.97937, -2249.45825, 29.44634, Text3D:0, 0, 0},
	{0, -1623.07275, -2238.10815, 27.95260, Text3D:0, 0, 0},
	{0, -1627.10461, -2226.12964, 28.17183, Text3D:0, 0, 0},
	{0, -1635.13074, -2223.44580, 29.53046, Text3D:0, 0, 0},
	{0, -1640.57800, -2209.82031, 31.26661, Text3D:0, 0, 0},
	{0, -1632.41589, -2207.21338, 29.47784, Text3D:0, 0, 0},
	{0, -1623.55005, -2216.51221, 27.29919, Text3D:0, 0, 0},
	{0, -1613.63269, -2212.67041, 24.91055, Text3D:0, 0, 0},
	{0, -1617.27820, -2207.42017, 25.54323, Text3D:0, 0, 0},
	{0, -1606.56201, -2219.44604, 23.50724, Text3D:0, 0, 0},
	{0, -1601.12915, -2207.66235, 21.73310, Text3D:0, 0, 0},
	{0, -1630.76245, -2259.45435, 30.57821, Text3D:0, 0, 0},
	{0, -1627.67126, -2264.50122, 32.32047, Text3D:0, 0, 0},
	{0, -1638.20483, -2259.01807, 30.61946, Text3D:0, 0, 0}
};
////////////////////////////////
//Ферма
enum PlantInfo
{
	PlantID,
	Float:PlantX,
	Float:PlantY,
	Float:PlantZ,
	Text3D:PlantText,
	PlantTimer,
	PlantArea
};
new FarmPlant[][PlantInfo] = {
	{0, -391.24249, -1275.11792, 33.50485, Text3D:0, 0, 0},
	{0, -417.01276, -1389.52454, 23.01461, Text3D:0, 0, 0},
	{0, -414.44882, -1379.78748, 23.32771, Text3D:0, 0, 0},
	{0, -412.27759, -1371.47644, 23.63819, Text3D:0, 0, 0},
	{0, -410.13449, -1363.97302, 23.74497, Text3D:0, 0, 0},
	{0, -408.38596, -1355.58533, 24.30047, Text3D:0, 0, 0},
	{0, -406.00372, -1347.79749, 24.82722, Text3D:0, 0, 0},
	{0, -403.51917, -1335.49719, 25.85094, Text3D:0, 0, 0},
	{0, -400.86600, -1324.54224, 26.80553, Text3D:0, 0, 0},
	{0, -398.71817, -1315.57642, 27.76230, Text3D:0, 0, 0},
	{0, -396.40488, -1303.93298, 28.77991, Text3D:0, 0, 0},
	{0, -394.53882, -1293.85461, 30.39869, Text3D:0, 0, 0},
	{0, -392.88596, -1284.47009, 32.08826, Text3D:0, 0, 0},
	{0, -350.75232, -1267.60010, 27.39334, Text3D:0, 0, 0},
	{0, -352.17590, -1276.85645, 26.46695, Text3D:0, 0, 0},
	{0, -353.60452, -1286.14539, 25.31403, Text3D:0, 0, 0},
	{0, -355.24213, -1296.12488, 24.48758, Text3D:0, 0, 0},
	{0, -357.30310, -1307.67310, 23.86610, Text3D:0, 0, 0},
	{0, -359.23300, -1316.55994, 22.96006, Text3D:0, 0, 0},
	{0, -361.64749, -1327.39478, 22.46913, Text3D:0, 0, 0},
	{0, -364.46976, -1339.45825, 21.96008, Text3D:0, 0, 0},
	{0, -366.74911, -1347.11304, 21.75092, Text3D:0, 0, 0},
	{0, -369.23691, -1355.46777, 21.64477, Text3D:0, 0, 0},
	{0, -371.43735, -1362.85754, 21.93574, Text3D:0, 0, 0},
	{0, -373.66312, -1371.04895, 22.36612, Text3D:0, 0, 0},
	{0, -376.27695, -1380.66858, 22.36612, Text3D:0, 0, 0},
	{0, -359.60059, -1268.69336, 29.39382, Text3D:0, 0, 0},
	{0, -361.11270, -1277.96057, 28.45934, Text3D:0, 0, 0},
	{0, -362.63065, -1287.26050, 27.29852, Text3D:0, 0, 0},
	{0, -364.35849, -1297.25085, 26.01823, Text3D:0, 0, 0},
	{0, -366.51059, -1308.81042, 25.09682, Text3D:0, 0, 0},
	{0, -368.53415, -1317.68884, 24.64271, Text3D:0, 0, 0},
	{0, -371.04001, -1328.55505, 23.92910, Text3D:0, 0, 0},
	{0, -373.16464, -1337.88037, 23.28249, Text3D:0, 0, 0},
	{0, -376.33051, -1348.29651, 23.00340, Text3D:0, 0, 0},
	{0, -378.91409, -1356.66321, 22.70676, Text3D:0, 0, 0},
	{0, -381.21133, -1364.06470, 23.01620, Text3D:0, 0, 0},
	{0, -383.53482, -1372.26831, 23.02271, Text3D:0, 0, 0},
	{0, -386.26605, -1381.90759, 23.02928, Text3D:0, 0, 0},
	{0, -394.23318, -1391.03552, 23.42598, Text3D:0, 0, 0},
	{0, -391.44153, -1381.31335, 23.41548, Text3D:0, 0, 0},
	{0, -389.03998, -1373.01831, 23.40509, Text3D:0, 0, 0},
	{0, -386.66473, -1365.52991, 23.39480, Text3D:0, 0, 0},
	{0, -384.00433, -1357.07532, 23.38462, Text3D:0, 0, 0},
	{0, -381.36597, -1347.98340, 23.61221, Text3D:0, 0, 0},
	{0, -366.68762, -1276.80029, 29.74588, Text3D:0, 0, 0},
	{0, -368.27051, -1286.14929, 28.81491, Text3D:0, 0, 0},
	{0, -369.85999, -1295.53076, 27.65764, Text3D:0, 0, 0},
	{0, -371.66025, -1305.60559, 26.38095, Text3D:0, 0, 0},
	{0, -373.88547, -1317.24658, 25.46317, Text3D:0, 0, 0},
	{0, -375.98257, -1326.20911, 25.01272, Text3D:0, 0, 0},
	{0, -378.56256, -1337.16113, 24.30281, Text3D:0, 0, 0},
	{0, -417.65802, -1396.16895, 23.00376, Text3D:0, 0, 0},
	{0, -386.85263, -1387.84204, 23.02928, Text3D:0, 0, 0},
	{0, -366.28125, -1271.03467, 30.49047, Text3D:0, 0, 0},
	{0, -401.73016, -1396.12073, 23.28410, Text3D:0, 0, 0},
	{0, -400.92581, -1389.47668, 23.39132, Text3D:0, 0, 0},
	{0, -398.20099, -1379.73889, 23.28248, Text3D:0, 0, 0},
	{0, -395.86713, -1371.42810, 23.49443, Text3D:0, 0, 0},
	{0, -393.56006, -1363.92407, 23.69419, Text3D:0, 0, 0},
	{0, -390.96875, -1355.45386, 23.58701, Text3D:0, 0, 0},
	{0, -388.58847, -1347.68518, 24.30751, Text3D:0, 0, 0},
	{0, -386.10391, -1335.40491, 24.79299, Text3D:0, 0, 0},
	{0, -383.44928, -1324.46997, 25.59500, Text3D:0, 0, 0},
	{0, -381.27820, -1315.52466, 26.44374, Text3D:0, 0, 0},
	{0, -378.97974, -1303.90076, 27.35181, Text3D:0, 0, 0},
	{0, -377.10712, -1293.84265, 28.61889, Text3D:0, 0, 0},
	{0, -375.44586, -1284.47815, 29.76664, Text3D:0, 0, 0},
	{0, -373.77209, -1275.14807, 31.18644, Text3D:0, 0, 0},
	{0, -373.27304, -1271.17627, 31.59960, Text3D:0, 0, 0},
	{0, -409.88306, -1395.22107, 23.30685, Text3D:0, 0, 0},
	{0, -409.16010, -1388.56763, 23.40084, Text3D:0, 0, 0},
	{0, -406.51767, -1378.82068, 23.79716, Text3D:0, 0, 0},
	{0, -404.26721, -1370.50012, 23.78756, Text3D:0, 0, 0},
	{0, -402.04401, -1362.98669, 23.78160, Text3D:0, 0, 0},
	{0, -383.07098, -1274.12183, 32.82380, Text3D:0, 0, 0},
	{0, -384.63275, -1283.46362, 31.38779, Text3D:0, 0, 0},
	{0, -386.20309, -1292.83887, 29.87870, Text3D:0, 0, 0},
	{0, -387.98581, -1302.90698, 28.59915, Text3D:0, 0, 0},
	{0, -390.21494, -1314.53992, 27.27270, Text3D:0, 0, 0},
	{0, -392.27783, -1323.49512, 26.68902, Text3D:0, 0, 0},
	{0, -394.84503, -1334.44019, 25.77514, Text3D:0, 0, 0},
	{0, -397.24283, -1346.72949, 24.73334, Text3D:0, 0, 0},
	{0, -399.53748, -1354.50708, 24.20065, Text3D:0, 0, 0}
};
////////////////////////////////
//Шахта
enum MetallInfo
{
	MetallID,
	Float:MetallX,
	Float:MetallY,
	Float:MetallZ,
	Float:MetallRX,
	Float:MetallRY,
	Float:MetallRZ,
	Text3D:MetallText,
	MetallTimer,
	MetallArea
};

new MineMetall[][MetallInfo] = {
	{0, -586.84283, -1794.41382, 792.38281, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -590.22424, -1794.28503, 792.41052, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -585.87439, -1793.61646, 791.85559, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -584.43091, -1792.73804, 791.85559, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -583.85309, -1790.06006, 791.85559, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -589.88605, -1792.76501, 791.85559, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -592.29596, -1796.13489, 791.85559, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -593.08368, -1798.84277, 792.19177, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -597.10059, -1801.18518, 792.22437, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -599.46368, -1800.49426, 792.22437, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -601.96301, -1797.66992, 792.13831, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -600.18237, -1795.29773, 791.85419, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -601.79895, -1795.48755, 791.85419, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -597.83978, -1795.30273, 791.85419, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -595.61072, -1796.40356, 791.98376, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -593.38556, -1796.94641, 791.74786, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -592.14655, -1794.52649, 791.74786, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -602.00128, -1800.82654, 792.15387, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -597.51892, -1797.16577, 792.60828, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -599.56152, -1796.80017, 792.53522, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -595.61060, -1798.75891, 792.61859, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -601.31494, -1798.97241, 791.79315, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -604.92047, -1794.58081, 792.17340, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -606.25763, -1793.93713, 792.45441, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -607.47644, -1795.30090, 792.92700, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -604.80963, -1797.01929, 792.29779, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, -608.30237, -1793.53979, 792.20593, 0.0, 0.0, 0.0, Text3D:0, 0, 0}
};

new PrisonMineMetall[][MetallInfo] = {
	{0, 984.4312100, -2743.4785200, 41.0878000, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 984.2667800, -2740.0, 41.0797600, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 987.2560400, -2744.9858400, 41.2060100, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 986.3306300, -2744.7939500, 41.2030100, 0.0, 0.0, -87.6000100, Text3D:0, 0, 0},
	{0, 987.7240000, -2743.9016100, 40.8253400, 0.0, 0.0, -87.6000100, Text3D:0, 0, 0},
	{0, 985.6111500, -2738.2475600, 40.8720100, 23.88, -126.8399900, 0.0, Text3D:0, 0, 0},
	{0, 963.0764800, -2696.3383800, 41.2020700, 0.0, 0.0, -0.6, Text3D:0, 0, 0},
	{0, 965.2885100, -2692.2829600, 41.2020700, 33.6599900, 89.1600200, -0.6, Text3D:0, 0, 0},
	{0, 960.6636400, -2697.1857900, 42.1723700, -94.9800300, 32.2200000, 0.0, Text3D:0, 0, 0},
	{0, 967.2098400, -2695.1091300, 40.9729600, -59.7600400, 41.7000700, 133.7400200, Text3D:0, 0, 0},
	{0, 964.7291300, -2695.9497100, 41.0505800, -126.3600200, -83.3400100, -0.6, Text3D:0, 0, 0},
	{0, 962.4458000, -2697.8847700, 41.4021300, 0.0, 0.0, -0.6, Text3D:0, 0, 0},
	{0, 961.9121100, -2696.2478000, 41.4021300, -32.1000100, -80.8200100, -0.6, Text3D:0, 0, 0},
	{0, 1055.1264600, -2665.7526900, 41.2458100, -73.2599900, -135.6000700, 0.0, Text3D:0, 0, 0},
	{0, 1052.3233600, -2668.8757300, 41.2458100, -41.0400000, -236.0999900, 0.0, Text3D:0, 0, 0},
	{0, 1053.0390600, -2664.4765600, 41.2458100, -157.3199600, -200.8801300, -155.9400200, Text3D:0, 0, 0},
	{0, 1050.9757100, -2669.5424800, 41.2458100, 12.4799900, -382.5599400, 0.0, Text3D:0, 0, 0},
	{0, 1014.2792400, -2685.5698200, 41.0520300, 0.4200000, -100.8000100, 0.0, Text3D:0, 0, 0},
	{0, 1015.1725500, -2686.7409700, 41.0520300, 0.4200000, -100.8000100, 129.4200100, Text3D:0, 0, 0},
	{0, 1013.4805300, -2688.0329600, 41.2719200, 0.4200000, -100.8000100, 0.0, Text3D:0, 0, 0},
	{0, 1087.5111100, -2667.3703600, 41.0165100, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1089.9013700, -2668.9484900, 40.8949900, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1017.6689500, -2657.7529300, 41.4173700, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1016.3219600, -2657.0048800, 40.7983400, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1031.6790800, -2688.2253400, 40.7705800, 0.4200000, -100.8000100, 129.4200100, Text3D:0, 0, 0},
	{0, 1033.6408700, -2683.4028300, 41.2719200, 0.4200000, -100.8000100, 0.0, Text3D:0, 0, 0},
	{0, 1034.1495400, -2688.6315900, 41.2719200, 21.3000000, -208.3800500, 0.0, Text3D:0, 0, 0},
	{0, 1032.8177500, -2689.3210400, 41.0520300, -3.9000000, -6.5400300, 129.4200100, Text3D:0, 0, 0},
	{0, 1034.9729000, -2686.7570800, 41.2719200, 72.1200000, -296.4000200, 0.0, Text3D:0, 0, 0},
	{0, 1033.0199000, -2688.0588400, 40.7366400, 50.5200100, -315.1199600, 0.0, Text3D:0, 0, 0},
	{0, 946.9407300, -2731.9226100, 42.2025100, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1076.3149400, -2688.3584000, 41.4127700, 12.1200000, -146.6999700, 0.0, Text3D:0, 0, 0},
	{0, 947.9869400, -2743.6843300, 43.1737600, 0.0, 0.0, 86.2800100, Text3D:0, 0, 0},
	{0, 953.3228800, -2732.7522000, 42.8966900, 0.0, 0.0, 98.0400000, Text3D:0, 0, 0},
	{0, 957.8839100, -2725.6081500, 42.8966900, 0.0, 0.0, 34.2600000, Text3D:0, 0, 0},
	{0, 961.1472800, -2714.1486800, 42.8966900, 20.7600000, -161.8799400, 34.2600000, Text3D:0, 0, 0},
	{0, 984.1908000, -2719.3903800, 41.0354000, -36.4800000, -15.5400000, 92.4600100, Text3D:0, 0, 0},
	{0, 1024.0250200, -2676.3029800, 41.1039200, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 1040.3625500, -2649.0883800, 41.0353900, 0.0, 0.0, -79.9199800, Text3D:0, 0, 0},
	{0, 1039.1668700, -2648.4570300, 41.2910700, -117.0000200, -56.6400000, -71.4599900, Text3D:0, 0, 0},
	{0, 1059.2247300, -2655.2609900, 41.0365500, 0.0, 0.0, 17.9999600, Text3D:0, 0, 0},
	{0, 988.9618500, -2664.3310500, 41.0516500, 0.0, 0.0, 0.0, Text3D:0, 0, 0},
	{0, 990.3285500, -2617.1933600, 41.4302100, 0.0, 0.0, -68.1000100, Text3D:0, 0, 0},
	{0, 988.0275300,-2740.9931600,41.0935700,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1013.2996200,-2686.9829100,41.2173600,-12.3000000,10.0800000,0.0000000, Text3D:0, 0, 0},
	{0, 1014.5199000,-2683.3977100,41.2173600,-60.6000100,-43.6800000,0.0000000, Text3D:0, 0, 0},
	{0, 1014.2366300,-2687.0512700,45.3565000,-12.3000000,10.0800000,0.0000000, Text3D:0, 0, 0},
	{0, 1014.1342800,-2686.7248500,45.3565000,-0.0599900,117.4200200,0.0000000, Text3D:0, 0, 0},
	{0, 1013.4728400,-2687.5996100,41.9950000,-2.8200000,77.5200100,0.0000000, Text3D:0, 0, 0},
	{0, 1088.5736100,-2666.1015600,41.1995300,72.7800000,24.2400100,-141.4200000, Text3D:0, 0, 0},
	{0, 1090.0473600,-2668.5583500,41.7029900,72.7800000,24.2400100,-141.4200000, Text3D:0, 0, 0},
	{0, 1016.2962600,-2654.8010300,41.3702400,56.1600000,-75.6000000,0.0000000, Text3D:0, 0, 0},
	{0, 1016.7406000,-2655.6936000,41.3702400,19.0200000,-115.3799700,0.0000000, Text3D:0, 0, 0},
	{0, 1016.7455400,-2653.7106900,40.9252900,44.4600200,41.0999900,0.0000000, Text3D:0, 0, 0},
	{0, 946.3649900,-2740.9838900,41.2538800,0.0000000,0.0000000,-78.0600100, Text3D:0, 0, 0},
	{0, 954.6261600,-2720.8532700,41.2538800,-106.5000100,-40.8599900,-222.9599800, Text3D:0, 0, 0},
	{0, 949.4658200,-2728.7023900,41.3179600,76.5000000,13.8600200,-305.1601000, Text3D:0, 0, 0},
	{0, 951.3844600,-2733.5376000,41.2538800,14.5799900,-32.3999800,-222.9599800, Text3D:0, 0, 0},
	{0, 1072.9110100,-2687.9626500,40.9473300,14.8800000,120.7799900,-0.1200000, Text3D:0, 0, 0},
	{0, 1073.9193100,-2685.8115200,41.2672000,28.9199900,-89.8200100,-0.1200000, Text3D:0, 0, 0},
	{0, 1074.4591100,-2684.9809600,41.4271500,-5.3400000,-113.2200200,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.1116900,-2687.0749500,41.4271500,23.0400000,145.4400200,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.2703900,-2687.8322800,41.4271500,6.8400000,125.5800000,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.2904100,-2688.6530800,41.4271500,2.8200000,47.5200000,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.2498800,-2686.1701700,41.4271500,-4.5000000,-171.2999600,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.1991000,-2687.3732900,42.0669600,40.2599900,255.5999900,-0.1200000, Text3D:0, 0, 0},
	{0, 1078.5814200,-2686.6228000,42.2669000,34.5600100,103.2600200,-0.1200000, Text3D:0, 0, 0},
	{0, 1077.5354000,-2686.7619600,41.4271500,19.3200000,-11.0399900,-0.1200000, Text3D:0, 0, 0},
	{0, 951.6022900,-2725.0954600,42.4022900,76.5000000,13.8600200,-305.1601000, Text3D:0, 0, 0},
	{0, 966.6952500,-2719.0651900,41.2538800,-106.5000100,-40.8599900,-222.9599800, Text3D:0, 0, 0},
	{0, 983.1590600,-2720.5141600,41.0361000,0.0000000,0.0000000,-90.1200100, Text3D:0, 0, 0},
	{0, 988.2731900,-2690.6479500,41.3705000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1006.3706100,-2680.5612800,41.0369800,-8.3400000,-94.6800100,0.0000000, Text3D:0, 0, 0},
	{0, 1019.7694100,-2677.8190900,41.0351100,0.0000000,0.0000000,-58.0800000, Text3D:0, 0, 0},
	{0, 1041.2580600,-2647.8801300,41.1535500,-10.6200000,-111.7800000,-36.7200000, Text3D:0, 0, 0},
	{0, 1075.1954300,-2675.3762200,41.0364400,-73.9799900,5.4000000,-59.4000000, Text3D:0, 0, 0},
	{0, 1071.8386200,-2665.5376000,41.2336500,0.0000000,0.0000000,-57.5399900, Text3D:0, 0, 0},
	{0, 1071.6209700,-2667.0051300,41.0364400,-134.5198800,-7.2600100,-59.4000000, Text3D:0, 0, 0},
	{0, 1057.7795400,-2655.0471200,41.2988200,-30.3600000,-73.9199800,-32.1600000, Text3D:0, 0, 0},
	{0, 986.3346600,-2652.9643600,41.1131000,53.7599900,-3.1200000,-19.4400000, Text3D:0, 0, 0},
	{0, 992.2132000,-2618.5752000,41.4164300,0.0000000,0.0000000,-144.8400000, Text3D:0, 0, 0},
	{0, 991.6345800,-2617.5617700,41.3397000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 979.5247800,-2623.0485800,41.4164300,0.0000000,0.0000000,-144.8400000, Text3D:0, 0, 0},
	{0, 981.4074700,-2625.6699200,41.4164300,0.0000000,0.0000000,-144.8400000, Text3D:0, 0, 0},
	{0, 980.6307400,-2622.5988800,41.4164300,0.0000000,0.0000000,-260.5199300, Text3D:0, 0, 0},
	{0, 980.1455700,-2622.7121600,42.0788700,0.0000000,0.0000000,-144.8400000, Text3D:0, 0, 0},
	{0, 992.3022500,-2733.7221700,41.0935700,59.1600000,31.8000000,-139.6199800, Text3D:0, 0, 0},
	{0, 993.4877300,-2731.7514600,41.0935700,59.1600000,31.8000000,-139.6199800, Text3D:0, 0, 0},
	{0, 986.4368300,-2742.8024900,41.2369000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 989.7333400,-2741.7160600,41.0089100,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 986.7843000,-2744.7680700,41.9050700,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 965.5780600,-2694.2719700,41.0777900,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 963.9472000,-2693.9089400,41.0651600,73.2000000,56.2799900,0.0000000, Text3D:0, 0, 0},
	{0, 963.8404500,-2695.2441400,41.0777900,-33.0600000,-111.5399900,0.0000000, Text3D:0, 0, 0},
	{0, 1053.8801300,-2666.2675800,41.2550900,3.7800000,-25.8000000,0.0000000, Text3D:0, 0, 0},
	{0, 1052.8260500,-2666.5129400,41.2550900,-66.8400000,5.1600000,9.4200000, Text3D:0, 0, 0},
	{0, 1050.6009500,-2668.6657700,41.2550900,-155.8199500,128.8799900,9.4200000, Text3D:0, 0, 0},
	{0, 1054.5328400,-2664.1193800,41.0119600,109.6799900,42.3000000,9.4200000, Text3D:0, 0, 0},
	{0, 1054.0932600,-2664.6247600,41.2550900,-73.0200100,-184.9199800,9.4200000, Text3D:0, 0, 0},
	{0, 1050.4346900,-2670.7661100,41.2550900,-66.8400000,5.1600000,9.4200000, Text3D:0, 0, 0},
	{0, 1050.4346900,-2670.7661100,41.2550900,-66.8400000,5.1600000,9.4200000, Text3D:0, 0, 0},
	{0, 1013.9178500,-2686.5117200,41.0520400,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1015.8233000,-2685.5717800,41.0520400,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1089.7060500,-2667.8137200,41.2589800,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1017.9351800,-2656.6638200,41.0500500,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1019.0922200,-2654.5727500,41.0500500,4.9800000,-109.5000000,0.0000000, Text3D:0, 0, 0},
	{0, 1015.8402100,-2654.2756300,41.0500500,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1018.5243500,-2653.7365700,41.0500500,33.1800000,119.1599900,0.0000000, Text3D:0, 0, 0},
	{0, 1017.7097800,-2654.9177200,41.0500500,34.9800000,175.7399100,0.0000000, Text3D:0, 0, 0},
	{0, 1075.4575200,-2687.7319300,41.0527000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 1073.1044900,-2687.1220700,41.0527000,-3.4800000,-60.5999900,0.0000000, Text3D:0, 0, 0},
	{0, 1075.2408400,-2686.0068400,41.0527000,-3.4800000,-60.5999900,-87.9600000, Text3D:0, 0, 0},
	{0, 1077.6618700,-2687.5388200,41.1727000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 973.8894000,-2707.9733900,41.1068600,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 984.0923500,-2721.0000000,41.0276700,-2.1000000,-119.3999800,0.0000000, Text3D:0, 0, 0},
	{0, 1074.9879200,-2676.6460000,41.1933500,42.4200000,-93.0599900,0.0000000, Text3D:0, 0, 0},
	{0, 989.0398600,-2665.9787600,41.2327800,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 986.1671100,-2651.4077100,41.2025500,-0.8400000,-0.4200000,0.0000000, Text3D:0, 0, 0},
	{0, 990.6103500,-2618.5498000,41.2012700,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 992.6556400,-2732.5102500,41.0089100,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 993.1456900,-2731.0432100,41.0089100,-44.5799900,-44.7000000,0.0000000, Text3D:0, 0, 0},
	{0, 945.8269700,-2633.1709000,36.8063200,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 948.8413100,-2622.4502000,40.0694200,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 946.0161700,-2629.5808100,28.7287000,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0},
	{0, 957.5811800,-2620.0380900,29.7707700,0.0000000,0.0000000,0.0000000, Text3D:0, 0, 0}
};
////////////////////////////////
//////////Vending///////////////
#define MAX_VENDINGS	100
enum VendingInfo
{
	VendID,
	VendObjectID,
	Text3D:VendText,
	Float:VendX,
	Float:VendY,
	Float:VendZ,
	Float:VendRX,
	Float:VendRY,
	Float:VendRZ,
	VendInt,
	VendVW,
	VendArea
};
new Vending[MAX_VENDINGS][VendingInfo];
stock ClearVending(VendingID)
{
	Vending[VendingID][VendID] = 0;
	if(Vending[VendingID][VendObjectID] && IsValidDynamicObject(Vending[VendingID][VendObjectID])) DestroyDynamicObject(Vending[VendingID][VendObjectID]);
	Vending[VendingID][VendObjectID] = 0;
	if(Vending[VendingID][VendText] && IsValidDynamic3DTextLabel(Vending[VendingID][VendText])) DestroyDynamic3DTextLabel(Vending[VendingID][VendText]);
	Vending[VendingID][VendText] = Text3D:0;
	if(Vending[VendingID][VendArea] && IsValidDynamicArea(Vending[VendingID][VendArea])) DestroyDynamicArea(Vending[VendingID][VendArea]);
	Vending[VendingID][VendArea] = 0;
	Vending[VendingID][VendX] = 0.0;
	Vending[VendingID][VendY] = 0.0;
	Vending[VendingID][VendZ] = 0.0;
	Vending[VendingID][VendRX] = 0.0;
	Vending[VendingID][VendRY] = 0.0;
	Vending[VendingID][VendRZ] = 0.0;
	Vending[VendingID][VendInt] = 0;
	Vending[VendingID][VendVW] = 0;
	return 1;
}
////////////////////////////////////
//////////Bots//////////////////////
new BotTime[24] = {0, ...};
new bool:BotStatus = false;
new BotCount = 0;
new bool:IsBot[MAX_PLAYERS] = {false, ...};
////////////////////////////////////
//////////CasinoTable///////////////
#define MAX_CASINOTABLE			100
#define MAX_PLAYER_CASINOTABLE	10

#define CasinoTable_None		0
#define CasinoTable_Dice		1
#define CasinoTable_Points		2
#define CasinoTable_Roullete	3

#define CasinoPlayerWait		0
#define CasinoPlayerWaitAction	1
#define CasinoPlayerRolled		2
#define CasinoPlayerWin 		3
#define CasinoPlayerLose		4
#define CasinoPlayerPass		5
new CasinoTableTypeName[][] = {
	"",
	"Кости",
	"21 Очко",
	"Рулетка"
};
enum CasinoTableInfo
{
	CasTabID,
	CasTabObjectID,
	CasTabType,
	CasTabMaxPlayer,
	CasTabBet,
	CasTabBank,
	Text3D:CasTabText,
	Float:CasTabX,
	Float:CasTabY,
	Float:CasTabZ,
	Float:CasTabRX,
	Float:CasTabRY,
	Float:CasTabRZ,
	CasTabInt,
	CasTabVW,
	CasTabArea,
	bool:CasTabStatus,
	CasTabTimer,
	CasTabPlayers[MAX_PLAYER_CASINOTABLE],
	CasTabPlayersStatus[MAX_PLAYER_CASINOTABLE],
	CasTabPlayersScore[MAX_PLAYER_CASINOTABLE]
};
new CasinoTable[MAX_CASINOTABLE][CasinoTableInfo];
stock ClearCasinoTable(TableID)
{
	CasinoTable[TableID][CasTabID] = 0;
	CasinoTable[TableID][CasTabType] = CasinoTable_None;
	CasinoTable[TableID][CasTabMaxPlayer] = 0;
	CasinoTable[TableID][CasTabBet] = 0;
	CasinoTable[TableID][CasTabBank] = 0;
	if(CasinoTable[TableID][CasTabObjectID] && IsValidDynamicObject(CasinoTable[TableID][CasTabObjectID])) DestroyDynamicObject(CasinoTable[TableID][CasTabObjectID]);
	CasinoTable[TableID][CasTabObjectID] = 0;
	if(CasinoTable[TableID][CasTabText] && IsValidDynamic3DTextLabel(CasinoTable[TableID][CasTabText])) DestroyDynamic3DTextLabel(CasinoTable[TableID][CasTabText]);
	CasinoTable[TableID][CasTabText] = Text3D:0;
	if(CasinoTable[TableID][CasTabArea] && IsValidDynamicArea(CasinoTable[TableID][CasTabArea])) DestroyDynamicArea(CasinoTable[TableID][CasTabArea]);
	CasinoTable[TableID][CasTabArea] = 0;
	CasinoTable[TableID][CasTabX] = 0.0;
	CasinoTable[TableID][CasTabY] = 0.0;
	CasinoTable[TableID][CasTabZ] = 0.0;
	CasinoTable[TableID][CasTabRX] = 0.0;
	CasinoTable[TableID][CasTabRY] = 0.0;
	CasinoTable[TableID][CasTabRZ] = 0.0;
	CasinoTable[TableID][CasTabInt] = 0;
	CasinoTable[TableID][CasTabVW] = 0;
	CasinoTable[TableID][CasTabStatus] = false;
	CasinoTable[TableID][CasTabTimer] = 0;
	for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
	{
		CasinoTable[TableID][CasTabPlayers][i] = -1;
		CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
		CasinoTable[TableID][CasTabPlayersScore][i] = 0;
	}
	return 1;
}
/////////////ARMY///////////////
new MaterialShipmentCD = 0;
enum MaterialShipmentInfo
{
	ShipmentMaterialsCount,
	ShipmentPickup,
	Text3D:ShipmentText,
	ShipmentArea,
	Float:ShipmentX,
	Float:ShipmentY,
	Float:ShipmentZ
};
#define MAX_ShipmentMaterials	4
new ShipmentMaterials[MAX_ShipmentMaterials][MaterialShipmentInfo] = {
{0, 0, Text3D:0, 0, 2194.4670, -2231.1804, 13.5344}, // 0
{0, 0, Text3D:0, 0, 2201.9011, -2223.8843, 13.5344}, // 1
{0, 0, Text3D:0, 0, 2209.4985, -2216.4319, 13.5344}, // 2
{0, 0, Text3D:0, 0, 2216.6521, -2210.0308, 13.5344} // 3
};
////////////////////////////////
/////////////LIVE///////////////
new bool:LiveStatus = false;
new bool:HangarStatus[6] = {false, ...};
////////////////////////////////
//////////Fraction//////////////
#define Fraction_None			0
#define Fraction_Police			1
#define Fraction_Army			2
#define Fraction_FBI			3
#define Fraction_Hospital		4
#define Fraction_Taxi			5
#define Fraction_SanNews		6
#define Fraction_Vagos			7
#define Fraction_Ballas			8
#define Fraction_Aztecas		9
#define Fraction_Grove			10
#define Fraction_Rifa			11
#define Fraction_StreetRacers	12
#define Fraction_Bikers			13
#define Fraction_FarmOfTruth	14
#define Fraction_RussiaMafia    15
#define MAX_FRACTION			16

new FractionName[MAX_FRACTION][] = {
	"",
	"Полиция",
	"Армия",
	"ФБР",
	"МЧС",
	"Такси",
	"San News",
	"Los Santos Vagos",
	"East Side Ballas Gang",
	"Varrios Los Aztecas",
	"Grove Street Families",
	"San Fierro Rifa Gang",
	"Street Racers",
	"Байкеры",
	"The Farm of Truth",
    "Russia Mafia"
};

new FractionColor[MAX_FRACTION];

#define FractionMaxRank	7
new FractionRankName[MAX_FRACTION][FractionMaxRank+1][51];
new FractionSkinMale[MAX_FRACTION][FractionMaxRank+1];
new FractionSkinFemale[MAX_FRACTION][FractionMaxRank+1];
enum FractionWareInfo
{
	Text3D:FractionWareText,
	FractionWareArea,
	FractionWareMoney,
	FractionWareMaterials,
	FractionWareDrugs
};
new FractionWare[MAX_FRACTION][FractionWareInfo];
////////////////////////////////
//////////Gang War//////////////

enum GangWarZoneInfo
{
	GangWarZoneName[50],
	GangWarZoneID,
    GangWarDynamicZone
};

#define MAX_GANG_WAR_ZONES	6
new GangWarZones[MAX_GANG_WAR_ZONES][GangWarZoneInfo];

#define Gang_Bet_Type_None			0
#define Gang_Bet_Type_Money			1
#define Gang_Bet_Type_Materials 	2
#define Gang_Bet_Type_Drugs			3

#define Gang_Status_None					0
#define Gang_Status_Wait_Accept				1
#define Gang_Status_Wait_Accept_Request		2
#define Gang_Status_War						3

new GangWarBetType[MAX_FRACTION] = {Gang_Bet_Type_None, ...};
new GangWarOpponent[MAX_FRACTION] = {Fraction_None, ...};
new GangWarZone[MAX_FRACTION] = {0, ...};
new GangWarStatus[MAX_FRACTION] = {Gang_Status_None, ...};
new GangWarTimer[MAX_FRACTION] = {0, ...};
new GangWarBet[MAX_FRACTION] = {0, ...};

////////////////////////////////
//////////Business//////////////
#define BusinessNone				0
#define BusinessCarDelivery			1
#define BusinessCNN					2
#define BusinessElectricity 		3
#define BusinessOilDepot 			4
#define BusinessGasStation			5
#define BusinessSprunk	 			6
#define BusinessTowCar				7
#define BusinessGeneralStore1		8
#define BusinessGeneralStore2		9
#define BusinessGeneralStore3		10
#define BusinessGeneralStoreCompany	11
#define BusinessRentCar				12
#define BusinessRentBoat			13
#define BusinessRentMoto			14
#define BusinessRentPlane			15
#define BusinessKFC					16
#define BusinessKFCCompany			17
#define BusinessBank				18
#define BusinessBankFillial			19
#define BusinessDressShop			20
#define BusinessTuningCompany		21
#define BusinessTuning				22
#define BusinessCasinoBeginner		23
#define BusinessCasinoCaligula		24
#define BusinessCasinoFourDragons	25
#define BusinessMarketplace			26
#define BusinessAmmo				27

enum BusinessTypeInfo
{
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	Float:bIntPickOne[3],
	Float:bIntPickTwo[3],
	Float:bIntPickThree[3],
	Float:bIntPickFour[3],
	Float:bIntActorOne[4],
	Float:bIntActorTwo[4],
	Float:bIntActorThree[4],
	Float:bIntActorFour[4],
	bInt,
	bName[50],
	bMapIcon,
	bool:IsCompany
};
new BusinessType[][BusinessTypeInfo] = {
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "", 0, false}, //BusinessNone
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Car delivery", 55, true}, //BusinessCarDelivery
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "CNN Studio", 56, true}, //BusinessCNN
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Electricity company", 56, true}, //BusinessElectricity
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Нефтебаза", 24, true}, //BusinessOilDepot
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "АЗС", 55, false}, //BusinessGasStation
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Завод Sprunk", 17, true}, //BusinessSprunk
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Tow car service", 55, true}, //BusinessTowCar
	{-25.8417,-188.2521,1003.5469,359.9227, {-29.0442,-185.1312,1003.5469}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {-29.0905,-186.8174,1003.5469,355.7043}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 17,  "General Store", 17, false}, //BusinessGeneralStore1
	{6.1250,-31.7598,1003.5494,2.4294, {2.1545,-29.0135,1003.5494}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {2.0347,-30.7007,1003.5494,359.4644}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 10,  "General Store", 17, false}, //BusinessGeneralStore2
	{-30.9777,-92.0099,1003.5469,4.6227, {-28.1837,-89.9532,1003.5469}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {-27.9628,-91.6371,1003.5469,1.9945}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 18,  "General Store", 17, false}, //BusinessGeneralStore3
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "24/7 Company", 56, true}, //BusinessGeneralStoreCompany
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "Аренда авто", 55, true}, //BusinessRentCar
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "Аренда лодок", 9, true}, //BusinessRentBoat
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "Аренда мото", 55, true}, //BusinessRentMoto
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "Аренда самолетов", 5, true}, //BusinessRentPlane
	{364.9431,-11.5280,1001.8516,3.1108, {369.6934,-6.0168,1001.8589}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {369.6568,-4.4915,1001.8589,179.1823}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 9,  "KFC", 14, false}, //BusinessKFC
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "KFC Company", 56, true},//BusinessKFCCompany
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "Банк San Andreas", 52, true}, //BusinessBank
	{834.6668,7.4854,1004.1870, 87.1975, {822.0086,-0.3244,1004.1797}, {822.0085,1.9069,1004.1797}, {822.0091,4.1433,1004.1797}, {822.0087,6.4089,1004.1797}, {820.1869,-0.3523,1004.1797,270.3545}, {820.1859,1.8459,1004.1797,270.3545}, {820.1871,4.0827,1004.1797,270.3545}, {820.1868,6.3584,1004.1797,270.3545}, 3, "Отделение Банка San Andreas", 52, false}, //BusinessBankFillial
	{203.7506,-50.6644,1001.8047,1.7071, {203.7813,-43.2611,1001.8047}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {203.8142,-41.6707,1001.8047,181.1219}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 1,  "Магазин одежды", 45, true}, //BusinessKFC
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "House Tuning Cars Company", 56, true}, //BusinessTuningCompany
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0, "House Tuning Cars", 55, false}, //BusinessTuning
	{1133.1412,-15.8316,1000.6797,2.7042, {1139.5459,-5.7485,1000.6719}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {1141.1584,-5.6404,1000.6719,91.2566}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 12,  "Казино для новичков", 25, true}, //BusinessCasinoBeginner
	{2233.9819,1714.7529,1012.3828,181.7314, {2199.4180,1604.6610,1005.0625}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {2197.5671,1604.2137,1005.0625,283.5887}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 1,  "Казино Калигула", 25, true}, //BusinessCasinoCaligula
	{2019.0757,1017.7703,996.8750,92.5987, {1955.4764,1017.8624,992.4688}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {1953.7996,1017.8046,992.4688,271.0320}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 10,  "Казино 4 дракона", 25, true}, //BusinessCasinoFourDragons
	{0.0, 0.0, 0.0, 0.0, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 0,  "Торговая площадка", 56, true}, //BusinessMarketplace
	{285.3001,-41.6660,1001.5156,359.4669, {296.5964,-38.5338,1001.5156}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {296.6187,-40.2154,1001.5156,359.3220}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0}, 1,  "Амуниция", 6, true} //BusinessAmmo
};

#define Business_World		5000

#define MAX_BUSINESS	301
enum BusinessInfo
{
	bID,
	bOwnerID,
	bOwnerName[MAX_PLAYER_NAME+1],
	bPrice,
	bNeedLevel,
	bool:bIsDonate,
	Float:bX,
	Float:bY,
	Float:bZ,
	Float:bA,
	bType,
	bTax,
	bMoney,
	bPickup,
	Text3D:bText,
	bMapIcon,
	bArea,
	bExitPickup,
	Text3D:bExitText,
	bExitArea,
	bSellArea[4],
	bSellPickup[4],
	bActor[4],
	Float:bCarX,
	Float:bCarY,
	Float:bCarZ,
	Float:bCarA,
	bCarPickup,
	bCarArea,
	Text3D:bCarText,
};
new bInfo[MAX_BUSINESS][BusinessInfo];
stock ClearBusiness(BusinessID)
{
	bInfo[BusinessID][bID] = 0;
	bInfo[BusinessID][bOwnerID] = 0;
	bInfo[BusinessID][bOwnerName][0] = EOS;
	bInfo[BusinessID][bPrice] = 0;
	bInfo[BusinessID][bNeedLevel] = 0;
	bInfo[BusinessID][bIsDonate] = false;
	bInfo[BusinessID][bX] = 0.0;
	bInfo[BusinessID][bY] = 0.0;
	bInfo[BusinessID][bZ] = 0.0;
	bInfo[BusinessID][bA] = 0.0;
	bInfo[BusinessID][bCarX] = 0.0;
	bInfo[BusinessID][bCarY] = 0.0;
	bInfo[BusinessID][bCarZ] = 0.0;
	bInfo[BusinessID][bCarA] = 0.0;
	bInfo[BusinessID][bType] = 0;
	bInfo[BusinessID][bTax] = 0;
	bInfo[BusinessID][bMoney] = 0;

	if(bInfo[BusinessID][bPickup] && IsValidDynamicPickup(bInfo[BusinessID][bPickup])) DestroyDynamicPickup(bInfo[BusinessID][bPickup]);
	bInfo[BusinessID][bPickup] = 0;

	if(bInfo[BusinessID][bText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bText]);
	bInfo[BusinessID][bText] = Text3D:0;

	if(bInfo[BusinessID][bMapIcon] && IsValidDynamicMapIcon(bInfo[BusinessID][bMapIcon])) DestroyDynamicMapIcon(bInfo[BusinessID][bMapIcon]);
	bInfo[BusinessID][bMapIcon] = 0;

	if(bInfo[BusinessID][bArea] && IsValidDynamicArea(bInfo[BusinessID][bArea])) DestroyDynamicArea(bInfo[BusinessID][bArea]);
	bInfo[BusinessID][bArea] = 0;

	if(bInfo[BusinessID][bExitPickup] && IsValidDynamicPickup(bInfo[BusinessID][bExitPickup])) DestroyDynamicPickup(bInfo[BusinessID][bExitPickup]);
	bInfo[BusinessID][bExitPickup] = 0;

	if(bInfo[BusinessID][bExitText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bExitText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bExitText]);
	bInfo[BusinessID][bExitText] = Text3D:0;

	if(bInfo[BusinessID][bExitArea] && IsValidDynamicArea(bInfo[BusinessID][bExitArea])) DestroyDynamicArea(bInfo[BusinessID][bExitArea]);
	bInfo[BusinessID][bExitArea] = 0;

	if(bInfo[BusinessID][bCarArea] && IsValidDynamicArea(bInfo[BusinessID][bCarArea])) DestroyDynamicArea(bInfo[BusinessID][bCarArea]);
	bInfo[BusinessID][bCarArea] = 0;

	if(bInfo[BusinessID][bCarText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bCarText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bCarText]);
	bInfo[BusinessID][bCarText] = Text3D:0;

	if(bInfo[BusinessID][bCarPickup] && IsValidDynamicPickup(bInfo[BusinessID][bCarPickup])) DestroyDynamicPickup(bInfo[BusinessID][bCarPickup]);
	bInfo[BusinessID][bCarPickup] = 0;

	for(new i = 0; i < 4; i++)
	{
		if(bInfo[BusinessID][bSellArea][i] && IsValidDynamicArea(bInfo[BusinessID][bSellArea][i])) DestroyDynamicArea(bInfo[BusinessID][bSellArea][i]);
		bInfo[BusinessID][bSellArea][i] = 0;

		if(bInfo[BusinessID][bSellPickup][i] && IsValidDynamicPickup(bInfo[BusinessID][bSellPickup][i])) DestroyDynamicPickup(bInfo[BusinessID][bSellPickup][i]);
		bInfo[BusinessID][bSellPickup][i] = 0;

		if(bInfo[BusinessID][bActor][i] && IsValidDynamicActor(bInfo[BusinessID][bActor][i])) DestroyDynamicActor(bInfo[BusinessID][bActor][i]);
		bInfo[BusinessID][bActor][i] = 0;
	}
	return 1;
}
//////////House/////////////////
enum HouseInteriorInfo
{
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInt,
	hIntName[50],
	hIntClass
};

#define House_World		10000

new HouseInterior[][HouseInteriorInfo] = {
	{0.0, 0.0, 0.0, 0.0, 0, "", 0},
	{243.7181,305.0144,999.1484,268.9974, 1, "Клоп", 1},
	{2468.8396,-1698.2701,1013.5078,96.1373, 2, "Райдер", 5},
	{2524.1475,-1679.2941,1015.4986,267.3639, 1, "Свит", 5},
	{2496.0461,-1692.0841,1014.7422,181.3647, 3, "Си-Джей", 5},
	{266.5009,304.8972,999.1484,272.8823, 2, "Кукла", 1},
	{2.0598,-3.0160,999.4284,93.0273, 2, "Кухня", 1},
	{422.5718,2536.5120,10.0000,89.6039, 10, "Аэро", 1},
	{2233.7505,-1115.2605,1050.8828,4.7133, 5, "Гетто-1", 2},
	{2317.8330,-1026.7640,1050.2178,5.6532, 9, "Серое дерево", 3},
	{2259.3816,-1135.8026,1050.6403,274.1825, 10, "Гетто-2", 2},
	{235.3742,1186.6798,1080.2578,359.0967, 3, "Красное дерево", 3},
	{226.7848,1240.0127,1082.1406,93.7244, 2, "Гетто-3", 2},
	{223.1568,1287.0776,1082.1406,4.1102, 1, "Гетто-4", 2},
	{226.2964,1114.2701,1080.9929,271.3627, 5, "Мини-ВВ-1", 4},
	{295.1467,1472.2581,1080.2578,9.1002, 15, "Репортерский-1", 3},
	{446.6965,506.3235,1001.4195,5.9669, 12, "Зеркало", 2},
	{447.0919,1397.0635,1084.3047,1.8935, 2, "Репортерский-2", 3},
	{226.2967,1114.2946,1080.9929,269.4592, 5, "Мини-ВВ-2", 4},
	{261.0829,1284.2975,1080.2578,353.4568, 4, "Репортерский-3", 3},
	{24.0167,1340.1602,1084.3750,0.7339, 10, "Лестница", 4},
	{221.8633,1140.1951,1082.6094,357.9139, 4, "Гетто-5", 2},
	{2324.4167,-1149.5461,1050.7101,357.6006, 12, "Эпсилон", 4},
	{343.7203,304.9577,999.1484,272.3497, 6, "Садомазо", 1},
	{-260.4872,1456.7292,1084.3672,96.5914, 4, "Черное дерево", 3},
	{22.9106,1403.3243,1084.4370,1.0239, 5, "Неон-1", 3},
	{140.2885,1365.9205,1083.8594,356.9505, 5, "Замок", 4},
	{234.1883,1063.7207,1084.2123,359.7940, 6, "Средний-ВВ", 4},
	{-283.4391,1471.1365,1084.3750,88.4445, 15, "Шахматы", 3},
	{2807.6995,-1174.7552,1025.5703,4.1570, 8, "Дядя Сэм", 3},
	{2218.4016,-1076.2722,1050.4844,94.3745, 1, "Отель", 2},
	{2237.5996,-1081.6434,1049.0234,5.0502, 2, "Неон-2", 3},
	{2365.2524,-1135.5968,1050.8826,3.7735, 8, "Неон-3", 3},
	{83.0417,1322.2838,1083.8662,355.2901, 9, "Синее дерево", 3}
};

new HouseClassName[][] = {"", "D", "C", "B", "A", "A+"};

#define MAX_HOUSE	301
enum HouseInfo
{
	hID,
	hOwnerID,
	hOwnerName[MAX_PLAYER_NAME+1],
	hPrice,
	hNeedLevel,
	bool:hClose,
	bool:hIsDonate,
	Float:hX,
	Float:hY,
	Float:hZ,
	Float:hA,
	hInterior,
	Float:hCarX,
	Float:hCarY,
	Float:hCarZ,
	Float:hCarA,
	hTax,
	hPickup,
	Text3D:hText,
	hMapIcon,
	hArea,
	hExitPickup,
	Text3D:hExitText,
	hExitArea
};
new hInfo[MAX_HOUSE][HouseInfo];

stock ClearHouse(HouseID)
{
	hInfo[HouseID][hID] = 0;
	hInfo[HouseID][hOwnerID] = 0;
	hInfo[HouseID][hOwnerName][0] = EOS;
	hInfo[HouseID][hPrice] = 0;
	hInfo[HouseID][hNeedLevel] = 0;
	hInfo[HouseID][hClose] = false;
	hInfo[HouseID][hIsDonate] = false;
	hInfo[HouseID][hX] = 0.0;
	hInfo[HouseID][hY] = 0.0;
	hInfo[HouseID][hZ] = 0.0;
	hInfo[HouseID][hA] = 0.0;
	hInfo[HouseID][hInterior] = 0;
	hInfo[HouseID][hCarX] = 0.0;
	hInfo[HouseID][hCarY] = 0.0;
	hInfo[HouseID][hCarZ] = 0.0;
	hInfo[HouseID][hCarA] = 0.0;
	hInfo[HouseID][hTax] = 0;

	if(hInfo[HouseID][hPickup] && IsValidDynamicPickup(hInfo[HouseID][hPickup])) DestroyDynamicPickup(hInfo[HouseID][hPickup]);
	hInfo[HouseID][hPickup] = 0;

	if(hInfo[HouseID][hText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hText]);
	hInfo[HouseID][hText] = Text3D:0;

	if(hInfo[HouseID][hMapIcon] && IsValidDynamicMapIcon(hInfo[HouseID][hMapIcon])) DestroyDynamicMapIcon(hInfo[HouseID][hMapIcon]);
	hInfo[HouseID][hMapIcon] = 0;

	if(hInfo[HouseID][hArea] && IsValidDynamicArea(hInfo[HouseID][hArea])) DestroyDynamicArea(hInfo[HouseID][hArea]);
	hInfo[HouseID][hArea] = 0;

	if(hInfo[HouseID][hExitPickup] && IsValidDynamicPickup(hInfo[HouseID][hExitPickup])) DestroyDynamicPickup(hInfo[HouseID][hExitPickup]);
	hInfo[HouseID][hExitPickup] = 0;

	if(hInfo[HouseID][hExitText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hExitText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hExitText]);
	hInfo[HouseID][hExitText] = Text3D:0;

	if(hInfo[HouseID][hExitArea] && IsValidDynamicArea(hInfo[HouseID][hExitArea])) DestroyDynamicArea(hInfo[HouseID][hExitArea]);
	hInfo[HouseID][hExitArea] = 0;
	return 1;
}

#define VehicleTypeServer	1
#define VehicleTypeFraction	2
#define VehicleTypeJob		3
#define VehicleTypePlayer	4
#define VehicleTypeTrailer	5
#define VehicleTypeBusiness	6

#define MaxAttachedObjOnVehicle	10

enum VehicleInfo
{
	vID,
	vServerID,
	vModel,
	Float:vFuel,
	vOwner,
	vType,
	vRank,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vColor1,
	vColor2,
	bool:vEdit,
	vRenter,
	vPrice,
	Text3D:vText,
	vPickup,
	vArea,
	vItemInVehicle,
	vAttachedObj[MaxAttachedObjOnVehicle],
	vPlateNumber[10],
	bool:vLock,
	vSpoiler,
	vBonnet,
	vRoof,
	vSideskirt,
	vLamps,
	vNitro,
	vExhaust,
	vWheel,
	vStereo,
	vHydraulics,
	vFrontBumper,
	vRearBumper,
	vVentRight,
	vVentLeft,
	vPaintJob,
	vNeon[2]
};
new Iterator:Vehicle<MAX_VEHICLES>;
new vInfo[MAX_VEHICLES][VehicleInfo];

stock Iter_CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay, addsiren = 0)
{
	new car = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay, addsiren);

	if (car != INVALID_VEHICLE_ID && car != 0) Iter_Add(Vehicle, car);
	return car;
}
#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle Iter_CreateVehicle
///////////////////////////////////////
stock Iter_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2)
{
	new car = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2);

	if(car != INVALID_VEHICLE_ID && car != 0) Iter_Add(Vehicle, car);
	return car;
}
#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle Iter_AddStaticVehicle
///////////////////////////////////////
stock Iter_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2, respawn_delay, addsiren = 0)
{
	new car = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, respawn_delay, addsiren);

	if(car != INVALID_VEHICLE_ID && car != 0) Iter_Add(Vehicle, car);
	return car;
}
#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif

#define AddStaticVehicleEx Iter_AddStaticVehicleEx
///////////////////////////////////////
stock Iter_DestroyVehicle(vehicleid)
{
	if(vehicleid != INVALID_VEHICLE_ID && vehicleid != 0 && IsValidVehicle(vehicleid)) Iter_Remove(Vehicle, vehicleid);
	return DestroyVehicle(vehicleid);
}
#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle Iter_DestroyVehicle

stock ClearVehicle(vehicleid)
{
	vInfo[vehicleid][vID] = 0;
	vInfo[vehicleid][vServerID] = 0;
	vInfo[vehicleid][vModel] = 0;
	vInfo[vehicleid][vFuel] = 0.0;
	vInfo[vehicleid][vOwner] = 0;
	vInfo[vehicleid][vType] = 0;
	vInfo[vehicleid][vRank] = 0;
	vInfo[vehicleid][vX] = 0.0;
	vInfo[vehicleid][vY] = 0.0;
	vInfo[vehicleid][vZ] = 0.0;
	vInfo[vehicleid][vA] = 0.0;
	vInfo[vehicleid][vColor1] = 0;
	vInfo[vehicleid][vColor2] = 0;
	vInfo[vehicleid][vEdit] = false;
	vInfo[vehicleid][vRenter] = -1;
	vInfo[vehicleid][vPrice] = 0;
	if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText])) DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
	vInfo[vehicleid][vText] = Text3D:0;
	if(vInfo[vehicleid][vPickup] && IsValidDynamicPickup(vInfo[vehicleid][vPickup])) DestroyDynamicPickup(vInfo[vehicleid][vPickup]);
	vInfo[vehicleid][vPickup] = 0;
	if(vInfo[vehicleid][vArea] && IsValidDynamicArea(vInfo[vehicleid][vArea])) DestroyDynamicArea(vInfo[vehicleid][vArea]);
	vInfo[vehicleid][vArea] = 0;
	vInfo[vehicleid][vItemInVehicle] = 0;
	for(new j = 0; j < MaxAttachedObjOnVehicle; j++) RemoveVehicleAttachObj(vehicleid, j);
	vInfo[vehicleid][vLock] = false;
	vInfo[vehicleid][vSpoiler] = 0;
	vInfo[vehicleid][vBonnet] = 0;
	vInfo[vehicleid][vRoof] = 0;
	vInfo[vehicleid][vSideskirt] = 0;
	vInfo[vehicleid][vLamps] = 0;
	vInfo[vehicleid][vNitro] = 0;
	vInfo[vehicleid][vExhaust] = 0;
	vInfo[vehicleid][vWheel] = 0;
	vInfo[vehicleid][vStereo] = 0;
	vInfo[vehicleid][vHydraulics] = 0;
	vInfo[vehicleid][vFrontBumper] = 0;
	vInfo[vehicleid][vRearBumper] = 0;
	vInfo[vehicleid][vVentRight] = 0;
	vInfo[vehicleid][vVentLeft] = 0;
	vInfo[vehicleid][vPaintJob] = 3;
	vInfo[vehicleid][vPlateNumber][0] = EOS;
	if(vInfo[vehicleid][vNeon][0] && IsValidDynamicObject(vInfo[vehicleid][vNeon][0])) DestroyDynamicObject(vInfo[vehicleid][vNeon][0]);
	vInfo[vehicleid][vNeon][0] = 0;
	if(vInfo[vehicleid][vNeon][1] && IsValidDynamicObject(vInfo[vehicleid][vNeon][1])) DestroyDynamicObject(vInfo[vehicleid][vNeon][1]);
	vInfo[vehicleid][vNeon][1] = 0;

	if(IsValidVehicle(vehicleid)) DestroyVehicle(vehicleid);
	return 1;
}

new CarName[][] =
{
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Pereniel", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo", "Pony",
	"Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
	"Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit",
	"Romero", "Packer", "Monster Truck", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee",
	"Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot",
	"Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer",
	"Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville",
	"Benson", "Mesa", "RC Goblin", "Hotring Racer", "Hotring Racer", "Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle",
	"Cropdust", "Stunt", "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
	"Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex",
	"Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada",
	"Yosemite", "Windsor", "Monster Truck", "Monster Truck", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma",
	"Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower", "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"Newsvan", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club", "Trailer", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LS)",
	"Police Car (SF)", "Police Car (LV)", "Police Ranger", "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer", "Luggage Trailer",
	"Stair Trailer", "Boxville", "Farm Plow", "Utility Trailer"
};

new CarMaxSeats[212] =
{
	4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2,
	1, 4, 4, 4, 2, 1, 9, 1, 2, 2, 1, 2, 9, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 6,
	1, 2, 1, 1, 1, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 4, 2, 1, 1, 2,
	2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 0, 0, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
	4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1,
	2, 2, 2, 2, 4, 4, 2, 4, 1, 1, 4, 2, 2, 2, 2, 6, 1, 2, 2, 2, 1, 4, 4, 4, 2,
	2, 2, 2, 2, 4, 2, 1, 1, 1, 4, 1, 1
};

enum Text3DInfo
{
	Text3D:TruckerLoadText,
	Text3D:LiveText
}
new Texts3D[Text3DInfo];

enum AreaInfo
{
	DemorganArea,
	JailArea,
	JailMineArea,
	TruckerLoadArea,
	CarThiefArea,
	TrashUnloadArea,
	FishUnloadArea,
	FarmDeliverUnloadArea,
	LiveArea,
	StashArea
};
new Areas[AreaInfo];

/*enum ActorsInfo
{
};
new Actors[ActorsInfo];*/

#define GatePoliceFirst		0
#define GatePoliceSecond	1
#define GateArmyFirst		2
#define GateArmySecond		3
#define GateFBIFirst		4
#define GateFBISecond		5
#define GateFBIThird		6
#define GateHospitalOne		7
#define GateHospitalTwo		8
#define GateHospitalThree	9
#define GateHospitalFour	10
#define GateHospitalFive	11
#define GateTaxiFirst		12
#define GateStreetRacers    13
#define MAX_GATE 			14
enum GateInfo
{
	GateID,
	GateIDTwo,
	GateArea,
	GateFraction,
	Float:GateClose[6],
	Float:GateOpen[6],
	Float:GateCloseTwo[6],
	Float:GateOpenTwo[6],
	bool:GateStatus,
	Float:GateSpeed
};
new Gate[MAX_GATE][GateInfo];

#define SpawnExit				0
#define SpawnEnter				1
#define TruckerJob				2
#define ThiefJob				3
#define TrashJob				4
#define MechanicJob				5
#define PilotJob				6
#define FisherJob				7
#define DriverDeliveryJob		8
#define CityHallExit			9
#define CityHallEnter			10
#define LawyerJob				11
#define LawyerLic				12
#define RemoveAllJob			13
#define BusJob					14
#define LumberjackJob			15
#define FarmJob					16
#define MineEnter				17
#define MineExit				18
#define MineJob					19
#define FarmDeliverJob			20
#define BankPickCard			21
#define CasinoBeginnerDonate	22
#define CasinoCaligulaDonate	23
#define CasinoFourDragonsDonate	24
#define CarLic 					25
#define GunLic 					26
#define BoatLic 				27
#define PlaneLic 				28
#define MotoLic 				29
#define PoliceEnter				30
#define PoliceExit				31
#define ArmyEnter				32
#define ArmyExit				33
#define FBIEnter				34
#define FBIExit					35
#define PoliceHealth			36
#define PoliceArmor				37
#define PoliceWeapon			38
#define PrisonExit				39
#define PrisonEnter				40
#define PrisonLawyerCall		41
#define ArmyHealth				42
#define ArmyArmor				43
#define ArmyWeapon				44
#define FBIHealth				45
#define FBIArmor				46
#define FBIWeapon				47
#define ArrestPickup			48
#define PoliceEnterRoof			49
#define PoliceExitRoof			50
#define HospitalEnter			51
#define HospitalExit			52
#define HospitalPickCard		53
#define CommandHelpPolice		54
#define CommandHelpArmy			55
#define CommandHelpFBI			56
#define CommandHelpHospital		57
#define HospitalSperm			58
#define HospitalBlood			59
#define TaxiEnter				60
#define TaxiExit				61
#define CommandHelpTaxi			62
#define SanNewsEnter			63
#define SanNewsExit				64
#define CommandHelpSanNews		65
#define HangarOneEnter			66
#define HangarOneExit			67
#define HangarTwoEnter			68
#define HangarTwoExit			69
#define HangarThreeEnter		70
#define HangarThreeExit			71
#define HangarFourEnter			72
#define HangarFourExit			73
#define HangarFiveEnter			74
#define HangarFiveExit			75
#define HangarSixEnter			76
#define HangarSixExit			77
#define SanNewsRoofEnter		78
#define SanNewsRoofExit			79
#define FillBarrel				80
#define RawMateriallTransfer	81
#define MateriallTransfer		82
#define DrugsTransfer			83
#define ArmyUnload				84
#define StashEnter				85
#define StashExit				86
#define VagosEnter				87
#define VagosExit				88
#define BallasEnter				89
#define BallasExit				90
#define AztecasEnter			91
#define AztecasExit				92
#define GroveEnter				93
#define GroveExit				94
#define RifaEnter				95
#define RifaExit				96
#define StreetRacersEnter		97
#define StreetRacersExit		98
#define BikersEnter				99
#define BikersExit				100
#define FarmOfTruthEnter		101
#define FarmOfTruthExit			102
#define RussiaMafiaEnter        103
#define RussiaMafiaExit         104
#define MAX_PICK 				105

enum PickupInfo
{
	PickID,
	Text3D:PickTextID,
	PickAreaID,
	Float:PickAngle,
	PickTpPickID,
	bool:IsPickTP,
	PickJob,
	PickFraction
};
new Pickups[MAX_PICK][PickupInfo];

enum
{
	D_None,
	D_Reg_Pass,
	D_Reg_Mail,
	D_Reg_Gender,
	D_Auth,
	D_PinCode_Check,
	D_ACreatePass,
	D_Alogin,
	D_Donate,
	D_Donate_Change_Name,
	D_Donate_Change_Gender,
	D_Donate_Buy_Level,
	D_Donate_Buy_UnWarn,
	D_Donate_Buy_Money,
	D_AC_Settings,
	D_AC_Settings_NOP,
	D_AC_Settings_Set,
	D_AC_Settings_NOP_Set,
	D_APanel,
	D_Report,
	D_Report_List,
	D_Report_List_Answer,
	D_Icon_Settings,
	D_Icon_Settings_Sub_Menu,
	D_GPS_Settings,
	D_GPS_Add_Title,
	D_GPS_Remove_Title,
	D_GPS_Add_Select_Title,
	D_GPS_Add,
	D_GPS_Remove_Select_Title,
	D_GPS_Remove,
	D_Main_Menu,
	D_Main_Menu_Player,
	D_Main_Menu_GPS,
	D_GPS_Find_House,
	D_GPS,
	D_GPS_Business,
	D_Main_Menu_TP,
	D_TP,
	D_TP_House,
	D_TP_Business,
	D_Main_Menu_PlayerOnline,
	D_Main_Menu_Commands,
	D_Main_Menu_Setting,
	D_Chat_Settings,
	D_Change_Pass,
	D_Account_Safe,
	D_Account_Set_PinCode,
	D_Account_Remove_PinCode,
	D_Admin_Panel_Reason,
	D_Admin_Panel_Time,
	D_Select_Clist,
	D_CreateCar_Type_Job,
	D_CreateCar_Type_Business,
	D_CreateCar_Type_Fraction,
	D_CreateCar_Fraction_Rank,
	D_CreateCar_Set_Price,
	D_Rent_Job_Car,
	D_Job_Invite,
	D_Job_CarThief_GetCar,
	D_Lic_Lawyer,
	D_Lic_Car,
	D_Lic_Moto,
	D_Lic_Plane,
	D_Lic_Boat,
	D_Lic_Gun,
	D_Remove_All_Job,
	D_House_Buy,
	D_House_SellGov,
	D_CreateHouse_Int,
	D_CreateHouse_MoneyType,
	D_CreateHouse_Price,
	D_CreateHouse_NeedLevel,
	D_EditHouse,
	D_EditHouse_Int,
	D_EditHouse_MoneyType,
	D_EditHouse_Price,
	D_EditHouse_CarPos,
	D_EditHouse_NeedLevel,
	D_Car_Buy,
	D_SpawnChange,
	D_Business_Buy,
	D_Business_SellGov,
	D_CreateBusiness_Type_Company,
	D_CreateBusiness_Type_Shop,
	D_CreateBusiness_MoneyType,
	D_CreateBusiness_Price,
	D_CreateBusiness_NeedLevel,
	D_EditBusiness,
	D_EditBusiness_Type,
	D_EditBusiness_MoneyType,
	D_EditBusiness_Price,
	D_EditBusiness_NeedLevel,
	D_Inventory,
	D_Inventory_SubMenu,
	D_Inventory_Drop,
	D_GeneralStore_Sell_Menu,
	D_KFC_Sell_Menu,
	D_Ammo_Sell_Menu,
	D_Rent_Car,
	D_Fuel_Menu_Value,
	D_AHelp,
	D_Bank_Menu,
	D_Bank_Input,
	D_Bank_Output,
	D_Bank_Transfer_ID,
	D_Bank_Transfer_Value,
	D_Bank_Tax,
	D_Bank_Tax_House,
	D_Bank_Tax_Business,
	D_Bank_Buy_Card,
	D_Hospital_Buy_Card,
	D_Buy_Cloth,
	D_Select_Skin,
	D_Tuning,
	D_Tuning_Component,
	D_Tuning_Component_Select,
	D_Casino_Menu,
	D_Casino_Buy_Menu,
	D_Casino_Sell_Menu,
	D_Tent_Rent,
	D_Tent_Menu,
	D_Tent_Menu_Buy,
	D_Tent_Menu_Buy_Count,
	D_Tent_Menu_Sell,
	D_Tent_Menu_Sell_Count,
	D_Tent_Menu_Sell_Price,
	D_Tent_Menu_Remove,
	D_MakeLeader,
	D_Invite,
	D_Edit_Fraction,
	D_Edit_Fraction_Type,
	D_Edit_Fraction_Skin_Gender,
	D_Edit_Fraction_Skin_Rank,
	D_Edit_Fraction_Skin,
	D_Edit_Fraction_Rank_Select,
	D_Edit_Fraction_Rank,
	D_FractionWare,
	D_FractionWare_Select,
	D_FractionWare_Take,
	D_FractionWare_Give,
	D_Heal,
	D_Sperm_Donor,
	D_Blood_Donor,
	D_Taxi_Point,
	D_GiveGun,
	D_GiveGun_Count,
	D_Log_Type,
	D_Log_Info,
	D_Log_Info_Row,
	D_Bots_Settings,
	D_Bots_Name,
	D_Bots_Name_Add,
	D_Bots_Name_Remove,
	D_Bots_Time,
	D_Bots_Set_Time,
	D_Stash,
	D_Stash_Select,
	D_Stash_Give,
	D_Stash_Take,
	D_Neon,
	D_Neon_Position,
	D_War_Select_Zone,
	D_War_Select_Gang,
	D_War_Select_Bet,
	D_War_Set_Bet,
    D_Paint
};

stock ShowDialog(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[])
{
	if(ac_AntiCheatGetDialog(playerid) == D_Rent_Job_Car)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vRenter] != playerid) RemovePlayerFromVehicle(playerid);
	}
	else if(ac_AntiCheatGetDialog(playerid) == D_Rent_Car)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vInfo[vehicleid][vType] == VehicleTypeBusiness && vInfo[vehicleid][vRenter] != playerid) RemovePlayerFromVehicle(playerid);
	}

	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
	return 1;
}

new AdminNames[5][] = {
	"None",
	"Модератор 1 уровня",
	"Модератор 2 уровня",
	"Модератор 3 уровня",
	"Основатель"
};

new SkinMale[][2] = {
	{78,5000},
	{79, 5000},
	{135, 5000},
	{137, 5000},
	{241, 5000},
	{242, 5000},
	{239, 5000},
	{235, 5000},
	{236, 5000},
	{234, 5000},
	{230, 5000},
	{213, 5000},
	{203, 5000},
	{204, 5000},
	{82, 5000},
	{83, 5000},
	{84, 5000},
	{297, 50000},
	{291, 50000},
	{277, 50000},
	{278, 50000},
	{279, 50000},
	{262, 50000},
	{258, 50000},
	{259, 50000},
	{250, 50000},
	{223, 50000},
	{222, 50000},
	{170, 50000},
	{293, 100000},
	{296, 100000},
	{249, 100000},
	{227, 100000},
	{228, 100000}
};

new SkinFemale[][2] = {
	{10, 5000},
	{9, 5000},
	{31, 5000},
	{39, 5000},
	{53, 5000},
	{54, 5000},
	{63, 5000},
	{64, 5000},
	{69, 5000},
	{75, 5000},
	{77, 5000},
	{85, 5000},
	{87, 5000},
	{88, 5000},
	{89, 5000},
	{196, 5000},
	{197, 5000},
	{198, 5000},
	{199, 5000},
	{157, 5000},
	{129, 5000},
	{130, 5000},
	{131, 5000},
	{138, 50000},
	{215, 50000},
	{216, 50000},
	{226, 50000},
	{233, 50000},
	{201, 50000},
	{207, 50000},
	{139, 50000},
	{140, 50000},
	{151, 50000},
	{152, 50000},
	{190, 50000},
	{40, 50000},
	{55, 50000},
	{56, 50000},
	{41, 50000},
	{12, 50000},
	{90, 50000},
	{91, 100000},
	{93, 100000},
	{178, 100000},
	{192, 100000},
	{193, 100000},
	{211, 100000},
	{214, 100000}
};

#define GPS_Type_None	0
#define GPS_Type_Job	1
#define GPS_Type_GPS	2

#define SpawnChange_Standart	0
#define SpawnChange_House		1
#define SpawnChange_Fraction	2

enum
{
	ItemNone,
	ItemMaterial,
	ItemRawMaterial,
	ItemOilCan,
	ItemMetall,
	ItemDrugs,
	ItemRawDrugs,
	ItemParchament,
	ItemWatch,
	ItemPhotos,
	ItemFlowers,
	ItemsGolfClub,
	ItemBaseballBat,
	ItemShovel,
	ItemCue,
	ItemWalkingStick,
	ItemRoller,
	ItemChainsaw,
	ItemKatana,
	ItemNuggets,
	ItemWing,
	ItemFrenchFries,
	ItemBurger,
	ItemBigBurger,
	ItemCasinoCoin,
	ItemDesertEagle,
	ItemMP5,
	ItemShotgun,
	ItemAK47,
	ItemM4,
	ItemEmptyBarrel
}

enum ItemsInfo
{
	ItemID,
	StackLimit,
	ItemName[50],
	WeaponsID,
	AmmoCount
};

new Items[][ItemsInfo] =
{
	{0, -1, "Пусто", 0, 0},
	{2040, -1, "Материалы", 0, 0},
	{2040, -1, "Необработанные материалы", 0, 0},
	{19621, -1, "Масленки", 0, 0},
	{3930, -1, "Металл", 0, 0},
	{1575, -1, "Наркотики", 0, 0},
	{1580, -1, "Трава", 0, 0},
	{3027, -1, "Закрутки", 0, 0},
	{19042, -1, "Часы", 0, 0},
	{367, -1, "Фотоаппарат", 43, 1},
	{325, -1, "Цветы", 14, 1},
	{333, -1, "Клюшка для гольфа", 2, 1},
	{336, -1, "Бейсбольная бита", 5, 1},
	{337, -1, "Лопата", 6, 1},
	{338, -1, "Кий", 7, 1},
	{326, -1, "Трость", 15, 1},
	{0, -1, "Ролики", 0, 0},
	{341, -1, "Бензопила", 9, 1},
	{339, -1, "Катана", 8, 1},
	{19568, -1, "Наггетсы", 0, 0},
	{19567, -1, "Крылышки", 0, 0},
	{19567, -1, "Картофель фри", 0, 0},
	{2768, -1, "Бургер", 0, 0},
	{2768, -1, "Большой бургер", 0, 0},
	{1881, -1, "Фишки из казино", 0, 0},
	{348, -1, "Desert Eagle", 24, 50},
	{353, -1, "MP5", 29, 150},
	{349, -1, "Shotgun", 25, 100},
	{355, -1, "AK-47", 30, 100},
	{356, -1, "M4", 31, 100},
	{935, -1, "Пустая бочка", 0, 0}
};

#define Max_Slots 	30
enum InventoryInfo
{
	ItemID,
	ItemCount
};
new pInventory[MAX_PLAYERS][Max_Slots][InventoryInfo];

#define MAX_DROPED	500
enum DropedItemsInfo
{
	DropItemID,
	DropItemObjID,
	DropItemCount,
	DropItemArea,
	DropItemTime
};
new DropedItems[MAX_DROPED][DropedItemsInfo];

stock ClearDrop(Indx)
{
	DropedItems[Indx][DropItemID] = 0;
	if(DropedItems[Indx][DropItemObjID] && IsValidDynamicObject(DropedItems[Indx][DropItemObjID])) DestroyDynamicObject(DropedItems[Indx][DropItemObjID]);
	DropedItems[Indx][DropItemObjID] = 0;
	if(DropedItems[Indx][DropItemArea] && IsValidDynamicArea(DropedItems[Indx][DropItemArea])) DestroyDynamicArea(DropedItems[Indx][DropItemArea]);
	DropedItems[Indx][DropItemArea] = 0;
	DropedItems[Indx][DropItemCount] = 0;
	DropedItems[Indx][DropItemTime] = 0;
}

enum GiveGunInfo
{
	MaterialCount,
	ItemID
};
new GunInfo[][GiveGunInfo] =
{
	{300, ItemDesertEagle},
	{400, ItemShotgun},
	{500, ItemMP5},
	{600, ItemAK47},
	{700, ItemM4}
};

new GunNames[48][] = {
    "Нет",
    "Кастет",
    "Клюшка для гольфа",
    "Полицейская дубинка",
    "Ножик",
    "Бейсбольная бита",
    "Лопата",
    "Кий",
    "Катана",
    "Бензопила",
    "Розовый Дилдо",
    "Маленький Белый Дилдо",
    "Длинный Белый Дилдо",
    "Вибратор",
    "Цветы",
    "Трость",
    "Граната",
    "Слезот. газ",
    "Коктейль Молотова",
    "Vehicle Missile",
    "Hydra Flare",
    "Jetpack",
    "Глок",
    "Пистолет с глушителем",
    "Desert Eagle",
    "Дробовик",
    "Обрез",
    "Боевой дробовик",
    "Узи",
    "MP5",
    "AK-47",
    "M4",
    "Tec9",
    "Винтовка",
    "Снайперская винтовка",
    "Базука",
    "Базука с самонаводкой",
    "Огнемёт",
    "Миниган",
    "Satchel Charge",
    "Детонатор",
    "Балончик с краской",
    "Fire Extinguisher",
    "Фотоапарат",
    "Очки Ночного Видения",
    "Infrared Vision",
    "Парашют",
    "Fake Pistol"
};

#define Player_No_Knockout		0
#define Player_Go_To_Knockout	1
#define Player_In_Knockout		2

#define MAX_PLAYER_SKINS	10
#define MESSAGE_DIST 		10.0

enum PlayerInfo
{
	pID,
	pName[MAX_PLAYER_NAME+1],
	pPassword[33],
	pPinCode,
	pMail[321],
	Float:pHealth,
	Float:pArmor,
	pMoney,
	pBankMoney,
	pWanted,
	bool:pCard,
	pMedCard,
	pDonateMoney,
	pLevel,
	pExp,
	bool:pAuth,
	pGender,
	pSkin,
	pSkins[MAX_PLAYER_SKINS],
	pRegIp[17],
	pRegDate,
	bool:pAnimLoad,
	pAdmin,
	pAdminPass[33],
	pMute,
	pDemorgan,
	pJail,
	bool:pJailNoFree,
	pJailedFraction,
	pWarn,
	pMembers,
	pRank,
	pAFK,
	Text3D:pAFKText,
	bool:pTogglePM,
	bool:pToggleOOC,
	bool:pToggleAD,
	bool:pLicAuto,
	bool:pLicMoto,
	bool:pLicPlane,
	bool:pLicBoat,
	bool:pLicGun,
	pWalkStyle,
	pClist,
	pUpgradePoint,
	pJob,
	pGPSType,
	pPayDayMoney,
	pSkillExp[Max_Job],
	pSkill[Max_Job],
	pPlayedTime,
	pHouseID,
	pVehicleID,
	pBusinessID,
	pSpawnChange,
	pWeapon[13],
	pAmmo[13],
	pFollow,
	bool:pArmyTicket,
	bool:pMask,
	pStashDrugs,
	pStashMaterials
};
new pInfo[MAX_PLAYERS][PlayerInfo];
#define MAX_ADMINS  100
new Iterator:Admins<MAX_ADMINS>;

enum SpikeInfo
{
	SpikeObj,
	SpikeArea,
	SpikeTime
}
new PoliceSpike[MAX_PLAYERS][SpikeInfo] = {{0, 0, 0}, ...};

enum BarrierInfo
{
	BarrierObj,
	BarrierTime
}
new FBIBarrier[MAX_PLAYERS][BarrierInfo] = {{0, 0}, ...};

stock ClearAccount(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	pInfo[playerid][pID] = 0;
	pInfo[playerid][pMoney] = 0;
	pInfo[playerid][pBankMoney] = 0;
	pInfo[playerid][pCard] = false;
	pInfo[playerid][pMedCard] = 0;
	pInfo[playerid][pDonateMoney] = 0;
	pInfo[playerid][pLevel] = 0;
	pInfo[playerid][pExp] = 0;
	pInfo[playerid][pHealth] = 100.0;
	pInfo[playerid][pArmor] = 0.0;
	pInfo[playerid][pWanted] = 0;
	pInfo[playerid][pPassword][0] = EOS;
	pInfo[playerid][pPinCode] = 0;
	pInfo[playerid][pName][0] = EOS;
	pInfo[playerid][pMail][0] = EOS;
	pInfo[playerid][pGender] = 0;
	pInfo[playerid][pSkin] = 0;
	pInfo[playerid][pRegIp][0] = EOS;
	pInfo[playerid][pRegDate] = 0;
	pInfo[playerid][pAuth] = false;
	pInfo[playerid][pAnimLoad] = false;
	pInfo[playerid][pAdminPass][0] = EOS;
	pInfo[playerid][pAdmin] = 0;
	pInfo[playerid][pMute] = 0;
	pInfo[playerid][pDemorgan] = 0;
	pInfo[playerid][pJail] = 0;
	pInfo[playerid][pJailNoFree] = false;
	pInfo[playerid][pJailedFraction] = Fraction_None;
	pInfo[playerid][pWarn] = 0;

	if(pInfo[playerid][pMembers] != Fraction_None && pInfo[playerid][pRank] >= FractionMaxRank) FillLeaderBoard();

	pInfo[playerid][pMembers] = Fraction_None;
	pInfo[playerid][pRank] = 0;
	pInfo[playerid][pAFK] = 0;
	if(pInfo[playerid][pAFKText] && IsValidDynamic3DTextLabel(pInfo[playerid][pAFKText])) DestroyDynamic3DTextLabel(pInfo[playerid][pAFKText]);
	pInfo[playerid][pAFKText] = Text3D:0;
	pInfo[playerid][pTogglePM] = true;
	pInfo[playerid][pToggleOOC] = true;
	pInfo[playerid][pToggleAD] = true;
	pInfo[playerid][pLicAuto] = false;
	pInfo[playerid][pLicMoto] = false;
	pInfo[playerid][pLicPlane] = false;
	pInfo[playerid][pLicBoat] = false;
	pInfo[playerid][pLicGun] = false;
	pInfo[playerid][pClist] = 0;
	pInfo[playerid][pWalkStyle] = 0;
	pInfo[playerid][pUpgradePoint] = 0;
	pInfo[playerid][pJob] = Job_None;
	pInfo[playerid][pGPSType] = GPS_Type_None;
	pInfo[playerid][pPayDayMoney] = 0;
	for(new i = 0; i < sizeof(Jobs); i++)
	{
		pInfo[playerid][pSkillExp][i] = 0;
		pInfo[playerid][pSkill][i] = 1;
	}
	pInfo[playerid][pPlayedTime] = 0;
	pInfo[playerid][pHouseID] = 0;
	pInfo[playerid][pBusinessID] = 0;
	pInfo[playerid][pSpawnChange] = SpawnChange_Standart;
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		pInventory[playerid][i][ItemID] = 0;
		pInventory[playerid][i][ItemCount] = 0;
	}
	for(new i = 0; i < 13; i++)
	{
		pInfo[playerid][pWeapon][i] = 0;
		pInfo[playerid][pAmmo][i] = 0;
	}
	for(new i = 0; i < MAX_PLAYER_SKINS; i++) pInfo[playerid][pSkins][i] = 0;
	pInfo[playerid][pFollow] = -1;
	pInfo[playerid][pArmyTicket] = false;
	pInfo[playerid][pMask] = false;
	pInfo[playerid][pStashDrugs] = 0;
	pInfo[playerid][pStashMaterials] = 0;
	UnloadHouseVehicle(playerid);

    if(Iter_Contains(Admins, playerid)) Iter_Remove(Admins, playerid);

	IsBot[playerid] = false;
	ActivateAntiCheat(playerid);
	return 1;
}

stock SaveAccount(playerid)
{
	ResetPlayerWeapons(playerid);
	SavePlayerWeapon(playerid);

	SavePlayerInt(playerid, "Mute", pInfo[playerid][pMute]);
	SavePlayerInt(playerid, "Demorgan", pInfo[playerid][pDemorgan]);
	SavePlayerInt(playerid, "TentCD", GetPVarInt(playerid, "TentCD"));
	SavePlayerInt(playerid, "SpermCD", GetPVarInt(playerid, "SpermCD"));
	SavePlayerInt(playerid, "BloodCD", GetPVarInt(playerid, "BloodCD"));

	SavePlayerInt(playerid, "PlayedTime", pInfo[playerid][pPlayedTime]);

	AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);

	AntiCheatGetArmour(playerid, pInfo[playerid][pArmor]);
	SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);

	SavePlayerSkill(playerid);
}

///////////////Tent/////////////////
#define MAX_TENT 	100
#define MAX_TENT_ITEMS	20
enum TentInfo
{
	TentID,
	TentObjectID,
	TentSlot,
	TentPrice,
	Text3D:TentText,
	Float:TentX,
	Float:TentY,
	Float:TentZ,
	Float:TentRX,
	Float:TentRY,
	Float:TentRZ,
	TentInt,
	TentVW,
	TentArea,
	TentPlayer,
	TentType,
	TentItemID[MAX_TENT_ITEMS],
	TentItemCount[MAX_TENT_ITEMS],
	TentItemPrice[MAX_TENT_ITEMS],
	TentTime
};
new Tent[MAX_TENT][TentInfo];
stock ClearTent(TentsID)
{
	Tent[TentsID][TentID] = 0;
	Tent[TentsID][TentSlot] = 0;
	Tent[TentsID][TentPrice] = 0;
	if(Tent[TentsID][TentObjectID] && IsValidDynamicObject(Tent[TentsID][TentObjectID])) DestroyDynamicObject(Tent[TentsID][TentObjectID]);
	Tent[TentsID][TentObjectID] = 0;
	if(Tent[TentsID][TentText] && IsValidDynamic3DTextLabel(Tent[TentsID][TentText])) DestroyDynamic3DTextLabel(Tent[TentsID][TentText]);
	Tent[TentsID][TentText] = Text3D:0;
	if(Tent[TentsID][TentArea] && IsValidDynamicArea(Tent[TentsID][TentArea])) DestroyDynamicArea(Tent[TentsID][TentArea]);
	Tent[TentsID][TentArea] = 0;
	Tent[TentsID][TentX] = 0.0;
	Tent[TentsID][TentY] = 0.0;
	Tent[TentsID][TentZ] = 0.0;
	Tent[TentsID][TentRX] = 0.0;
	Tent[TentsID][TentRY] = 0.0;
	Tent[TentsID][TentRZ] = 0.0;
	Tent[TentsID][TentInt] = 0;
	Tent[TentsID][TentVW] = 0;
	Tent[TentsID][TentType] = 0;
	Tent[TentsID][TentPlayer] = -1;
	Tent[TentsID][TentTime] = 0;
	for(new i = 0; i < MAX_TENT_ITEMS; i++)
	{
		Tent[TentsID][TentItemID][i] = ItemNone;
		Tent[TentsID][TentItemCount][i] = 0;
		Tent[TentsID][TentItemPrice][i] = 0;
	}
	return 1;
}

////////////////////////////////////

main()
{
	print("\n----------------------------------");
	print("------------"Short_Project_Name" v0.1-------------\n");
	print("----------------------------------\n");
}

public OnGameModeInit()
{
	SetGameModeText(Short_Project_Name);
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	DB = mysql_connect("triniti.ru-hoster.com", "scu", "3w9bW65Rfx", "scu");
	//DB = mysql_connect("26.33.112.138", "root", "", "olrm");

	new error = mysql_errno();
	switch(error)
    {
        case 0: print("MySQL успешно подключён.");
        default: printf("MySQL не подключился. Ошибка: %d", error);
    }

    Streamer_ToggleErrorCallback(true);
	mysql_set_charset("cp1251");
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	ShowNameTags(true);
	LimitGlobalChatRadius(MESSAGE_DIST);
	SetNameTagDrawDistance(MESSAGE_DIST);
	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, MAX_OBJECTS);

	mysql_tquery(DB, "SELECT * FROM `anticheat_codes`", "LoadAntiCheatCode");
	mysql_tquery(DB, "SELECT * FROM `anticheat_codes_nop`", "LoadAntiCheatCodeNOP");
	mysql_tquery(DB, "SELECT * FROM `vehicle`", "LoadVehicle", "d", -1);
	mysql_tquery(DB, "SELECT * FROM `gps_title`", "LoadGPSTitle");
	mysql_tquery(DB, "SELECT * FROM `gps`", "LoadGPS");
	mysql_tquery(DB, "SELECT * FROM `business`", "LoadBusiness");
	mysql_tquery(DB, "SELECT * FROM `house`", "LoadHouse");
	mysql_tquery(DB, "SELECT * FROM `vending`", "LoadVending");
	mysql_tquery(DB, "SELECT * FROM `casino_table`", "LoadTable");
	mysql_tquery(DB, "SELECT * FROM `tent`", "LoadTent");
	mysql_tquery(DB, "SELECT * FROM `fraction_info`", "LoadFractionInfo");
	mysql_tquery(DB, "SELECT * FROM `mapicon`", "LoadMapIcon");
	mysql_tquery(DB, "SELECT * FROM `bot_time`", "LoadBotSettings");
	mysql_tquery(DB, "SELECT * FROM `server_info`", "LoadServerInfo");

	GangWarZones[0][GangWarZoneName][0] = EOS;
	GangWarZones[0][GangWarZoneID] = 0;
    GangWarZones[0][GangWarDynamicZone] = 0;

	strcat(GangWarZones[1][GangWarZoneName], "Паломино");
	GangWarZones[1][GangWarZoneID] = GangZoneCreate(2159, -162, 2580, 209);
    GangWarZones[1][GangWarDynamicZone] = CreateDynamicRectangle(2159, -162, 2580, 209, 0, 0);

	strcat(GangWarZones[2][GangWarZoneName], "Лесопилка");
	GangWarZones[2][GangWarZoneID] = GangZoneCreate(-612, -223, -395, -12);
    GangWarZones[2][GangWarDynamicZone] = CreateDynamicRectangle(-612, -223, -395, -12, 0, 0);

	strcat(GangWarZones[3][GangWarZoneName], "Заброшенный аэропорт");
	GangWarZones[3][GangWarZoneID] = GangZoneCreate(-54, 2386, 447, 2670);
    GangWarZones[3][GangWarDynamicZone] = CreateDynamicRectangle(-54, 2386, 447, 2670, 0, 0);

	strcat(GangWarZones[4][GangWarZoneName], "Ферма Блуберри");
	GangWarZones[4][GangWarZoneID] = GangZoneCreate(-284, -138, 90, 163);
    GangWarZones[4][GangWarDynamicZone] = CreateDynamicRectangle(-284, -138, 90, 163, 0, 0);

	strcat(GangWarZones[5][GangWarZoneName], "Карьер");
	GangWarZones[5][GangWarZoneID] = GangZoneCreate(405, 714, 795, 1024);
    GangWarZones[5][GangWarDynamicZone] = CreateDynamicRectangle(405, 714, 795, 1024, 0, 0);

	new hour;
	gettime(hour, _, _);
	SetWorldTime(hour);
	SetWeatherOfTime(hour);

	PayDayCalled = false;

	LotteryMoney = 0;
	LotteryStarted = false;

	SetTimer("SecondTimer", 1000, true);
	SetTimer("VehicleProcessor", 500, true);

	FractionColor[Fraction_None] = PlayerColors[0];
	FractionColor[Fraction_Police] = PlayerColors[68];
	FractionColor[Fraction_Army] = PlayerColors[22];
	FractionColor[Fraction_FBI] = PlayerColors[84];
	FractionColor[Fraction_Hospital] = PlayerColors[3];
	FractionColor[Fraction_Taxi] = PlayerColors[45];
	FractionColor[Fraction_SanNews] = PlayerColors[34];
	FractionColor[Fraction_Vagos] = PlayerColors[10];
	FractionColor[Fraction_Ballas] = PlayerColors[93];
	FractionColor[Fraction_Aztecas] = PlayerColors[16];
	FractionColor[Fraction_Grove] = PlayerColors[17];
	FractionColor[Fraction_Rifa] = PlayerColors[79];
	FractionColor[Fraction_StreetRacers] = PlayerColors[66];
	FractionColor[Fraction_Bikers] = PlayerColors[91];
	FractionColor[Fraction_FarmOfTruth] = PlayerColors[33];
    FractionColor[Fraction_RussiaMafia] = PlayerColors[6];

	#include <mapping/interior/spawn>
	#include <mapping/interior/demorgan>
	#include <mapping/interior/Mine>
	#include <mapping/interior/PrisonMine>
	#include <mapping/interior/CityHall>
	#include <mapping/interior/Army>
	#include <mapping/interior/Police>
	#include <mapping/interior/FBI>
	#include <mapping/interior/Hospital>
	#include <mapping/interior/Taxi>
	#include <mapping/interior/SanNews>
	#include <mapping/interior/Stash>
	#include <mapping/interior/Vagos>
	#include <mapping/interior/StreetRacers>

	#include <mapping/exterior/spawn>
	#include <mapping/exterior/Moder-Bridge>
	#include <mapping/exterior/CityHall>
	#include <mapping/exterior/Mine>
	#include <mapping/exterior/SanFierro>
	#include <mapping/exterior/Lumberjack>
	#include <mapping/exterior/Prison>
	#include <mapping/exterior/Hospital>
	#include <mapping/exterior/Police>
	#include <mapping/exterior/Army>
	#include <mapping/exterior/FBI>
	#include <mapping/exterior/SanNews>
	//Дыра на ферме ЛС
	CreateDynamicObject(1497, -383.47751, -1439.64209, 25.31070,   0.00000, 0.00000, 90.00000, 0, 0);

	mysql_tquery(DB, "SELECT * FROM `account` WHERE `Admin` > 0 ORDER BY `Admin` DESC", "FillAdminBoard");
	mysql_tquery(DB, "SELECT * FROM `account` ORDER BY `Money` DESC, `Level` DESC LIMIT 5", "FillPlayerBoard");

	CreateBusStop();
	CreateServerTextDraw();

	Create3DText();
	CreateAreas();
	CreatePickups();
	CreateGates();
	CreateActors();

	CreateLubberjackTree();
	CreateFarmPlant();
	CreateMineMetall();
	return 1;
}

public Streamer_OnPluginError(const error[])
{
	PrintAmxBacktrace();
	printf("%s", error);
	return 1;
}

public OnGameModeExit()
{
	MapAndreas_Unload();
	DestroyServerTextDraw();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	return 1;
}

public OnPlayerConnect(playerid)
{
	ClearAccount(playerid);
	GetPlayerName(playerid, pInfo[playerid][pName], MAX_PLAYER_NAME);

	new query[100];
	GetPlayerIp(playerid, query, 17);

	if(!strcmp(query, "176.32.39.2"))
	{
		IsBot[playerid] = true;
		BotCount++;
		SetPlayerScore(playerid, random(51));
		pInfo[playerid][pClist] = -1;
	}
	else IsBot[playerid] = false;


	SetPlayerColor(playerid, PlayerColors[0]);
	SetSpawnInfo(playerid, NO_TEAM, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	TogglePlayerSpectating(playerid, true);
	RemovePlayerObject(playerid);
	LoadPlayerTextDraw(playerid);

	mysql_format(DB, query, sizeof(query), "SELECT * FROM `ipbans` WHERE `IP` = '%s'", query);
	mysql_tquery(DB, query, "CheckAccountIPBan", "d", playerid);

	if(IsBot[playerid]) DeactivateAntiCheat(playerid);
	else ActivateAntiCheat(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsBot[playerid])
	{
		BotCount--;
		ClearAccount(playerid);
		return 1;
	}

	ChangePlayerJob(playerid, pInfo[playerid][pJob]);
	ChangePlayerUnOfficialJob(playerid, Job_None);

	RemovePlayerOnCheaterPanel(playerid);

	UnrentTent(playerid);

	if(pInfo[playerid][pMembers] != Fraction_None && IsABand(pInfo[playerid][pMembers]) && pInfo[playerid][pRank] >= FractionMaxRank)
	{
		if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War)
        {
            SendRMessageEx(pInfo[playerid][pMembers], "Лидер вашей банды покинул игру. Вы проиграли войну");
            SendRMessageEx(GangWarOpponent[pInfo[playerid][pMembers]], "Лидер банды соперника покинул игру. Вы выиграли войну");

            EndGangWar(GangWarOpponent[pInfo[playerid][pMembers]], 1);
            EndGangWar(pInfo[playerid][pMembers], 0);
        }
	}

	if(GetPVarInt(playerid, "TaxiDriver"))
	{
		new id = GetPVarInt(playerid, "TaxiDriver")-1;
		new Float:X = GetPVarFloat(id, "TaxiX");
		new Float:Y = GetPVarFloat(id, "TaxiY");
		new Float:Z = GetPVarFloat(id, "TaxiZ");
		new Float:Distance = GetPVarFloat(id, "TaxiDistance");

		if(GetVehicleDistanceFromPoint(GetPVarInt(id, "TaxiVehicle"), Float:X, Float:Y, Float:Z) < Distance/2.0)
		{
			new str[145];
			format(str, sizeof(str), Color_White"Клиент покинул такси, вы проехали более половины пути и поэтому получили"Color_Green" %d$", GetPVarInt(playerid, "TaxiPrice"));
			SendClientMessage(id, -1, str);
			GivePlayerMoneyEx(id, GetPVarInt(playerid, "TaxiPrice"));
		}
		else SendClientMessage(id, -1, Color_White"Клиент покинул такси, вы проехали менее половины пути и поэтому не получили оплату");

		DeletePVar(playerid, "TaxiDriver");
		DeletePVar(playerid, "TaxiPrice");

		DeletePVar(id, "TaxiPassenger");
		DeletePVar(id, "TaxiX");
		DeletePVar(id, "TaxiY");
		DeletePVar(id, "TaxiZ");
		DeletePVar(id, "TaxiDistance");

		pInfo[id][pGPSType] = GPS_Type_None;
		DisablePlayerRaceCheckpoint(id);
	}

	if(GetPVarInt(playerid, "TaxiPassenger"))
	{
		new id = GetPVarInt(playerid, "TaxiPassenger")-1;
		new Float:X = GetPVarFloat(playerid, "TaxiX");
		new Float:Y = GetPVarFloat(playerid, "TaxiY");
		new Float:Z = GetPVarFloat(playerid, "TaxiZ");
		new Float:Distance = GetPVarFloat(playerid, "TaxiDistance");

		if(GetVehicleDistanceFromPoint(GetPVarInt(playerid, "TaxiVehicle"), Float:X, Float:Y, Float:Z) < Distance/2.0)
		{
			SendClientMessage(id, -1, Color_White"Водитель покинул такси, вы проехали более половины пути и поэтому средства не будут возвращены");
			GivePlayerMoneyEx(playerid, GetPVarInt(id, "TaxiPrice"));
		}
		else
		{
			if(pInfo[id][pLevel])
			{
				new str[145];
				format(str, sizeof(str), Color_White"Водитель покинул такси, вы проехали менее половины пути и поэтому получили обратно"Color_Green" %d$", GetPVarInt(id, "TaxiPrice"));
				SendClientMessage(id, -1, str);
				GivePlayerMoneyEx(id, GetPVarInt(id, "TaxiPrice"));
			}
		}

		DeletePVar(id, "TaxiDriver");
		DeletePVar(id, "TaxiPrice");

		DeletePVar(playerid, "TaxiPassenger");
		DeletePVar(playerid, "TaxiX");
		DeletePVar(playerid, "TaxiY");
		DeletePVar(playerid, "TaxiZ");
		DeletePVar(playerid, "TaxiDistance");

		pInfo[playerid][pGPSType] = GPS_Type_None;
		DisablePlayerRaceCheckpoint(playerid);
	}

	if(GetPVarInt(playerid, "TaxiVehicle"))
	{
		new vehicleid = GetPVarInt(playerid, "TaxiVehicle");
		if(vInfo[vehicleid][vRenter] == playerid)
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Taxi) DeletePVar(playerid, "TaxiVehicle");
			vInfo[vehicleid][vRenter] = -1;

			DeletePVar(playerid, "TaxiFare");
		}
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}
	}

	if(GetPVarInt(playerid, "StartBloodVehicle"))
	{
		new vehicleid = GetPVarInt(playerid, "StartBloodVehicle");
		if(vInfo[vehicleid][vRenter] == playerid)
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Hospital) DeletePVar(playerid, "StartBloodVehicle");
			vInfo[vehicleid][vRenter] = -1;
		}
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}
	}

	if(PoliceSpike[playerid][SpikeObj])
	{
		PoliceSpike[playerid][SpikeTime] = 0;

		if(PoliceSpike[playerid][SpikeObj] && IsValidDynamicObject(PoliceSpike[playerid][SpikeObj])) DestroyDynamicObject(PoliceSpike[playerid][SpikeObj]);
		PoliceSpike[playerid][SpikeObj] = 0;

		if(PoliceSpike[playerid][SpikeArea] && IsValidDynamicArea(PoliceSpike[playerid][SpikeArea])) DestroyDynamicArea(PoliceSpike[playerid][SpikeArea]);
		PoliceSpike[playerid][SpikeArea] = 0;
	}

	if(FBIBarrier[playerid][BarrierObj])
	{
		if(FBIBarrier[playerid][BarrierObj] && IsValidDynamicObject(FBIBarrier[playerid][BarrierObj])) DestroyDynamicObject(FBIBarrier[playerid][BarrierObj]);
		FBIBarrier[playerid][BarrierObj] = 0;
		FBIBarrier[playerid][BarrierTime] = 0;
	}

	if(AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && pInfo[playerid][pWanted])
	{
		pInfo[playerid][pJail] = 100;
		SavePlayerInt(playerid, "Jail", pInfo[playerid][pJail]);

		pInfo[playerid][pJailNoFree] = true;
		SavePlayerBool(playerid, "JailNoFree", pInfo[playerid][pJailNoFree]);

		pInfo[playerid][pWanted] = 0;
		SetPlayerWantedLevel(playerid, pInfo[playerid][pWanted]);
		SavePlayerInt(playerid, "Wanted", pInfo[playerid][pWanted]);

		if(pInfo[playerid][pFollow] != -1 && pInfo[pInfo[playerid][pFollow]][pMembers] != Fraction_None)
		{
			pInfo[playerid][pJailedFraction] = pInfo[pInfo[playerid][pFollow]][pMembers];
			SavePlayerInt(playerid, "JailedFraction", pInfo[playerid][pJailedFraction]);
		}

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TogglePlayerControllable(playerid, true);

		new str[300];
		format(str, sizeof(str), Color_White"%s[%d] вышел из игры во время задержания и был посажен в тюрьму с приоритетом 6, без возможности выкупа", pInfo[playerid][pName], playerid);
		SendAllMessage(str);

		AddOfflineMessage(pInfo[playerid][pID], Color_White"Вы вышли из игры во время задержания и были посажены в тюрьму с приоритетом 6, без возможности выкупа");
		format(str, sizeof(str), Color_White"Вы попали в тюрьму вам нужно добыть "Main_Color"%d "Color_White"камня чтобы выйти", pInfo[playerid][pJail]);
		AddOfflineMessage(pInfo[playerid][pID], str);
	}

	if(pInfo[playerid][pFollow] != -1)
	{
		DeletePVar(pInfo[playerid][pFollow], "Following");
		pInfo[playerid][pFollow] = -1;
	}

	if(GetPVarInt(playerid, "Following"))
	{
		new id = GetPVarInt(playerid, "Following")-1;

		pInfo[id][pFollow] = -1;
		TogglePlayerControllable(id, true);
		SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);

		DeletePVar(playerid, "Following");
	}

	new TableID = GetPVarInt(playerid, "CasinoTable");
	if(TableID)
	{
		TableID--;
		DeletePVar(playerid, "CasinoTable");
		if(CasinoTable[TableID][CasTabBank] < 0) CasinoTable[TableID][CasTabBank] = 0;
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] == playerid)
			{

				if(CasinoTable[TableID][CasTabStatus] && CasinoTable[TableID][CasTabTimer] && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWaitAction)
				{
					CasinoTable[TableID][CasTabTimer] = 0;
				}

				CasinoTable[TableID][CasTabPlayers][i] = -1;
				CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
				CasinoTable[TableID][CasTabPlayersScore][i] = 0;
				TogglePlayerControllable(playerid, true);
				for(new j = 0; j < sizeof(CasinoPTD[]); j++) PlayerTextDrawHide(playerid, CasinoPTD[playerid][j]);
				CancelSelectTextDraw(playerid);

				TableUpdateInfo(TableID);

				break;
			}
		}
		if(pInfo[playerid][pGender]) ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "вышла из-за стола");
		else ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "вышел из-за стола");
		if(!GetPlayerTableCount(TableID)) EndTableGame(TableID);
	}

	if(GetPVarInt(playerid, "AdminCar"))
	{
		ClearVehicle(GetPVarInt(playerid, "AdminCar"));
		DeletePVar(playerid, "AdminCar");
	}

	if(GetPVarInt(playerid, "ReportedID"))
	{
		DeletePVar(GetPVarInt(playerid, "ReportedID")-1, "ReportInWork");
		DeletePVar(playerid, "ReportedID");
	}

	if(GetPVarInt(playerid, "Spec_Admin_ID"))
	{
		SendClientMessage(GetPVarInt(playerid, "Spec_Admin_ID")-1, -1, Color_Yellow"Игрок вышел из игры. Вы прекратили следить за игроком.");
		StopSpectate(GetPVarInt(playerid, "Spec_Admin_ID")-1);
		DeletePVar(playerid, "Spec_Admin_ID");
	}

	if(GetPVarInt(playerid, "Spec_Mode"))
	{
		DeletePVar(playerid, "Spec_X");
		DeletePVar(playerid, "Spec_Y");
		DeletePVar(playerid, "Spec_Z");
		DeletePVar(playerid, "Spec_A");
		DeletePVar(playerid, "Spec_VW");
		DeletePVar(playerid, "Spec_INT");

		DeletePVar(GetPVarInt(playerid, "Spec_ID"), "Spec_Admin_ID");

		DeletePVar(playerid, "Spec_ID");
		DeletePVar(playerid, "Spec_Mode");
		StopSpectate(playerid);
	}

	if(pInfo[playerid][pAdmin] && GetPVarInt(playerid, "AdmAuth")) HideCheaterPanelTD(playerid);

	if(GetPVarInt(playerid, "SpeedometrID")) HidePlayerSpeedometr(playerid);

	DestroyPlayerTextDraw(playerid);
	TextDrawHideForPlayer(playerid, GlobalTimeTD);
	TextDrawHideForPlayer(playerid, SiteTD);

	SaveAccount(playerid);
	ClearAccount(playerid);
	return 1;
}


#define PLAYER_SYNC	207
public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
	if(packetid == PLAYER_SYNC)
	{
		new onFootData[PR_OnFootSync];

	    BS_IgnoreBits(bs, 8);
	    BS_ReadOnFootSync(bs, onFootData);

	    if(onFootData[PR_health] < 14.0 && GetPVarInt(playerid, "PlayerKnockoutStatus") == Player_No_Knockout)
	    {
	    	SetPVarFloat(playerid, "PlayerKnockoutX", onFootData[PR_position][0]);
			SetPVarFloat(playerid, "PlayerKnockoutY", onFootData[PR_position][1]);
			SetPVarFloat(playerid, "PlayerKnockoutZ", onFootData[PR_position][2]);
			SetPVarInt(playerid, "PlayerKnockoutVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "PlayerKnockoutInt", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "PlayerKnockoutStatus", Player_Go_To_Knockout);

	    	if(onFootData[PR_health] > 0.0) KnockoutPlayer(playerid);
	    }
	}
	return 1;
}

/*#define PLAYER_DEATH 53
public OnIncomingRPC(playerid, rpcid, BitStream:bs)
{
	if(rpcid == PLAYER_DEATH)
	{
		if(GetPVarInt(playerid, "PlayerKnockoutStatus") == Player_No_Knockout)
	    {
	    	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
	    	SetPVarFloat(playerid, "PlayerKnockoutX", X);
			SetPVarFloat(playerid, "PlayerKnockoutY", Y);
			SetPVarFloat(playerid, "PlayerKnockoutZ", Z-0.5);
			SetPVarInt(playerid, "PlayerKnockoutVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "PlayerKnockoutInt", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "PlayerKnockoutStatus", Player_Go_To_Knockout);
	    }
	}
	return 1;
}*/

stock KnockoutPlayer(playerid)
{
	if(GetPVarInt(playerid, "PlayerKnockoutStatus") == Player_In_Knockout)
	{
		SetPVarInt(playerid, "PlayerKnockoutStatus", Player_No_Knockout);
		DeletePVar(playerid, "DisableTextAnim");
	}
	else if(GetPVarInt(playerid, "PlayerKnockoutStatus") == Player_Go_To_Knockout)
	{
		SetPlayerPosition(playerid, GetPVarFloat(playerid, "PlayerKnockoutX"), GetPVarFloat(playerid, "PlayerKnockoutY"), GetPVarFloat(playerid, "PlayerKnockoutZ"), 0.0, GetPVarInt(playerid, "PlayerKnockoutVW"), GetPVarInt(playerid, "PlayerKnockoutInt"));
		SetCameraBehindPlayer(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPVarInt(playerid, "DisableTextAnim", 1);
		ClearAnimations(playerid, true);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, true, true, true, false, 0, true);

		SendClientMessage(playerid, -1, Main_Color"Вы сильно пострадали. Вызовите медика - /service medic");
		SetPlayerHealth(playerid, 1.0);
		SetPlayerArmedWeapon(playerid, 0);

		DeletePVar(playerid, "PlayerKnockoutX");
		DeletePVar(playerid, "PlayerKnockoutY");
		DeletePVar(playerid, "PlayerKnockoutZ");
		DeletePVar(playerid, "PlayerKnockoutVW");
		DeletePVar(playerid, "PlayerKnockoutInt");
		SetPVarInt(playerid, "PlayerKnockoutStatus", Player_In_Knockout);
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!pInfo[playerid][pAnimLoad]) PreloadAllAnimLibs(playerid);
	StopMusic(playerid);

    SetPlayerTeam(playerid, NO_TEAM);

	TextDrawShowForPlayer(playerid, GlobalTimeTD);
	TextDrawShowForPlayer(playerid, SiteTD);
	PlayerLevelUpdate(playerid);
	if(pInfo[playerid][pWanted]) SetPlayerWantedLevel(playerid, pInfo[playerid][pWanted]);

	ResetPlayerWeapons(playerid);
	SavePlayerWeapon(playerid);

	pInfo[playerid][pHealth] = 50.0;
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);

	pInfo[playerid][pArmor] = 0.0;
	SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);

	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMask]) ShowPlayerNameTagForPlayer(playerid, i, false);
	}

	if(GetPVarInt(playerid, "TaxiVehicle"))
	{
		new vehicleid = GetPVarInt(playerid, "TaxiVehicle");
		if(vInfo[vehicleid][vRenter] == playerid)
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Taxi) DeletePVar(playerid, "TaxiVehicle");
			vInfo[vehicleid][vRenter] = -1;

			DeletePVar(playerid, "TaxiFare");
		}
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}
	}

	if(GetPVarInt(playerid, "StartBloodVehicle"))
	{
		new vehicleid = GetPVarInt(playerid, "StartBloodVehicle");
		if(vInfo[vehicleid][vRenter] == playerid)
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Hospital) DeletePVar(playerid, "StartBloodVehicle");
			vInfo[vehicleid][vRenter] = -1;
		}
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}
	}

	if(GetPVarInt(playerid, "Spec_Admin_ID")) SpectatePlayer(GetPVarInt(playerid, "Spec_Admin_ID")-1, playerid);

	if(pInfo[playerid][pDemorgan])
	{
		ResetPlayerWeapons(playerid);
		SavePlayerWeapon(playerid);
		new rand = random(sizeof(RandomDemorganPos));
		SetPlayerPosition(playerid, RandomDemorganPos[rand][0], RandomDemorganPos[rand][1], RandomDemorganPos[rand][2], RandomDemorganPos[rand][3], 2, 0);
		SetSkin(playerid, 264, true);
	}
	else if(pInfo[playerid][pJail])
	{
		ResetPlayerWeapons(playerid);
		SavePlayerWeapon(playerid);
		SetPlayerPosition(playerid, 234.3806, 1957.0878, 18.3294, 89.9933, 0, 0);
		SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
	}
	else if(GetPVarInt(playerid, "Spec_Mode"))
	{
		SetPlayerPosition(playerid, GetPVarFloat(playerid, "Spec_X"), GetPVarFloat(playerid, "Spec_Y"), GetPVarFloat(playerid, "Spec_Z"), GetPVarFloat(playerid, "Spec_A"), GetPVarInt(playerid, "Spec_VW"), GetPVarInt(playerid, "Spec_INT"));

		DeletePVar(playerid, "Spec_X");
		DeletePVar(playerid, "Spec_Y");
		DeletePVar(playerid, "Spec_Z");
		DeletePVar(playerid, "Spec_A");
		DeletePVar(playerid, "Spec_VW");
		DeletePVar(playerid, "Spec_INT");

		DeletePVar(GetPVarInt(playerid, "Spec_ID"), "Spec_Admin_ID");

		DeletePVar(playerid, "Spec_ID");
		DeletePVar(playerid, "Spec_Mode");
		GiveAllGun(playerid);
		SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
	}
	else
	{
		switch(pInfo[playerid][pSpawnChange])
		{
			case SpawnChange_Standart:
			{
				SetPlayerPosition(playerid, 2227.4434, -1153.0583, 1029.7969, 0.6366, 1, 15);
				SetPVarInt(playerid, "InPickup", SpawnEnter+1);
			}
			case SpawnChange_House:
			{
				new HouseID = pInfo[playerid][pHouseID];
				SetPVarInt(playerid, "InHouse", hInfo[HouseID][hID]);
				SetPlayerPosition(playerid, HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], HouseInterior[hInfo[HouseID][hInterior]][hIntA], House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);
			}
			case SpawnChange_Fraction:
			{
				switch(pInfo[playerid][pMembers])
				{
					case Fraction_Police:
					{
						SetPVarInt(playerid, "InPickup", PoliceEnter+1);
						SetPlayerPosition(playerid, 254.4145,79.8489,1003.6406,173.4543, 1, 6);
					}
					case Fraction_Army:
					{
						SetPVarInt(playerid, "InPickup", ArmyEnter+1);
						SetPlayerPosition(playerid, 153.1704,1881.1949,2049.2261,86.7182, 2, 1);
					}
					case Fraction_FBI:
					{
						SetPVarInt(playerid, "InPickup", FBIEnter+1);
						SetPlayerPosition(playerid, 323.2348,308.5165,999.1484,175.3689, 3, 5);
					}
					case Fraction_Hospital:
					{
						SetPVarInt(playerid, "InPickup", HospitalEnter+1);
						SetPlayerPosition(playerid, -327.1405,1031.3286,1028.5514,272.0991, 4, 5);
					}
					case Fraction_Taxi:
					{
						SetPVarInt(playerid, "InPickup", TaxiEnter+1);
						SetPlayerPosition(playerid, -2034.7810,-114.6488,1035.1719,186.8482, 5, 3);
						GivePlayerGun(playerid, 2, 1);
					}
					case Fraction_SanNews:
					{
						SetPVarInt(playerid, "InPickup", SanNewsEnter+1);
						SetPlayerPosition(playerid, 164.9721,-116.2468,1076.5938,180.6129, 6, 6);
						GivePlayerGun(playerid, 15, 1);
						GivePlayerGun(playerid, 43, 30);
					}
					case Fraction_Vagos:
					{
						SetPVarInt(playerid, "InPickup", VagosEnter+1);
						SetPlayerPosition(playerid, 301.4915,301.9941,1003.5391,359.4203, 1, 4);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_Ballas:
					{
						SetPVarInt(playerid, "InPickup", BallasEnter+1);
						SetPlayerPosition(playerid, -59.5840,1363.7395,1080.2109,83.2658, 1, 6);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_Aztecas:
					{
						SetPVarInt(playerid, "InPickup", AztecasEnter+1);
						SetPlayerPosition(playerid, 415.2032,2536.6233,10.0000,277.7186, 1, 10);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_Grove:
					{
						SetPVarInt(playerid, "InPickup", GroveEnter+1);
						SetPlayerPosition(playerid, 2525.9622,-1674.9459,1015.4986,272.4487, 1, 1);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_Rifa:
					{
						SetPVarInt(playerid, "InPickup", RifaEnter+1);
						SetPlayerPosition(playerid, -226.3535,1409.7509,27.7734,180.3660, 1, 18);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_StreetRacers:
					{
						SetPVarInt(playerid, "InPickup", StreetRacersEnter+1);
						SetPlayerPosition(playerid, -2662.2390,601.9631,376.1918,87.0941, 2, 18);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_Bikers:
					{
						SetPVarInt(playerid, "InPickup", BikersEnter+1);
						SetPlayerPosition(playerid, -226.3535,1409.7509,27.7734,180.3660, 3, 18);
						GivePlayerGun(playerid, 5, 1);
					}
					case Fraction_FarmOfTruth:
					{
						SetPVarInt(playerid, "InPickup", FarmOfTruthEnter+1);
						SetPlayerPosition(playerid, -226.3535,1409.7509,27.7734,180.3660, 4, 18);
						GivePlayerGun(playerid, 6, 1);
					}
                    case Fraction_RussiaMafia:
					{
						SetPVarInt(playerid, "InPickup", RussiaMafiaEnter+1);
						SetPlayerPosition(playerid, -226.3535,1409.7509,27.7734,180.3660, 5, 18);
						GivePlayerGun(playerid, 5, 1);
                        GivePlayerGun(playerid, 30, 300);
                        GivePlayerGun(playerid, 24, 150);
					}
				}
			}
		}
		SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
		GiveAllGun(playerid);
	}
	SetCameraBehindPlayer(playerid);
	SetColor(playerid);
	UpdatePlayerMoney(playerid);
	SetPlayerScore(playerid, pInfo[playerid][pLevel]);
	SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
	SetPlayerArmour(playerid, pInfo[playerid][pArmor]);

    if(pInfo[playerid][pMembers] != Fraction_None && IsABand(pInfo[playerid][pMembers]) && GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War)
    {
        GangZoneShowForPlayer(playerid, GangWarZones[GangWarZone[pInfo[playerid][pMembers]]][GangWarZoneID], FractionColor[pInfo[playerid][pMembers]]-0x7F);
        GangZoneFlashForPlayer(playerid, GangWarZones[GangWarZone[pInfo[playerid][pMembers]]][GangWarZoneID], FractionColor[GangWarOpponent[pInfo[playerid][pMembers]]]-0x7F);

        new str[100];
        ConvertedSecondsWithoutText(GangWarTimer[pInfo[playerid][pMembers]], str);
        format(str, sizeof(str), "VS~n~~n~Time:_%s", str);
        PlayerTextDrawSetString(playerid, GangWarPTD[playerid][0], str);

        PlayerTextDrawColor(playerid, GangWarPTD[playerid][1], FractionColor[pInfo[playerid][pMembers]]);
        PlayerTextDrawSetString(playerid, GangWarPTD[playerid][1], FractionName[pInfo[playerid][pMembers]]);

        PlayerTextDrawColor(playerid, GangWarPTD[playerid][2], FractionColor[GangWarOpponent[pInfo[playerid][pMembers]]]);
        PlayerTextDrawSetString(playerid, GangWarPTD[playerid][2], FractionName[GangWarOpponent[pInfo[playerid][pMembers]]]);

        for(new j = 0; j < sizeof(GangWarPTD[]); j++) PlayerTextDrawShow(playerid, GangWarPTD[playerid][j]);
    }

	KnockoutPlayer(playerid);
	return 1;
}

stock SetColor(playerid)
{
	if(pInfo[playerid][pMask]) SetPlayerColor(playerid, 0xFFFFFF00);
	else
	{
		if(pInfo[playerid][pMembers] == Fraction_None) SetPlayerColor(playerid, PlayerColors[pInfo[playerid][pClist]]);
		else SetPlayerColor(playerid, FractionColor[pInfo[playerid][pMembers]]);
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid != INVALID_PLAYER_ID)
	{
		if(pInfo[killerid][pMembers] == Fraction_FBI && pInfo[playerid][pWanted])
		{
			new money = (pInfo[killerid][pRank] * (10000*pInfo[playerid][pLevel]))+(10000*pInfo[playerid][pWanted]);

			SetPVarInt(playerid, "JailCD", 5);

			switch(pInfo[playerid][pWanted])
			{
				case 1: pInfo[playerid][pJail] = 30;
				case 2: pInfo[playerid][pJail] = 40;
				case 3: pInfo[playerid][pJail] = 50;
				case 4: pInfo[playerid][pJail] = 60;
				case 5: pInfo[playerid][pJail] = 80;
				case 6: pInfo[playerid][pJail] = 100;
				default: pInfo[playerid][pJail] = 30;
			}
			SavePlayerInt(playerid, "Jail", pInfo[playerid][pJail]);

			if(pInfo[playerid][pFollow] != -1) DeletePVar(pInfo[playerid][pFollow], "Following");
			pInfo[playerid][pFollow] = -1;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			TogglePlayerControllable(playerid, true);

			new str[300];
			format(str, sizeof(str), "%s %s[%d] посадил в тюрьму %s[%d] с приоритетом розыска %d", FractionRankName[pInfo[killerid][pMembers]][pInfo[killerid][pRank]], pInfo[killerid][pName], killerid, pInfo[playerid][pName], playerid, pInfo[playerid][pWanted]);
			SendDMessage(killerid, str);

			format(str, sizeof(str), "%s %s[%d] "Color_White"посадил вас в тюрьму с приоритетом розыска "Main_Color"%d", FractionRankName[pInfo[killerid][pMembers]][pInfo[killerid][pRank]], pInfo[killerid][pName], killerid, pInfo[playerid][pWanted]);
			SendClientMessage(playerid, BitColor_Main, str);

			format(str, sizeof(str), Color_White"Вы попали в тюрьму вам нужно добыть "Main_Color"%d "Color_White"камня чтобы выйти", pInfo[playerid][pJail]);
			SendClientMessage(playerid, BitColor_Main, str);

			pInfo[playerid][pWanted] = 0;
			SetPlayerWantedLevel(playerid, pInfo[playerid][pWanted]);
			SavePlayerInt(playerid, "Wanted", pInfo[playerid][pWanted]);

			ChangePlayerJob(playerid, pInfo[playerid][pJob]);
			ChangePlayerUnOfficialJob(playerid, Job_None);

			format(str, sizeof(str), Color_White"Вы задержали %s[%d], на ваш банковский счет переведено "Color_Green"%d$", pInfo[playerid][pName], playerid, money);
			SendClientMessage(killerid, BitColor_Main, str);
			pInfo[killerid][pBankMoney] += money;
			SavePlayerInt(killerid, "BankMoney", pInfo[killerid][pBankMoney]);
		}
        else if(pInfo[killerid][pMembers] != Fraction_None && pInfo[playerid][pMembers] != Fraction_None && IsABand(pInfo[playerid][pMembers]) && IsABand(pInfo[killerid][pMembers]) && GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War && GangWarOpponent[pInfo[playerid][pMembers]] == pInfo[killerid][pMembers])
        {
            if(pInfo[playerid][pRank] >= FractionMaxRank)
            {
                for(new i = 1; i < sizeof(GangWarZones); i++)
                {
                    if(IsPlayerInDynamicArea(playerid, GangWarZones[i][GangWarDynamicZone]) && GangWarZone[pInfo[playerid][pMembers]] == i)
                    {
                        EndGangWar(GangWarOpponent[pInfo[playerid][pMembers]], 1);
                        EndGangWar(pInfo[playerid][pMembers], 0);
                        break;
                    }
                }
            }
        }
	}

	pInfo[playerid][pHealth] = 50.0;
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);

	pInfo[playerid][pArmor] = 0.0;
	SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);

	ResetPlayerWeapons(playerid);
	SavePlayerWeapon(playerid);
	pInfo[playerid][pArmor] = 0.0;

	TextDrawShowForPlayer(playerid, Background);
	TogglePlayerSpectating(playerid, true);
	SetTimerEx("SpawnTime", 300, false, "d", playerid);
	return 1;
}

forward SpawnTime(playerid);
public SpawnTime(playerid)
{
	TogglePlayerSpectating(playerid, false);
	TextDrawHideForPlayer(playerid, Background);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vInfo[vehicleid][vType] != VehicleTypePlayer) vInfo[vehicleid][vLock] = false;

	SetVehicleParamsEx(vehicleid, false, false, false, vInfo[vehicleid][vLock], false, false, false);

	if(vInfo[vehicleid][vType] == VehicleTypePlayer) SetVehicleTuning(vehicleid);
	else if(vInfo[vehicleid][vType] == VehicleTypeServer)
	{
		SaveCarFloat(vehicleid, "Fuel", vInfo[vehicleid][vFuel]);
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeBusiness)
	{
		SaveCarFloat(vehicleid, "Fuel", vInfo[vehicleid][vFuel]);
		if(vInfo[vehicleid][vRenter] != -1)
		{
			if(IsPlayerConnected(vInfo[vehicleid][vRenter]))
			{
				if(GetPVarInt(vInfo[vehicleid][vRenter], "RentedCar") == vehicleid) DeletePVar(vInfo[vehicleid][vRenter], "RentedCar");
				SendClientMessage(vInfo[vehicleid][vRenter], -1,  Color_Yellow"Арендованный транспорт был отбуксирован.");
			}
			vInfo[vehicleid][vRenter] = -1;
		}
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeJob)
	{
		SaveCarFloat(vehicleid, "Fuel", vInfo[vehicleid][vFuel]);

		if(vInfo[vehicleid][vRenter] != -1)
		{
			if(IsPlayerConnected(vInfo[vehicleid][vRenter]))
			{
				if(vInfo[vehicleid][vOwner] == Job_CarThief) RemoveThiefCar(vInfo[vehicleid][vRenter], true);
				else SendClientMessage(vInfo[vehicleid][vRenter], -1,  Color_Yellow"Ваш рабочий транспорт был отбуксирован.");
				if(GetPVarInt(vInfo[vehicleid][vRenter], "RentedCar") == vehicleid) DeletePVar(vInfo[vehicleid][vRenter], "RentedCar");
				RemoveTrailer(vInfo[vehicleid][vRenter], true);
				RemoveLoader(vInfo[vehicleid][vRenter]);

				if(vInfo[vehicleid][vOwner] == Job_Mechanic) DeletePVar(vInfo[vehicleid][vRenter], "MechanicFare");
				else if(vInfo[vehicleid][vOwner] == Job_Pilot)
				{
					DeletePVar(vInfo[vehicleid][vRenter], "PilotNumberPoint");
					DeletePVar(vInfo[vehicleid][vRenter], "PilotNextX");
					DeletePVar(vInfo[vehicleid][vRenter], "PilotNextY");
				}
				else if(vInfo[vehicleid][vOwner] == Job_DriverDelivery) DeletePVar(vInfo[vehicleid][vRenter], "DriverDeliveryStatus");
				else if(vInfo[vehicleid][vOwner] == Job_Bus)
				{
					DeletePVar(vInfo[vehicleid][vRenter], "BusRoute");
					DeletePVar(vInfo[vehicleid][vRenter], "BusRouteStage");
					DeletePVar(vInfo[vehicleid][vRenter], "BusTime");
				}

				if(pInfo[vInfo[vehicleid][vRenter]][pGPSType] == GPS_Type_Job)
				{
					DisablePlayerCheckpoint(vInfo[vehicleid][vRenter]);
					DisablePlayerRaceCheckpoint(vInfo[vehicleid][vRenter]);
					pInfo[vInfo[vehicleid][vRenter]][pGPSType] = GPS_Type_None;
				}

				if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
				{
					DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
					vInfo[vehicleid][vText] = Text3D:0;
				}

				for(new i = 0; i < MaxAttachedObjOnVehicle; i++) RemoveVehicleAttachObj(vehicleid, i);
			}
			vInfo[vehicleid][vItemInVehicle] = 0;
			vInfo[vehicleid][vRenter] = -1;
		}
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeFraction)
	{
		if(vInfo[vehicleid][vOwner] != Fraction_Taxi) SaveCarFloat(vehicleid, "Fuel", vInfo[vehicleid][vFuel]);

		if(vInfo[vehicleid][vOwner] == Fraction_StreetRacers || vInfo[vehicleid][vOwner] == Fraction_Bikers)
        {
            ChangeVehiclePaintjob(vehicleid, vInfo[vehicleid][vPaintJob]);
            SetStandartVehicleTuning(vehicleid);
        }

		if(vInfo[vehicleid][vRenter] != -1)
		{
			if(IsPlayerConnected(vInfo[vehicleid][vRenter]))
			{
				if(vInfo[vehicleid][vOwner] == Fraction_Hospital && GetPVarInt(vInfo[vehicleid][vRenter], "StartBloodVehicle") == vehicleid) DeletePVar(vInfo[vehicleid][vRenter], "StartBloodVehicle");
				else if(vInfo[vehicleid][vOwner] == Fraction_Taxi && GetPVarInt(vInfo[vehicleid][vRenter], "TaxiVehicle") == vehicleid)
				{
					DeletePVar(vInfo[vehicleid][vRenter], "TaxiVehicle");
					DeletePVar(vInfo[vehicleid][vRenter], "TaxiFare");
				}
			}
			vInfo[vehicleid][vRenter] = -1;
		}

		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}

		if(vInfo[vehicleid][vPickup] && IsValidDynamicPickup(vInfo[vehicleid][vPickup]))
		{
			DestroyDynamicPickup(vInfo[vehicleid][vPickup]);
			vInfo[vehicleid][vPickup] = 0;
		}

		if(vInfo[vehicleid][vArea] && IsValidDynamicArea(vInfo[vehicleid][vArea]))
		{
			DestroyDynamicArea(vInfo[vehicleid][vArea]);
			vInfo[vehicleid][vArea] = 0;
		}

		if(vInfo[vehicleid][vNeon][0] && IsValidDynamicObject(vInfo[vehicleid][vNeon][0])) DestroyDynamicObject(vInfo[vehicleid][vNeon][0]);
		vInfo[vehicleid][vNeon][0] = 0;
		if(vInfo[vehicleid][vNeon][1] && IsValidDynamicObject(vInfo[vehicleid][vNeon][1])) DestroyDynamicObject(vInfo[vehicleid][vNeon][1]);
		vInfo[vehicleid][vNeon][1] = 0;

		vInfo[vehicleid][vItemInVehicle] = 0;
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeTrailer)
	{
		if(vInfo[vehicleid][vRenter] != -1 && IsPlayerConnected(vInfo[vehicleid][vRenter])) RemoveTrailer(vInfo[vehicleid][vRenter], true);
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(GetPVarInt(playerid, "EditSprunkMachine") && (response == EDIT_RESPONSE_CANCEL || response == EDIT_RESPONSE_FINAL))
	{
		new query[300];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `vending` (`X`, `Y`, `Z`, `RX`, `RY`, `RZ`, `Int`, `VW`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')", x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		mysql_tquery(DB, query);
		DestroyDynamicObject(objectid);

		for(new i = 0; i < sizeof(Vending); i++)
		{
			if(Vending[i][VendID]) ClearVending(i);
		}
		mysql_tquery(DB, "SELECT * FROM `vending`", "LoadVending");
		DeletePVar(playerid, "EditSprunkMachine");
		SendClientMessage(playerid, -1, Color_Yellow"Редактирование окончено");
	}
	else if(GetPVarInt(playerid, "EditCasinoTable") && (response == EDIT_RESPONSE_CANCEL || response == EDIT_RESPONSE_FINAL))
	{
		new query[400];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `casino_table` (`X`, `Y`, `Z`, `RX`, `RY`, `RZ`, `Int`, `VW`, `Type`, `MaxPlayer`, `Bet`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')", x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), GetPVarInt(playerid, "EditCasinoTableType"), GetPVarInt(playerid, "EditCasinoTablePlayers"), GetPVarInt(playerid, "EditCasinoTableBet"));
		mysql_tquery(DB, query);
		DestroyDynamicObject(objectid);

		for(new i = 0; i < sizeof(CasinoTable); i++)
		{
			if(CasinoTable[i][CasTabID])
			{
				if(GetPlayerTableCount(i)) EndTableGame(i);
				ClearCasinoTable(i);
			}
		}
		mysql_tquery(DB, "SELECT * FROM `casino_table`", "LoadTable");
		DeletePVar(playerid, "EditCasinoTable");
		DeletePVar(playerid, "EditCasinoTableType");
    	DeletePVar(playerid, "EditCasinoTablePlayers");
    	DeletePVar(playerid, "EditCasinoTableBet");
		SendClientMessage(playerid, -1, Color_Yellow"Редактирование окончено");
	}
	else if(GetPVarInt(playerid, "EditTent") && (response == EDIT_RESPONSE_CANCEL || response == EDIT_RESPONSE_FINAL))
	{
		new query[400];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `tent` (`X`, `Y`, `Z`, `RX`, `RY`, `RZ`, `Int`, `VW`, `Type`, `Slot`, `Price`) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')", x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), GetPVarInt(playerid, "EditTentType"), GetPVarInt(playerid, "EditTentSlot"), GetPVarInt(playerid, "EditTentPrice"));
		mysql_tquery(DB, query);
		DestroyDynamicObject(objectid);

		for(new i = 0; i < sizeof(Tent); i++)
		{
			if(Tent[i][TentID])
			{
				if(Tent[i][TentPlayer] != -1) UnrentTent(Tent[i][TentPlayer]);
				ClearTent(i);
			}
		}
		mysql_tquery(DB, "SELECT * FROM `tent`", "LoadTent");
		DeletePVar(playerid, "EditTent");
	    DeletePVar(playerid, "EditTentType");
	    DeletePVar(playerid, "EditTentSlot");
	    DeletePVar(playerid, "EditTentPrice");
	    SendClientMessage(playerid, -1, Color_Yellow"Редактирование окончено");
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(pInfo[playerid][pMute])
	{
		new str[145];
		new time = pInfo[playerid][pMute]/60;

		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете писать в чат так как вам дали мут.");
		if(time >= 5) format(str, sizeof(str), Color_Grey"До конца мута осталось "Main_Color"%d "Color_Grey"минут", time);
		else if(time < 5 && time > 1) format(str, sizeof(str), Color_Grey"До конца мута осталось "Main_Color"%d "Color_Grey"минуты", time);
		else if(time == 1) format(str, sizeof(str), Color_Grey"До конца мута осталось "Main_Color"%d "Color_Grey"минута", time);
		else format(str, sizeof(str), Color_Grey"До конца мута осталось "Main_Color"меньше "Color_Grey"минуты");
		SendClientMessage(playerid, -1, str);
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_NONE && !GetPVarInt(playerid, "DisableTextAnim"))
	{
		ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1, true);
		SetTimerEx("ClearAnim", 1400, false, "d", playerid);
	}

	if(pInfo[playerid][pMembers] == Fraction_None) ProxDetector(playerid, MESSAGE_DIST, PlayerColors[pInfo[playerid][pClist]], text);
	else ProxDetector(playerid, MESSAGE_DIST, FractionColor[pInfo[playerid][pMembers]], text);

	if(IsPlayerInDynamicArea(playerid, Areas[LiveArea]) && LiveStatus)
	{
		new str[200];
		format(str, sizeof(str), Color_Live"Прямой эфир с %s: %s", pInfo[playerid][pName], text);
		SendAllMessage(str);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]) && vInfo[vehicleid][vType] == VehicleTypeFraction && vInfo[vehicleid][vOwner] == Fraction_SanNews)
		{
			new str[200];
			format(str, sizeof(str), Color_Live"Прямой эфир с %s: %s", pInfo[playerid][pName], text);
			SendAllMessage(str);
		}
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
  if (!pInfo[playerid][pAuth]) return 0;
  return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
  if (result == -1)
  {
    SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неизвестная команда");
    return 0;
  }

  return 1;
}

forward OnCheatDetected(playerid, const ip_address[], type, code);
public OnCheatDetected(playerid, const ip_address[], type, code)
{
	if(!type)
	{
		if(AntiCheatCode[code] == 1)
		{
			new str[200];
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), Color_Yellow"%s[%d] (RegIP: %s | IP: %s) Срабатывание античита по коду %d(%s)", pInfo[playerid][pName], playerid, pInfo[playerid][pRegIp], str, code, AntiCheatNaming[code]);
			SendAdminMessage(str);
			AddPlayerOnCheaterPanel(playerid);
		}
		else if(AntiCheatCode[code] == 2)
		{
			new str[200];
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), Color_Yellow"Античит автоматически кикнул %s[%d] (RegIP: %s | IP: %s) по коду %d(%s)", pInfo[playerid][pName], playerid, pInfo[playerid][pRegIp], str, code, AntiCheatNaming[code]);
			SendAdminMessage(str);

			format(str, sizeof(str), Color_Red"Античит сервера"Color_White" кикнул вас, с кодом: %d\n\n\
			"Color_Yellow"Если вы считаете это ложным срабатыванием обратитесь в тех.раздел на форуме ogrm-project.ru", code);
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Вас кикнули с сервера", str, Color_White"Закрыть", "");

			AntiCheatKickWithDesync(playerid, code);
		}
	}
	else
	{
		new str[200];
		format(str, sizeof(str), Color_Yellow"Срабатывание античита на IP %s по коду %d(%s)", ip_address, code, AntiCheatNaming[code]);
		SendAdminMessage(str);
	}
	return 1;
}

stock ShowAntiCheatSetting(playerid)
{
	new str[1500] = Color_White"Код:Имя\t"Color_White"Статус\n";
	new List = GetPVarInt(playerid, "AC_List");
	for(new i = (10*List)-10; i < 10*List; i++)
	{
		if(i >= sizeof(AntiCheatCode)) break;
		new SubStr[40];
		if(!AntiCheatCode[i]) strcat(SubStr, Color_Red"Выключен");
		else if(AntiCheatCode[i] == 1) strcat(SubStr, Color_Green"Режим предупреждения администрации");
		else if(AntiCheatCode[i] == 2) strcat(SubStr, Color_Yellow"Режим автоматического кика");
		format(str, sizeof(str), "%s"Color_White"Code %d: %s\t%s\n", str, i, AntiCheatNaming[i], SubStr);
	}
	format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);
	ShowDialog(playerid, D_AC_Settings, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"Админ панель || "Color_White"Настройки античита", str, Color_White"Далее", Color_White"Отмена");
	return 1;
}

stock ShowAntiCheatSettingNOP(playerid)
{
	new str[1024] = Color_White"Код:Имя\t"Color_White"Статус\n";
	for(new i = 0; i < sizeof(AntiCheatCodeNOP); i++)
	{
		new SubStr[40];
		if(!AntiCheatCode[i]) strcat(SubStr, Color_Red"Выключен");
		else strcat(SubStr, Color_Green"Включен");
		format(str, sizeof(str), "%s"Color_White"Code %d: %s\t%s\n", str, i, AntiCheatNamingNOP[i], SubStr);
	}
	format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);
	ShowDialog(playerid, D_AC_Settings_NOP, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"Админ панель || "Color_White"Настройки античита(NOP)", str, Color_White"Далее", Color_White"Отмена");
	return 1;
}

forward LoadAntiCheatCode();
public LoadAntiCheatCode()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("\nНачалась загрузка настроек античита....");
		for(new i = 0; i < row; i++)
		{
			cache_get_value_name_int(i, "Status", AntiCheatCode[i]);
			if(AntiCheatCode[i]) EnableAntiCheat(i, 1);
			else EnableAntiCheat(i, 0);
		}
		printf("Загружено %d настроек за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock SaveAntiCheatCode(id, Value)
{
	if(id < 0 || id >= sizeof(AntiCheatCode)) return 1;
	new query[100];

	mysql_format(DB, query, sizeof(query), "UPDATE `anticheat_codes` SET `Status` = '%d' WHERE `ID` = '%d'", Value, id);
	mysql_tquery(DB, query);
	return 1;
}

forward LoadAntiCheatCodeNOP();
public LoadAntiCheatCodeNOP()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка настроек античита(NOP)....");
		for(new i = 0; i < row; i++)
		{
			cache_get_value_name_int(i, "Status", AntiCheatCodeNOP[i]);
			EnableAntiNOP(i, AntiCheatCodeNOP[i]);
		}
		printf("Загружено %d настроек за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock SaveAntiCheatCodeNOP(id, Value)
{
	if(id < 0 || id >= sizeof(AntiCheatCodeNOP)) return 1;
	new query[100];

	mysql_format(DB, query, sizeof(query), "UPDATE `anticheat_codes_nop` SET `Status` = '%d' WHERE `ID` = '%d'", Value, id);
	mysql_tquery(DB, query);
	return 1;
}

forward LoadServerInfo();
public LoadServerInfo()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		cache_get_value_name_int(0, "MaterialShipmentCD", MaterialShipmentCD);

		printf("Настройки сервера загружены за %dмс.\n", GetTickCount()-time);
	}
	return 1;
}

forward LoadBotSettings();
public LoadBotSettings()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		new str[150];
		cache_get_value_name(0, "Time", str);
		if(strlen(str)) sscanf(str, "p<,>a<i>[24]", BotTime);

		cache_get_value_name_bool(0, "Status", BotStatus);

		printf("Настройки ботов загружены за %dмс.\n", GetTickCount()-time);
	}
	return 1;
}

native PB_RegisterBot(name[]);

forward ConnectBots();
public ConnectBots()
{
	new row = cache_num_rows();
	if(row)
	{
		if(BotCount >= row) return 1;
		for(new i = 0; i < row; i++)
		{
			new bool:NickBusy = false;
			new Name[MAX_PLAYER_NAME+1];
			cache_get_value_name(i, "Name", Name);
			foreach(new j: Player)
			{
				if(!strcmp(pInfo[j][pName], Name))
				{
					NickBusy = true;
					break;
				}
			}

			if(NickBusy) continue;
			else
			{
				PB_RegisterBot(Name);
				ConnectNPC(Name, "pawnbots");
				break;
			}

		}
	}
	return 1;
}

forward LoadMapIcon();
public LoadMapIcon()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	new query[200];
	if(row)
	{
		print("Началась загрузка иконок....");
		for(new i = 0; i < row; i++)
		{
			ClearMapIcon(i);
			cache_get_value_name_int(i, "ID", Icons[i][IconID]);
			if(Icons[i][IconID] != i+1)
			{
				query[0] = EOS;
				mysql_format(DB, query, sizeof(query), "UPDATE `mapicon` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, Icons[i][IconID]);
				mysql_tquery(DB, query);
				Icons[i][IconID] = i+1;
			}
			cache_get_value_name_int(i, "IconModel", Icons[i][IconModel]);
			cache_get_value_name_int(i, "IconColor", Icons[i][IconColor]);
			cache_get_value_name_int(i, "VW", Icons[i][IconVW]);
			cache_get_value_name_int(i, "Int", Icons[i][IconInt]);

			cache_get_value_name_float(i, "X", Icons[i][IconX]);
			cache_get_value_name_float(i, "Y", Icons[i][IconY]);
			cache_get_value_name_float(i, "Z", Icons[i][IconZ]);

			cache_get_value_name(i, "Comment", Icons[i][IconComment]);

			Icons[i][IconStreamerID] = CreateDynamicMapIcon(Icons[i][IconX], Icons[i][IconY], Icons[i][IconZ], Icons[i][IconModel], Icons[i][IconColor], Icons[i][IconVW], Icons[i][IconInt]);
		}
		printf("Загружено %d иконок за %dмс.\n", row, GetTickCount()-time);
	}
	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `mapicon` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

forward ReloadMapIcon();
public ReloadMapIcon()
{
	for(new i = 0; i < sizeof(Icons); i++) ClearMapIcon(i);
	mysql_tquery(DB, "SELECT * FROM `mapicon`", "LoadMapIcon");
	return 1;
}

stock GetIconCount()
{
	new count = 0;
	for(new i = 0; i < sizeof(Icons); i++)
	{
		if(Icons[i][IconID])  count++;
	}
	return count;
}

stock ShowMapIconList(playerid)
{
	if(!GetIconCount()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Список иконок пуст");

	new str[1500] = Color_White"Номер\t"Color_White"Комментарий\n";
	new List = GetPVarInt(playerid, "Icons_List");
	for(new i = (10*List)-10; i < 10*List; i++)
	{
		if(i >= sizeof(Icons)) break;
		if(Icons[i][IconID]) format(str, sizeof(str), "%s%d\t%s\n", str, Icons[i][IconID], Icons[i][IconComment]);
	}

	if(List * 10 <  GetIconCount()) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);

	format(str, sizeof(str), Color_White"%s", str);
	ShowDialog(playerid, D_Icon_Settings, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"Админ панель || "Color_White"Настройки иконок на карте", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

stock ShowBotTime(playerid)
{
	new str[600];

	for(new i = 0; i < sizeof(BotTime); i++)
	{
		format(str, sizeof(str), "%s%02d:00 - %d человек\n", str, i, BotTime[i]);
	}
	format(str, sizeof(str), Color_White"%s", str);

	ShowDialog(playerid, D_Bots_Time, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Почасовой онлайн", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

forward RemoveBotName(playerid, indx);
public RemoveBotName(playerid, indx)
{
	new row = cache_num_rows();
	if(!row || indx >= row)
	{
		mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ошибка, ник не найден");
	}

	new Name[MAX_PLAYER_NAME+1];
	cache_get_value_name(indx, "Name", Name);

	SetPVarString(playerid, "BotName", Name);

	new str[150];
	format(str, sizeof(str), Color_White"Вы хотите удалить ник "Main_Color"%s", Name);
	ShowDialog(playerid, D_Bots_Name_Remove, DIALOG_STYLE_MSGBOX, Main_Color"Админ панель || "Color_White"Ники ботов", str, Color_White"Да", Color_White"Нет");
	return 1;
}

forward AddNewBotName(playerid, const Name[]);
public AddNewBotName(playerid, const Name[])
{
	new row = cache_num_rows();
	if(row) return ShowDialog(playerid, D_Bots_Name_Add, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Ники ботов", Color_White"Введите ник\nВ дальнейшем при подключении боты будут случайныи образом выбирать ники из списка\n"Color_Red"Такой ник для ботов уже существует", "Далее", "Назад");
	else
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `bot_name` (`Name`) VALUES ('%s')", Name);
		mysql_tquery(DB, query, "", "");

		format(query, sizeof(query), Color_White"Ник %s добавлен в список ников для ботов", Name);
		SendClientMessage(playerid, -1, query);

		mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
	}
	return 1;
}

forward ShowBotNameList(playerid);
public ShowBotNameList(playerid)
{
	new row = cache_num_rows();

	new str[1500];
	new List = GetPVarInt(playerid, "Bot_Name_List");
	format(str, sizeof(str), "%s"Color_White"Добавить новый ник\n", str);
	for(new i = (10*List)-10; i < 10*List; i++)
	{
		if(i >= row) break;

		new Name[MAX_PLAYER_NAME+1];
		cache_get_value_name(i, "Name", Name);

		format(str, sizeof(str), "%s%s\n", str, Name);
	}

	if(List * 10 <  row) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);

	format(str, sizeof(str), Color_White"%s", str);

	SetPVarInt(playerid, "Bot_Name_Count", row);

	ShowDialog(playerid, D_Bots_Name, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Ники ботов", str, Color_White"Далее", Color_White"Закрыть");

	return 1;
}

forward ShowLogList(playerid);
public ShowLogList(playerid)
{
	new row = cache_num_rows();
	if(!row) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Список логов в этом разделе пуст");

	new str[1500];
	new List = GetPVarInt(playerid, "Log_List");
	for(new i = (10*List)-10; i < 10*List; i++)
	{
		if(i >= row) break;

		new Name[MAX_PLAYER_NAME+1];
		cache_get_value_name(i, "Name", Name);
		new Info[66];
		cache_get_value_name(i, "Info", Info);
		new time;
		cache_get_value_name_int(i, "Time", time);

		new SubStr[100];
		format(SubStr, sizeof(SubStr), "%d. %s %s...", i+1, Name, Info);

		format(str, sizeof(str), "%s%s\n", str, SubStr);
	}

	if(List * 10 <  row) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);

	format(str, sizeof(str), Color_White"%s", str);

	SetPVarInt(playerid, "Log_Count", row);

	SendClientMessage(playerid, -1, Color_Yellow"Вы можете нажать на любой лог для отображения всей информации");
	ShowDialog(playerid, D_Log_Info, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Логи", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

forward ShowLogInfo(playerid, indx);
public ShowLogInfo(playerid, indx)
{
	new row = cache_num_rows();
	if(!row || indx >= row)
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
		mysql_tquery(DB, query, "ShowLogList", "d", playerid);
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ошибка, лог не найден");
	}

	new str[400];

	new Name[MAX_PLAYER_NAME+1];
	cache_get_value_name(indx, "Name", Name);
	new Info[301];
	cache_get_value_name(indx, "Info", Info);
	new time;
	cache_get_value_name_int(indx, "Time", time);

	format(str, sizeof(str), Main_Color"%s "Color_White"%s Время: "Main_Color"%s", Name, Info, date(time, 3, "%dd.%mm.%yyyy %hh:%ii"));
	ShowDialog(playerid, D_Log_Info_Row, DIALOG_STYLE_MSGBOX, Main_Color"Админ панель || "Color_White"Логи", str, Color_White"Назад", Color_White"Закрыть");
	return 1;
}

forward LoadGPSTitle();
public LoadGPSTitle()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	new query[200];
	if(row)
	{
		print("Началась загрузка оглавления GPS....");
		for(new i = 0; i < row; i++)
		{
			new indx = 0;
			cache_get_value_name_int(i, "ID", indx);
			if(indx != i+1)
			{
				query[0] = EOS;
				mysql_format(DB, query, sizeof(query), "UPDATE `gps_title` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, indx);
				mysql_tquery(DB, query);
				indx = i+1;
			}

			GPSTitle[indx][GpsTitleID] = indx;

			cache_get_value_name(i, "Name", GPSTitle[indx][GpsTitleName]);
		}

		printf("Загружено %d оглавлений GPS за %dмс.\n", row, GetTickCount()-time);
	}
	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `gps_title` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

stock AddGpsTitle(playerid, const Name[])
{
	new bool:Finded = false;
	for(new i = 1; i < sizeof(GPSTitle); i++)
	{
		if(!GPSTitle[i][GpsTitleID])
		{
			Finded = true;
			break;
		}
	}
	if(!Finded)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество заголовков для GPS.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}

	new query[200];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `gps_title` (`Name`) VALUES ('%e')", Name);
	mysql_tquery(DB, query, "GetGpsTitleID", "ds", playerid, Name);
	return 1;
}

forward GetGpsTitleID(playerid, const Name[]);
public GetGpsTitleID(playerid, const Name[])
{
	new indx = cache_insert_id();
	GPSTitle[indx][GpsTitleID] = indx;
	GPSTitle[indx][GpsTitleName][0] = EOS;
	strcat(GPSTitle[indx][GpsTitleName], Name);

	new str[150];
	format(str, sizeof(str), Color_White"Заголовок "Main_Color"%s "Color_White"успешно создан", GPSTitle[indx][GpsTitleName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

stock RemoveGPSTitle(playerid, indx)
{
	new query[200];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `gps_title` WHERE `ID` = '%d'", GPSTitle[indx][GpsTitleID]);
	mysql_tquery(DB, query, "ReloadGPS");
	SendClientMessage(playerid, -1, Color_White"Заголовок удален, GPS перезагружается...");
	return 1;
}

stock GetGpsTitleCount()
{
	new count = 0;
	for(new i = 1; i < sizeof(GPSTitle); i++)
	{
		if(GPSTitle[i][GpsTitleID]) count++;
	}
	return count;
}

forward LoadGPS();
public LoadGPS()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	new query[200];
	if(row)
	{
		print("Началась загрузка GPS меток....");
		new CountInTitle[MAX_GPS_TITLE] = {0, ...};
		for(new i = 0; i < row; i++)
		{
			new TitleIndx = 0;
			cache_get_value_name_int(i, "TitleID", TitleIndx);

			cache_get_value_name_int(i, "ID", GPS[TitleIndx][CountInTitle[TitleIndx]][GpsID]);
			if(GPS[TitleIndx][CountInTitle[TitleIndx]][GpsID] != i+1)
			{
				query[0] = EOS;
				mysql_format(DB, query, sizeof(query), "UPDATE `gps` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, GPS[TitleIndx][CountInTitle[TitleIndx]][GpsID]);
				mysql_tquery(DB, query);
				GPS[TitleIndx][CountInTitle[TitleIndx]][GpsID] = i+1;
			}

			cache_get_value_name(i, "Name", GPS[TitleIndx][CountInTitle[TitleIndx]][GpsName]);

			cache_get_value_name_float(i, "X", GPS[TitleIndx][CountInTitle[TitleIndx]][GpsX]);
			cache_get_value_name_float(i, "Y", GPS[TitleIndx][CountInTitle[TitleIndx]][GpsY]);
			cache_get_value_name_float(i, "Z", GPS[TitleIndx][CountInTitle[TitleIndx]][GpsZ]);
			CountInTitle[TitleIndx]++;
		}

		printf("Загружено %d GPS меток за %dмс.\n", row, GetTickCount()-time);
	}
	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `gps` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

stock AddGps(playerid, const Name[])
{
	new indx = 0;
	new TitleIndx = GetPVarInt(playerid, "GPS_Add_To_Title");
	DeletePVar(playerid, "GPS_Add_To_Title");
	for(new i = 0; i < sizeof(GPS[]); i++)
	{
		if(!GPS[TitleIndx][i][GpsID])
		{
			indx = i+1;
			break;
		}
	}
	if(!indx)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество пунктов в этом заголовке GPS.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}
	else indx--;

	new query[300], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	mysql_format(DB, query, sizeof(query), "INSERT INTO `gps` (`Name`, `TitleID`, `X`, `Y`, `Z`) VALUES ('%e', '%d', '%f', '%f', '%f')", Name, TitleIndx, X, Y, Z);
	mysql_tquery(DB, query, "GetGpsID", "dsddfff", playerid, Name, TitleIndx, indx, X, Y, Z);
	return 1;
}

forward GetGpsID(playerid, const Name[], TitleID, indx, Float:X, Float:Y, Float:Z);
public GetGpsID(playerid, const Name[], TitleID, indx, Float:X, Float:Y, Float:Z)
{
	GPS[TitleID][indx][GpsID] = cache_insert_id();
	GPS[TitleID][indx][GpsName][0] = EOS;
	strcat(GPS[TitleID][indx][GpsName], Name);
	GPS[TitleID][indx][GpsX] = X;
	GPS[TitleID][indx][GpsY] = Y;
	GPS[TitleID][indx][GpsZ] = Z;

	new str[150];
	format(str, sizeof(str), Color_White"Пункт "Main_Color"%s "Color_White"успешно создан под заголовком "Main_Color"%s", GPS[TitleID][indx][GpsName], GPSTitle[TitleID][GpsTitleName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

stock RemoveGPS(playerid, indx, TitleID)
{
	new query[200];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", GPS[TitleID][indx][GpsID]);
	mysql_tquery(DB, query, "ReloadGPS");
	SendClientMessage(playerid, -1, Color_White"Пункт удален, GPS перезагружается...");
	return 1;
}

forward ReloadGPS();
public ReloadGPS()
{
	print("Запущена перезагрузка GPS меток....");
	for(new i = 0; i < sizeof(GPS); i++)
	{
		for(new j = 0; j < sizeof(GPS[]); j++)
		{
			GPS[i][j][GpsID] = 0;
			GPS[i][j][GpsName][0] = EOS;
			GPS[i][j][GpsX] = 0.0;
			GPS[i][j][GpsY] = 0.0;
			GPS[i][j][GpsZ] = 0.0;
		}
	}

	for(new i = 0; i < sizeof(GPSTitle); i++)
	{
		GPSTitle[i][GpsTitleID] = 0;
		GPSTitle[i][GpsTitleName][0] = EOS;
	}

	mysql_tquery(DB, "SELECT * FROM `gps_title`", "LoadGPSTitle");
	mysql_tquery(DB, "SELECT * FROM `gps`", "LoadGPS");
}

stock GetGpsCount(TitleID)
{
	new count = 0;
	for(new i = 0; i < sizeof(GPS[]); i++)
	{
		if(GPS[TitleID][i][GpsID]) count++;
	}
	return count;
}

forward LoadBusiness();
public LoadBusiness()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка бизнесов....");
		for(new i = 0; i < row; i++)
		{
			new indx;
			cache_get_value_name_int(i, "ID", indx);
			bInfo[indx][bID] = indx;
			new bool:CheckNull;
			cache_is_value_name_null(i, "OwnerID", CheckNull);
			if(CheckNull) bInfo[indx][bOwnerID] = 0;
			else cache_get_value_name_int(i, "OwnerID", bInfo[indx][bOwnerID]);

			cache_get_value_name_int(i, "Price", bInfo[indx][bPrice]);
			cache_get_value_name_int(i, "NeedLevel", bInfo[indx][bNeedLevel]);
			cache_get_value_name_int(i, "Type", bInfo[indx][bType]);
			cache_get_value_name_int(i, "Tax", bInfo[indx][bTax]);
			cache_get_value_name_int(i, "Money", bInfo[indx][bMoney]);

			cache_get_value_name_bool(i, "IsDonate", bInfo[indx][bIsDonate]);

			cache_get_value_name_float(i, "X", bInfo[indx][bX]);
			cache_get_value_name_float(i, "Y", bInfo[indx][bY]);
			cache_get_value_name_float(i, "Z", bInfo[indx][bZ]);
			cache_get_value_name_float(i, "A", bInfo[indx][bA]);
			cache_get_value_name_float(i, "CarX", bInfo[indx][bCarX]);
			cache_get_value_name_float(i, "CarY", bInfo[indx][bCarY]);
			cache_get_value_name_float(i, "CarZ", bInfo[indx][bCarZ]);
			cache_get_value_name_float(i, "CarA", bInfo[indx][bCarA]);

			UpdateBusiness(bInfo[indx][bID]);
		}
		printf("Загружено %d бизнесов за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock UpdateBusiness(BusinessID)
{
	if(bInfo[BusinessID][bOwnerID])
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `ID` = '%d'", bInfo[BusinessID][bOwnerID]);
		mysql_tquery(DB, query, "GetBusinesOwnerName", "d", BusinessID);
	}
	else
	{
		new str[300];
		if(bInfo[BusinessID][bPickup] && IsValidDynamicPickup(bInfo[BusinessID][bPickup])) DestroyDynamicPickup(bInfo[BusinessID][bPickup]);
		bInfo[BusinessID][bPickup] = 0;

		if(bInfo[BusinessID][bText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bText]);
		bInfo[BusinessID][bText] = Text3D:0;

		if(bInfo[BusinessID][bMapIcon] && IsValidDynamicMapIcon(bInfo[BusinessID][bMapIcon])) DestroyDynamicMapIcon(bInfo[BusinessID][bMapIcon]);
		bInfo[BusinessID][bMapIcon] = 0;

		if(bInfo[BusinessID][bArea] && IsValidDynamicArea(bInfo[BusinessID][bArea])) DestroyDynamicArea(bInfo[BusinessID][bArea]);
		bInfo[BusinessID][bArea] = 0;

		if(bInfo[BusinessID][bExitPickup] && IsValidDynamicPickup(bInfo[BusinessID][bExitPickup])) DestroyDynamicPickup(bInfo[BusinessID][bExitPickup]);
		bInfo[BusinessID][bExitPickup] = 0;

		if(bInfo[BusinessID][bExitText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bExitText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bExitText]);
		bInfo[BusinessID][bExitText] = Text3D:0;

		if(bInfo[BusinessID][bExitArea] && IsValidDynamicArea(bInfo[BusinessID][bExitArea])) DestroyDynamicArea(bInfo[BusinessID][bExitArea]);
		bInfo[BusinessID][bExitArea] = 0;

		if(bInfo[BusinessID][bCarArea] && IsValidDynamicArea(bInfo[BusinessID][bCarArea])) DestroyDynamicArea(bInfo[BusinessID][bCarArea]);
		bInfo[BusinessID][bCarArea] = 0;

		if(bInfo[BusinessID][bCarText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bCarText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bCarText]);
		bInfo[BusinessID][bCarText] = Text3D:0;

		if(bInfo[BusinessID][bCarPickup] && IsValidDynamicPickup(bInfo[BusinessID][bCarPickup])) DestroyDynamicPickup(bInfo[BusinessID][bCarPickup]);
		bInfo[BusinessID][bCarPickup] = 0;

		for(new i = 0; i < 4; i++)
		{
			if(bInfo[BusinessID][bSellArea][i] && IsValidDynamicArea(bInfo[BusinessID][bSellArea][i])) DestroyDynamicArea(bInfo[BusinessID][bSellArea][i]);
			bInfo[BusinessID][bSellArea][i] = 0;

			if(bInfo[BusinessID][bSellPickup][i] && IsValidDynamicPickup(bInfo[BusinessID][bSellPickup][i])) DestroyDynamicPickup(bInfo[BusinessID][bSellPickup][i]);
			bInfo[BusinessID][bSellPickup][i] = 0;

			if(bInfo[BusinessID][bActor][i] && IsValidDynamicActor(bInfo[BusinessID][bActor][i])) DestroyDynamicActor(bInfo[BusinessID][bActor][i]);
			bInfo[BusinessID][bActor][i] = 0;
		}

		if(bInfo[BusinessID][bCarX] && bInfo[BusinessID][bCarY] && bInfo[BusinessID][bCarZ])
		{
			new model = 0;
			new Float:Z = 0.0;
			if(bInfo[BusinessID][bType] == BusinessKFC) model = 1582;
			else if(bInfo[BusinessID][bType] == BusinessGasStation)
			{
				model = 1650;
				Z = 0.5;
			}
			if(model) bInfo[BusinessID][bCarPickup] = CreateDynamicPickup(model, 1, bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ]+Z, 0, 0);
			bInfo[BusinessID][bCarText] = CreateDynamic3DTextLabel(Main_Color"Пункт обслуживания транспорта\nПосигнальте чтобы воспользоваться услугами", -1, bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			bInfo[BusinessID][bCarArea] = CreateDynamicSphere(bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ], 5.0, 0, 0);
		}

		bInfo[BusinessID][bArea] = CreateDynamicSphere(bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 2.0, 0, 0);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bArea],  E_STREAMER_INDX, BusinessID);

		bInfo[BusinessID][bMapIcon] = CreateDynamicMapIcon(bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], BusinessType[bInfo[BusinessID][bType]][bMapIcon], 0, 0, 0);

		if(!BusinessType[bInfo[BusinessID][bType]][IsCompany])
		{
			format(str, sizeof(str), Main_Color"%s\n"Main_Color"Бизнес №"Color_White"%d", BusinessType[bInfo[BusinessID][bType]][bName], bInfo[BusinessID][bID]);
		}
		else
		{
			format(str, sizeof(str), Main_Color"%s\n\
			"Main_Color"Бизнес №"Color_White"%d\n\
			"Main_Color"Продается\n\
			"Main_Color"Цена"Color_White": "Color_Green"%d%s\n\
			"Main_Color"Требуемый уровень"Color_White": %d",
			BusinessType[bInfo[BusinessID][bType]][bName],
			bInfo[BusinessID][bID],
			bInfo[BusinessID][bPrice],
			(bInfo[BusinessID][bIsDonate]) ? (" донат рублей"):("$"),
			bInfo[BusinessID][bNeedLevel]);
		}

		if(BusinessType[bInfo[BusinessID][bType]][bInt])
		{
			bInfo[BusinessID][bPickup] = CreateDynamicPickup(1318, 1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 0, 0);
			strcat(str, "\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
			bInfo[BusinessID][bExitArea] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], 2.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
			bInfo[BusinessID][bExitPickup] = CreateDynamicPickup(1318, 1, BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
			bInfo[BusinessID][bExitText] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		}
		else bInfo[BusinessID][bPickup] = CreateDynamicPickup(1239, 1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 0, 0);

		bInfo[BusinessID][bText] = CreateDynamic3DTextLabel(str, -1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

		CreatePickAndActorBusiness(BusinessID);
	}
	return 1;
}

forward GetBusinesOwnerName(BusinessID);
public GetBusinesOwnerName(BusinessID)
{
	new row = cache_num_rows();
	if(row)
	{
		new str[400];
		cache_get_value_name(0, "Name", bInfo[BusinessID][bOwnerName]);

		if(bInfo[BusinessID][bPickup] && IsValidDynamicPickup(bInfo[BusinessID][bPickup])) DestroyDynamicPickup(bInfo[BusinessID][bPickup]);
		bInfo[BusinessID][bPickup] = 0;

		if(bInfo[BusinessID][bText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bText]);
		bInfo[BusinessID][bText] = Text3D:0;

		if(bInfo[BusinessID][bMapIcon] && IsValidDynamicMapIcon(bInfo[BusinessID][bMapIcon])) DestroyDynamicMapIcon(bInfo[BusinessID][bMapIcon]);
		bInfo[BusinessID][bMapIcon] = 0;

		if(bInfo[BusinessID][bArea] && IsValidDynamicArea(bInfo[BusinessID][bArea])) DestroyDynamicArea(bInfo[BusinessID][bArea]);
		bInfo[BusinessID][bArea] = 0;

		if(bInfo[BusinessID][bExitPickup] && IsValidDynamicPickup(bInfo[BusinessID][bExitPickup])) DestroyDynamicPickup(bInfo[BusinessID][bExitPickup]);
		bInfo[BusinessID][bExitPickup] = 0;

		if(bInfo[BusinessID][bExitText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bExitText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bExitText]);
		bInfo[BusinessID][bExitText] = Text3D:0;

		if(bInfo[BusinessID][bExitArea] && IsValidDynamicArea(bInfo[BusinessID][bExitArea])) DestroyDynamicArea(bInfo[BusinessID][bExitArea]);
		bInfo[BusinessID][bExitArea] = 0;

		if(bInfo[BusinessID][bCarArea] && IsValidDynamicArea(bInfo[BusinessID][bCarArea])) DestroyDynamicArea(bInfo[BusinessID][bCarArea]);
		bInfo[BusinessID][bCarArea] = 0;

		if(bInfo[BusinessID][bCarText] && IsValidDynamic3DTextLabel(bInfo[BusinessID][bCarText])) DestroyDynamic3DTextLabel(bInfo[BusinessID][bCarText]);
		bInfo[BusinessID][bCarText] = Text3D:0;

		if(bInfo[BusinessID][bCarPickup] && IsValidDynamicPickup(bInfo[BusinessID][bCarPickup])) DestroyDynamicPickup(bInfo[BusinessID][bCarPickup]);
		bInfo[BusinessID][bCarPickup] = 0;

		for(new i = 0; i < 4; i++)
		{
			if(bInfo[BusinessID][bSellArea][i] && IsValidDynamicArea(bInfo[BusinessID][bSellArea][i])) DestroyDynamicArea(bInfo[BusinessID][bSellArea][i]);
			bInfo[BusinessID][bSellArea][i] = 0;

			if(bInfo[BusinessID][bSellPickup][i] && IsValidDynamicPickup(bInfo[BusinessID][bSellPickup][i])) DestroyDynamicPickup(bInfo[BusinessID][bSellPickup][i]);
			bInfo[BusinessID][bSellPickup][i] = 0;

			if(bInfo[BusinessID][bActor][i] && IsValidDynamicActor(bInfo[BusinessID][bActor][i])) DestroyDynamicActor(bInfo[BusinessID][bActor][i]);
			bInfo[BusinessID][bActor][i] = 0;
		}

		if(bInfo[BusinessID][bCarX] && bInfo[BusinessID][bCarY] && bInfo[BusinessID][bCarZ])
		{
			new model = 0;
			new Float:Z = 0.0;
			if(bInfo[BusinessID][bType] == BusinessKFC) model = 1582;
			else if(bInfo[BusinessID][bType] == BusinessGasStation)
			{
				model = 1650;
				Z = 0.5;
			}
			if(model) bInfo[BusinessID][bCarPickup] = CreateDynamicPickup(model, 1, bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ]+Z, 0, 0);
			bInfo[BusinessID][bCarText] = CreateDynamic3DTextLabel(Main_Color"Пункт обслуживания транспорта\nПосигнальте чтобы воспользоваться услугами", -1, bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			bInfo[BusinessID][bCarArea] = CreateDynamicSphere(bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ], 5.0, 0, 0);
		}

		bInfo[BusinessID][bArea] = CreateDynamicSphere(bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 2.0, 0, 0);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bArea],  E_STREAMER_INDX, BusinessID);

		bInfo[BusinessID][bMapIcon] = CreateDynamicMapIcon(bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], BusinessType[bInfo[BusinessID][bType]][bMapIcon], 0, 0, 0);

		if(!BusinessType[bInfo[BusinessID][bType]][IsCompany])
		{
			format(str, sizeof(str), Main_Color"%s\n"Main_Color"Бизнес №"Color_White"%d", BusinessType[bInfo[BusinessID][bType]][bName], bInfo[BusinessID][bID]);
		}
		else
		{
			format(str, sizeof(str), Main_Color"%s\n\
			"Main_Color"Бизнес №"Color_White"%d\n\
			"Main_Color"Владелец"Color_White": %s",
			BusinessType[bInfo[BusinessID][bType]][bName],
			bInfo[BusinessID][bID],
			bInfo[BusinessID][bOwnerName]);
		}

		if(BusinessType[bInfo[BusinessID][bType]][bInt])
		{
			bInfo[BusinessID][bPickup] = CreateDynamicPickup(1318, 1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 0, 0);
			strcat(str, "\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
			bInfo[BusinessID][bExitArea] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], 2.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
			bInfo[BusinessID][bExitPickup] = CreateDynamicPickup(1318, 1, BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
			bInfo[BusinessID][bExitText] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, BusinessType[bInfo[BusinessID][bType]][bIntX], BusinessType[bInfo[BusinessID][bType]][bIntY], BusinessType[bInfo[BusinessID][bType]][bIntZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		}
		else bInfo[BusinessID][bPickup] = CreateDynamicPickup(1239, 1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 0, 0);

		bInfo[BusinessID][bText] = CreateDynamic3DTextLabel(str, -1, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

		CreatePickAndActorBusiness(BusinessID);
	}
	else
	{
		bInfo[BusinessID][bOwnerID] = 0;
		SaveBusinessNull(bInfo[BusinessID][bID], "OwnerID");
		UpdateBusiness(BusinessID);
	}
	return 1;
}

stock CreatePickAndActorBusiness(BusinessID)
{
	new pickupid = 0;
	if(bInfo[BusinessID][bType] == BusinessBankFillial) pickupid = 1212;
	else if(bInfo[BusinessID][bType] == BusinessCasinoBeginner || bInfo[BusinessID][bType] == BusinessCasinoCaligula || bInfo[BusinessID][bType] == BusinessCasinoFourDragons) pickupid = 1938;
	else pickupid = 1239;
	if(BusinessType[bInfo[BusinessID][bType]][bIntPickOne][0] && BusinessType[bInfo[BusinessID][bType]][bIntPickOne][1] && BusinessType[bInfo[BusinessID][bType]][bIntPickOne][2])
	{
		bInfo[BusinessID][bSellArea][0] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntPickOne][0], BusinessType[bInfo[BusinessID][bType]][bIntPickOne][1], BusinessType[bInfo[BusinessID][bType]][bIntPickOne][2], 1.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		bInfo[BusinessID][bSellPickup][0] = CreateDynamicPickup(pickupid, 1, BusinessType[bInfo[BusinessID][bType]][bIntPickOne][0], BusinessType[bInfo[BusinessID][bType]][bIntPickOne][1], BusinessType[bInfo[BusinessID][bType]][bIntPickOne][2], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][0],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][0],  E_STREAMER_INDX, BusinessID);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][0] && BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][1] && BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][2])
	{
		bInfo[BusinessID][bSellArea][1] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][0], BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][1], BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][2], 1.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		bInfo[BusinessID][bSellPickup][1] = CreateDynamicPickup(pickupid, 1, BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][0], BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][1], BusinessType[bInfo[BusinessID][bType]][bIntPickTwo][2], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][1],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][1],  E_STREAMER_INDX, BusinessID);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntPickThree][0] && BusinessType[bInfo[BusinessID][bType]][bIntPickThree][1] && BusinessType[bInfo[BusinessID][bType]][bIntPickThree][2])
	{
		bInfo[BusinessID][bSellArea][2] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntPickThree][0], BusinessType[bInfo[BusinessID][bType]][bIntPickThree][1], BusinessType[bInfo[BusinessID][bType]][bIntPickThree][2], 1.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		bInfo[BusinessID][bSellPickup][2] = CreateDynamicPickup(pickupid, 1, BusinessType[bInfo[BusinessID][bType]][bIntPickThree][0], BusinessType[bInfo[BusinessID][bType]][bIntPickThree][1], BusinessType[bInfo[BusinessID][bType]][bIntPickThree][2], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][2],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][2],  E_STREAMER_INDX, BusinessID);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntPickFour][0] && BusinessType[bInfo[BusinessID][bType]][bIntPickFour][1] && BusinessType[bInfo[BusinessID][bType]][bIntPickFour][2])
	{
		bInfo[BusinessID][bSellArea][3] = CreateDynamicSphere(BusinessType[bInfo[BusinessID][bType]][bIntPickFour][0], BusinessType[bInfo[BusinessID][bType]][bIntPickFour][1], BusinessType[bInfo[BusinessID][bType]][bIntPickFour][2], 1.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		bInfo[BusinessID][bSellPickup][3] = CreateDynamicPickup(pickupid, 1, BusinessType[bInfo[BusinessID][bType]][bIntPickFour][0], BusinessType[bInfo[BusinessID][bType]][bIntPickFour][1], BusinessType[bInfo[BusinessID][bType]][bIntPickFour][2], Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][3],  E_STREAMER_ARRAY_TYPE, Array_Type_Business);
		Streamer_SetIntData(STREAMER_TYPE_AREA, bInfo[BusinessID][bSellArea][3],  E_STREAMER_INDX, BusinessID);
	}

	new skinid = 0;
	if(bInfo[BusinessID][bType] == BusinessCasinoCaligula || bInfo[BusinessID][bType] == BusinessCasinoFourDragons
	|| bInfo[BusinessID][bType] == BusinessCasinoBeginner || bInfo[BusinessID][bType] == BusinessBankFillial
	|| bInfo[BusinessID][bType] == BusinessGeneralStore1 || bInfo[BusinessID][bType] == BusinessGeneralStore2
	|| bInfo[BusinessID][bType] == BusinessGeneralStore3) skinid = 171+random(2);
	else if(bInfo[BusinessID][bType] == BusinessKFC) skinid = 167;
	else if(bInfo[BusinessID][bType] == BusinessDressShop) skinid = 56;
	else if(bInfo[BusinessID][bType] == BusinessAmmo) skinid = 179;
	if(BusinessType[bInfo[BusinessID][bType]][bIntActorOne][0] && BusinessType[bInfo[BusinessID][bType]][bIntActorOne][1] && BusinessType[bInfo[BusinessID][bType]][bIntActorOne][2])
	{
		bInfo[BusinessID][bActor][0] = CreateDynamicActor(skinid, BusinessType[bInfo[BusinessID][bType]][bIntActorOne][0], BusinessType[bInfo[BusinessID][bType]][bIntActorOne][1], BusinessType[bInfo[BusinessID][bType]][bIntActorOne][2], BusinessType[bInfo[BusinessID][bType]][bIntActorOne][3], 1, 100.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][0] && BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][1] && BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][2])
	{
		bInfo[BusinessID][bActor][1] = CreateDynamicActor(skinid, BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][0], BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][1], BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][2], BusinessType[bInfo[BusinessID][bType]][bIntActorTwo][3], 1, 100.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntActorThree][0] && BusinessType[bInfo[BusinessID][bType]][bIntActorThree][1] && BusinessType[bInfo[BusinessID][bType]][bIntActorThree][2])
	{
		bInfo[BusinessID][bActor][2] = CreateDynamicActor(skinid, BusinessType[bInfo[BusinessID][bType]][bIntActorThree][0], BusinessType[bInfo[BusinessID][bType]][bIntActorThree][1], BusinessType[bInfo[BusinessID][bType]][bIntActorThree][2], BusinessType[bInfo[BusinessID][bType]][bIntActorThree][3], 1, 100.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
	}
	if(BusinessType[bInfo[BusinessID][bType]][bIntActorFour][0] && BusinessType[bInfo[BusinessID][bType]][bIntActorFour][1] && BusinessType[bInfo[BusinessID][bType]][bIntActorFour][2])
	{
		bInfo[BusinessID][bActor][3] = CreateDynamicActor(skinid, BusinessType[bInfo[BusinessID][bType]][bIntActorFour][0], BusinessType[bInfo[BusinessID][bType]][bIntActorFour][1], BusinessType[bInfo[BusinessID][bType]][bIntActorFour][2], BusinessType[bInfo[BusinessID][bType]][bIntActorFour][3], 1, 100.0, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
	}
}

forward LoadFractionInfo();
public LoadFractionInfo()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка информации о фракциях....");

		for(new i = 0; i < row; i++)
		{
			new indx = 0;
			cache_get_value_name_int(i, "ID", indx);
			new str[500];
			cache_get_value_name(i, "RankSkinsMale", str);
			if(strlen(str)) sscanf(str, "p<,>a<i>[*]", FractionMaxRank+1, FractionSkinMale[indx]);

			cache_get_value_name(i, "RankSkinsFemale", str);
			if(strlen(str)) sscanf(str, "p<,>a<i>[*]", FractionMaxRank+1, FractionSkinFemale[indx]);

			cache_get_value_name(i, "RankName", str);
			new RankNames[FractionMaxRank+1][51];
			if(strlen(str)) sscanf(str, "p<,>a<s[51]>[*]", FractionMaxRank+1, RankNames);
			for(new j = 0; j < FractionMaxRank+1; j++) strcat(FractionRankName[indx][j], RankNames[j]);

			cache_get_value_name_int(i, "FractionMoney", FractionWare[indx][FractionWareMoney]);
			cache_get_value_name_int(i, "FractionMaterials", FractionWare[indx][FractionWareMaterials]);
			cache_get_value_name_int(i, "FractionDrugs", FractionWare[indx][FractionWareDrugs]);

			switch(indx)
			{
				case Fraction_Police:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 237.9677+0.5, 82.5557, 1005.6564, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(237.9677+0.5, 82.5557, 1005.6564, 5.0, 1, 6);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Army:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 145.55510, 1874.69678+0.5, 2050.06812, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 1);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(145.55510, 1874.69678+0.5, 2050.06812, 5.0, 2, 1);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_FBI:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 320.24551, 309.12140+0.5, 999.86810, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 5);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(320.24551, 309.12140+0.5, 999.86810, 5.0, 3, 5);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Hospital:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -329.26630, 1027.82349+0.5, 1028.61646, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-329.26630, 1027.82349+0.5, 1028.61646, 5.0, 4, 5);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Taxi:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -2028.28430+0.5, -113.27220, 1035.70227, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 3);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-2028.28430+0.5, -113.27220, 1035.70227, 5.0, 5, 3);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_SanNews:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Банк организации нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 164.02400+0.5, -114.13020, 1077.28906, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 6);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(164.02400+0.5, -114.13020, 1077.28906, 5.0, 6, 6);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Vagos:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 304.3056,311.1736,1003.3047, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 4);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(304.3056,311.1736,1003.3047, 5.0, 1, 4);
					CreateDynamicPickup(1279, 1, 304.3056,311.1736,1003.3047, 1, 4);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Ballas:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -71.6223,1365.3029,1080.2185, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-71.6223,1365.3029,1080.2185, 5.0, 1, 6);
					CreateDynamicPickup(1279, 1, -71.6223,1365.3029,1080.2185, 1, 6);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Aztecas:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 417.4076,2541.3838,10.0000, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 10);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(417.4076,2541.3838,10.0000, 5.0, 1, 10);
					CreateDynamicPickup(1279, 1, 417.4076,2541.3838,10.0000, 1, 10);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Grove:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, 2530.8069,-1672.1730,1015.4986, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 1);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(2530.8069,-1672.1730,1015.4986, 5.0, 1, 1);
					CreateDynamicPickup(1279, 1, 2530.8069,-1672.1730,1015.4986, 1, 1);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Rifa:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -218.3894,1401.8822,27.7734, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 18);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-218.3894,1401.8822,27.7734, 5.0, 1, 18);
					CreateDynamicPickup(1279, 1, -218.3894,1401.8822,27.7734, 1, 18);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_StreetRacers:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -2678.9426,602.0468,375.1918, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 18);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-2678.9426,602.0468,375.1918, 5.0, 2, 18);
					CreateDynamicPickup(1279, 1, -2678.9426,602.0468,375.1918, 2, 18);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_Bikers:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -218.3894,1401.8822,27.7734, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 18);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-218.3894,1401.8822,27.7734, 5.0, 3, 18);
					CreateDynamicPickup(1279, 1, -218.3894,1401.8822,27.7734, 3, 18);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
				case Fraction_FarmOfTruth:
				{
					FractionWare[indx][FractionWareText] = CreateDynamic3DTextLabel(Color_White"Общак нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\n"Color_White"Чтобы открыть", -1, -218.3894,1401.8822,27.7734, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 18);
					FractionWare[indx][FractionWareArea] = CreateDynamicSphere(-218.3894,1401.8822,27.7734, 5.0, 4, 18);
					CreateDynamicPickup(1279, 1, -218.3894,1401.8822,27.7734, 4, 18);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_ARRAY_TYPE, Array_Type_FractionWare);
					Streamer_SetIntData(STREAMER_TYPE_AREA, FractionWare[indx][FractionWareArea],  E_STREAMER_INDX, indx);
				}
			}
		}

		printf("Загружено %d фракций за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock SaveFractionWare(FractionID)
{
	new query[300];
	mysql_format(DB, query, sizeof(query), "UPDATE `fraction_info` SET `FractionMoney` = '%d', `FractionMaterials` = '%d', `FractionDrugs` = '%d' WHERE `ID` = '%d'", FractionWare[FractionID][FractionWareMoney], FractionWare[FractionID][FractionWareMaterials], FractionWare[FractionID][FractionWareDrugs], FractionID);
	mysql_tquery(DB, query);
	return 1;
}

stock ClearGangWar(FractionID)
{
	GangWarBetType[FractionID] = Gang_Bet_Type_None;
	GangWarStatus[FractionID] = Gang_Status_None;
	GangWarOpponent[FractionID] = Fraction_None;
	GangWarTimer[FractionID] = 0;
	GangWarBet[FractionID] = 0;
	return 1;
}

stock StartGangWar(FractionID)
{
	GangWarStatus[FractionID] = Gang_Status_War;
	GangWarTimer[FractionID] = 600;

	switch(GangWarBetType[FractionID])
	{
		case Gang_Bet_Type_Money:
		{
			new str[200];
			format(str, sizeof(str), "Война с %s началась. Ставка: %d$. Место: %s", FractionName[GangWarOpponent[FractionID]], GangWarBet[FractionID], GangWarZones[GangWarZone[FractionID]][GangWarZoneName]);
			SendRMessageEx(FractionID, str);
		}
		case Gang_Bet_Type_Materials:
		{
			new str[200];
			format(str, sizeof(str), "Война с %s началась. Ставка: %d материалов. Место: %s", FractionName[GangWarOpponent[FractionID]], GangWarBet[FractionID], GangWarZones[GangWarZone[FractionID]][GangWarZoneName]);
			SendRMessageEx(FractionID, str);
		}
		case Gang_Bet_Type_Drugs:
		{
			new str[200];
			format(str, sizeof(str), "Война с %s началась. Ставка: %d наркотиков. Место: %s", FractionName[GangWarOpponent[FractionID]], GangWarBet[FractionID], GangWarZones[GangWarZone[FractionID]][GangWarZoneName]);
			SendRMessageEx(FractionID, str);
		}
	}


	foreach(new i:Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] == FractionID)
		{
			GangZoneShowForPlayer(i, GangWarZones[GangWarZone[FractionID]][GangWarZoneID], FractionColor[FractionID]-0x7F);
			GangZoneFlashForPlayer(i, GangWarZones[GangWarZone[FractionID]][GangWarZoneID], FractionColor[GangWarOpponent[FractionID]]-0x7F);

            new str[100];
            ConvertedSecondsWithoutText(GangWarTimer[FractionID], str);
            format(str, sizeof(str), "VS~n~~n~Time:_%s", str);
            PlayerTextDrawSetString(i, GangWarPTD[i][0], str);

            PlayerTextDrawColor(i, GangWarPTD[i][1], FractionColor[FractionID]);
            PlayerTextDrawSetString(i, GangWarPTD[i][1], FractionName[FractionID]);

            PlayerTextDrawColor(i, GangWarPTD[i][2], FractionColor[GangWarOpponent[FractionID]]);
            PlayerTextDrawSetString(i, GangWarPTD[i][2], FractionName[GangWarOpponent[FractionID]]);

            for(new j = 0; j < sizeof(GangWarPTD[]); j++) PlayerTextDrawShow(i, GangWarPTD[i][j]);
		}
	}

	return 1;
}

stock EndGangWar(FractionID, WinnerType = 0) //WinnerType = 0 - Проигравший || WinnerType = 1 Победитель || WinnerType = 2 Ничья
{
	switch(GangWarBetType[FractionID])
	{
		case Gang_Bet_Type_Money:
		{
            if(!WinnerType)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Банда проиграла: %d$", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
            }
            else if(WinnerType == 1)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Выигрышь: %d$", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareMoney] += GangWarBet[FractionID]+GangWarBet[GangWarOpponent[FractionID]];
                SaveFractionWare(FractionID);
            }
            else
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена в ничью.", FractionName[GangWarOpponent[FractionID]]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareMoney] += GangWarBet[FractionID];
                SaveFractionWare(FractionID);
            }
		}
		case Gang_Bet_Type_Materials:
		{
            if(!WinnerType)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Банда проиграла: %d материалов", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
            }
            else if(WinnerType == 1)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Выигрышь: %d материалов", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareMaterials] += GangWarBet[FractionID]+GangWarBet[GangWarOpponent[FractionID]];
                SaveFractionWare(FractionID);
            }
            else
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена в ничью.", FractionName[GangWarOpponent[FractionID]]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareMaterials] += GangWarBet[FractionID];
                SaveFractionWare(FractionID);
            }
		}
		case Gang_Bet_Type_Drugs:
		{
            if(!WinnerType)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Банда проиграла: %d наркотиков", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
            }
            else if(WinnerType == 1)
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена. Победитель %s. Выигрышь: %d наркотиков", FractionName[GangWarOpponent[FractionID]], (WinnerType == 1) ? (FractionName[FractionID]):(FractionName[GangWarOpponent[FractionID]]), GangWarBet[FractionID]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareDrugs] += GangWarBet[FractionID]+GangWarBet[GangWarOpponent[FractionID]];
                SaveFractionWare(FractionID);
            }
            else
            {
                new str[200];
    			format(str, sizeof(str), "Война с %s окончена в ничью.", FractionName[GangWarOpponent[FractionID]]);
    			SendRMessageEx(FractionID, str);
                FractionWare[FractionID][FractionWareDrugs] += GangWarBet[FractionID];
                SaveFractionWare(FractionID);
            }
		}
	}

	GangZoneStopFlashForAll(GangWarZones[GangWarZone[FractionID]][GangWarZoneID]);
    GangZoneHideForAll(GangWarZones[GangWarZone[FractionID]][GangWarZoneID]);
    ClearGangWar(FractionID);

    foreach(new i:Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] == FractionID)
		{
                for(new j = 0; j < sizeof(GangWarPTD[]); j++) PlayerTextDrawHide(i, GangWarPTD[i][j]);
        }
    }
    return 1;
}

forward LoadTent();
public LoadTent()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	new query[300];
	if(row)
	{
		print("Началась загрузка палаток для торговли....");
		for(new i = 0; i < row; i++)
		{
			ClearTent(i);
			cache_get_value_name_int(i, "ID", Tent[i][TentID]);

			if(Tent[i][TentID] != i+1)
			{
				query[0] = EOS;
				mysql_format(DB, query, sizeof(query), "UPDATE `tent` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, Tent[i][TentID]);
				mysql_tquery(DB, query);
				Tent[i][TentID] = i+1;
			}

			cache_get_value_name_float(i, "X", Tent[i][TentX]);
			cache_get_value_name_float(i, "Y", Tent[i][TentY]);
			cache_get_value_name_float(i, "Z", Tent[i][TentZ]);
			cache_get_value_name_float(i, "RX", Tent[i][TentRX]);
			cache_get_value_name_float(i, "RY", Tent[i][TentRY]);
			cache_get_value_name_float(i, "RZ", Tent[i][TentRZ]);
			cache_get_value_name_int(i, "Int", Tent[i][TentInt]);
			cache_get_value_name_int(i, "VW", Tent[i][TentVW]);
			cache_get_value_name_int(i, "Slot", Tent[i][TentSlot]);
			cache_get_value_name_int(i, "Price", Tent[i][TentPrice]);
			cache_get_value_name_int(i, "Type", Tent[i][TentType]);

			new model = 0;
			switch(Tent[i][TentType])
			{
				case 1: model = 1570;
				case 2: model = 3862;
				case 3: model = 3861;
				case 4: model = 3860;
				case 5: model = 3863;
				default: model = 1570;
			}

			Tent[i][TentObjectID] = CreateDynamicObject(model, Tent[i][TentX], Tent[i][TentY], Tent[i][TentZ], Tent[i][TentRX], Tent[i][TentRY], Tent[i][TentRZ], Tent[i][TentVW], Tent[i][TentInt]);
			query[0] = EOS;
			format(query, sizeof(query), Main_Color"Палатка\n\
			"Main_Color"Свободна\n\
			"Main_Color"Стоимость: "Color_Green"%d$/ч\n\
			"Main_Color"Количество мест: "Color_Green"%d\n\
			"Color_White"Чтобы арендовать нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", Tent[i][TentPrice], Tent[i][TentSlot]);
			Tent[i][TentText] = CreateDynamic3DTextLabel(query, -1, Tent[i][TentX], Tent[i][TentY], Tent[i][TentZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Tent[i][TentVW], Tent[i][TentInt]);
			Tent[i][TentArea] = CreateDynamicSphere(Tent[i][TentX], Tent[i][TentY], Tent[i][TentZ], 2.0, Tent[i][TentVW], Tent[i][TentInt]);
		}
		printf("Загружено %d палаток для торговли за %dмс.\n", row, GetTickCount()-time);
	}
	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `tent` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

forward UnrentTent(playerid);
public UnrentTent(playerid)
{
	new indx = GetPVarInt(playerid, "TentRent");
	DeletePVar(playerid, "TentRent");
	if(indx)
	{
		indx--;

		if(GetTentSlot(indx))
		{
			for(new i = 0; i < Tent[indx][TentSlot]; i++)
			{
				if(Tent[indx][TentItemID][i] != ItemNone)
				{
					if(!AddPlayerInventory(playerid, Tent[indx][TentItemID][i], Tent[indx][TentItemCount][i])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
					new str[200];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"убран с продажи", Items[Tent[indx][TentItemID][i]][ItemName]);
					SendClientMessage(playerid, -1, str);

					RemoveTentItem(indx, i);
				}
			}
		}

		new str[200];
		format(str, sizeof(str), Main_Color"Палатка\n\
		"Main_Color"Свободна\n\
		"Main_Color"Стоимость: "Color_Green"%d$/ч\n\
		"Main_Color"Количество мест: "Color_Green"%d\n\
		"Color_White"Чтобы арендовать нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", Tent[indx][TentPrice], Tent[indx][TentSlot]);

		Tent[indx][TentTime] = 0;

		Tent[indx][TentPlayer] = -1;
		UpdateDynamic3DTextLabelText(Tent[indx][TentText], -1, str);
		SendClientMessage(playerid, -1, Color_Yellow"Аренда палатки отменена");
		DeletePVar(playerid, "TentRentTime");
		SetPVarInt(playerid, "TentCD", 3600);
		SavePlayerInt(playerid, "TentCD", GetPVarInt(playerid, "TentCD"));
	}
	return 1;
}

stock ShowTentItem(playerid, TentsID, Type=1) //Type == 1 - Покупка || Type == 2 - Удаление
{
	if(!GetTentSlot(TentsID)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В палатке пока нет предметов на продажу");

	new str[1500];
	strcat(str, Main_Color"Название\t"Main_Color"Количество\t"Main_Color"Стоимость за шт.\n");
	for(new i = 0; i < Tent[TentsID][TentSlot]; i++)
	{
		if(Tent[TentsID][TentItemID][i] != ItemNone) format(str, sizeof(str), "%s"Main_Color"%s\t"Color_White"%dшт.\t"Color_Green"%d$\n", str, Items[Tent[TentsID][TentItemID][i]][ItemName], Tent[TentsID][TentItemCount][i], Tent[TentsID][TentItemPrice][i]);
		else format(str, sizeof(str), "%s"Main_Color"Пусто\n", str);
	}
	if(Type == 1) ShowDialog(playerid, D_Tent_Menu_Buy, DIALOG_STYLE_TABLIST_HEADERS,  Main_Color"Палатка", str, Color_White"Купить", Color_White"Закрыть");
	else if(Type == 2) ShowDialog(playerid, D_Tent_Menu_Remove, DIALOG_STYLE_TABLIST_HEADERS,  Main_Color"Палатка", str, Color_White"Выбрать", Color_White"Закрыть");
	return 1;
}

stock AddTentItem(TentsID, ItemsID, Price, Count = 1)
{
	if(Tent[TentsID][TentPlayer] != -1)
	{
		for(new i = 0; i < MAX_TENT_ITEMS; i++)
		{
			if(Tent[TentsID][TentItemID][i] == ItemNone)
			{
				RemovePlayerInventory(Tent[TentsID][TentPlayer], ItemsID, Count);

				Tent[TentsID][TentItemID][i] = ItemsID;
				Tent[TentsID][TentItemCount][i] = Count;
				Tent[TentsID][TentItemPrice][i] = Price;

				new str[200];
				format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"выставлен на продажу в количестве "Main_Color"%d "Color_White"по цене "Color_Green"%d$ "Color_White"за шт.", Items[ItemsID][ItemName], Count, Price);
				SendClientMessage(Tent[TentsID][TentPlayer], -1, str);
				return 1;
			}
		}
	}
	return 1;
}

stock RemoveTentItem(TentsID, Slot)
{
	if(Tent[TentsID][TentPlayer] != -1)
	{
		if(Tent[TentsID][TentItemID][Slot] != ItemNone)
		{
			Tent[TentsID][TentItemID][Slot] = ItemNone;
			Tent[TentsID][TentItemCount][Slot] = 0;
			Tent[TentsID][TentItemPrice][Slot] = 0;
			return 1;
		}
	}
	return 1;
}

stock GetTentSlot(TentsID)
{
	new count = 0;
	for(new i = 0; i < MAX_TENT_ITEMS; i++)
	{
		if(Tent[TentsID][TentItemID][i] != ItemNone) count++;
	}
	return count;
}

forward LoadTable();
public LoadTable()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	new query[300];
	if(row)
	{
		print("Началась загрузка столов для казино....");
		for(new i = 0; i < row; i++)
		{
			ClearCasinoTable(i);
			cache_get_value_name_int(i, "ID", CasinoTable[i][CasTabID]);

			if(CasinoTable[i][CasTabID] != i+1)
			{
				query[0] = EOS;
				mysql_format(DB, query, sizeof(query), "UPDATE `casino_table` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, CasinoTable[i][CasTabID]);
				mysql_tquery(DB, query);
				CasinoTable[i][CasTabID] = i+1;
			}

			cache_get_value_name_float(i, "X", CasinoTable[i][CasTabX]);
			cache_get_value_name_float(i, "Y", CasinoTable[i][CasTabY]);
			cache_get_value_name_float(i, "Z", CasinoTable[i][CasTabZ]);
			cache_get_value_name_float(i, "RX", CasinoTable[i][CasTabRX]);
			cache_get_value_name_float(i, "RY", CasinoTable[i][CasTabRY]);
			cache_get_value_name_float(i, "RZ", CasinoTable[i][CasTabRZ]);
			cache_get_value_name_int(i, "Int", CasinoTable[i][CasTabInt]);
			cache_get_value_name_int(i, "VW", CasinoTable[i][CasTabVW]);
			cache_get_value_name_int(i, "Type", CasinoTable[i][CasTabType]);
			cache_get_value_name_int(i, "MaxPlayer", CasinoTable[i][CasTabMaxPlayer]);
			cache_get_value_name_int(i, "Bet", CasinoTable[i][CasTabBet]);

			CasinoTable[i][CasTabObjectID] = CreateDynamicObject(19474, CasinoTable[i][CasTabX], CasinoTable[i][CasTabY], CasinoTable[i][CasTabZ], CasinoTable[i][CasTabRX], CasinoTable[i][CasTabRY], CasinoTable[i][CasTabRZ], CasinoTable[i][CasTabVW], CasinoTable[i][CasTabInt]);
			query[0] = EOS;
			format(query, sizeof(query), Main_Color"Стол %s\n\
			"Main_Color"Игроков для старта: "Color_White"%d\n\
			"Main_Color"Ставка: "Color_Green"%d фишек\n\
			"Color_White"Чтобы использовать нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", CasinoTableTypeName[CasinoTable[i][CasTabType]], CasinoTable[i][CasTabMaxPlayer], CasinoTable[i][CasTabBet]);
			CasinoTable[i][CasTabText] = CreateDynamic3DTextLabel(query, -1, CasinoTable[i][CasTabX], CasinoTable[i][CasTabY], CasinoTable[i][CasTabZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CasinoTable[i][CasTabVW], CasinoTable[i][CasTabInt]);
			CasinoTable[i][CasTabArea] = CreateDynamicSphere(CasinoTable[i][CasTabX], CasinoTable[i][CasTabY], CasinoTable[i][CasTabZ], 2.0, CasinoTable[i][CasTabVW], CasinoTable[i][CasTabInt]);
		}
		printf("Загружено %d столов для казино за %dмс.\n", row, GetTickCount()-time);
	}
	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `casino_table` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

forward LoadVending();
public LoadVending()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка автоматов Sprunk....");
		for(new i = 0; i < row; i++)
		{
			cache_get_value_name_int(i, "ID", Vending[i][VendID]);

			if(Vending[i][VendID] != i+1)
			{
				new query[100];
				mysql_format(DB, query, sizeof(query), "UPDATE `vending` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, Vending[i][VendID]);
				mysql_tquery(DB, query);
				Vending[i][VendID] = i+1;
			}

			cache_get_value_name_float(i, "X", Vending[i][VendX]);
			cache_get_value_name_float(i, "Y", Vending[i][VendY]);
			cache_get_value_name_float(i, "Z", Vending[i][VendZ]);
			cache_get_value_name_float(i, "RX", Vending[i][VendRX]);
			cache_get_value_name_float(i, "RY", Vending[i][VendRY]);
			cache_get_value_name_float(i, "RZ", Vending[i][VendRZ]);
			cache_get_value_name_int(i, "Int", Vending[i][VendInt]);
			cache_get_value_name_int(i, "VW", Vending[i][VendVW]);

			Vending[i][VendObjectID] = CreateDynamicObject(1775, Vending[i][VendX], Vending[i][VendY], Vending[i][VendZ], Vending[i][VendRX], Vending[i][VendRY], Vending[i][VendRZ], Vending[i][VendVW], Vending[i][VendInt]);
			Vending[i][VendText] = CreateDynamic3DTextLabel(Main_Color"Автомат Sprunk\n"Color_White"Чтобы использовать нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, Vending[i][VendX], Vending[i][VendY], Vending[i][VendZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Vending[i][VendVW], Vending[i][VendInt]);
			Vending[i][VendArea] = CreateDynamicSphere(Vending[i][VendX], Vending[i][VendY], Vending[i][VendZ], 1.0, Vending[i][VendVW], Vending[i][VendInt]);
		}
		printf("Загружено %d автоматов Sprunk за %dмс.\n", row, GetTickCount()-time);
	}
	new query[100];
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `vending` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);
	return 1;
}

forward LoadHouse();
public LoadHouse()
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка домов....");
		for(new i = 0; i < row; i++)
		{
			new indx;
			cache_get_value_name_int(i, "ID", indx);
			hInfo[indx][hID] = indx;
			new bool:CheckNull;
			cache_is_value_name_null(i, "OwnerID", CheckNull);
			if(CheckNull) hInfo[indx][hOwnerID] = 0;
			else cache_get_value_name_int(i, "OwnerID", hInfo[indx][hOwnerID]);
			cache_get_value_name_int(i, "Interior", hInfo[indx][hInterior]);
			cache_get_value_name_int(i, "Tax", hInfo[indx][hTax]);
			cache_get_value_name_int(i, "Price", hInfo[indx][hPrice]);
			cache_get_value_name_int(i, "NeedLevel", hInfo[indx][hNeedLevel]);

			cache_get_value_name_bool(i, "Close", hInfo[indx][hClose]);
			cache_get_value_name_bool(i, "IsDonate", hInfo[indx][hIsDonate]);

			cache_get_value_name_float(i, "X", hInfo[indx][hX]);
			cache_get_value_name_float(i, "Y", hInfo[indx][hY]);
			cache_get_value_name_float(i, "Z", hInfo[indx][hZ]);
			cache_get_value_name_float(i, "A", hInfo[indx][hA]);
			cache_get_value_name_float(i, "CarX", hInfo[indx][hCarX]);
			cache_get_value_name_float(i, "CarY", hInfo[indx][hCarY]);
			cache_get_value_name_float(i, "CarZ", hInfo[indx][hCarZ]);
			cache_get_value_name_float(i, "CarA", hInfo[indx][hCarA]);

			UpdateHouse(hInfo[indx][hID]);
		}
		printf("Загружено %d домов за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock UpdateHouse(HouseID)
{
	if(hInfo[HouseID][hOwnerID])
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `ID` = '%d'", hInfo[HouseID][hOwnerID]);
		mysql_tquery(DB, query, "GetHouseOwnerName", "d", HouseID);
	}
	else
	{
		hInfo[HouseID][hClose] = false;
		SaveHouseBool(hInfo[HouseID][hID], "Close", hInfo[HouseID][hClose]);

		new str[300];
		if(hInfo[HouseID][hPickup] && IsValidDynamicPickup(hInfo[HouseID][hPickup])) DestroyDynamicPickup(hInfo[HouseID][hPickup]);
		hInfo[HouseID][hPickup] = 0;

		if(hInfo[HouseID][hText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hText]);
		hInfo[HouseID][hText] = Text3D:0;

		if(hInfo[HouseID][hMapIcon] && IsValidDynamicMapIcon(hInfo[HouseID][hMapIcon])) DestroyDynamicMapIcon(hInfo[HouseID][hMapIcon]);
		hInfo[HouseID][hMapIcon] = 0;

		if(hInfo[HouseID][hArea] && IsValidDynamicArea(hInfo[HouseID][hArea])) DestroyDynamicArea(hInfo[HouseID][hArea]);
		hInfo[HouseID][hArea] = 0;

		if(hInfo[HouseID][hExitPickup] && IsValidDynamicPickup(hInfo[HouseID][hExitPickup])) DestroyDynamicPickup(hInfo[HouseID][hExitPickup]);
		hInfo[HouseID][hExitPickup] = 0;

		if(hInfo[HouseID][hExitText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hExitText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hExitText]);
		hInfo[HouseID][hExitText] = Text3D:0;

		if(hInfo[HouseID][hExitArea] && IsValidDynamicArea(hInfo[HouseID][hExitArea])) DestroyDynamicArea(hInfo[HouseID][hExitArea]);
		hInfo[HouseID][hExitArea] = 0;

		hInfo[HouseID][hArea] = CreateDynamicSphere(hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 2.0, 0, 0);
		Streamer_SetIntData(STREAMER_TYPE_AREA, hInfo[HouseID][hArea],  E_STREAMER_ARRAY_TYPE, Array_Type_House);
		Streamer_SetIntData(STREAMER_TYPE_AREA, hInfo[HouseID][hArea],  E_STREAMER_INDX, HouseID);

		if(hInfo[HouseID][hIsDonate]) hInfo[HouseID][hPickup] = CreateDynamicPickup(19524, 1, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 0, 0);
		else hInfo[HouseID][hPickup] = CreateDynamicPickup(1273, 1, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 0, 0);
		hInfo[HouseID][hMapIcon] = CreateDynamicMapIcon(hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 31, 0, 0, 0);

		hInfo[HouseID][hExitArea] = CreateDynamicSphere(HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], 2.0, House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);
		hInfo[HouseID][hExitPickup] = CreateDynamicPickup(1318, 1, HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);
		hInfo[HouseID][hExitText] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);

		format(str, sizeof(str), Main_Color"Дом №"Color_White"%d\n\
		"Main_Color"Класс"Color_White": %s\n\
		"Main_Color"Продается\n\
		"Main_Color"Цена"Color_White": "Color_Green"%d%s\n\
		"Main_Color"Требуемый уровень"Color_White": %d\n\
		"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]",
		hInfo[HouseID][hID],
		HouseClassName[HouseInterior[hInfo[HouseID][hInterior]][hIntClass]],
		hInfo[HouseID][hPrice],
		(hInfo[HouseID][hIsDonate]) ? (" донат рублей"):("$"),
		hInfo[HouseID][hNeedLevel]);
		hInfo[HouseID][hText] = CreateDynamic3DTextLabel(str, -1, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
	return 1;
}

forward GetHouseOwnerName(HouseID);
public GetHouseOwnerName(HouseID)
{
	new row = cache_num_rows();
	if(row)
	{
		new str[400];
		cache_get_value_name(0, "Name", hInfo[HouseID][hOwnerName]);

		if(hInfo[HouseID][hPickup] && IsValidDynamicPickup(hInfo[HouseID][hPickup])) DestroyDynamicPickup(hInfo[HouseID][hPickup]);
		hInfo[HouseID][hPickup] = 0;

		if(hInfo[HouseID][hText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hText]);
		hInfo[HouseID][hText] = Text3D:0;

		if(hInfo[HouseID][hMapIcon] && IsValidDynamicMapIcon(hInfo[HouseID][hMapIcon])) DestroyDynamicMapIcon(hInfo[HouseID][hMapIcon]);
		hInfo[HouseID][hMapIcon] = 0;

		if(hInfo[HouseID][hArea] && IsValidDynamicArea(hInfo[HouseID][hArea])) DestroyDynamicArea(hInfo[HouseID][hArea]);
		hInfo[HouseID][hArea] = 0;

		if(hInfo[HouseID][hExitPickup] && IsValidDynamicPickup(hInfo[HouseID][hExitPickup])) DestroyDynamicPickup(hInfo[HouseID][hExitPickup]);
		hInfo[HouseID][hExitPickup] = 0;

		if(hInfo[HouseID][hExitText] && IsValidDynamic3DTextLabel(hInfo[HouseID][hExitText])) DestroyDynamic3DTextLabel(hInfo[HouseID][hExitText]);
		hInfo[HouseID][hExitText] = Text3D:0;

		if(hInfo[HouseID][hExitArea] && IsValidDynamicArea(hInfo[HouseID][hExitArea])) DestroyDynamicArea(hInfo[HouseID][hExitArea]);
		hInfo[HouseID][hExitArea] = 0;

		hInfo[HouseID][hArea] = CreateDynamicSphere(hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 2.0, 0, 0);
		Streamer_SetIntData(STREAMER_TYPE_AREA, hInfo[HouseID][hArea],  E_STREAMER_ARRAY_TYPE, Array_Type_House);
		Streamer_SetIntData(STREAMER_TYPE_AREA, hInfo[HouseID][hArea],  E_STREAMER_INDX, HouseID);

		hInfo[HouseID][hPickup] = CreateDynamicPickup(1272, 1, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 0, 0);
		hInfo[HouseID][hMapIcon] = CreateDynamicMapIcon(hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 32, 0, 0, 0);

		hInfo[HouseID][hExitArea] = CreateDynamicSphere(HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], 2.0, House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);
		hInfo[HouseID][hExitPickup] = CreateDynamicPickup(1318, 1, HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);
		hInfo[HouseID][hExitText] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, HouseInterior[hInfo[HouseID][hInterior]][hIntX], HouseInterior[hInfo[HouseID][hInterior]][hIntY], HouseInterior[hInfo[HouseID][hInterior]][hIntZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, House_World+hInfo[HouseID][hID], HouseInterior[hInfo[HouseID][hInterior]][hInt]);

		format(str, sizeof(str), Main_Color"Дом №"Color_White"%d\n\
		"Main_Color"Класс"Color_White": %s\n\
		"Main_Color"Дверь"Color_White": %s\n\
		"Main_Color"Владелец"Color_White": %s\n\
		"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", hInfo[HouseID][hID], HouseClassName[HouseInterior[hInfo[HouseID][hInterior]][hIntClass]], (hInfo[HouseID][hClose]) ? (Color_Red"Закрыта") : (Color_Green"Открыта"), hInfo[HouseID][hOwnerName]);
		hInfo[HouseID][hText] = CreateDynamic3DTextLabel(str, -1, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
	else
	{
		hInfo[HouseID][hOwnerID] = 0;
		SaveHouseNull(hInfo[HouseID][hID], "OwnerID");
		UpdateHouse(HouseID);
	}
	return 1;
}

stock UnloadHouseVehicle(playerid)
{
	if(pInfo[playerid][pVehicleID])
	{
		foreach(new i: Player)
		{
			if(GetPVarInt(i, "CarKey") == pInfo[playerid][pVehicleID]) DeletePVar(i, "CarKey");
		}
		SaveCarFloat(pInfo[playerid][pVehicleID], "Fuel", vInfo[pInfo[playerid][pVehicleID]][vFuel]);
		ClearVehicle(pInfo[playerid][pVehicleID]);
	}
	pInfo[playerid][pVehicleID] = 0;
	return 1;
}

stock AddHouseVehicle(playerid, vehiclemodel, slot)
{
	if(!pInfo[playerid][pHouseID]) return 1;
	UnloadHouseVehicle(playerid);
	new vehicleid = GetFreeVehicleID();

	vInfo[vehicleid][vModel] = vehiclemodel;
	vInfo[vehicleid][vOwner] = pInfo[playerid][pID];
	vInfo[vehicleid][vType] = VehicleTypePlayer;
	vInfo[vehicleid][vColor1] = 2;
	vInfo[vehicleid][vColor2] = 1;
	vInfo[vehicleid][vX] = hInfo[pInfo[playerid][pHouseID]][hCarX];
	vInfo[vehicleid][vY] = hInfo[pInfo[playerid][pHouseID]][hCarY];
	vInfo[vehicleid][vZ] = hInfo[pInfo[playerid][pHouseID]][hCarZ];
	vInfo[vehicleid][vA] = hInfo[pInfo[playerid][pHouseID]][hCarA];
	vInfo[vehicleid][vPrice] = 0;

	new respawn_delay = 0;
	if(vInfo[vehicleid][vType] == VehicleTypePlayer) respawn_delay = -1;
	else respawn_delay = 600;
	vInfo[vehicleid][vServerID] = CreateVehicle(vInfo[vehicleid][vModel], vInfo[vehicleid][vX], vInfo[vehicleid][vY], vInfo[vehicleid][vZ], vInfo[vehicleid][vA], vInfo[vehicleid][vColor1], vInfo[vehicleid][vColor2], respawn_delay);
	SetVehicleParamsEx(vInfo[vehicleid][vServerID], false, false, false, false, false, false, false);

	SaveCar(playerid, vehicleid, false, slot);
	return 1;
}

stock ResecelctHouseVehicle(playerid, VehMysqlID)
{
	new query[200];
	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `Selected` = '0' WHERE `Type` = '%d' AND `Owner` = '%d' AND `Selected` = '1'", VehicleTypePlayer, pInfo[playerid][pID]);
	mysql_tquery(DB, query);

	query[0] = EOS;
	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `Selected` = '1' WHERE `Type` = '%d' AND `Owner` = '%d' AND `ID` = '%d'", VehicleTypePlayer, pInfo[playerid][pID], VehMysqlID);
	mysql_tquery(DB, query);
	return 1;
}

stock ExcangeHouseVehicle(PlayerMysqlID, ExcangePlayerMysqlID)
{
	new query[200];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND (`Owner` = '%d' OR `Owner` = '%d')", VehicleTypePlayer, PlayerMysqlID, ExcangePlayerMysqlID);
	mysql_tquery(DB, query, "ExcangeHouseVehicleCallBack", "dd", PlayerMysqlID, ExcangePlayerMysqlID);
	return 1;
}

forward ExcangeHouseVehicleCallBack(PlayerMysqlID, ExcangePlayerMysqlID);
public ExcangeHouseVehicleCallBack(PlayerMysqlID, ExcangePlayerMysqlID)
{
	new row = cache_num_rows();
	if(row)
	{
		for(new i = 0; i < row; i++)
		{
			new VehMysqlID = 0;
			new VehOwner = 0;
			cache_get_value_name_int(i, "ID", VehMysqlID);
			cache_get_value_name_int(i, "Owner", VehOwner);

			new query[200];
			mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `Owner` = '%d', `Selected` = '0' WHERE `Type` = '%d' AND `ID` = '%d'", (VehOwner == PlayerMysqlID) ? (ExcangePlayerMysqlID):(PlayerMysqlID), VehicleTypePlayer, VehMysqlID);
			mysql_tquery(DB, query);
		}
	}
	return 1;
}

stock ClearHouseVehicle(PlayerMysqlID, playerid = -1)
{
	if(playerid != -1) UnloadHouseVehicle(playerid);
	new query[200];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d'", VehicleTypePlayer, PlayerMysqlID);
	mysql_tquery(DB, query);
	return 1;
}

stock GetFreeVehicleID()
{
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(!IsValidVehicle(i))
		{
			ClearVehicle(i);
			return i;
		}
	}
	return INVALID_VEHICLE_ID;
}

forward LoadVehicle(playerid);
public LoadVehicle(playerid)
{
	new row = cache_num_rows();
	new time = GetTickCount();
	if(row)
	{
		print("Началась загрузка транспорта....");
		for(new i = 0; i < row; i++)
		{
			new indx = GetFreeVehicleID();
			cache_get_value_name_int(i, "ID", vInfo[indx][vID]);
			cache_get_value_name_int(i, "Type", vInfo[indx][vType]);

			if(playerid == -1)
			{
				if(vInfo[indx][vID] != i+1)
				{
					new query[100];
					mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `ID` = '%d' WHERE `ID` = '%d'", i+1, vInfo[indx][vID]);
					mysql_tquery(DB, query);
					vInfo[indx][vID] = i+1;
				}
				if(vInfo[indx][vType] == VehicleTypePlayer) continue;
			}

			cache_get_value_name_int(i, "Model", vInfo[indx][vModel]);
			cache_get_value_name_int(i, "Owner", vInfo[indx][vOwner]);
			cache_get_value_name_int(i, "Rank", vInfo[indx][vRank]);
			cache_get_value_name_int(i, "Color1", vInfo[indx][vColor1]);
			cache_get_value_name_int(i, "Color2", vInfo[indx][vColor2]);
			cache_get_value_name_int(i, "Price", vInfo[indx][vPrice]);

			cache_get_value_name_int(i, "Spoiler", vInfo[indx][vSpoiler]);
			cache_get_value_name_int(i, "Bonnet", vInfo[indx][vBonnet]);
			cache_get_value_name_int(i, "Roof", vInfo[indx][vRoof]);
			cache_get_value_name_int(i, "Sideskirt", vInfo[indx][vSideskirt]);
			cache_get_value_name_int(i, "Lamps", vInfo[indx][vLamps]);
			cache_get_value_name_int(i, "Nitro", vInfo[indx][vNitro]);
			cache_get_value_name_int(i, "Exhaust", vInfo[indx][vExhaust]);
			cache_get_value_name_int(i, "Wheel", vInfo[indx][vWheel]);
			cache_get_value_name_int(i, "Stereo", vInfo[indx][vStereo]);
			cache_get_value_name_int(i, "Hydraulics", vInfo[indx][vHydraulics]);
			cache_get_value_name_int(i, "Front bumper", vInfo[indx][vFrontBumper]);
			cache_get_value_name_int(i, "Rear bumper", vInfo[indx][vRearBumper]);
			cache_get_value_name_int(i, "Vent right", vInfo[indx][vVentRight]);
			cache_get_value_name_int(i, "Vent left", vInfo[indx][vVentLeft]);
			cache_get_value_name_int(i, "PaintJob", vInfo[indx][vPaintJob]);

			cache_get_value_name_float(i, "Fuel", vInfo[indx][vFuel]);
			cache_get_value_name_float(i, "X", vInfo[indx][vX]);
			cache_get_value_name_float(i, "Y", vInfo[indx][vY]);
			cache_get_value_name_float(i, "Z", vInfo[indx][vZ]);
			cache_get_value_name_float(i, "A", vInfo[indx][vA]);

			cache_get_value_name(i, "PlateNumber", vInfo[indx][vPlateNumber]);

			new respawn_delay = 0;
			if(vInfo[indx][vType] == VehicleTypePlayer) respawn_delay = -1;
			else respawn_delay = 600;

			vInfo[indx][vServerID] = CreateVehicle(vInfo[indx][vModel], vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ], vInfo[indx][vA], vInfo[indx][vColor1], vInfo[indx][vColor2], respawn_delay);
			if(vInfo[indx][vType] == VehicleTypePlayer)
			{
				if(!IsABike(vInfo[indx][vModel]) && !IsAPlane(vInfo[indx][vModel]) && !IsABoat(vInfo[indx][vModel])) SetVehicleNumberPlate(vInfo[indx][vServerID], vInfo[indx][vPlateNumber]);
				cache_get_value_name_bool(i, "Lock", vInfo[indx][vLock]);
				SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, vInfo[indx][vLock], false, false, false);
			}
			else SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, false, false, false, false);

			UpdateVehicle(indx, playerid);
		}
		if(playerid == -1)
		{
			new query[100];
			mysql_format(DB, query, sizeof(query), "ALTER TABLE `vehicle` AUTO_INCREMENT = %d", row+1);
			mysql_tquery(DB, query);
		}
		printf("Загружено %d транспорта за %dмс.\n", row, GetTickCount()-time);
	}
	return 1;
}

stock GetFreeVehicleSeat(vehicleid)
{
    new tmp, seat;


    foreach(new i: Player)
    {
        if(pInfo[i][pAuth] && GetPlayerVehicleID(i) == vehicleid)
        {
            if(0 <= (seat = GetPlayerVehicleSeat(i)) < cellbits)
            {
                tmp |= 1 << seat;
            }
        }
    }

    tmp = ~tmp;
    for(new i = 1; i < CarMaxSeats[GetVehicleModel(vehicleid) - 400]; i++)
    {
    	if((~(tmp - 1) & tmp) == 1 << i) return i;
    }
    return -1;
}

stock SetStandartVehicleTuning(vehicleid)
{
	switch(vInfo[vehicleid][vModel])
	{
		case 482:
		{
            AddVehicleComponent(vehicleid,1010);
            AddVehicleComponent(vehicleid,1087);
		}
		case 565:
		{
			AddVehicleComponent(vehicleid,1049);
			AddVehicleComponent(vehicleid,1046);
			AddVehicleComponent(vehicleid,1047);
			AddVehicleComponent(vehicleid,1051);
			AddVehicleComponent(vehicleid,1054);
			AddVehicleComponent(vehicleid,1150);
			AddVehicleComponent(vehicleid,1153);
			AddVehicleComponent(vehicleid,1010);
			AddVehicleComponent(vehicleid,1079);
			AddVehicleComponent(vehicleid,1087);
		}
		case 559:
		{
			AddVehicleComponent(vehicleid,1158);
			AddVehicleComponent(vehicleid,1162);
			AddVehicleComponent(vehicleid,1159);
			AddVehicleComponent(vehicleid,1160);
			AddVehicleComponent(vehicleid,1069);
			AddVehicleComponent(vehicleid,1070);
			AddVehicleComponent(vehicleid,1067);
			AddVehicleComponent(vehicleid,1065);
			AddVehicleComponent(vehicleid,1010);
			AddVehicleComponent(vehicleid,1079);
			AddVehicleComponent(vehicleid,1087);
		}
		case 562:
		{
			AddVehicleComponent(vehicleid,1146);
			AddVehicleComponent(vehicleid,1034);
			AddVehicleComponent(vehicleid,1035);
			AddVehicleComponent(vehicleid,1036);
			AddVehicleComponent(vehicleid,1040);
			AddVehicleComponent(vehicleid,1149);
			AddVehicleComponent(vehicleid,1171);
			AddVehicleComponent(vehicleid,1010);
			AddVehicleComponent(vehicleid,1079);
			AddVehicleComponent(vehicleid,1087);
		}
		case 560:
		{
			AddVehicleComponent(vehicleid,1139);
			AddVehicleComponent(vehicleid,1026);
			AddVehicleComponent(vehicleid,1027);
			AddVehicleComponent(vehicleid,1029);
			AddVehicleComponent(vehicleid,1032);
			AddVehicleComponent(vehicleid,1149);
			AddVehicleComponent(vehicleid,1141);
			AddVehicleComponent(vehicleid,1169);
			AddVehicleComponent(vehicleid,1010);
			AddVehicleComponent(vehicleid,1079);
			AddVehicleComponent(vehicleid,1087);
		}
	}
	return 1;
}

stock SetVehicleTuning(vehicleid)
{
	if(vInfo[vehicleid][vType] == VehicleTypePlayer)
	{
		if(GetVehiclePaintJobCount(vInfo[vehicleid][vModel])) ChangeVehiclePaintjob(vehicleid, vInfo[vehicleid][vPaintJob]);
		if(vInfo[vehicleid][vSpoiler]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vSpoiler]);
		if(vInfo[vehicleid][vBonnet]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vBonnet]);
		if(vInfo[vehicleid][vRoof]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vRoof]);
		if(vInfo[vehicleid][vSideskirt]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vSideskirt]);
		if(vInfo[vehicleid][vLamps]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vLamps]);
		if(vInfo[vehicleid][vNitro]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vNitro]);
		if(vInfo[vehicleid][vExhaust]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vExhaust]);
		if(vInfo[vehicleid][vWheel]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vWheel]);
		if(vInfo[vehicleid][vStereo]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vStereo]);
		if(vInfo[vehicleid][vHydraulics]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vHydraulics]);
		if(vInfo[vehicleid][vFrontBumper]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vFrontBumper]);
		if(vInfo[vehicleid][vRearBumper]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vRearBumper]);
		if(vInfo[vehicleid][vVentRight]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vVentRight]);
		if(vInfo[vehicleid][vVentLeft]) AddVehicleComponent(vehicleid, vInfo[vehicleid][vVentLeft]);
	}
}

stock AddVehicleTuning(vehicleid, componentid, componenttype)
{
	switch(componenttype)
	{
		case CARMODTYPE_SPOILER:
		{
			vInfo[vehicleid][vSpoiler] = componentid;
			SaveCarInt(vehicleid, "Spoiler", vInfo[vehicleid][vSpoiler]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_HOOD:
		{
			vInfo[vehicleid][vBonnet] = componentid;
			SaveCarInt(vehicleid, "Bonnet", vInfo[vehicleid][vBonnet]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_ROOF:
		{
			vInfo[vehicleid][vRoof] = componentid;
			SaveCarInt(vehicleid, "Roof", vInfo[vehicleid][vRoof]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_SIDESKIRT:
		{
			vInfo[vehicleid][vSideskirt] = componentid;
			SaveCarInt(vehicleid, "Sideskirt", vInfo[vehicleid][vSideskirt]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_LAMPS:
		{
			vInfo[vehicleid][vLamps] = componentid;
			SaveCarInt(vehicleid, "Lamps", vInfo[vehicleid][vLamps]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_NITRO:
		{
			vInfo[vehicleid][vNitro] = componentid;
			SaveCarInt(vehicleid, "Nitro", vInfo[vehicleid][vNitro]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_EXHAUST:
		{
			vInfo[vehicleid][vExhaust] = componentid;
			SaveCarInt(vehicleid, "Exhaust", vInfo[vehicleid][vExhaust]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_WHEELS:
		{
			vInfo[vehicleid][vWheel] = componentid;
			SaveCarInt(vehicleid, "Wheel", vInfo[vehicleid][vWheel]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_STEREO:
		{
			vInfo[vehicleid][vStereo] = componentid;
			SaveCarInt(vehicleid, "Stereo", vInfo[vehicleid][vStereo]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_HYDRAULICS:
		{
			vInfo[vehicleid][vHydraulics] = componentid;
			SaveCarInt(vehicleid, "Hydraulics", vInfo[vehicleid][vHydraulics]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_FRONT_BUMPER:
		{
			vInfo[vehicleid][vFrontBumper] = componentid;
			SaveCarInt(vehicleid, "Front bumper", vInfo[vehicleid][vFrontBumper]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_REAR_BUMPER:
		{
			vInfo[vehicleid][vRearBumper] = componentid;
			SaveCarInt(vehicleid, "Rear bumper", vInfo[vehicleid][vRearBumper]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_VENT_RIGHT:
		{
			vInfo[vehicleid][vVentRight] = componentid;
			SaveCarInt(vehicleid, "Vent right", vInfo[vehicleid][vVentRight]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_VENT_LEFT:
		{
			vInfo[vehicleid][vVentLeft] = componentid;
			SaveCarInt(vehicleid, "Vent left", vInfo[vehicleid][vVentLeft]);
			SetVehicleTuning(vehicleid);
		}
		case CARMODTYPE_PAINTJOB:
		{
			vInfo[vehicleid][vPaintJob] = componentid;
			SaveCarInt(vehicleid, "PaintJob", vInfo[vehicleid][vPaintJob]);
			SetVehicleTuning(vehicleid);
		}
	}
	return 1;
}

forward ReloadBusiness();
public ReloadBusiness()
{
	new row = cache_num_rows();

	new query[100];
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `business` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);

	mysql_tquery(DB, "SELECT * FROM `business`", "LoadBusiness");

	foreach(new i: Player)
	{
		query[0] = EOS;
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `business` WHERE `OwnerID` = '%d'", pInfo[i][pID]);
		mysql_tquery(DB, query, "CheckAccountBusiness", "d", i);
	}

	return 1;
}

stock BusinessCount()
{
	new count = 0;
	for(new i = 0; i < sizeof(bInfo); i++) if(bInfo[i][bID]) count++;
	return count;
}

stock ShowBusinessList(playerid, Type) //Type = 1 GPS || Type = 2 CreateVehicle || Type = 3 TP
{
	new str[1500];
	new List = GetPVarInt(playerid, "Business_List");
	new count = BusinessCount();
	if(!count) return SendClientMessage(playerid, -1, Color_Grey"Бизнесы отсутствуют.");
	for(new i = (10*List)-9; i <= 10*List; i++)
	{
		if(i > count) break;
		format(str, sizeof(str), "%s"Main_Color"%d"Color_White". %s - %.0f метров\n", str, i, BusinessType[bInfo[i][bType]][bName], GetPlayerDistanceFromPoint(playerid, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]));
	}
	if(List * 10 <  count) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);

	if(Type == 1) ShowDialog(playerid, D_GPS_Business, DIALOG_STYLE_LIST, Main_Color"Бизнесы", str, Color_White"Далее", Color_White"Закрыть");
	else if(Type == 2) ShowDialog(playerid, D_CreateCar_Type_Business, DIALOG_STYLE_LIST, Main_Color"Бизнесы", str, Color_White"Далее", Color_White"Закрыть");
	else if(Type == 3) ShowDialog(playerid, D_TP_Business, DIALOG_STYLE_LIST, Main_Color"Бизнесы", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

forward ReloadHouse();
public ReloadHouse()
{
	new row = cache_num_rows();

	new query[100];
	mysql_format(DB, query, sizeof(query), "ALTER TABLE `house` AUTO_INCREMENT = %d", row+1);
	mysql_tquery(DB, query);

	mysql_tquery(DB, "SELECT * FROM `house`", "LoadHouse");

	foreach(new i: Player)
	{
		query[0] = EOS;
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `house` WHERE `OwnerID` = '%d'", pInfo[i][pID]);
		mysql_tquery(DB, query, "CheckAccountHouse", "d", i);
	}

	return 1;
}

stock ShowPlayerSkinList(playerid)
{
	new str[300];
	for(new i = 0; i < MAX_PLAYER_SKINS; i++)
	{
		if(pInfo[playerid][pSkins][i]) format(str, sizeof(str), Color_White"%s"Color_White"ID: %d%s\n", str, pInfo[playerid][pSkins][i], (pInfo[playerid][pSkin] == i) ? (Main_Color" Выбрано"):(""));
		else format(str, sizeof(str), Color_White"%s\n"Color_White"Пусто", str);
	}
	ShowDialog(playerid, D_Select_Skin, DIALOG_STYLE_LIST, Main_Color"Ваша одежда", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

stock ShowHouseInteriorList(playerid, Type) //Type = 1 Создание || Type = 2 Редактирование
{
	if(Type == 1)
	{
		new str[1500];
		new List = GetPVarInt(playerid, "Interior_List");
		for(new i = (10*List)-9; i <= 10*List; i++)
		{
			if(i >= sizeof(HouseInterior)) break;
			format(str, sizeof(str), "%s"Main_Color"- "Color_White"%s\n", str, HouseInterior[i][hIntName]);
		}
		if(List * 10 <  sizeof(HouseInterior)) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
		if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);
		ShowDialog(playerid, D_CreateHouse_Int, DIALOG_STYLE_LIST, Main_Color"Выбор интерьера дома", str, Color_White"Далее", Color_White"Закрыть");
	}
	else if(Type == 2)
	{
		new str[1500];
		new List = GetPVarInt(playerid, "Interior_List");
		for(new i = (10*List)-9; i <= 10*List; i++)
		{
			if(i >= sizeof(HouseInterior)) break;
			format(str, sizeof(str), "%s"Main_Color"- "Color_White"%s\n", str, HouseInterior[i][hIntName]);
		}
		if(List * 10 <  sizeof(HouseInterior))format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
		if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);
		ShowDialog(playerid, D_EditHouse_Int, DIALOG_STYLE_LIST, Main_Color"Выбор интерьера дома", str, Color_White"Далее", Color_White"Закрыть");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vRenter] == playerid)
	{
		if(vInfo[vehicleid][vOwner] == Job_CarThief)
		{
			SendClientMessage(playerid, -1, Color_Grey"Вы покинули угнаный транспорт. У вас есть 10 минут чтобы вернутся в него иначе он будет уничтожен");
			SetPVarInt(playerid, "CarThiefTimer", SetTimerEx("RemoveThiefCar", 600000, false, "dd", playerid, true));
		}
		else SendClientMessage(playerid, -1, Color_Grey"Вы покинули рабочий транспорт. У вас есть 10 минут чтобы вернутся в него иначе он будет отбуксирован");
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeBusiness && vInfo[vehicleid][vRenter] == playerid)
	{
		SendClientMessage(playerid, -1, Color_Grey"Вы покинули арендованный транспорт. У вас есть 10 минут чтобы вернутся в него иначе он будет отбуксирован");
	}
	else if(vInfo[vehicleid][vType] == VehicleTypeFraction)
	{
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Hospital && vInfo[vehicleid][vModel] == 416)
			{
				if(vInfo[vehicleid][vRenter] == playerid)
				{
					DeletePVar(playerid, "StartBloodVehicle");
					DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
					vInfo[vehicleid][vText] = Text3D:0;
					vInfo[vehicleid][vRenter] = -1;
				}
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	RemoveCarriedObj(playerid, true);
	if(GetPVarInt(playerid, "Spec_Admin_ID"))
	{
		SpectatePlayer(GetPVarInt(playerid, "Spec_Admin_ID")-1, playerid);
	}

	if(oldstate == PLAYER_STATE_DRIVER)
	{
		if(GetPVarInt(playerid, "SpeedometrID")) HidePlayerSpeedometr(playerid);

		if(GetPVarInt(playerid, "TaxiPassenger"))
		{
			new id = GetPVarInt(playerid, "TaxiPassenger")-1;
			new Float:X = GetPVarFloat(playerid, "TaxiX");
			new Float:Y = GetPVarFloat(playerid, "TaxiY");
			new Float:Z = GetPVarFloat(playerid, "TaxiZ");
			new Float:Distance = GetPVarFloat(playerid, "TaxiDistance");

			if(GetVehicleDistanceFromPoint(GetPVarInt(playerid, "TaxiVehicle"), Float:X, Float:Y, Float:Z) < Distance/2.0)
			{
				SendClientMessage(id, -1, Color_White"Водитель покинул такси, вы проехали более половины пути и поэтому средства не будут возвращены");
				GivePlayerMoneyEx(playerid, GetPVarInt(id, "TaxiPrice"));
			}
			else
			{
				if(pInfo[id][pLevel])
				{
					new str[145];
					format(str, sizeof(str), Color_White"Водитель покинул такси, вы проехали менее половины пути и поэтому получили обратно"Color_Green" %d$", GetPVarInt(id, "TaxiPrice"));
					SendClientMessage(id, -1, str);
					GivePlayerMoneyEx(id, GetPVarInt(id, "TaxiPrice"));
				}
			}

			DeletePVar(id, "TaxiDriver");
			DeletePVar(id, "TaxiPrice");

			DeletePVar(playerid, "TaxiPassenger");
			DeletePVar(playerid, "TaxiX");
			DeletePVar(playerid, "TaxiY");
			DeletePVar(playerid, "TaxiZ");
			DeletePVar(playerid, "TaxiDistance");

			pInfo[playerid][pGPSType] = GPS_Type_None;
			DisablePlayerRaceCheckpoint(playerid);
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(GetPVarInt(playerid, "TaxiPoint")) DeletePVar(playerid, "TaxiPoint");

		if(GetPVarInt(playerid, "TaxiDriver"))
		{
			new id = GetPVarInt(playerid, "TaxiDriver")-1;
			new Float:X = GetPVarFloat(id, "TaxiX");
			new Float:Y = GetPVarFloat(id, "TaxiY");
			new Float:Z = GetPVarFloat(id, "TaxiZ");
			new Float:Distance = GetPVarFloat(id, "TaxiDistance");

			if(GetVehicleDistanceFromPoint(GetPVarInt(id, "TaxiVehicle"), Float:X, Float:Y, Float:Z) < Distance/2.0)
			{
				new str[145];
				format(str, sizeof(str), Color_White"Клиент покинул такси, вы проехали более половины пути и поэтому получили"Color_Green" %d$", GetPVarInt(playerid, "TaxiPrice"));
				SendClientMessage(id, -1, str);
				GivePlayerMoneyEx(id, GetPVarInt(playerid, "TaxiPrice"));
			}
			else SendClientMessage(id, -1, Color_White"Клиент покинул такси, вы проехали менее половины пути и поэтому не получили оплату");

			DeletePVar(playerid, "TaxiDriver");
			DeletePVar(playerid, "TaxiPrice");

			DeletePVar(id, "TaxiPassenger");
			DeletePVar(id, "TaxiX");
			DeletePVar(id, "TaxiY");
			DeletePVar(id, "TaxiZ");
			DeletePVar(id, "TaxiDistance");

			pInfo[id][pGPSType] = GPS_Type_None;
			DisablePlayerRaceCheckpoint(id);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsABoat(vInfo[vehicleid][vModel]) && !pInfo[playerid][pLicBoat])
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на управление лодками");
		}
		else if(IsAPlane(vInfo[vehicleid][vModel]) && !pInfo[playerid][pLicPlane])
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на управление воздушным транспортом");
		}
		else if(IsAMoto(vInfo[vehicleid][vModel]) && !pInfo[playerid][pLicMoto])
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на управление мототранспортом");
		}
		else if(!IsAMoped(vInfo[vehicleid][vModel]) && !IsABike(vInfo[vehicleid][vModel]) && !pInfo[playerid][pLicAuto])
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на управление машинами");
		}

		if(vInfo[vehicleid][vEdit] == true && !pInfo[playerid][pAdmin])
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт редактируется администрацией, вы не можете сесть в него!");
		}

		if(vInfo[vehicleid][vType] == VehicleTypeFraction && !vInfo[vehicleid][vEdit])
		{
			if(vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers])
			{
				RemovePlayerFromVehicle(playerid);
				new str[100];
				format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Этот транспорт принадлежит организации %s", FractionName[vInfo[vehicleid][vOwner]]);
				return SendClientMessage(playerid, -1, str);
			}
			else
			{
				if(vInfo[vehicleid][vRank] > pInfo[playerid][pRank])
				{
					RemovePlayerFromVehicle(playerid);
					new str[100];
					format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Этот транспорт доступен с должности %s", FractionRankName[vInfo[vehicleid][vOwner]][vInfo[vehicleid][vRank]]);
					return SendClientMessage(playerid, -1, str);
				}
				if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
				{
					if(vInfo[vehicleid][vOwner] == Fraction_Hospital && vInfo[vehicleid][vModel] == 416)
					{
						if(vInfo[vehicleid][vRenter] != playerid)
						{
							RemovePlayerFromVehicle(playerid);
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Кто-то уже принимает кровь в этом транспорте, вы не можете ездить на нем сейчас.");
						}
					}
				}
			}
		}
		else if(vInfo[vehicleid][vType] == VehicleTypeJob && pInfo[playerid][pJob] != vInfo[vehicleid][vOwner] && GetPVarInt(playerid, "UnOfficialJob") != vInfo[vehicleid][vOwner] && !vInfo[vehicleid][vEdit])
		{
			new str[200];
			format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Этот транспорт доступен только тем кто работает на работе "Main_Color"%sа", Jobs[vInfo[vehicleid][vOwner]][JobNames]);
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, str);
		}
		else if(vInfo[vehicleid][vType] == VehicleTypeJob && (pInfo[playerid][pJob] == vInfo[vehicleid][vOwner] || GetPVarInt(playerid, "UnOfficialJob") == vInfo[vehicleid][vOwner]) && !vInfo[vehicleid][vEdit])
		{
			if(vInfo[vehicleid][vRenter] == -1)
			{
				if(vInfo[vehicleid][vOwner] == Job_FarmDeliver && vInfo[vehicleid][vModel] == 530)
				{
					if(GetPVarInt(playerid, "FarmDeliverStage") != 2)
					{
						RemovePlayerFromVehicle(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт разрешено использовать только во время загрузки машины");
					}
					else
					{
						if(GetPVarInt(playerid, "LoaderID"))
						{
							RemovePlayerFromVehicle(playerid);
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже взяли один из погрузчиков");
						}
						SetPVarInt(playerid, "LoaderID", vehicleid);
						vInfo[vehicleid][vRenter] = playerid;
					}
				}
				else if(!vInfo[vehicleid][vPrice])
				{
					new SubStr[100];
					format(SubStr, sizeof(SubStr), Color_Yellow"Начало работы "Main_Color"%s", Jobs[vInfo[vehicleid][vOwner]][JobNames]);
					ShowDialog(playerid, D_Rent_Job_Car, DIALOG_STYLE_MSGBOX, SubStr, Color_White"Вы желаете выйти на смену на этом транспорте?", Color_White"Далее", Color_White"Закрыть");
				}
				else
				{
					new SubStr[100], str[200];
					format(SubStr, sizeof(SubStr), Color_Yellow"Начало работы "Main_Color"%s", Jobs[vInfo[vehicleid][vOwner]][JobNames]);
					format(str, sizeof(str), Color_White"Вы желаете выйти на смену на этом транспорте?\n"Color_White"Стоимость аренды данного транспорта "Color_Green"%d$", vInfo[vehicleid][vPrice]);
					ShowDialog(playerid, D_Rent_Job_Car, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Далее", Color_White"Закрыть");
				}
			}
			else if(vInfo[vehicleid][vRenter] == playerid)
			{
				if(GetPVarInt(playerid, "CarThiefTimer"))
				{
					KillTimer(GetPVarInt(playerid, "CarThiefTimer"));
					DeletePVar(playerid, "CarThiefTimer");
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				if(vInfo[vehicleid][vOwner] == Job_CarThief) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт угнал кто-то другой");
				else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт уже кто-то арендует");
			}
		}
		else if(vInfo[vehicleid][vType] == VehicleTypeBusiness && !vInfo[vehicleid][vEdit])
		{
			if(vInfo[vehicleid][vRenter] == -1)
			{
				if(!vInfo[vehicleid][vPrice])
				{
					ShowDialog(playerid, D_Rent_Car, DIALOG_STYLE_MSGBOX, Main_Color"Аренда транспорта", Color_White"Вы желаете арендовать этот транспорт?", Color_White"Далее", Color_White"Закрыть");
				}
				else
				{
					new str[200];
					format(str, sizeof(str), Color_White"Вы желаете арендовать этот транспорт?\n"Color_White"Стоимость аренды данного транспорта "Color_Green"%d$", vInfo[vehicleid][vPrice]);
					ShowDialog(playerid, D_Rent_Car, DIALOG_STYLE_MSGBOX, Main_Color"Аренда транспорта", str, Color_White"Далее", Color_White"Закрыть");
				}
			}
			else if(vInfo[vehicleid][vRenter] == playerid){}
			else
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт уже кто-то арендует");
			}
		}

		if(IsABike(vInfo[vehicleid][vModel])) EngineVehicle(vehicleid, playerid);
		else if(IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel]))
		{
			EngineVehicle(vehicleid, playerid);
			ShowPlayerSpeedometr(playerid, vehicleid);
		}
		else
		{
			SendClientMessage(playerid, -1, Color_White"Чтобы завести или заглушить двигатель, нажмите "Main_Color"["Color_White"~k~~TOGGLE_SUBMISSIONS~"Main_Color"]");
			SendClientMessage(playerid, -1, Color_White"Чтобы включить/выключить фары введите "Main_Color"["Color_White"/light"Main_Color"]");
			ShowPlayerSpeedometr(playerid, vehicleid);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Bus && vInfo[vehicleid][vRenter] != -1 && vInfo[vehicleid][vRenter] != playerid && GetPVarInt(playerid, "BusPassengerCD") <= gettime())
		{
			new str[200];
			format(str, sizeof(str), Color_White"В ваш автобус сел пассажир, к вашей зарплате прибавлено"Color_Green" %d$", pInfo[vInfo[vehicleid][vRenter]][pSkill][Job_Bus]*1000);
			SendClientMessage(vInfo[vehicleid][vRenter], -1, str);
			GivePlayerMoneyInPayDay(vInfo[vehicleid][vRenter], pInfo[vInfo[vehicleid][vRenter]][pSkill][Job_Bus]*1000);

			SetPVarInt(playerid, "BusPassengerCD", gettime()+300);
		}
		else if(vInfo[vehicleid][vType] == VehicleTypeFraction)
		{
			if(vInfo[vehicleid][vOwner] == Fraction_Hospital && vInfo[vehicleid][vModel] == 416 && GetPlayerVehicleSeat(playerid) > 1 && vInfo[vehicleid][vRenter] != playerid
			&& vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
			{
				if(GetPVarInt(playerid, "BloodCD"))
				{
					RemovePlayerFromVehicle(playerid);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы сдавали кровь недавно. Вам нужно время чтобы восстановиться");
				}
				ShowDialog(playerid, D_Blood_Donor, DIALOG_STYLE_MSGBOX, Main_Color"Сдача крови", Color_White"Вы сели в машину к сотруднику который принимает кровь\n\
				Вы готовы сдать 1 литр крови и получить вознаграждение в "Color_Green"10000$", Color_White"Да", Color_White"Нет");
			}
			else if(vInfo[vehicleid][vOwner] == Fraction_Taxi && vInfo[vehicleid][vRenter] != playerid && vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
			{
				new bool:finded = false;
				foreach(new i: Player)
				{
					if(pInfo[i][pAuth] && i != playerid && GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) > 0)
					{
						finded = true;
						break;
					}
				}
				if(!finded)
				{
					if(pInfo[playerid][pLevel] && pInfo[playerid][pMoney] < GetPVarInt(vInfo[vehicleid][vRenter], "TaxiFare"))
					{
						RemovePlayerFromVehicle(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств на оплату хотя бы 1км. Вам не чем платить в такси");
					}
					ShowDialog(playerid, D_Taxi_Point, DIALOG_STYLE_LIST, Main_Color"Выбор места назначения", Color_White"Выбрать в навигаторе\nУстановить точку на карте", Color_White"Далее", Color_White"Закрыть");
				}
			}
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new newstate = GetPlayerState(playerid);
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(pInfo[playerid][pWalkStyle])
		{
			if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
	        || ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
	        || ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT)))
	        {
	        	SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
	        }
	    }

		if(newkeys & KEY_WALK)
		{
			new areaid[1];
			GetPlayerDynamicAreas(playerid, areaid);
			if(areaid[0] && Streamer_HasIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_ARRAY_TYPE))
			{
				switch(Streamer_GetIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_ARRAY_TYPE))
				{
					case Array_Type_FractionWare:
					{
						new FractionID = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_INDX);
						if(pInfo[playerid][pMembers] != FractionID) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");
						new str[100];
						format(str, sizeof(str), Main_Color"Склад организации %s", FractionName[FractionID]);
						if(CanUseRChat(FractionID)) ShowDialog(playerid, D_FractionWare, DIALOG_STYLE_LIST, str, Color_White"Деньги", Color_White"Далее", Color_White"Закрыть");
						else if(IsABand(FractionID)) ShowDialog(playerid, D_FractionWare, DIALOG_STYLE_LIST, str, Color_White"Деньги\nМатериалы\nНаркотики", Color_White"Далее", Color_White"Закрыть");
					}
					case Array_Type_Gate:
					{
						new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_INDX);
						if(Gate[indx][GateFraction] == Fraction_None)
						{
							if(!Gate[indx][GateStatus])
							{
								MoveDynamicObject(Gate[indx][GateID], Gate[indx][GateOpen][0], Gate[indx][GateOpen][1], Gate[indx][GateOpen][2], Gate[indx][GateSpeed], Gate[indx][GateOpen][3], Gate[indx][GateOpen][4], Gate[indx][GateOpen][5]);
								if(Gate[indx][GateIDTwo] && IsValidDynamicObject(Gate[indx][GateIDTwo])) MoveDynamicObject(Gate[indx][GateIDTwo], Gate[indx][GateOpenTwo][0], Gate[indx][GateOpenTwo][1], Gate[indx][GateOpenTwo][2], Gate[indx][GateSpeed], Gate[indx][GateOpenTwo][3], Gate[indx][GateOpenTwo][4], Gate[indx][GateOpenTwo][5]);
								Gate[indx][GateStatus] = true;
								SetTimerEx("CloseGate", 10000, false, "d", indx);
							}
						}
						else
						{
							if(Gate[indx][GateFraction] != pInfo[playerid][pMembers])
							{
								new str[100];
								format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Доступно только членам организации %s", FractionName[Gate[indx][GateFraction]]);
								return SendClientMessage(playerid, -1, str);
							}
							if(!Gate[indx][GateStatus])
							{
								MoveDynamicObject(Gate[indx][GateID], Gate[indx][GateOpen][0], Gate[indx][GateOpen][1], Gate[indx][GateOpen][2], Gate[indx][GateSpeed], Gate[indx][GateOpen][3], Gate[indx][GateOpen][4], Gate[indx][GateOpen][5]);
								if(Gate[indx][GateIDTwo] && IsValidDynamicObject(Gate[indx][GateIDTwo])) MoveDynamicObject(Gate[indx][GateIDTwo], Gate[indx][GateOpenTwo][0], Gate[indx][GateOpenTwo][1], Gate[indx][GateOpenTwo][2], Gate[indx][GateSpeed], Gate[indx][GateOpenTwo][3], Gate[indx][GateOpenTwo][4], Gate[indx][GateOpenTwo][5]);
								Gate[indx][GateStatus] = true;
								SetTimerEx("CloseGate", 10000, false, "d", indx);
							}
						}
					}
				}
			}

			for(new i = 0; i < sizeof(Pickups); i++)
			{
				if(Pickups[i][IsPickTP] && IsPlayerInDynamicArea(playerid, Pickups[i][PickAreaID]))
				{
					if(Pickups[i][PickFraction] != Fraction_None && pInfo[playerid][pMembers] != Pickups[i][PickFraction]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет ключей от этой двери");
					else if(i == PrisonEnter)
					{
						if(!pInfo[playerid][pJail]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Войти могут только те кто сидит в тюрьме");
						else
						{
							SetPVarInt(playerid, "JailCD", 2);
							SetPlayerAttachedObject(playerid, AttachSlotJob, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
						}
					}
					else if(i == HangarOneEnter && !HangarStatus[0]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");
					else if(i == HangarTwoEnter && !HangarStatus[1]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");
					else if(i == HangarThreeEnter && !HangarStatus[2]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");
					else if(i == HangarFourEnter && !HangarStatus[3]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");
					else if(i == HangarFiveEnter && !HangarStatus[4]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");
					else if(i == HangarSixEnter && !HangarStatus[5]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ангар закрыт");

					new Float:X, Float:Y, Float:Z, virtualworld, interiorid;
					new indx = Pickups[i][PickTpPickID];

					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_X, X);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Y, Y);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Z, Z);

					virtualworld = Streamer_GetIntData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_WORLD_ID);
					interiorid = Streamer_GetIntData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_INTERIOR_ID);
					if(virtualworld || interiorid) SetPVarInt(playerid, "InPickup", i+1);
					else DeletePVar(playerid, "InPickup");

					SetPlayerPosition(playerid, X, Y, Z, Pickups[indx][PickAngle], virtualworld, interiorid);

					if(i == PrisonExit && pInfo[playerid][pJail])
					{
						SetPVarInt(playerid, "JailCD", 2);
						if(IsPlayerAttachedObjectSlotUsed(playerid, AttachSlotJob))
						{
							if(GetPVarInt(playerid, "MetallCount")) ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
							else RemovePlayerAttachedObject(playerid, AttachSlotJob);
						}
					}
					return 1;
				}
			}
			for(new i = 1; i < sizeof(hInfo); i++)
			{
				if(!hInfo[i][hID]) continue;
				if(IsPlayerInDynamicArea(playerid, hInfo[i][hArea]))
				{
					if(hInfo[i][hClose] && hInfo[i][hOwnerID] != pInfo[playerid][pID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот дом закрыт");
					SetPVarInt(playerid, "InHouse", hInfo[i][hID]);
					SetPlayerPosition(playerid, HouseInterior[hInfo[i][hInterior]][hIntX], HouseInterior[hInfo[i][hInterior]][hIntY], HouseInterior[hInfo[i][hInterior]][hIntZ], HouseInterior[hInfo[i][hInterior]][hIntA], House_World+hInfo[i][hID], HouseInterior[hInfo[i][hInterior]][hInt]);
					return 1;
				}
				else if(IsPlayerInDynamicArea(playerid, hInfo[i][hExitArea]))
				{
					DeletePVar(playerid, "InHouse");
					SetPlayerPosition(playerid, hInfo[i][hX], hInfo[i][hY], hInfo[i][hZ], hInfo[i][hA], 0, 0);
					return 1;
				}
			}
			for(new i = 1; i < sizeof(bInfo); i++)
			{
				if(!bInfo[i][bID]) continue;
				if(IsPlayerInDynamicArea(playerid, bInfo[i][bArea]) && BusinessType[bInfo[i][bType]][bInt])
				{
					if(bInfo[i][bType] == BusinessCasinoBeginner && pInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Войти в это казино можно только с 3 уровня");
					else if(bInfo[i][bType] == BusinessCasinoCaligula && pInfo[playerid][pLevel] < 10) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Войти в это казино можно только с 10 уровня");
					else if(bInfo[i][bType] == BusinessCasinoFourDragons && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Войти в это казино можно только с 15 уровня");
					SetPVarInt(playerid, "InBusiness", bInfo[i][bID]);
					SetPlayerPosition(playerid, BusinessType[bInfo[i][bType]][bIntX], BusinessType[bInfo[i][bType]][bIntY], BusinessType[bInfo[i][bType]][bIntZ], BusinessType[bInfo[i][bType]][bIntA], Business_World+bInfo[i][bID], BusinessType[bInfo[i][bType]][bInt]);
					return 1;
				}
				else if(IsPlayerInDynamicArea(playerid, bInfo[i][bExitArea]))
				{
					DeletePVar(playerid, "InBusiness");
					SetPlayerPosition(playerid, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ], bInfo[i][bA], 0, 0);
					return 1;
				}
			}
			{
				new VW = GetPlayerVirtualWorld(playerid);
				new Int = GetPlayerInterior(playerid);
				for(new i = 0; i < sizeof(Vending); i++)
				{
					if(Vending[i][VendID] && IsPlayerInDynamicArea(playerid, Vending[i][VendArea]) && Vending[i][VendInt] == Int && Vending[i][VendVW] == VW)
					{
						if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");
						ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.1, false, false, false, false, 0, 1);
						SetTimerEx("AnimSpurnkTake", 1400, false, "d", playerid);
						return 1;
					}
				}
			}
			for(new i = 0; i < MAX_TENT; i++)
			{
				if(IsPlayerInDynamicArea(playerid, Tent[i][TentArea]))
				{
					if(Tent[i][TentPlayer] == -1)
					{
						new str[100];
						format(str, sizeof(str), Color_White"Желаете арендовать эту палатку?\n\
						"Color_White"Стоимость "Color_Green"%d$/ч", Tent[i][TentPrice]);
						ShowDialog(playerid, D_Tent_Rent, DIALOG_STYLE_MSGBOX, Main_Color"Аренда палатки", str, Color_White"Да", Color_White"Нет");
						SetPVarInt(playerid, "TentIndx", i+1);
					}
					else if(Tent[i][TentPlayer] == playerid)
					{
						ShowDialog(playerid, D_Tent_Menu, DIALOG_STYLE_LIST, Main_Color"Меню палатки", Main_Color"- "Color_White"Добавить товар\n\
						"Main_Color"- "Color_White"Удалить товар\n\
						"Main_Color"- "Color_White"Отменить аренду", Color_White"Далее", Color_White"Закрыть");
					}
					else
					{
						SetPVarInt(playerid, "TentIndx", i+1);
						ShowTentItem(playerid, i);
					}
					return 1;
				}
			}
			for(new i = 0; i < MAX_CASINOTABLE; i++)
			{
				if(IsPlayerInDynamicArea(playerid, CasinoTable[i][CasTabArea]))
				{
					PlayerSitTable(playerid, i);
					return 1;
				}
			}
			for(new i = 0; i < MAX_DROPED; i++)
			{
				if(IsPlayerInDynamicArea(playerid, DropedItems[i][DropItemArea]))
				{
					if(!AddPlayerInventory(playerid, DropedItems[i][DropItemID], DropedItems[i][DropItemCount])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
					ApplyAnimation(playerid, "BOMBER","BOM_PLANT", 2.0, false, false, false, false, 0, true);
					new str[100];
					format(str, sizeof(str), "поднял(а) %s", Items[DropedItems[i][DropItemID]][ItemName]);
					ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
					ClearDrop(i);
					return 1;
				}
			}
			if(GetPVarInt(playerid, "UnOfficialJob") == Job_Lumberjack && !GetPVarInt(playerid, "ChopCount") && !GetPVarInt(playerid, "TreeIndx"))
			{
				for(new i = 0; i < sizeof(LumberjackTree); i++)
				{
					if(IsPlayerInDynamicArea(playerid, LumberjackTree[i][TreeArea]) && !LumberjackTree[i][TreeTimer])
					{
						SetPVarInt(playerid, "TreeIndx", i+1);
						SetPVarInt(playerid, "DisableTextAnim", 1);
						ApplyAnimation(playerid, "CHAINSAW","WEAPON_csaw", 1.0, true, true, true, false, 0, true);
						SetTimerEx("SetCarriedObj", 5000, false, "d", playerid);
						return 1;
					}
				}
			}
			else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Farm && !GetPVarInt(playerid, "PlantCount") && !GetPVarInt(playerid, "PlantIndx"))
			{
				for(new i = 0; i < sizeof(FarmPlant); i++)
				{
					if(IsPlayerInDynamicArea(playerid, FarmPlant[i][PlantArea]) && !FarmPlant[i][PlantTimer])
					{
						SetPVarInt(playerid, "PlantIndx", i+1);
						SetPVarInt(playerid, "DisableTextAnim", 1);
						TogglePlayerControllable(playerid, false);
						ApplyAnimation(playerid, "BOMBER","BOM_PLANT_LOOP", 2.0, true, false, false, false, 0, true);
						SetTimerEx("SetCarriedObj", 5000, false, "d", playerid);
						return 1;
					}
				}
			}
			else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Mine && !GetPVarInt(playerid, "MetallCount") && !GetPVarInt(playerid, "MetallIndx"))
			{
				for(new i = 0; i < sizeof(MineMetall); i++)
				{
					if(IsPlayerInDynamicArea(playerid, MineMetall[i][MetallArea]) && !MineMetall[i][MetallTimer])
					{
						SetPVarInt(playerid, "MetallIndx", i+1);
						SetPVarInt(playerid, "DisableTextAnim", 1);
						ApplyAnimation(playerid,"BASEBALL", "Bat_4", 4.1, true, false, false, false, 0, true);
						SetTimerEx("SetCarriedObj", 5000, false, "d", playerid);
						return 1;
					}
				}
			}
			else if(pInfo[playerid][pJail] && !GetPVarInt(playerid, "MetallCount") && !GetPVarInt(playerid, "MetallIndx"))
			{
				for(new i = 0; i < sizeof(PrisonMineMetall); i++)
				{
					if(IsPlayerInDynamicArea(playerid, PrisonMineMetall[i][MetallArea]) && !PrisonMineMetall[i][MetallTimer])
					{
						SetPVarInt(playerid, "MetallIndx", i+1);
						SetPVarInt(playerid, "DisableTextAnim", 1);
						ApplyAnimation(playerid,"BASEBALL", "Bat_4", 4.1, true, false, false, false, 0, true);
						SetTimerEx("SetCarriedObj", 5000, false, "d", playerid);
						return 1;
					}
				}
			}
			else if(GetPVarInt(playerid, "RentedCar"))
			{
				new vehicleid = GetPVarInt(playerid, "RentedCar");
				if(pInfo[playerid][pJob] == Job_TrashCollector && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_TrashCollector)
				{
					new Float:X, Float:Y, Float:Z;
					GetVehicleBootPos(vehicleid, X, Y, Z);
					if(IsPlayerInRangeOfPoint(playerid, 1.4, X, Y, Z))
					{
						if(!GetPVarInt(playerid, "TrashBagCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет мешков");
						SendClientMessage(playerid, -1, Color_Yellow"Вы положили мешок в машину");

						new str[100];
						vInfo[vehicleid][vItemInVehicle] += GetPVarInt(playerid, "TrashBagCount");
						format(str, sizeof(str), Main_Color"Мусорных мешков загружено: %d", vInfo[vehicleid][vItemInVehicle]);
						UpdateDynamic3DTextLabelText(vInfo[vehicleid][vText], -1, str);

						RemoveCarriedObj(playerid, false);
						ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
						return 1;
					}
					else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть возле багажника");
				}
				else if(pInfo[playerid][pJob] == Job_DriverDelivery && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_DriverDelivery)
				{
					new Float:X, Float:Y, Float:Z;
					GetVehicleBootPos(vehicleid, X, Y, Z);
					if(IsPlayerInRangeOfPoint(playerid, 1.4, X, Y, Z))
					{
						if(GetPVarInt(playerid, "DriverDeliveryStatus") == 1)
						{
							if(!GetPVarInt(playerid, "BoxCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет коробок");
							SendClientMessage(playerid, -1, Color_Yellow"Вы положили коробку в машину");

							new str[100];
							vInfo[vehicleid][vItemInVehicle] += GetPVarInt(playerid, "BoxCount");
							format(str, sizeof(str), Main_Color"Коробок загружено: %d", vInfo[vehicleid][vItemInVehicle]);
							UpdateDynamic3DTextLabelText(vInfo[vehicleid][vText], -1, str);

							RemoveCarriedObj(playerid, false);
							ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);

							if(vInfo[vehicleid][vItemInVehicle] >= 5+(pInfo[playerid][pSkill][Job_DriverDelivery]*5))
							{
								SendClientMessage(playerid, -1, Color_Yellow"Вы загрузили максимальное количество коробок для вашего навыка водителя экспедитора");
								SetPVarInt(playerid, "DriverDeliveryStatus", 2);
							}
							SetDriverDeliveryMarker(playerid);
						}
						else if(GetPVarInt(playerid, "DriverDeliveryStatus") == 2)
						{
							if(vInfo[vehicleid][vItemInVehicle] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В машине нет коробок");
							if(GetPVarInt(playerid, "BoxCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть коробка в руках");

							SendClientMessage(playerid, -1, Color_Yellow"Вы взяли коробку. Отнесите её в бизнес.");
							ClearAnimations(playerid, true);
							ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
							SetPlayerAttachedObject(playerid, AttachSlotJob, 1221, 1, 0.135011, 0.463495, -0.024351, 357.460632, 87.350753, 88.068374, 0.434164, 0.491270, 0.368655);
							SetPVarInt(playerid, "BoxCount", 1);

							new str[100];
							vInfo[vehicleid][vItemInVehicle] -= GetPVarInt(playerid, "BoxCount");
							format(str, sizeof(str), Main_Color"Коробок загружено: %d", vInfo[vehicleid][vItemInVehicle]);
							UpdateDynamic3DTextLabelText(vInfo[vehicleid][vText], -1, str);
						}
					}
					else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть возле багажника");
				}
			}
			else if(IsPlayerInDynamicArea(playerid, Areas[StashArea]))
			{
				new str[200];
				format(str, sizeof(str), Color_White"Материалы: "Main_Color"%d\n\
				"Color_White"Наркотики: "Main_Color"%d", pInfo[playerid][pStashMaterials], pInfo[playerid][pStashDrugs]);
				ShowDialog(playerid, D_Stash, DIALOG_STYLE_LIST, Main_Color"Тайник", str, Color_White"Далее", Color_White"Закрыть");
			}
		}
		else if(newkeys & KEY_SECONDARY_ATTACK)
		{
			if(AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_PISSING || AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DANCE1 || AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DANCE2 || AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DANCE3 || AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_DANCE4)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
			else if((AntiCheatGetAnimationIndex(playerid) == Animation_Wank_Loop && !GetPVarInt(playerid, "SpermDonorTime")) || (AntiCheatGetAnimationIndex(playerid) >= Animation_Dance_1 && AntiCheatGetAnimationIndex(playerid) <= Animation_Dance_13))
			{
				ClearAnim(playerid);
			}
		}


		if(pInfo[playerid][pJob] == Job_CarThief && GetPVarInt(playerid, "ThiefCar"))
		{
			if(GetPVarInt(playerid, "CarJackMiniGameStatus") == 2)
			{
				if(GetPVarInt(playerid, "CarJackMiniGameKeys") & newkeys)
				{
					switch(GetPVarInt(playerid, "CarJackMiniGameKeys"))
					{
						case KEY_CROUCH: GameTextForPlayer(playerid, "~g~~k~~PED_DUCK~", 3000, 3);
						case KEY_SPRINT: GameTextForPlayer(playerid, "~g~~k~~PED_SPRINT~", 3000, 3);
						case KEY_SECONDARY_ATTACK: GameTextForPlayer(playerid, "~g~~k~~VEHICLE_ENTER_EXIT~", 3000, 3);
						case KEY_JUMP: GameTextForPlayer(playerid, "~g~~k~~PED_JUMPING~", 3000, 3);
						case KEY_WALK: GameTextForPlayer(playerid, "~g~~k~~SNEAK_ABOUT~", 3000, 3);
						case KEY_YES: GameTextForPlayer(playerid, "~g~~k~~CONVERSATION_YES~", 3000, 3);
						case KEY_NO: GameTextForPlayer(playerid, "~g~~k~~CONVERSATION_NO~", 3000, 3);
						case KEY_CTRL_BACK: GameTextForPlayer(playerid, "~g~~k~~GROUP_CONTROL_BWD~", 3000, 3);
					}
					SetPVarInt(playerid, "CarJackMiniGame", 1+random(3));
	        		SetPVarInt(playerid, "CarJackMiniGameStatus", 1);
	        		SetPVarInt(playerid, "CarJackMiniGameWinCount", GetPVarInt(playerid, "CarJackMiniGameWinCount")+1);
				}
				else
				{
					switch(GetPVarInt(playerid, "CarJackMiniGameKeys"))
					{
						case KEY_CROUCH: GameTextForPlayer(playerid, "~r~~k~~PED_DUCK~", 3000, 3);
						case KEY_SPRINT: GameTextForPlayer(playerid, "~r~~k~~PED_SPRINT~", 3000, 3);
						case KEY_SECONDARY_ATTACK: GameTextForPlayer(playerid, "~r~~k~~VEHICLE_ENTER_EXIT~", 3000, 3);
						case KEY_JUMP: GameTextForPlayer(playerid, "~r~~k~~PED_JUMPING~", 3000, 3);
						case KEY_WALK: GameTextForPlayer(playerid, "~r~~k~~SNEAK_ABOUT~", 3000, 3);
						case KEY_YES: GameTextForPlayer(playerid, "~r~~k~~CONVERSATION_YES~", 3000, 3);
						case KEY_NO: GameTextForPlayer(playerid, "~r~~k~~CONVERSATION_NO~", 3000, 3);
						case KEY_CTRL_BACK: GameTextForPlayer(playerid, "~r~~k~~GROUP_CONTROL_BWD~", 3000, 3);
					}
				}
			}
		}
		else if(pInfo[playerid][pJob] == Job_TrashCollector && GetPVarInt(playerid, "TrashBagCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP) RemoveCarriedObj(playerid, true);
		}
		else if(pInfo[playerid][pJob] == Job_DriverDelivery && GetPVarInt(playerid, "BoxCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP)
			{
				RemoveCarriedObj(playerid, true);

				if(GetPVarInt(playerid, "DriverDeliveryStatus") == 1) SetDriverDeliveryMarker(playerid);
				else if(GetPVarInt(playerid, "DriverDeliveryStatus") == 2)
				{
					if(GetPVarInt(playerid, "RentedCar"))
					{
						new vehicleid = GetPVarInt(playerid, "RentedCar");
						if(pInfo[playerid][pJob] == Job_DriverDelivery && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_DriverDelivery)
						{
							if(vInfo[vehicleid][vItemInVehicle] <= 0)
							{
								SendClientMessage(playerid, -1, Color_Yellow"В машине закончились коробки");
								SetPVarInt(playerid, "DriverDeliveryStatus", 1);
								SetDriverDeliveryMarker(playerid);
							}
						}
					}
				}
			}
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Lumberjack && GetPVarInt(playerid, "ChopCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP)
			{
				RemoveCarriedObj(playerid, true);
				SetPlayerAttachedObject(playerid, AttachSlotJob, 341, 6);
			}
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Farm && GetPVarInt(playerid, "PlantCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP)
			{
				RemoveCarriedObj(playerid, true);
				SetPlayerAttachedObject(playerid, AttachSlotJob, 18890, 14, 0.3410, 0.0999, -0.0109, -72.9999, 0.0000, -174.4999, 1.0000, 1.0000, 0.5319, 0, 0);
			}
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Mine && GetPVarInt(playerid, "MetallCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP)
			{
				RemoveCarriedObj(playerid, true);
				SetPlayerAttachedObject(playerid, AttachSlotJob, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
			}
		}
		else if(pInfo[playerid][pJail] && GetPVarInt(playerid, "MetallCount"))
		{
			if(newkeys & KEY_FIRE || newkeys & KEY_JUMP)
			{
				RemoveCarriedObj(playerid, true);
				new PickupID = GetPVarInt(playerid, "InPickup");
				if(PickupID && PickupID-1 == PrisonEnter) SetPlayerAttachedObject(playerid, AttachSlotJob, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
			}
		}
		else if(GetPVarInt(playerid, "AmmoBox") && (newkeys & KEY_FIRE || newkeys & KEY_JUMP)) RemoveCarriedObj(playerid, true);


	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
		if(newkeys & KEY_SUBMISSION)
		{
			pc_cmd_engine(playerid);
			return 1;
		}
		else if(newkeys & KEY_CROUCH)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине");

			new areaid[1];
			GetPlayerDynamicAreas(playerid, areaid);
			if(areaid[0] && Streamer_HasIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_ARRAY_TYPE))
			{
				switch(Streamer_GetIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_ARRAY_TYPE))
				{
					case Array_Type_Gate:
					{
						new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid[0], E_STREAMER_INDX);
						if(Gate[indx][GateFraction] == Fraction_None)
						{
							if(!Gate[indx][GateStatus])
							{
								MoveDynamicObject(Gate[indx][GateID], Gate[indx][GateOpen][0], Gate[indx][GateOpen][1], Gate[indx][GateOpen][2], Gate[indx][GateSpeed], Gate[indx][GateOpen][3], Gate[indx][GateOpen][4], Gate[indx][GateOpen][5]);
								if(Gate[indx][GateIDTwo] && IsValidDynamicObject(Gate[indx][GateIDTwo])) MoveDynamicObject(Gate[indx][GateIDTwo], Gate[indx][GateOpenTwo][0], Gate[indx][GateOpenTwo][1], Gate[indx][GateOpenTwo][2], Gate[indx][GateSpeed], Gate[indx][GateOpenTwo][3], Gate[indx][GateOpenTwo][4], Gate[indx][GateOpenTwo][5]);
								Gate[indx][GateStatus] = true;
								SetTimerEx("CloseGate", 10000, false, "d", indx);
							}
						}
						else
						{
							if(Gate[indx][GateFraction] != pInfo[playerid][pMembers])
							{
								new str[100];
								format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Доступно только членам организации %s", FractionName[Gate[indx][GateFraction]]);
								return SendClientMessage(playerid, -1, str);
							}
							if(!Gate[indx][GateStatus])
							{
								MoveDynamicObject(Gate[indx][GateID], Gate[indx][GateOpen][0], Gate[indx][GateOpen][1], Gate[indx][GateOpen][2], Gate[indx][GateSpeed], Gate[indx][GateOpen][3], Gate[indx][GateOpen][4], Gate[indx][GateOpen][5]);
								if(Gate[indx][GateIDTwo] && IsValidDynamicObject(Gate[indx][GateIDTwo])) MoveDynamicObject(Gate[indx][GateIDTwo], Gate[indx][GateOpenTwo][0], Gate[indx][GateOpenTwo][1], Gate[indx][GateOpenTwo][2], Gate[indx][GateSpeed], Gate[indx][GateOpenTwo][3], Gate[indx][GateOpenTwo][4], Gate[indx][GateOpenTwo][5]);
								Gate[indx][GateStatus] = true;
								SetTimerEx("CloseGate", 10000, false, "d", indx);
							}
						}
					}
				}
			}

			for(new i = 1; i < sizeof(bInfo); i++)
			{
				if(!bInfo[i][bID]) continue;
				if(IsPlayerInDynamicArea(playerid, bInfo[i][bCarArea]))
				{
					if(bInfo[i][bType] == BusinessGasStation)
					{
						if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return 1;

						new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
						GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);

						if(engine) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Перед заправкой заглушите двигатель");

						ShowDialog(playerid, D_Fuel_Menu_Value, DIALOG_STYLE_INPUT, Main_Color"АЗС", Color_White"Введите количество бензина на которое хотите заправиться\n\
						"Color_White"Если вы хоите заправить полный бак оставьте поле пустым\n\
						"Color_White"Стоимость 1% - "Color_Green"10$", Color_White"Далее", Color_White"Закрыть");
						break;
					}
					else if(bInfo[i][bType] == BusinessKFC)
					{
						ShowDialog(playerid, D_KFC_Sell_Menu, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"KFC", Main_Color"Название\t"Main_Color"Цена\n\
						"Main_Color"Картофель фри\t"Color_Green"300$\n\
						"Main_Color"Наггетсы\t"Color_Green"500$\n\
						"Main_Color"Крылышки\t"Color_Green"500$\n\
						"Main_Color"Бургер\t"Color_Green"800$\n\
						"Main_Color"Большой бургер\t"Color_Green"900$", Color_White"Купить", Color_White"Закрыть");
						break;
					}
					else if(bInfo[i][bType] == BusinessGeneralStore1 || bInfo[i][bType] == BusinessGeneralStore2 || bInfo[i][bType] == BusinessGeneralStore3)
					{
						ShowDialog(playerid, D_GeneralStore_Sell_Menu, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"General Store", Main_Color"Название\t"Main_Color"Цена\n\
						"Main_Color"Часы\t"Color_Green"1500$\n\
						"Main_Color"Фотоаппарат\t"Color_Green"1200$\n\
						"Main_Color"Цветы\t"Color_Green"1000$\n\
						"Main_Color"Клюшка для гольфа\t"Color_Green"1000$\n\
						"Main_Color"Бейсбольная бита\t"Color_Green"1500$\n\
						"Main_Color"Лопата\t"Color_Green"1000$\n\
						"Main_Color"Кий\t"Color_Green"1000$\n\
						"Main_Color"Трость\t"Color_Green"800$\n\
						"Main_Color"Ролики\t"Color_Green"3000$\n\
						"Main_Color"Бензопила\t"Color_Green"3000$\n\
						"Main_Color"Катана\t"Color_Green"3000$\n\
						"Main_Color"Закрутка\t"Color_Green"800$\n\
						"Main_Color"Пустая бочка\t"Color_Green"1000$", Color_White"Купить", Color_White"Закрыть");
						break;
					}
					else if(bInfo[i][bType] == BusinessBankFillial)
					{
						ShowPlayerBankMenu(playerid);
						break;
					}
					else if(bInfo[i][bType] == BusinessTuning)
					{
						if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный транспорт нельзя установить тюнинг");
						if(vInfo[vehicleid][vType] != VehicleTypePlayer) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на личном транспорте");
						if(vInfo[vehicleid][vOwner] != pInfo[playerid][pID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это не ваш личный транспорт");
						new ComponentTypes[ZVEH_MAX_COMPONENT_TYPES];
						new size = 0;
						if(!GetVehicleCompatibleTypes(vInfo[vehicleid][vModel], ComponentTypes, size)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный транспорт нельзя установить тюнинг");
						new Float:X, Float:Y, Float:Z, Float:A;
						GetVehiclePos(vehicleid, X, Y, Z);
						GetVehicleZAngle(vehicleid, A);

						SetPVarInt(playerid, "InBusiness", i);
						PutVehicleInTuning(playerid, vehicleid);
						break;
					}
				}
			}
			if(vInfo[vehicleid][vType] == VehicleTypeJob && pInfo[playerid][pJob] == vInfo[vehicleid][vOwner])
			{
				switch(vInfo[vehicleid][vOwner])
				{
					case Job_Trucker:
					{
						if(IsPlayerInDynamicArea(playerid, Areas[TruckerLoadArea]))
						{
							if(GetPVarInt(playerid, "TruckerCD")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы недавно отвозили груз, передохните.");
							if(GetPVarInt(playerid, "TrailerID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть груз.");
							AddTruckerQueue(playerid);
						}
					}
				}
			}
			return 1;
		}
	}
	return 1;
}

stock AddTruckerQueue(playerid)
{
	if(CheckPlayerInTruckerQueue(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже находитесь в очереди");
	for(new i = 0; i < sizeof(TruckerQueue); i++)
	{
		if(TruckerQueue[i] == -1)
		{
			TruckerQueue[i] = playerid;
			UpdateTruckerQueueText();
			return 1;
		}
	}
	return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент очередь слишком большая, подождите пока она уменьшится");
}

stock CheckPlayerInTruckerQueue(playerid)
{
	for(new i = 0; i < sizeof(TruckerQueue); i++)
	{
		if(TruckerQueue[i] == playerid) return true;
	}
	return false;
}

stock RemoveTruckerQueue(playerid)
{
	if(!CheckPlayerInTruckerQueue(playerid)) return 1;
	for(new i = 0; i < sizeof(TruckerQueue); i++)
	{
		if(TruckerQueue[i] == playerid)
		{
			TruckerQueue[i] = -1;
			UpdateTruckerQueue();
			UpdateTruckerQueueText();
			return 1;
		}
	}
	return 1;
}

stock LengthTruckerQueue()
{
	new count = 0;
	for(new i = 0; i < sizeof(TruckerQueue); i++)
	{
		if(TruckerQueue[i] != -1) count++;
	}
	return count;
}

stock UpdateTruckerQueue()
{
	if(!LengthTruckerQueue()) return 1;
	if(TruckerQueue[0] == -1)
	{
		for(new i = 1; i < sizeof(TruckerQueue); i++)
		{
			if(TruckerQueue[i] != -1)
			{
				TruckerQueue[i-1] = TruckerQueue[i];
				TruckerQueue[i] = -1;
			}
		}
	}
	return 1;
}

stock UpdateTruckerQueueText()
{
	new str[200];
	if(!LengthTruckerQueue())
	{
		UpdateDynamic3DTextLabelText(Texts3D[TruckerLoadText], -1, Main_Color"Очередь на загрузку"Color_White": Пусто\n\n"Main_Color"Посигнальте чтобы встать в очередь");
	}
	else
	{
		strcat(str, Main_Color"Очередь на загрузку"Color_White":\n");
		for(new i = 0; i < sizeof(TruckerQueue); i++)
		{
			if(TruckerQueue[i] != -1) format(str, sizeof(str),"%s- %s[%d]\n", str, pInfo[TruckerQueue[i]][pName], TruckerQueue[i]);
		}
		strcat(str, "\n"Main_Color"Посигнальте чтобы встать в очередь");
		UpdateDynamic3DTextLabelText(Texts3D[TruckerLoadText], -1, str);
	}
	return 1;
}

forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid,keys,updown,leftright);
    if (pInfo[playerid][pWalkStyle] == 1)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 2)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 3)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 4)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 5)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 6)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 7)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 8)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 9)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 10)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 11)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 12)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    else if (pInfo[playerid][pWalkStyle] == 13)
    {
            if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
            {
                    KillTimer(GetPVarInt(playerid, "WalkTimer"));
                    ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1, true);
                    SetPVarInt(playerid, "WalkTimer", SetTimerEx("WalkAnim", 200, false, "d", playerid));
            }
            else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1, true), KillTimer(GetPVarInt(playerid, "WalkTimer"));
    }
    return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(pInfo[playerid][pGPSType] == GPS_Type_Job)
	{
		if(GetPVarInt(playerid, "UnOfficialJob") == Job_Lumberjack && GetPVarInt(playerid, "ChopCount"))
		{
			pInfo[playerid][pGPSType] = GPS_Type_None;
			DisablePlayerCheckpoint(playerid);
			RemoveCarriedObj(playerid, false);
			SetPlayerAttachedObject(playerid, AttachSlotJob, 341, 6);
			SetPVarInt(playerid, "ChopOnWare", GetPVarInt(playerid, "ChopOnWare")+1);
			SendClientMessage(playerid, -1, Color_White"Вы положили бревна на склад, можете продолжать работать или забрать награду");
			ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Farm && GetPVarInt(playerid, "PlantCount"))
		{
			pInfo[playerid][pGPSType] = GPS_Type_None;
			DisablePlayerCheckpoint(playerid);
			RemoveCarriedObj(playerid, false);
			SetPlayerAttachedObject(playerid, AttachSlotJob, 18890, 14, 0.3410, 0.0999, -0.0109, -72.9999, 0.0000, -174.4999, 1.0000, 1.0000, 0.5319, 0, 0);
			SetPVarInt(playerid, "CollectPlant", GetPVarInt(playerid, "CollectPlant")+1);
			SendClientMessage(playerid, -1, Color_White"Вы положили урожай на склад, можете продолжать работать или забрать награду");
			ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
		}
		else if(pInfo[playerid][pJail] && GetPVarInt(playerid, "MetallCount"))
		{
			RemoveCarriedObj(playerid, false);
			pInfo[playerid][pJail]--;
			ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);

			if(pInfo[playerid][pJailedFraction] != Fraction_None)
			{
				FractionWare[pInfo[playerid][pJailedFraction]][FractionWareMoney] += 5000;
				SaveFractionWare(pInfo[playerid][pJailedFraction]);
			}

			if(pInfo[playerid][pJail])
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы положили камень на склад, до выхода из тюрьмы осталось "Main_Color"%d", pInfo[playerid][pJail]);
				SendClientMessage(playerid, -1, str);
			}
			else
			{
				pInfo[playerid][pJail] = 0;
				pInfo[playerid][pJailNoFree] = false;
				pInfo[playerid][pJailedFraction] = Fraction_None;
				SavePlayerInt(playerid, "JailedFraction", pInfo[playerid][pJailedFraction]);

				SendClientMessage(playerid, -1, Color_White"Вы были выпущены из тюрьмы, больше не нарушайте закон");
				SetPlayerPosition(playerid, 144.3278, 1918.0723, 18.9930, 92.2102, 0, 0);
				SavePlayerBool(playerid, "JailNoFree", pInfo[playerid][pJailNoFree]);
			}
			SavePlayerInt(playerid, "Jail", pInfo[playerid][pJail]);
		}
		else
		{
			switch(pInfo[playerid][pJob])
			{
				case Job_TrashCollector:
				{
					if(GetPVarInt(playerid, "TrashBinCount"))
					{
						pInfo[playerid][pGPSType] = GPS_Type_None;
						DisablePlayerCheckpoint(playerid);
					}
				}
				case Job_CarThief:
				{
					pInfo[playerid][pGPSType] = GPS_Type_None;
					DisablePlayerCheckpoint(playerid);
				}
				case Job_DriverDelivery:
				{
					pInfo[playerid][pGPSType] = GPS_Type_None;
					DisablePlayerCheckpoint(playerid);
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(pInfo[playerid][pGPSType] == GPS_Type_GPS)
	{
		DisablePlayerRaceCheckpoint(playerid);
		pInfo[playerid][pGPSType] = GPS_Type_None;
		SendClientMessage(playerid, -1, Main_Color"[GPS] "Color_White"Вы достигли места назначения");
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(pInfo[playerid][pGPSType] == GPS_Type_Job)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeFraction && vInfo[vehicleid][vRenter] == playerid)
				{
					switch(vInfo[vehicleid][vOwner])
					{
						case Fraction_Taxi:
						{
							if(GetPVarInt(playerid, "TaxiPassenger"))
							{
								new id = GetPVarInt(playerid, "TaxiPassenger")-1;

								new str[145];
								format(str, sizeof(str), Color_White"Вы доставили "Main_Color"%s[%d] "Color_White"к месту назначения и получили "Color_Green" %d$", pInfo[id][pName], id, GetPVarInt(id, "TaxiPrice"));
								SendClientMessage(playerid, -1, str);
								GivePlayerMoneyEx(playerid, GetPVarInt(id, "TaxiPrice"));

								SendClientMessage(id, FractionColor[Fraction_Taxi], "Вы прибыли к месту назначения");
								RemovePlayerFromVehicle(id);

								FractionWare[Fraction_Taxi][FractionWareMoney] += 5000;
								SaveFractionWare(Fraction_Taxi);

								DeletePVar(id, "TaxiDriver");
								DeletePVar(id, "TaxiPrice");

								DeletePVar(playerid, "TaxiPassenger");
								DeletePVar(playerid, "TaxiX");
								DeletePVar(playerid, "TaxiY");
								DeletePVar(playerid, "TaxiZ");
								DeletePVar(playerid, "TaxiDistance");

								pInfo[playerid][pGPSType] = GPS_Type_None;
								DisablePlayerRaceCheckpoint(playerid);
							}
						}
						case Fraction_Hospital:
						{
							SendClientMessage(playerid, -1, Color_Red2"Вы прибыли к месту назначения");
							pInfo[playerid][pGPSType] = GPS_Type_None;
							DisablePlayerRaceCheckpoint(playerid);
						}
					}
				}
				else if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vRenter] == playerid)
				{
					switch(vInfo[vehicleid][vOwner])
					{
						case Job_Trucker:
						{
							if(GetPVarInt(playerid, "TrailerID") && GetPVarInt(playerid, "TrailerID") == GetVehicleTrailer(vehicleid))
							{
								RemoveTrailer(playerid, false);
								new str[100];

								UpdatePlayerSkill(playerid);

								new money = (1000*pInfo[playerid][pSkill][Job_Trucker])+3000+random(1001);

								if(pInfo[playerid][pSkill][Job_Trucker] >= Jobs[Job_Trucker][MaxSkillLevel]) money += 1000;

								format(str, sizeof(str), Color_White"Вы доставили груз, к вашей зарплате прибавлено"Color_Green" %d$", money);
								SendClientMessage(playerid, -1, str);

								GivePlayerMoneyInPayDay(playerid, money);

								switch(pInfo[playerid][pSkill][Job_Trucker])
								{
									case 1:
									{
										SetPVarInt(playerid, "TruckerCD", 600);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете взять следующий груз через 10 минут");
									}
									case 2:
									{
										SetPVarInt(playerid, "TruckerCD", 480);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете взять следующий груз через 8 минут");
									}
									case 3:
									{
										SetPVarInt(playerid, "TruckerCD", 420);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете взять следующий груз через 7 минут");
									}
									case 4:
									{
										SetPVarInt(playerid, "TruckerCD", 360);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете взять следующий груз через 6 минут");
									}
									case 5:
									{
										SetPVarInt(playerid, "TruckerCD", 300);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете взять следующий груз через 5 минут");
									}
								}
							}
						}
						case Job_TrashCollector:
						{
							DisablePlayerRaceCheckpoint(playerid);
							pInfo[playerid][pGPSType] = GPS_Type_None;
						}
						case Job_Mechanic:
						{
							DisablePlayerRaceCheckpoint(playerid);
							pInfo[playerid][pGPSType] = GPS_Type_None;
						}
						case Job_Pilot:
						{
							DisablePlayerRaceCheckpoint(playerid);
							pInfo[playerid][pGPSType] = GPS_Type_None;
							SetPVarInt(playerid, "PilotNumberPoint", GetPVarInt(playerid, "PilotNumberPoint")+1);
							if(GetPVarInt(playerid, "PilotNumberPoint") >= 10)
							{
								DeletePVar(playerid, "PilotNumberPoint");
								DeletePVar(playerid, "PilotNextX");
								DeletePVar(playerid, "PilotNextY");
								RemoveRentedCar(playerid);

								new str[100];
								UpdatePlayerSkill(playerid);

								new money;
								switch(pInfo[playerid][pSkill][Job_Pilot])
								{
									case 1: money = 3000;
									case 2: money = 4000;
									case 3: money = 6000;
									case 4: money = 8000;
									case 5: money = 10000;
								}

								format(str, sizeof(str), Color_White"Вы завершили рейс, к вашей зарплате прибавлено"Color_Green" %d$", money);
								SendClientMessage(playerid, -1, str);

								GivePlayerMoneyInPayDay(playerid, money);

								switch(pInfo[playerid][pSkill][Job_Pilot])
								{
									case 1:
									{
										SetPVarInt(playerid, "PilotCD", 600);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти в следующий рейс через 10 минут");
									}
									case 2:
									{
										SetPVarInt(playerid, "PilotCD", 480);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти в следующий рейс через 8 минут");
									}
									case 3:
									{
										SetPVarInt(playerid, "PilotCD", 360);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти в следующий рейс через 6 минут");
									}
									case 4:
									{
										SetPVarInt(playerid, "PilotCD", 300);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти в следующий рейс через 5 минут");
									}
									case 5:
									{
										SetPVarInt(playerid, "PilotCD", 240);
										SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти в следующий рейс через 4 минуты");
									}
								}
							}
							else SetPilotMarker(playerid);
						}
						case Job_Fisher:
						{
							DisablePlayerRaceCheckpoint(playerid);
							pInfo[playerid][pGPSType] = GPS_Type_None;
						}
						case Job_Bus:
						{
							DisablePlayerRaceCheckpoint(playerid);
							pInfo[playerid][pGPSType] = GPS_Type_None;
							if(GetPVarInt(playerid, "BusRoute"))
							{
								SetPVarInt(playerid, "BusRouteStage", GetPVarInt(playerid, "BusRouteStage")+1);
								if(GetPVarInt(playerid, "BusRouteStage") == 4)
								{
									SetPVarInt(playerid, "BusTime", 60);
									TogglePlayerControllable(playerid, false);
								}
								else if(GetPVarInt(playerid, "BusRouteStage") >= 5)
								{
									new str[100];
									UpdatePlayerSkill(playerid);

									new money;
									switch(GetPVarInt(playerid, "BusRoute"))
									{
										case 1:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Мэрия");
											money = 10000;
										}
										case 2:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Больница");
											money = 20000;
										}
										case 3:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Армия");
											money = 30000;
										}
										case 4:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Завод");
											money = 15000;
										}
										case 5:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Шахта");
											money = 30000;
										}
										case 6:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Ферма");
											money = 20000;
										}
										case 7:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Грузчики");
											money = 35000;
										}
										case 8:
										{
											SendClientMessage(playerid, -1, Color_Yellow"Вы завершили маршрут Деревня новичков - Водитель погрузчика");
											money = 30000;
										}

									}

									RemoveRentedCar(playerid);

									format(str, sizeof(str), Color_White"К вашей зарплате прибавлено"Color_Green" %d$", money);
									SendClientMessage(playerid, -1, str);

									GivePlayerMoneyInPayDay(playerid, money);

									switch(pInfo[playerid][pSkill][Job_Bus])
									{
										case 1:
										{
											SetPVarInt(playerid, "BusCD", 1800);
											SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти на следующий маршрут через 30 минут");
										}
										case 2:
										{
											SetPVarInt(playerid, "BusCD", 1500);
											SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти на следующий маршрут через 25 минут");
										}
										case 3:
										{
											SetPVarInt(playerid, "BusCD", 1200);
											SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти на следующий маршрут через 20 минут");
										}
										case 4:
										{
											SetPVarInt(playerid, "BusCD", 900);
											SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти на следующий маршрут через 15 минут");
										}
										case 5:
										{
											SetPVarInt(playerid, "BusCD", 600);
											SendClientMessage(playerid, -1, Color_Yellow"Вы можете выйти на следующий маршрут через 10 минут");
										}
									}
								}
								else
								{
									SetPVarInt(playerid, "BusTime", 60);
									TogglePlayerControllable(playerid, false);
								}
							}
						}
						case Job_FarmDeliver:
						{
							new FarmDeliverStage = GetPVarInt(playerid, "FarmDeliverStage");
							if(FarmDeliverStage == 1)
							{
								DisablePlayerRaceCheckpoint(playerid);
								pInfo[playerid][pGPSType] = GPS_Type_None;
								FarmDeliverStage = 2;
								SetPVarInt(playerid, "FarmDeliverStage", FarmDeliverStage);
								SendClientMessage(playerid, -1, Color_Yellow"Вы можете приступать к загрузке. Для этого сядьте в погрузчик");
								SetFarmDeliverMarker(playerid);
							}
							else if(FarmDeliverStage == 2 && vInfo[vehicleid][vModel] == 530)
							{
								DisablePlayerRaceCheckpoint(playerid);
								pInfo[playerid][pGPSType] = GPS_Type_None;
								new BoxID = CreateDynamicObject(2912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
								if(!AddVehicleAttachObj(BoxID, vehicleid, 0.000000, 0.689999, -0.064999, 0.000000, 0.000000, 0.000000)) return DestroyDynamicObject(BoxID);
								new RentedCar = GetPVarInt(playerid, "RentedCar");
								if(vInfo[RentedCar][vType] == VehicleTypeJob && vInfo[RentedCar][vOwner] == Job_FarmDeliver)
								{
									new Float:X, Float:Y, Float:Z;
									GetVehicleBootPos(RentedCar, X, Y, Z);
									CreateJobPickup(playerid, 2912, X, Y, Z, 0, 0, 2.0);
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, STREAMER_TAG_AREA:areaid)
{

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(Streamer_HasIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_ARRAY_TYPE))
		{
			switch(Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_ARRAY_TYPE))
			{
				case Array_Type_Pickups:
				{
					new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
					if(Pickups[indx][PickJob] != Job_None)
					{
						SetPVarInt(playerid, "JobInvited", Pickups[indx][PickJob]);
						return ShowJobDialog(playerid);
					}
					else if (indx == FillBarrel)
					{
						if(!GetItemCountInInventory(playerid, ItemEmptyBarrel)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бочек которые можно было бы заполнить");
						TogglePlayerControllable(playerid, false);
						ApplyAnimation(playerid, "BOMBER","BOM_PLANT_LOOP", 4.1, true, false, false, false, 0, true);
						SetPVarInt(playerid, "DisableTextAnim", 1);
						SetTimerEx("FillingBarrel", 3000, false, "d", playerid);
					}
					else if(indx == RawMateriallTransfer)
					{
						if(!GetItemCountInInventory(playerid, ItemOilCan) || !GetItemCountInInventory(playerid, ItemMetall)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для обмена нужна 1 масленка и 1 металл");

						new count = 0;
						switch(pInfo[playerid][pSkill][GunDealler])
						{
							case 1: count = 500;
							case 2: count = 700;
							case 3: count = 1000;
							case 4: count = 1200;
							case 5: count = 1500;
							default: count = 500;
						}

						RemovePlayerInventory(playerid, ItemOilCan);
						RemovePlayerInventory(playerid, ItemMetall);

						if(!AddPlayerInventory(playerid, ItemRawMaterial, count))
						{
							AddPlayerInventory(playerid, ItemOilCan);
							AddPlayerInventory(playerid, ItemMetall);
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
						}

						new str[200];
						format(str, sizeof(str), Main_Color"Вы обменяли 1 масленку и 1 металл на %d необработанных материалов, они были добавлены в ваш инвентарь", count);
						SendClientMessage(playerid, -1, str);
					}
					else if(indx == MateriallTransfer)
					{
						new count = GetItemCountInInventory(playerid, ItemRawMaterial);
						if(!count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет необработанных материалов для обмена");

						RemovePlayerInventory(playerid, ItemRawMaterial, count);

						if(!AddPlayerInventory(playerid, ItemMaterial, count))
						{
							AddPlayerInventory(playerid, ItemRawMaterial, count);
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
						}
						new str[200];
						format(str, sizeof(str), Main_Color"Вы обменяли %d необработанных материалов на %d материалов", count, count);
						SendClientMessage(playerid, -1, str);
					}
					else if(indx == DrugsTransfer)
					{
						if(!GetItemCountInInventory(playerid, ItemRawDrugs) || !GetItemCountInInventory(playerid, ItemParchament)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для обмена нужна 1 трава и 1 закрутка");

						new count = 0;
						switch(pInfo[playerid][pSkill][DrugDealler])
						{
							case 1: count = 6;
							case 2: count = 10;
							case 3: count = 15;
							case 4: count = 25;
							case 5: count = 30;
							default: count = 6;
						}

						RemovePlayerInventory(playerid, ItemRawDrugs);
						RemovePlayerInventory(playerid, ItemParchament);

						if(!AddPlayerInventory(playerid, ItemDrugs, count))
						{
							AddPlayerInventory(playerid, ItemRawDrugs);
							AddPlayerInventory(playerid, ItemParchament);
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
						}

						new str[200];
						format(str, sizeof(str), Main_Color"Вы обменяли 1 траву и 1 скрутку на %dг. наркотиков, они были добавлены в ваш инвентарь", count);
						SendClientMessage(playerid, -1, str);
					}
					else if(indx == ArmyUnload)
					{
						if(pInfo[playerid][pMembers] != Fraction_Army) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только армии");
						if(!GetPVarInt(playerid, "AmmoBox")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет коробки в руках");

						SendClientMessage(playerid, -1, Color_Yellow"Вы доставили материалы на базу армии");

						RemoveCarriedObj(playerid, false);
						ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);

						FractionWare[Fraction_Army][FractionWareMoney] += 10000;
						SaveFractionWare(Fraction_Army);
					}
				}
				case Array_Type_House:
				{
					new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
					if(areaid == hInfo[indx][hArea] && !hInfo[indx][hOwnerID])
					{
						new str[300], SubStr[100];
						format(str, sizeof(str), Main_Color"Дом №"Color_White"%d\n\
						"Main_Color"Класс"Color_White": %s\n\
						"Main_Color"Продается\n\
						"Main_Color"Цена"Color_White": "Color_Green"%d%s\n\
						"Main_Color"Требуемый уровень"Color_White": %d",
						hInfo[indx][hID],
						HouseClassName[HouseInterior[hInfo[indx][hInterior]][hIntClass]],
						hInfo[indx][hPrice],
						(hInfo[indx][hIsDonate]) ? (" донат рублей"):("$"),
						hInfo[indx][hNeedLevel]);

						SetPVarInt(playerid, "House", indx);

						format(SubStr, sizeof(SubStr), Main_Color"Дом №"Color_White"%d", hInfo[indx][hID]);
						ShowDialog(playerid, D_House_Buy, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Купить", Color_White"Закрыть");
					}
				}
				case Array_Type_Business:
				{
					new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
					if(areaid == bInfo[indx][bArea] && !bInfo[indx][bOwnerID] && BusinessType[bInfo[indx][bType]][IsCompany])
					{
						new str[300], SubStr[100];
						format(str, sizeof(str), Main_Color"%s\n\
						"Main_Color"Бизнес №"Color_White"%d\n\
						"Main_Color"Продается\n\
						"Main_Color"Цена"Color_White": "Color_Green"%d%s\n\
						"Main_Color"Требуемый уровень"Color_White": %d",
						BusinessType[bInfo[indx][bType]][bName],
						bInfo[indx][bID],
						bInfo[indx][bPrice],
						(bInfo[indx][bIsDonate]) ? (" донат рублей"):("$"),
						bInfo[indx][bNeedLevel]);

						SetPVarInt(playerid, "Business", indx);

						format(SubStr, sizeof(SubStr), Main_Color"Бизнес №"Color_White"%d", bInfo[indx][bID]);
						ShowDialog(playerid, D_Business_Buy, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Купить", Color_White"Закрыть");
					}
					else if((areaid == bInfo[indx][bSellArea][0] || areaid == bInfo[indx][bSellArea][1] || areaid == bInfo[indx][bSellArea][2] || areaid == bInfo[indx][bSellArea][3]) && GetPVarInt(playerid, "InBusiness") == bInfo[indx][bID])
					{
						if(bInfo[indx][bType] == BusinessGeneralStore1 || bInfo[indx][bType] == BusinessGeneralStore2 || bInfo[indx][bType] == BusinessGeneralStore3)
						{
							ShowDialog(playerid, D_GeneralStore_Sell_Menu, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"General Store", Main_Color"Название\t"Main_Color"Цена\n\
							"Main_Color"Часы\t"Color_Green"1500$\n\
							"Main_Color"Фотоаппарат\t"Color_Green"1200$\n\
							"Main_Color"Цветы\t"Color_Green"1000$\n\
							"Main_Color"Клюшка для гольфа\t"Color_Green"1000$\n\
							"Main_Color"Бейсбольная бита\t"Color_Green"1500$\n\
							"Main_Color"Лопата\t"Color_Green"1000$\n\
							"Main_Color"Кий\t"Color_Green"1000$\n\
							"Main_Color"Трость\t"Color_Green"800$\n\
							"Main_Color"Ролики\t"Color_Green"3000$\n\
							"Main_Color"Бензопила\t"Color_Green"3000$\n\
							"Main_Color"Катана\t"Color_Green"3000$\n\
							"Main_Color"Закрутка\t"Color_Green"800$\n\
							"Main_Color"Пустая бочка\t"Color_Green"1000$", Color_White"Купить", Color_White"Закрыть");
						}
						else if(bInfo[indx][bType] == BusinessKFC)
						{
							ShowDialog(playerid, D_KFC_Sell_Menu, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"KFC", Main_Color"Название\t"Main_Color"Цена\n\
							"Main_Color"Картофель фри\t"Color_Green"300$\n\
							"Main_Color"Наггетсы\t"Color_Green"500$\n\
							"Main_Color"Крылышки\t"Color_Green"500$\n\
							"Main_Color"Бургер\t"Color_Green"800$\n\
							"Main_Color"Большой бургер\t"Color_Green"900$", Color_White"Купить", Color_White"Закрыть");
						}
						else if(bInfo[indx][bType] == BusinessAmmo)
						{
							ShowDialog(playerid, D_Ammo_Sell_Menu, DIALOG_STYLE_TABLIST_HEADERS, Main_Color"Амуниция", Main_Color"Название\t"Main_Color"Цена\n\
							"Main_Color"Desert Eagle(50пт.)\t"Color_Green"2300$\n\
							"Main_Color"MP5(150пт.)\t"Color_Green"3500$\n\
							"Main_Color"Shotgun(100пт.)\t"Color_Green"3100$\n\
							"Main_Color"AK-47(100пт.)\t"Color_Green"5100$\n\
							"Main_Color"M4(100пт.)\t"Color_Green"5600$", Color_White"Купить", Color_White"Закрыть");
						}
						else if(bInfo[indx][bType] == BusinessCasinoBeginner || bInfo[indx][bType] == BusinessCasinoCaligula || bInfo[indx][bType] == BusinessCasinoFourDragons) ShowDialog(playerid, D_Casino_Menu, DIALOG_STYLE_LIST, Main_Color"CASINO", Color_White"Купить фишки\nПродать фишки", Color_White"Далее", Color_White"Закрыть");
						else if(bInfo[indx][bType] == BusinessBankFillial) ShowPlayerBankMenu(playerid);
						else if(bInfo[indx][bType] == BusinessDressShop) ShowDialog(playerid, D_Buy_Cloth, DIALOG_STYLE_MSGBOX, Main_Color"Магазин одежды", Color_White"Желаете перейти к выбору одежды?", Color_White"Да", Color_White"Нет");
					}
				}
				case Array_Type_Shipment:
				{
					if(pInfo[playerid][pMembers] != Fraction_Army && !IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только армии и бандам");
					if(GetPVarInt(playerid, "AmmoBox")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть коробка в руках");

					new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
					if(ShipmentMaterials[indx][ShipmentMaterialsCount] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Тут нет материалов");

					SendClientMessage(playerid, -1, Color_Yellow"Вы взяли материалы. Отнесите их в машину.");
					ClearAnimations(playerid, true);
					ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
					SetPlayerAttachedObject(playerid, AttachSlotJob, 19832, 14, 0.2979, -0.0469, 0.0979, 103.1000, -3.5999, 84.1000, 1.0000, 1.0000, 1.0000, 0, 0);
					SetPVarInt(playerid, "AmmoBox", 1);

					new str[100];
					ShipmentMaterials[indx][ShipmentMaterialsCount]--;

					format(str, sizeof(str), Main_Color"Осталось ящиков %d/20", ShipmentMaterials[indx][ShipmentMaterialsCount]);
					UpdateDynamic3DTextLabelText(ShipmentMaterials[indx][ShipmentText], -1, str);

					if(ShipmentMaterials[indx][ShipmentMaterialsCount] <= 0)
					{
						if(ShipmentMaterials[indx][ShipmentPickup] && IsValidDynamicPickup(ShipmentMaterials[indx][ShipmentPickup])) DestroyDynamicPickup(ShipmentMaterials[indx][ShipmentPickup]);
						ShipmentMaterials[indx][ShipmentPickup] = 0;
						if(ShipmentMaterials[indx][ShipmentText] && IsValidDynamic3DTextLabel(ShipmentMaterials[indx][ShipmentText])) DestroyDynamic3DTextLabel(ShipmentMaterials[indx][ShipmentText]);
						ShipmentMaterials[indx][ShipmentText] = Text3D:0;
						if(ShipmentMaterials[indx][ShipmentArea] && IsValidDynamicArea(ShipmentMaterials[indx][ShipmentArea])) DestroyDynamicArea(ShipmentMaterials[indx][ShipmentArea]);
						ShipmentMaterials[indx][ShipmentArea] = 0;
					}
				}
				case Array_Type_Car:
				{
					new indx = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
					if(vInfo[indx][vType] == VehicleTypeFraction && (vInfo[indx][vOwner] == Fraction_Army || IsABand(vInfo[indx][vOwner])) && pInfo[playerid][pMembers] == vInfo[indx][vOwner])
					{
						if(!GetPVarInt(playerid, "AmmoBox") && vInfo[indx][vItemInVehicle])
						{
							SendClientMessage(playerid, -1, Color_Yellow"Вы взяли материалы из машины");
							ClearAnimations(playerid, true);
							ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
							SetPlayerAttachedObject(playerid, AttachSlotJob, 19832, 14, 0.2979, -0.0469, 0.0979, 103.1000, -3.5999, 84.1000, 1.0000, 1.0000, 1.0000, 0, 0);
							SetPVarInt(playerid, "AmmoBox", 1);

							vInfo[indx][vItemInVehicle]--;
							new str[50];
							if(vInfo[indx][vText] && IsValidDynamic3DTextLabel(vInfo[indx][vText]))
							{
								if(vInfo[indx][vItemInVehicle] <= 0)
								{
									vInfo[indx][vItemInVehicle] = 0;

									DestroyDynamic3DTextLabel(vInfo[indx][vText]);
									vInfo[indx][vText] = Text3D:0;

									if(vInfo[indx][vPickup] && IsValidDynamicPickup(vInfo[indx][vPickup]))
									{
										DestroyDynamicPickup(vInfo[indx][vPickup]);
										vInfo[indx][vPickup] = 0;
									}

									if(vInfo[indx][vArea] && IsValidDynamicArea(vInfo[indx][vArea]))
									{
										DestroyDynamicArea(vInfo[indx][vArea]);
										vInfo[indx][vArea] = 0;
									}
								}
								else
								{
									format(str, sizeof(str), Main_Color"Коробок с материалами: %d", vInfo[indx][vItemInVehicle]);
									UpdateDynamic3DTextLabelText(vInfo[indx][vText], -1, str);
								}
							}
						}
						else if(GetPVarInt(playerid, "AmmoBox") && vInfo[indx][vItemInVehicle] < 10)
						{

							SendClientMessage(playerid, -1, Color_Yellow"Вы положили материалы в машину");

							RemoveCarriedObj(playerid, false);
							ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
							vInfo[indx][vItemInVehicle]++;

							new str[50];

							if(vInfo[indx][vItemInVehicle] >= 10)
							{
								vInfo[indx][vItemInVehicle] = 10;

								if(vInfo[indx][vPickup] && IsValidDynamicPickup(vInfo[indx][vPickup]))
								{
									DestroyDynamicPickup(vInfo[indx][vPickup]);
									vInfo[indx][vPickup] = 0;
								}

								if(vInfo[indx][vArea] && IsValidDynamicArea(vInfo[indx][vArea]))
								{
									DestroyDynamicArea(vInfo[indx][vArea]);
									vInfo[indx][vArea] = 0;
								}
							}

							if(vInfo[indx][vText] && IsValidDynamic3DTextLabel(vInfo[indx][vText]))
							{
								format(str, sizeof(str), Main_Color"Коробок с материалами: %d", vInfo[indx][vItemInVehicle]);
								UpdateDynamic3DTextLabelText(vInfo[indx][vText], -1, str);
							}
							else
							{
								format(str, sizeof(str), Main_Color"Коробок с материалами: %d", vInfo[indx][vItemInVehicle]);
								vInfo[indx][vText] = CreateDynamic3DTextLabel(str, -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vInfo[indx][vServerID], 0, 0, 0);
							}
						}
					}
				}
				case Array_Type_FractionWare:
				{
					if(GetPVarInt(playerid, "AmmoBox") && IsABand(pInfo[playerid][pMembers]))
					{
						new FractionID = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_INDX);
						if(pInfo[playerid][pMembers] != FractionID) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

						FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] += 1000;
						SaveFractionWare(pInfo[playerid][pMembers]);

						new str[200];
						format(str, sizeof(str), Main_Color"%s %s "Color_White"доставил в общак организации "Main_Color"1000"Color_White" материалов", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName]);
						SendRMessage(playerid, str);
						format(str, sizeof(str), Color_White"Общее количество материалов в общаке "Main_Color"%d", FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						SendRMessage(playerid, str);

						RemoveCarriedObj(playerid, false);
						ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
					}
				}

			}
		}

		if(areaid == Pickups[PoliceHealth][PickAreaID])
		{
			if(Pickups[PoliceHealth][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");

			pInfo[playerid][pHealth] = 100.0;
			SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
			SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
			SendClientMessage(playerid, -1, Color_White"Вы использовали аптечку");
			return 1;
		}
		else if(areaid == Pickups[PoliceArmor][PickAreaID])
		{
			if(Pickups[PoliceArmor][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetArmour(playerid, pInfo[playerid][pArmor]);
			if(pInfo[playerid][pArmor] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вас уже надет новый бронежилет");

			pInfo[playerid][pArmor] = 100.0;
			SetPlayerArmour(playerid, pInfo[playerid][pArmor]);
			SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);
			SendClientMessage(playerid, -1, Color_White"Вы надели бронежилет");
			return 1;
		}
		else if(areaid == Pickups[PoliceWeapon][PickAreaID])
		{
			if(Pickups[PoliceWeapon][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");
			if(!pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на владение оружием");
			if(pInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Взять оружие можно только с 5 уровня");

			if((AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(24)) == 24 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(24)) >= 200)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(41)) == 41 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(41)) >= 300)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(3)) == 3 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(3)) >= 1)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(25)) == 25 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(25)) >= 100)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть полный боекомплект");

			GivePlayerGun(playerid, 24, 200);
			GivePlayerGun(playerid, 41, 300);
			GivePlayerGun(playerid, 3, 1);
			GivePlayerGun(playerid, 25, 100);
			SendClientMessage(playerid, -1, Color_White"Вам выдали оружие");
			return 1;
		}
		else if(areaid == Pickups[ArmyHealth][PickAreaID])
		{
			if(Pickups[ArmyHealth][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");

			pInfo[playerid][pHealth] = 100.0;
			SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
			SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
			SendClientMessage(playerid, -1, Color_White"Вы использовали аптечку");
			return 1;
		}
		else if(areaid == Pickups[ArmyArmor][PickAreaID])
		{
			if(Pickups[ArmyArmor][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetArmour(playerid, pInfo[playerid][pArmor]);
			if(pInfo[playerid][pArmor] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вас уже надет новый бронежилет");

			pInfo[playerid][pArmor] = 100.0;
			SetPlayerArmour(playerid, pInfo[playerid][pArmor]);
			SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);
			SendClientMessage(playerid, -1, Color_White"Вы надели бронежилет");
			return 1;
		}
		else if(areaid == Pickups[ArmyWeapon][PickAreaID])
		{
			if(Pickups[ArmyWeapon][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");
			if(!pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на владение оружием");
			if(pInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Взять оружие можно только с 5 уровня");

			if((AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(24)) == 24 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(24)) >= 200)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(41)) == 41 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(41)) >= 300)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(31)) == 31 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(31)) >= 300)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть полный боекомплект");

			GivePlayerGun(playerid, 24, 200);
			GivePlayerGun(playerid, 41, 300);
			GivePlayerGun(playerid, 31, 300);
			SendClientMessage(playerid, -1, Color_White"Вам выдали оружие");
			return 1;
		}
		else if(areaid == Pickups[FBIHealth][PickAreaID])
		{
			if(Pickups[FBIHealth][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");

			pInfo[playerid][pHealth] = 100.0;
			SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
			SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
			SendClientMessage(playerid, -1, Color_White"Вы использовали аптечку");
			return 1;
		}
		else if(areaid == Pickups[FBIArmor][PickAreaID])
		{
			if(Pickups[FBIArmor][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");

			AntiCheatGetArmour(playerid, pInfo[playerid][pArmor]);
			if(pInfo[playerid][pArmor] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вас уже надет новый бронежилет");

			pInfo[playerid][pArmor] = 100.0;
			SetPlayerArmour(playerid, pInfo[playerid][pArmor]);
			SavePlayerFloat(playerid, "Armor", pInfo[playerid][pArmor]);
			SendClientMessage(playerid, -1, Color_White"Вы надели бронежилет");
			return 1;
		}
		else if(areaid == Pickups[FBIWeapon][PickAreaID])
		{
			if(Pickups[FBIWeapon][PickFraction] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом этой организации");
			if(!pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на владение оружием");
			if(pInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Взять оружие можно только с 5 уровня");

			if((AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(24)) == 24 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(24)) >= 200)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(41)) == 41 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(41)) >= 300)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(34)) == 34 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(34)) >= 100)
			&& (AntiCheatGetWeaponInSlot(playerid, GetWeaponSlot(29)) == 29 && AntiCheatGetAmmoInSlot(playerid, GetWeaponSlot(29)) >= 300)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть полный боекомплект");

			GivePlayerGun(playerid, 24, 200);
			GivePlayerGun(playerid, 41, 300);
			GivePlayerGun(playerid, 34, 100);
			GivePlayerGun(playerid, 29, 300);
			SendClientMessage(playerid, -1, Color_White"Вам выдали оружие");
			return 1;
		}
		else if(areaid == Pickups[PrisonLawyerCall][PickAreaID])
		{
			if(!pInfo[playerid][pJail]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не под стражей");
			if(pInfo[playerid][pJailNoFree]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваш выкуп запрещен");
			if(GetPVarInt(playerid, "LawyerCallCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вызывать адвоката можно раз в 3 минуты");

			new str[200];
			format(str, sizeof(str), Color_Blue2"%s[%d] вызывает адвоката в тюрьму для выкупа", pInfo[playerid][pName], playerid);
			foreach(new j:Player)
			{
				if(pInfo[j][pJob] == Job_Lawyer)
				{
					SendClientMessage(j, -1, str);
				}
			}
			SetPVarInt(playerid, "LawyerCallCD", gettime()+180);
		}
		else if(areaid == Pickups[CommandHelpPolice][PickAreaID] || areaid == Pickups[CommandHelpArmy][PickAreaID]
		|| areaid == Pickups[CommandHelpFBI][PickAreaID] || areaid == Pickups[CommandHelpHospital][PickAreaID]
		|| areaid == Pickups[CommandHelpTaxi][PickAreaID] || areaid == Pickups[CommandHelpSanNews][PickAreaID])
		{
			ShowFractionCommand(playerid);
		}
		else if(areaid == Pickups[BankPickCard][PickAreaID] && !pInfo[playerid][pCard])
		{
			ShowDialog(playerid, D_Bank_Buy_Card, DIALOG_STYLE_MSGBOX, Main_Color"Покупка банковской карты", Color_White"Для того чтобы пользоваться услугами банка\n\
			"Color_White"Необходимо приобрести банковскую карту\n\
			"Color_White"Стоимость банковской карты "Color_Green"5.000$\n\
			"Color_White"Желаете ли вы приобрести данную карту?", "Да", "Нет");
		}
		else if(areaid == Pickups[HospitalPickCard][PickAreaID] && (!pInfo[playerid][pMedCard] || pInfo[playerid][pMedCard] == 2))
		{
			ShowDialog(playerid, D_Hospital_Buy_Card, DIALOG_STYLE_MSGBOX, Main_Color"Покупка медицинской карты", Color_White"Желаете приобрести медицинскую карту?\n\
			"Color_White"Стоимость медицинской карты при первой покупке "Color_Green"10.000$\n\
			"Color_White"Стоимость восстановления медицинской карты "Color_Green"50.000$\n\
			"Color_White"Желаете ли вы приобрести медицинскую карту?", "Да", "Нет");
		}
		else if(areaid == Pickups[HospitalSperm][PickAreaID])
		{
			if(GetPVarInt(playerid, "SpermCD")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Передохните немного, сдавать сперму можно раз в 2 часа");
			if(pInfo[playerid][pGender]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваш пол не может сдавать сперму");
			ShowDialog(playerid, D_Sperm_Donor, DIALOG_STYLE_MSGBOX, Main_Color"Сдача спермы", Color_White"Вы желаете сдать сперму?\n\n\
			За это вы получите "Color_Green"5000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[HospitalBlood][PickAreaID])
		{
			if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотружникам больницы");
			if(!GetPVarInt(playerid, "BloodCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет с собой пакетов с кровью");
			new str[200];
			new count = GetPVarInt(playerid, "BloodCount");
			DeletePVar(playerid, "BloodCount");
			format(str, sizeof(str), "Вы доставили "Main_Color"%dл "Color_White"крови и получили "Color_Green"%d$", count, count*5000);
			SendClientMessage(playerid, BitColor_White, str);
			GivePlayerMoneyEx(playerid, count*5000);
			FractionWare[Fraction_Hospital][FractionWareMoney] += count*50000;
			SaveFractionWare(Fraction_Hospital);
		}
		else if(areaid == Pickups[LawyerLic][PickAreaID])
		{
			if(pInfo[playerid][pJob] != Job_Lawyer) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не работаете адвокатом");
			ShowDialog(playerid, D_Lic_Lawyer, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на освобождение", Color_White"Вы желаете приобрести лицензию на освобождение игрока из тюрьмы?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[CarLic][PickAreaID])
		{
			if(pInfo[playerid][pLicAuto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление машинами");
			ShowDialog(playerid, D_Lic_Car, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на управление машинами", Color_White"Вы желаете приобрести лицензию на управление машинами?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[MotoLic][PickAreaID])
		{
			if(pInfo[playerid][pLicMoto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление мототранспортом");
			ShowDialog(playerid, D_Lic_Moto, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на управление мототранспортом", Color_White"Вы желаете приобрести лицензию на управление мототранспортом?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[BoatLic][PickAreaID])
		{
			if(pInfo[playerid][pLicBoat]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление лодками");
			ShowDialog(playerid, D_Lic_Boat, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на управление лодками", Color_White"Вы желаете приобрести лицензию на управление лодками?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[PlaneLic][PickAreaID])
		{
			if(pInfo[playerid][pLicPlane]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление воздушным транспортом");
			ShowDialog(playerid, D_Lic_Plane, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на управление воздушным транспортом", Color_White"Вы желаете приобрести лицензию на управление воздушным транспортом?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[GunLic][PickAreaID])
		{
			if(pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на владение оружием");
			ShowDialog(playerid, D_Lic_Gun, DIALOG_STYLE_MSGBOX, Main_Color"Лицензия на владение оружием", Color_White"Вы желаете приобрести лицензию владение оружием?\n\
			"Color_White"Стоимость: "Color_Green"10.000$", Color_White"Да", Color_White"Нет");
		}
		else if(areaid == Pickups[RemoveAllJob][PickAreaID])
		{
			if(pInfo[playerid][pJob] == Job_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы нигде не работаете");
			ShowDialog(playerid, D_Remove_All_Job, DIALOG_STYLE_MSGBOX, Main_Color"Увольнение с работы", Color_White"Вы желаете уволиться с вашей текущей работы?", Color_White"Да", Color_White"Нет");
		}
		else if(pInfo[playerid][pJob] == Job_TrashCollector && GetPVarInt(playerid, "JobArea") == areaid)
		{
			if(GetPVarInt(playerid, "TrashBagCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть мешок в руках");
			new BagInBin = GetPVarInt(playerid, "TrashBagCountInBin");
			if(!BagInBin) BagInBin = 3+random(3);

			new str[200];
			BagInBin--;
			SetPVarInt(playerid, "TrashBagCount", 1);
			if(!BagInBin)
			{
				format(str, sizeof(str), Color_Yellow"Вы взяли мешок из мусорки. Подойдите к машине и нажмите ~k~~SNEAK_ABOUT~ чтобы положить его в машину. В контейнере не осталось мешков");
				DeletePVar(playerid, "TrashBagCountInBin");
				SetPVarInt(playerid, "TrashBinCount", GetPVarInt(playerid, "TrashBinCount")-1);
				SetTrashCollectorMarker(playerid);
			}
			else
			{
				format(str, sizeof(str), Color_Yellow"Вы взяли мешок из мусорки. Подойдите к машине и нажмите ~k~~SNEAK_ABOUT~ чтобы положить его в машину. В контейнере осталось %d мешков", BagInBin);
				SetPVarInt(playerid, "TrashBagCountInBin", BagInBin);
			}
			SendClientMessage(playerid, -1, str);
			ClearAnimations(playerid, true);
			ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
			SetPlayerAttachedObject(playerid, AttachSlotJob, 1264, 4, 0.2259, -0.4760, 0.1189, 0.0000, 0.0000, 0.0000, 0.5599, 0.6880, 0.7350, 0, 0);
		}
		else if(pInfo[playerid][pJob] == Job_DriverDelivery && GetPVarInt(playerid, "JobArea") == areaid)
		{
			if(GetPVarInt(playerid, "DriverDeliveryStatus") == 1)
			{
				if(GetPVarInt(playerid, "BoxCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть коробка в руках");
				SendClientMessage(playerid, -1, Color_Yellow"Вы взяли коробку. Подойдите к машине и нажмите ~k~~SNEAK_ABOUT~ чтобы положить её в машину.");
				ClearAnimations(playerid, true);
				ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
				SetPlayerAttachedObject(playerid, AttachSlotJob, 1221, 1, 0.135011, 0.463495, -0.024351, 357.460632, 87.350753, 88.068374, 0.434164, 0.491270, 0.368655);
				SetPVarInt(playerid, "BoxCount", 1);
				RemoveJobPickup(playerid);
			}
			else if(GetPVarInt(playerid, "DriverDeliveryStatus") == 2)
			{
				if(!GetPVarInt(playerid, "BoxCount")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет коробки в руках");
				UpdatePlayerSkill(playerid);
				new str[100], money = 300;
				format(str, sizeof(str), Color_White"Вы доставили груз в бизнес, к вашей зарплате прибавлено"Color_Green" %d$", money);
				SendClientMessage(playerid, -1, str);

				GivePlayerMoneyInPayDay(playerid, money);

				RemoveCarriedObj(playerid, false);
				ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);

				if(GetPVarInt(playerid, "DriverDeliveryStatus") == 2)
				{
					if(GetPVarInt(playerid, "RentedCar"))
					{
						new vehicleid = GetPVarInt(playerid, "RentedCar");
						if(pInfo[playerid][pJob] == Job_DriverDelivery && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_DriverDelivery)
						{
							if(vInfo[vehicleid][vItemInVehicle] <= 0)
							{
								SendClientMessage(playerid, -1, Color_Yellow"В машине закончились коробки");
								SetPVarInt(playerid, "DriverDeliveryStatus", 1);
								SetDriverDeliveryMarker(playerid);
							}
						}
					}
				}
			}
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Mine && GetPVarInt(playerid, "MetallCount") && GetPVarInt(playerid, "JobArea") == areaid)
		{
			RemoveCarriedObj(playerid, false);
			SetPlayerAttachedObject(playerid, AttachSlotJob, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
			SetPVarInt(playerid, "CollectOre", GetPVarInt(playerid, "CollectOre")+1);
			SendClientMessage(playerid, -1, Color_White"Вы положили руду на склад, можете продолжать работать или забрать награду");
			ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
		}
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(Streamer_HasIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_ARRAY_TYPE))
		{
			switch(Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_ARRAY_TYPE))
			{
				case Array_Type_Spike:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if(vehicleid)
					{
						new panels, doors, lights, tires;
		                GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
					}
				}
			}
		}

		if(areaid == Areas[CarThiefArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_CarThief && vInfo[vehicleid][vRenter] == playerid)
				{
					RemoveThiefCar(playerid, false);
					new str[400];

					UpdatePlayerSkill(playerid);

					new money = 10000*pInfo[playerid][pSkill][Job_CarThief];

					format(str, sizeof(str), Color_White"Вы доставили угнаную машину, к вашей зарплате прибавлено"Color_Green" %d$", money);
					SendClientMessage(playerid, -1, str);

					GivePlayerMoneyInPayDay(playerid, money);

					switch(pInfo[playerid][pSkill][Job_CarThief])
					{
						case 1:
						{
							SetPVarInt(playerid, "CarThiefCD", 1800);
							SendClientMessage(playerid, -1, Color_Yellow"Вы доставили угнаную машину, угнать следующую машину вы сможете через 30 минут");
						}
						case 2:
						{
							SetPVarInt(playerid, "CarThiefCD", 1500);
							SendClientMessage(playerid, -1, Color_Yellow"Вы доставили угнаную машину, угнать следующую машину вы сможете через 25 минут");
						}
						case 3:
						{
							SetPVarInt(playerid, "CarThiefCD", 1200);
							SendClientMessage(playerid, -1, Color_Yellow"Вы доставили угнаную машину, угнать следующую машину вы сможете через 20 минут");
						}
						case 4:
						{
							SetPVarInt(playerid, "CarThiefCD", 900);
							SendClientMessage(playerid, -1, Color_Yellow"Вы доставили угнаную машину, угнать следующую машину вы сможете через 15 минут");
						}
						case 5:
						{
							SetPVarInt(playerid, "CarThiefCD", 600);
							SendClientMessage(playerid, -1, Color_Yellow"Вы доставили угнаную машину, угнать следующую машину вы сможете через 10 минут");
						}
					}
				}
			}
		}
		else if(pInfo[playerid][pJob] == Job_Fisher && GetPVarInt(playerid, "JobArea") == areaid)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher && vInfo[vehicleid][vRenter] == playerid)
				{
					new time = 0;
					new count = 0;
					switch(pInfo[playerid][pSkill][Job_Fisher])
					{
						case 1:
						{
							time = 5;
							count = 3+random(3);
						}
						case 2:
						{
							time = 10;
							count = 5+random(6);
						}
						case 3:
						{
							time = 15;
							count = 10+random(6);
						}
						case 4:
						{
							time = 20;
							count = 15+random(6);
						}
						case 5:
						{
							time = 25;
							count = 20+random(6);
						}
					}

					SetPVarInt(playerid, "FishingTime", time);
					ShowFisherPanel(playerid, count);
					new str[200];
					format(str, sizeof(str), Color_White"Ваш уровень рыболова "Main_Color"%d "Color_White"поэтому у вас есть "Main_Color"%d "Color_White"секунд на то чтобы поймать этих рыб", pInfo[playerid][pSkill][Job_Fisher], time);
					SendClientMessage(playerid, -1, str);
				}
			}
		}
		else if(GetPVarInt(playerid, "UnOfficialJob") == Job_FarmDeliver && GetPVarInt(playerid, "JobArea") == areaid)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_FarmDeliver && vInfo[vehicleid][vRenter] == playerid && vInfo[vehicleid][vModel] == 530 && GetPVarInt(playerid, "FarmDeliverStage") == 2)
				{
					for(new i = 0; i < MaxAttachedObjOnVehicle; i++)
					{
						if(GetVehicleAttachObjID(vehicleid, i) == 2912)
						{
							RemoveVehicleAttachObj(vehicleid, i);
							RemoveJobPickup(playerid);

							new RentedCar = GetPVarInt(playerid, "RentedCar");
							if(vInfo[RentedCar][vType] == VehicleTypeJob && vInfo[RentedCar][vOwner] == Job_FarmDeliver)
							{
								new count = GetVehicleAttachObjCount(RentedCar);
								new line = count/2;
								new height = line/3;
								line -= height*3;
								new BoxID = CreateDynamicObject(2912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
								if(!AddVehicleAttachObj(BoxID, RentedCar, -0.644999+(0.72*(count%2)), -0.7750-(0.72*line), -0.059999+(0.73*height), 0.000000, 0.000000, 0.000000)) return DestroyDynamicObject(BoxID);

								new str[100];
								format(str, sizeof(str), Color_White"Вы загрузили коробку и заработали"Color_Green" %d$", 300);
								SendClientMessage(i, -1, str);
								GivePlayerMoneyEx(i, 300);
							}

							if(GetVehicleAttachObjCount(RentedCar) >= 10)
							{
								RemovePlayerFromVehicle(playerid);
								RemoveLoader(playerid);
								SetPVarInt(playerid, "FarmDeliverStage", 3);
								SendClientMessage(playerid, -1, Color_Yellow"Вы полностью загрузились теперь можете отправляться на разгрузку");
							}

							SetFarmDeliverMarker(playerid);
							break;
						}
					}
				}
			}
		}
		else if(areaid == Areas[FarmDeliverUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_FarmDeliver && vInfo[vehicleid][vRenter] == playerid && vInfo[vehicleid][vModel] != 530 && GetPVarInt(playerid, "FarmDeliverStage") == 3)
				{
					if(!GetVehicleAttachObjCount(vehicleid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В машине нет коробок. Нечего разгружать");
					SetPVarInt(playerid, "FarmDeliverUnloadTimer", 60);
				}
			}
		}
		else if(areaid == Areas[TrashUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_TrashCollector && vInfo[vehicleid][vRenter] == playerid)
				{
					if(!vInfo[vehicleid][vItemInVehicle]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В машине нет мешков. Нечего разгружать");
					SetPVarInt(playerid, "TrashUnloadTimer", 60);
				}
			}
		}
		else if(areaid == Areas[FishUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher && vInfo[vehicleid][vRenter] == playerid)
				{
					if(!vInfo[vehicleid][vItemInVehicle]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В лодке нет рыбы. Нечего разгружать");
					SetPVarInt(playerid, "FishUnloadTimer", 60);
				}
			}
		}
	}
	return 1;
}

forward FillingBarrel(playerid);
public FillingBarrel(playerid)
{
	ClearAnimations(playerid, true);
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "DisableTextAnim");

	if(!RemovePlayerInventory(playerid, ItemEmptyBarrel)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бочек которые можно было бы заполнить");
	if(!AddPlayerInventory(playerid, ItemOilCan, 5))
	{
		AddPlayerInventory(playerid, ItemEmptyBarrel);
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
	}
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "наполнил(а) бочку");
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, STREAMER_TAG_AREA:areaid)
{
	new indx = GetPVarInt(playerid, "TentRent");
	if(indx)
	{
		indx--;
		if(Tent[indx][TentArea] == areaid)
		{
			SendClientMessage(playerid, -1, Color_Yellow"Вы не можете отойти от палатки которую арендуете");
			SetPlayerPosition(playerid, Tent[indx][TentX], Tent[indx][TentY], Tent[indx][TentZ]);
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(areaid == Areas[TruckerLoadArea])
		{
			if(TruckerQueue[0] == playerid)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Trucker && vInfo[vehicleid][vRenter] == playerid)
					{
						if(GetPVarInt(playerid, "TrailerID") && GetPVarInt(playerid, "TrailerID") == GetVehicleTrailer(vehicleid))
						{
							RemoveTruckerQueue(TruckerQueue[0]);
							TruckerStatus = 0;
							TruckerTimer = 0;
							SetTruckerMarker(playerid);
						}
					}
				}
			}
		}
		else if(areaid == Areas[FarmDeliverUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(GetPVarInt(playerid, "FarmDeliverUnloadTimer") && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_FarmDeliver && vInfo[vehicleid][vRenter] == playerid && vInfo[vehicleid][vModel] != 530 && GetPVarInt(playerid, "FarmDeliverStage") == 3)
				{
					DeletePVar(playerid, "FarmDeliverUnloadTimer");
					SendClientMessage(playerid, -1, Color_Yellow"Вы покинули зону разгрузки. Разгрузка прервана");
					SetFarmDeliverMarker(playerid);
				}
			}
		}
		else if(areaid == Areas[TrashUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(GetPVarInt(playerid, "TrashUnloadTimer") && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_TrashCollector && vInfo[vehicleid][vRenter] == playerid)
				{
					DeletePVar(playerid, "TrashUnloadTimer");
					SendClientMessage(playerid, -1, Color_Yellow"Вы покинули зону разгрузки. Разгрузка прервана");
					SetTrashCollectorMarker(playerid);
				}
			}
		}
		else if(areaid == Areas[FishUnloadArea])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid)
			{
				if(GetPVarInt(playerid, "FishUnloadTimer") && vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher && vInfo[vehicleid][vRenter] == playerid)
				{
					DeletePVar(playerid, "FishUnloadTimer");
					SendClientMessage(playerid, -1, Color_Yellow"Вы покинули зону разгрузки. Разгрузка прервана");
				}
			}
		}
	}
	return 1;
}

stock ShowJobDialog(playerid)
{
	new JobID = GetPVarInt(playerid, "JobInvited");
	new str[100];
	if(pInfo[playerid][pJob] == JobID || (Jobs[JobID][IsUnofficial] && GetPVarInt(playerid, "UnOfficialJob") == JobID))
	{
		if(JobID == Job_CarThief)
		{
			format(str, sizeof(str), Color_Yellow"Работа "Main_Color"%sа", Jobs[JobID][JobNames]);
			ShowDialog(playerid, D_Job_CarThief_GetCar, DIALOG_STYLE_LIST, str, Main_Color"- "Color_White"Получить задание на угон\n\
			"Main_Color"- "Color_White"Увольнение с работы", Color_White"Далее", Color_White"Закрыть");
		}
		else if(Jobs[JobID][IsUnofficial])
		{
			format(str, sizeof(str), Color_Yellow"Конец работы "Main_Color"%s", Jobs[JobID][JobNames]);
			if(JobID == Job_FarmDeliver) ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете положить ключи от машины и закончить работать?", Color_White"Да", Color_White"Нет");
			else ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете положить оборудование и закончить работать?", Color_White"Да", Color_White"Нет");
		}
		else
		{
			format(str, sizeof(str), Color_Yellow"Увольнение с работы "Main_Color"%sа", Jobs[JobID][JobNames]);
			ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете уволиться в сданной работы?", Color_White"Да", Color_White"Нет");
		}
	}
	else
	{
		if(Jobs[JobID][IsUnofficial])
		{
			format(str, sizeof(str), Color_Yellow"Начало работы "Main_Color"%s", Jobs[JobID][JobNames]);
			if(JobID == Job_FarmDeliver) ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете взять ключи от машины и начать работать?", Color_White"Да", Color_White"Нет");
			else ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете взять оборудование и начать работать?", Color_White"Да", Color_White"Нет");
		}
		else
		{
			format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[JobID][JobNames]);
			ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете устроиться на данную работу?", Color_White"Да", Color_White"Нет");
		}
	}
	return 1;
}

stock SetTruckerMarker(playerid)
{
	if(pInfo[playerid][pGPSType] == GPS_Type_Job) return 1;
	switch(random(10))
	{
		case 0: SetPlayerRaceCheckpoint(playerid, 2, 2523.4192, 2819.3110, 10.8203, 0.0, 0.0, 0.0, 12.0);
		case 1: SetPlayerRaceCheckpoint(playerid, 2, 2399.8691, 2808.2805, 10.8203, 0.0, 0.0, 0.0, 12.0);
		case 2: SetPlayerRaceCheckpoint(playerid, 2, 1591.4885, 2370.6438, 10.8203, 0.0, 0.0, 0.0, 12.0);
		case 3: SetPlayerRaceCheckpoint(playerid, 2, 1660.6235, 728.9737, 10.8203, 0.0, 0.0, 0.0, 12.0);
		case 4: SetPlayerRaceCheckpoint(playerid, 2, 2414.3899, -2469.8525, 13.6250, 0.0, 0.0, 0.0, 12.0);
		case 5: SetPlayerRaceCheckpoint(playerid, 2, 2460.5581, -2118.4353, 13.5530, 0.0, 0.0, 0.0, 12.0);
		case 6: SetPlayerRaceCheckpoint(playerid, 2, 865.4910, -1205.5927, 16.9766, 0.0, 0.0, 0.0, 12.0);
		case 7: SetPlayerRaceCheckpoint(playerid, 2, -544.1186, -546.8455, 25.5234, 0.0, 0.0, 0.0, 12.0);
		case 8: SetPlayerRaceCheckpoint(playerid, 2, -1044.0481, -653.1295, 32.0078, 0.0, 0.0, 0.0, 12.0);
		case 9: SetPlayerRaceCheckpoint(playerid, 2, -1705.4196, 15.1704, 3.5547, 0.0, 0.0, 0.0, 12.0);
	}
	SendClientMessage(playerid, -1, Color_Yellow"Вы покинули зону загрузки теперь вы можете отправляться к месту разгрузки");
	pInfo[playerid][pGPSType] = GPS_Type_Job;
	return 1;
}

stock SetThiefMarker(playerid)
{
	if(GetPVarInt(playerid, "ThiefCar")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам уже выдана машина для угона");
	if(GetPVarInt(playerid, "CarThiefCD"))
	{
		SendClientMessage(playerid, -1, Color_Yellow"Вы угоняли машину недавно, подождите пока все уляжется");
		return 1;
	}
	if(pInfo[playerid][pGPSType] == GPS_Type_Job) return 1;
	new Float:X, Float:Y, Float:Z, Float:A;
	switch(random(20))
	{
		case 0: X = -2104.2966, Y = -2474.0063, Z = 30.3521, A = 50.3071;
		case 1: X = -2057.6011, Y = -2437.8596, Z = 30.3521, A = 47.7327;
		case 2: X = 1110.0140, Y = -1877.5441, Z = 13.2739, A = 267.8838;
		case 3: X = 1629.5487, Y = -1909.2388, Z = 13.2776, A = 359.8336;
		case 4: X = 1913.8451, Y = -1873.1038, Z = 13.2753, A = 1.8975;
		case 5: X = 2052.5547, Y = -1903.8888, Z = 13.2740, A = 180.1293;
		case 6: X = 2147.6592, Y = -1184.9768, Z = 23.5474, A = 88.9773;
		case 7: X = 271.0985, Y = 39.3648, Z = 2.1654, A = 100.1495;
		case 8: X = -2420.9045, Y = 741.2349, Z = 34.7427, A = 0.0186;
		case 9: X = -2696.3735, Y = 1451.7899, Z = 6.8287, A = 183.5754;
		case 10: X = -2686.1646, Y = -22.4658, Z = 4.0630, A = 179.8410;
		case 11: X = -2439.5083, Y = 2301.6494, Z = 4.7106, A = 269.3441;
		case 12: X = -759.8079, Y = 1645.0005, Z = 27.1330, A = 359.5664;
		case 13: X = -165.2143, Y = 1029.8242, Z = 19.4654, A = 3.5087;
		case 14: X = 2.2655, Y = 1164.7371, Z = 19.3161, A = 359.8015;
		case 15: X = 1652.3667, Y = 1039.6886, Z = 10.5471, A = 359.6946;
		case 16: X = 1368.7424, Y = 2262.8081, Z = 10.5474, A = 90.4746;
		case 17: X = 1868.6571, Y = 2607.2949, Z = 10.5474, A = 90.9194;
		case 18: X = 2258.1650, Y = 2064.2012, Z = 10.5474, A = 0.4857;
		case 19: X = 2793.0652, Y = 2528.4038, Z = 10.7896, A = 132.4594;
	}

	new model[] = {
		400, 401, 402, 404, 405, 410,
		411, 412, 413, 414, 415, 418,
		419, 421, 422, 426, 429, 436,
		439, 440, 442, 445, 451, 458,
		459, 466, 467, 474, 602, 603,
		475, 477, 479, 480, 482, 483,
		491, 492, 496, 506, 507, 516,
		517, 518, 526, 527, 604, 605,
		529, 533, 534, 535, 536, 540,
		541, 542, 543, 545, 546, 547,
		549, 550, 551, 554, 555, 575,
		558, 559, 560, 561, 562, 565,
		566, 567, 576, 579, 580, 585,
		587, 589, 600};

	new indx = GetFreeVehicleID();
	vInfo[indx][vFuel] = 100.0;
	vInfo[indx][vModel] = model[random(sizeof(model))];
	vInfo[indx][vColor1] = random(256);
	vInfo[indx][vColor2] = random(256);
	vInfo[indx][vOwner] = Job_CarThief;
	vInfo[indx][vType] = VehicleTypeJob;

	vInfo[indx][vX] = X;
	vInfo[indx][vY] = Y;
	vInfo[indx][vZ] = Z;
	vInfo[indx][vA] = A;
	vInfo[indx][vRenter] = playerid;

	vInfo[indx][vServerID] = CreateVehicle(vInfo[indx][vModel], vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ], vInfo[indx][vA], vInfo[indx][vColor1], vInfo[indx][vColor2], -1);
	SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, true, false, false, false);

	SetPVarInt(playerid, "ThiefCar", vInfo[indx][vServerID]);

	SetPlayerCheckpoint(playerid, X, Y, Z, 10.0);
	pInfo[playerid][pGPSType] = GPS_Type_Job;

	new string[400];
	format(string, sizeof(string), Color_White"Вот тебе задание\n\
	"Color_White"Нужно угнать "Main_Color"%s "Color_White"местонахождение этой машины отмечено у вас на карте.\n\
	"Color_White"Отмычками ещё не забыл как пользоваться? На всякий напомню "Main_Color"/carjack\n\n\
	"Color_White"И да...Будь акуратен, если приведешь легавых, я тебя не знаю, удачи", CarName[vInfo[indx][vModel]-400]);

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Jobs[Job_CarThief][JobNames], string, Color_White"Закрыть", "");
	return 1;
}

stock SetTrashCollectorMarker(playerid)
{
	new Float:Trash[][3] = {
	{-168.5560,1027.3049,19.7344},
	{-160.1685,1124.0627,19.7422},
	{-148.2255,1133.6971,19.7422},
	{-170.1922,1170.6758,19.7500},
	{-219.2369,1164.8137,19.7422},
	{-149.8589,1162.7521,19.7500},
	{-160.9503,1175.1279,19.7422},
	{-156.9563,1234.5475,19.7422},
	{-122.4371,1079.1274,19.7822},
	{-89.1211,1127.8572,19.7422},
	{-88.9265,1164.1699,19.7422},
	{-44.2530,1178.1250,19.4173},
	{-26.0359,1165.4502,19.3621},
	{778.1037,1865.7251,4.8705},
	{339.1432,38.8646,6.5127},
	{339.0468,54.0873,3.6121},
	{1352.3599,204.7016,19.5547},
	{242.8586,-310.9093,1.5836},
	{251.1742,-263.8008,1.5781},
	{305.9578,-253.7142,1.5836},
	{309.4143,-253.5437,1.5836},
	{2319.9482,14.3012,26.4766},
	{195.3199,-121.1089,1.5499},
	{253.9664,-161.3349,1.5703},
	{255.4138,-133.6587,1.5781},
	{166.9553,-107.6246,1.5506},
	{184.0778,-93.7291,1.5391},
	{171.2668,-94.4788,1.5525},
	{657.9754,-648.6270,16.3359},
	{665.0535,-623.3406,16.3359},
	{654.0001,-496.5331,16.3359},
	{724.6193,-465.6558,16.3359},
	{655.8131,-440.2982,16.3359},
	{694.3621,-455.7887,16.3359},
	{831.0932,-755.5981,85.3125},
	{1299.9952,220.5791,19.5547},
	{1320.2705,210.2715,19.5547},
	{1328.1355,206.6121,19.5547},
	{1361.7257,231.6155,19.5669},
	{1308.0302,350.7368,19.5547},
	{1314.9980,348.5429,19.5547},
	{1412.4331,451.4441,20.1849},
	{1368.2986,483.1583,20.0265},
	{-2145.9680,-2463.3420,30.6250},
	{-2104.8315,-2458.7217,30.6250},
	{-2102.7666,-2480.3994,30.6250},
	{-2213.2837,-2340.0649,30.6250},
	{-2137.2715,-2451.2993,30.6250},
	{-2175.2007,-2425.5496,30.6250},
	{-2176.1265,-2364.3794,30.6250},
	{-2135.4167,-2262.8474,30.6319},
	{-2089.0444,-2440.1743,30.6250},
	{-2108.6235,-2422.7231,30.6250},
	{-2085.8066,-2415.7546,30.6250},
	{-2088.3660,-2342.4023,30.6250},
	{-77.4832,-1189.5227,1.7500},
	{-68.7863,-1105.9872,1.0781},
	{-541.4818,-559.7738,25.5234},
	{-619.0785,-490.6358,25.5234},
	{792.8267,-839.9186,60.6367},
	{1420.1622,-1355.4990,13.5641},
	{1423.8846,-1320.7953,13.5547},
	{1415.7094,-1300.4722,13.5451},
	{1424.2035,-1317.8486,13.5547},
	{1439.8033,-1325.4078,13.5462},
	{1592.8351,-1201.6699,19.8218},
	{1616.1075,-1202.1003,19.8171},
	{1660.3546,-1201.7816,19.7936},
	{1435.6705,-1094.5261,17.5951},
	{1438.2697,-1094.5953,17.6087},
	{1425.6345,-1084.5519,17.5534},
	{1425.6718,-1080.4520,17.5584},
	{1521.7853,-1018.5121,23.9144},
	{1521.3958,-1014.7233,23.9876}
};

	if(GetPVarInt(playerid, "TrashBinCount") <= 0)
	{
		DeletePVar(playerid, "TrashBinCount");
		SendClientMessage(playerid, -1, Color_Yellow"Кажется достаточно мешков. Выгрузите мешки на свалку");

		RemoveJobPickup(playerid);

		SetPlayerRaceCheckpoint(playerid, 2, 2185.6497,-1991.0955,13.5469, 0.0, 0.0, 0.0, 12.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;
	}
	else
	{
		new rand = random(sizeof(Trash));
		SetPlayerCheckpoint(playerid, Trash[rand][0], Trash[rand][1], Trash[rand][2], 3.0);
		CreateJobPickup(playerid, 1264, Trash[rand][0], Trash[rand][1], Trash[rand][2], 0, 0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;

		SendClientMessage(playerid, -1, Color_Yellow"Местоположение мусорного бака отмечено у вас на карте.");
		SendClientMessage(playerid, -1, Color_Yellow"По приезду выйдите из машины и заберите мешки из контейнера.");
	}
	return 1;
}

stock SetDriverDeliveryMarker(playerid)
{
	if(GetPVarInt(playerid, "DriverDeliveryStatus") == 1)
	{
		new Float:WarePoints[][3] = {
			{2782.3684,-2409.7007,13.6350},
			{2782.3413,-2425.4985,13.6350},
			{2790.4785,-2425.6211,13.6330},
			{2790.2241,-2410.1248,13.6331},
			{2795.8931,-2410.3564,13.6317}
		};

		new rand = random(sizeof(WarePoints));
		SetPlayerCheckpoint(playerid, WarePoints[rand][0], WarePoints[rand][1], WarePoints[rand][2], 3.0);
		CreateJobPickup(playerid, 1221, WarePoints[rand][0], WarePoints[rand][1], WarePoints[rand][2], 0, 0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;

		SendClientMessage(playerid, -1, Color_Yellow"Вам необходимо загрузить машину.");
		SendClientMessage(playerid, -1, Color_Yellow"Отправляйтесь в склад и возьмите от туда коробку.");
	}
	else if(GetPVarInt(playerid, "DriverDeliveryStatus") == 2)
	{
		new Float:BizPoints[][3] = {
			{2424.1836,-1742.6787,13.5452},
			{2506.6975,-1724.6719,13.5469},
			{2105.4756,-1806.5148,13.5547},
			{1928.5813,-1776.3528,13.5469},
			{1833.7816,-1842.6597,13.5781},
			{1848.1143,-1871.6067,13.5781},
			{1679.9110,-1838.9127,13.5385},
			{1679.9108,-1826.8926,13.5469},
			{1679.9103,-1832.7581,13.5469},
			{1588.0392,-1862.6370,13.5294},
			{1592.4670,-1862.6383,13.5273},
			{1597.0836,-1862.6381,13.5250},
			{1559.9092,-1856.1040,13.5469},
			{1559.9318,-1851.3514,13.5469},
			{1559.9087,-1845.7921,13.5469},
			{1352.3418,-1759.2535,13.5078},
			{1133.8336,-1270.5227,13.5469},
			{1128.8010,-1270.5220,13.5469},
			{1094.8096,-1270.7252,13.5469},
			{1038.3392,-1340.2280,13.7390},
			{1044.1971,-1308.6760,13.5469},
			{1044.1973,-1291.6355,13.7769},
			{1044.1979,-1285.4993,13.7769},
			{1044.1975,-1275.4357,13.7769},
			{1072.3098,-1214.4244,16.8906},
			{1145.2236,-1131.4476,23.8281},
			{1150.3135,-1131.4481,23.8281},
			{928.0289,-1352.8196,13.3438},
			{336.7036,-1359.0685,14.5078},
			{334.3940,-1354.8311,14.5078},
			{332.0250,-1350.4841,14.5078},
			{329.6928,-1346.2064,14.5078},
			{331.7866,-1337.6141,14.5078},
			{342.1485,-1333.7870,14.5078},
			{344.4966,-1338.0927,14.5119},
			{349.1040,-1346.5366,14.5078},
			{776.2523,-1036.2153,24.2711},
			{842.5878,-1008.0923,28.4215},
			{1199.0509,-918.5600,43.1214},
			{-78.3814,-1169.9169,2.1355},
			{-2034.8970,148.4124,28.8359},
			{-2336.8687,-166.7108,35.5547},
			{-2432.2422,-182.9680,35.3125},
			{-2671.5649,258.3185,4.6328},
			{-2442.7747,755.4181,35.1719},
			{-1912.3287,827.8284,35.2203},
			{-1721.0786,1359.5012,7.1853},
			{-2355.8169,1008.0632,50.8984},
			{-2767.7488,788.7628,52.7813},
			{-1213.6656,1830.4342,41.9297},
			{-1354.0989,2057.5059,53.1172},
			{-1448.1554,2611.4534,55.8359},
			{-1454.7942,2611.4768,55.8359},
			{-144.2465,1224.6172,19.8992},
			{-53.9990,1188.8774,19.3594},
			{172.9052,1177.1586,14.7578},
			{-89.6404,1378.5070,10.4698},
			{172.9597,1177.1383,14.7578},
			{1157.9185,2072.1985,11.0625},
			{1885.4984,2079.8413,11.0625},
			{2083.4819,2224.7014,11.0234},
			{2097.4983,2224.7009,11.0234},
			{2546.6824,1972.6660,10.8203},
			{2472.8650,2034.3597,11.0625},
			{2393.2239,2041.6233,10.8203},
			{2169.4087,2795.9785,10.8203},
			{1367.5551,248.2127,19.5669},
			{661.3624,-573.4281,16.3359},
			{-2103.6069,-2341.9331,30.6250},
			{-2155.1033,-2460.4675,30.8516}
		};

		new rand = random(sizeof(BizPoints));
		SetPlayerCheckpoint(playerid, BizPoints[rand][0], BizPoints[rand][1], BizPoints[rand][2], 3.0);
		CreateJobPickup(playerid, 1221, BizPoints[rand][0], BizPoints[rand][1], BizPoints[rand][2], 0, 0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;

		SendClientMessage(playerid, -1, Color_Yellow"Отправляйтесь на разгрузку к бизнесу.");
		SendClientMessage(playerid, -1, Color_Yellow"Когда будете на месте, подойдите к машине сзади и нажмите ~k~~SNEAK_ABOUT~ чтобы взять коробку.");
	}
	return 1;
}

stock SetBusMarker(playerid)
{
	if(GetPVarInt(playerid, "BusRouteStage") == 1)
	{
		SetPlayerRaceCheckpoint(playerid, 2, -2211.4963,-2265.8301,30.4688, 0.0, 0.0, 0.0, 10.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;
	}
	else if(GetPVarInt(playerid, "BusRouteStage") == 2)
	{
		switch(GetPVarInt(playerid, "BusRoute"))
		{
			case 1:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -2753.1643,397.7596,4.1328, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 2:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -304.0954,1066.1196,19.5938, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 3:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -295.8828,1481.2313,75.4354, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 4:
			{
				SetPlayerRaceCheckpoint(playerid, 2, 111.2325,-214.8443,1.4297, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 5:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -776.0268,1533.2491,26.9584, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 6:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -653.7770,-1518.1028,21.3990, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 7:
			{
				SetPlayerRaceCheckpoint(playerid, 2, 2727.7874,-2409.5784,13.4508, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 8:
			{
				SetPlayerRaceCheckpoint(playerid, 2, 2417.6965,-2076.8484,13.3099, 0.0, 0.0, 0.0, 10.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
		}
	}
	else if(GetPVarInt(playerid, "BusRouteStage") == 3)
	{
		SetPlayerRaceCheckpoint(playerid, 2, -2211.4963,-2265.8301,30.4688, 0.0, 0.0, 0.0, 10.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;
	}
	SendClientMessage(playerid, -1, Color_Yellow"Двигайтесь на следующую метку");
	return 1;
}

stock SetFisherMarker(playerid)
{
	new Float:FishPoints[][3] = {
		{1907.3672,-52.0566,1.5749},
		{1901.8066,-169.1435,1.5936},
		{2121.4104,61.5022,1.5882},
		{2192.6343,228.3282,1.5879},
		{2196.7363,320.3894,1.4812},
		{2345.4521,438.0133,1.4988},
		{2382.6672,520.0889,1.5582},
		{2440.8694,542.5292,1.6819},
		{2488.5503,476.8481,1.6213},
		{2492.0630,407.6994,1.6069},
		{2036.1332,451.0100,1.6918},
		{1991.7584,538.4577,1.6840},
		{1903.3939,509.7112,1.4712},
		{1782.9432,459.3155,1.6364},
		{1718.6573,465.8997,1.6842},
		{1742.3296,538.1569,1.6337},
		{1702.2904,583.9616,1.5453},
		{1617.1945,458.7185,1.5554},
		{1522.9180,499.6715,1.4999},
		{1481.2305,576.1880,1.5411}
	};

	new rand = random(sizeof(FishPoints));
	SetPlayerRaceCheckpoint(playerid, 2, FishPoints[rand][0], FishPoints[rand][1], FishPoints[rand][2], 0.0, 0.0, 0.0, 10.0);
	CreateJobPickup(playerid, 19630, FishPoints[rand][0], FishPoints[rand][1], FishPoints[rand][2], 0, 0, 10.0);
	pInfo[playerid][pGPSType] = GPS_Type_Job;

	SendClientMessage(playerid, -1, Color_Yellow"На радаре лодки отмечено место где последний раз видели косяк рыбы.");
	SendClientMessage(playerid, -1, Color_Yellow"Сплавай туда и проверь.");
}

stock SetFarmDeliverMarker(playerid)
{
	new FarmDeliverStage = GetPVarInt(playerid, "FarmDeliverStage");
	if(!FarmDeliverStage)
	{
		new FarmDeliverType = 1+random(3);
		switch(FarmDeliverType)
		{
			case 1:
			{
				SendClientMessage(playerid, -1, Color_Yellow"Отправляйтесь к ферме и загрузите там груз используя погрузчик");
				SetPlayerRaceCheckpoint(playerid, 2, -376.9326,-1415.0387,25.7266, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 2:
			{
				SendClientMessage(playerid, -1, Color_Yellow"Отправляйтесь к лесопилке и загрузите там груз используя погрузчик");
				SetPlayerRaceCheckpoint(playerid, 2, -1658.0085,-2235.4856,31.3752, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 3:
			{
				SendClientMessage(playerid, -1, Color_Yellow"Отправляйтесь к шахте и загрузите там груз используя погрузчик");
				SetPlayerRaceCheckpoint(playerid, 2, -743.8796,1568.9811,26.9609, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
		}
		SetPVarInt(playerid, "FarmDeliverType", FarmDeliverType);
		SetPVarInt(playerid, "FarmDeliverStage", 1);
	}
	else if(FarmDeliverStage == 2)
	{
		switch(GetPVarInt(playerid, "FarmDeliverType"))
		{
			case 1:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -372.2107,-1428.8475,25.7266, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 2:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -1638.8317,-2250.5315,31.3690, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
			case 3:
			{
				SetPlayerRaceCheckpoint(playerid, 2, -745.0830,1578.7736,26.9609, 0.0, 0.0, 0.0, 5.0);
				pInfo[playerid][pGPSType] = GPS_Type_Job;
			}
		}
	}
	else if(FarmDeliverStage == 3)
	{
		SetPlayerRaceCheckpoint(playerid, 2, 90.0994,-306.6081,1.5781, 0.0, 0.0, 0.0, 5.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;
	}
	return 1;
}

stock SetPilotMarker(playerid)
{
	new Float:Points[][3] = {
		{1471.8893,1103.5922,55.9989},//Взлет
		{1359.7207,480.1906,178.4211},//Взлет

		{1540.2910,755.1495,258.0483},//Посадка
		{1485.0640,1551.2946,10.8125}//Посадка
	};
	new PointsNumber = GetPVarInt(playerid, "PilotNumberPoint");

	if(PointsNumber == 1)
	{
		new Float:X, Float:Y, Float:Z = 260.0;
		GetRandXY(playerid, X, Y);

		SetPVarFloat(playerid, "PilotNextX", X);
		SetPVarFloat(playerid, "PilotNextY", Y);

		SetPlayerRaceCheckpoint(playerid, 3, Points[PointsNumber][0],Points[PointsNumber][1],Points[PointsNumber][2], X, Y, Z, 12.0);
	}
	else if(PointsNumber > 1 && PointsNumber < 8)
	{
		new Float:X, Float:Y, Float:Z = 260.0;
		GetRandXY(playerid, X, Y);

		SetPlayerRaceCheckpoint(playerid, 3, GetPVarFloat(playerid, "PilotNextX"), GetPVarFloat(playerid, "PilotNextY"), Z, X, Y, Z, 12.0);

		SetPVarFloat(playerid, "PilotNextX", X);
		SetPVarFloat(playerid, "PilotNextY", Y);
	}
	else if(PointsNumber == 8) SetPlayerRaceCheckpoint(playerid, 3, Points[2][0],Points[2][1],Points[2][2], Points[3][0],Points[3][1],Points[3][2], 12.0);
	else if(PointsNumber == 9) SetPlayerRaceCheckpoint(playerid, 4, Points[3][0],Points[3][1],Points[3][2], 1476.4615,1846.1788,10.8203, 12.0);
	else SetPlayerRaceCheckpoint(playerid, 3, Points[PointsNumber][0],Points[PointsNumber][1],Points[PointsNumber][2], Points[PointsNumber+1][0],Points[PointsNumber+1][1],Points[PointsNumber+1][2], 12.0);
	pInfo[playerid][pGPSType] = GPS_Type_Job;
	return 1;
}

stock GetRandXY(playerid, &Float:X, &Float:Y)
{
	new Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	new RandX = 500+random(251);
	new RandY = 500+random(251);

	if(random(2))
	{
		RandX *= -1;
	}
	if(random(2))
	{
		RandY *= -1;
	}

	if(X+float(RandX) >= 2800.0 || X+float(RandX) <= -2800.0) RandX *= -1;
	if(Y+float(RandY) >= 2800.0 || Y+float(RandY) <= -2800.0) RandY *= -1;

	X += float(RandX);
	Y += float(RandY);
	return 1;
}

stock RemoveCarriedObj(playerid, bool:msg)
{
	if(pInfo[playerid][pJob] == Job_TrashCollector && GetPVarInt(playerid, "TrashBagCount"))
	{
		DeletePVar(playerid, "TrashBagCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили мешок");
	}
	else if(pInfo[playerid][pJob] == Job_DriverDelivery && GetPVarInt(playerid, "BoxCount"))
	{
		DeletePVar(playerid, "BoxCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили коробку");
	}
	else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Lumberjack && GetPVarInt(playerid, "ChopCount"))
	{
		DeletePVar(playerid, "ChopCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили бревна");
		pInfo[playerid][pGPSType] = GPS_Type_None;
		DisablePlayerCheckpoint(playerid);
	}
	else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Farm && GetPVarInt(playerid, "PlantCount"))
	{
		DeletePVar(playerid, "PlantCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили урожай");
		pInfo[playerid][pGPSType] = GPS_Type_None;
		DisablePlayerCheckpoint(playerid);
	}
	else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Mine && GetPVarInt(playerid, "MetallCount"))
	{
		DeletePVar(playerid, "MetallCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили руду");
		RemoveJobPickup(playerid);
	}
	else if(pInfo[playerid][pJail] && GetPVarInt(playerid, "MetallCount"))
	{
		DeletePVar(playerid, "MetallCount");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили камень");
		pInfo[playerid][pGPSType] = GPS_Type_None;
		DisablePlayerCheckpoint(playerid);
	}
	else if(GetPVarInt(playerid, "AmmoBox"))
	{
		DeletePVar(playerid, "AmmoBox");
		ClearAnimations(playerid, true);
		if(msg) SendClientMessage(playerid, -1, Color_Grey"Вы уронили коробку с материалами");
	}
	RemovePlayerAttachedObject(playerid, AttachSlotJob);
	return 1;
}

forward SetCarriedObj(playerid);
public SetCarriedObj(playerid)
{
	if(GetPVarInt(playerid, "UnOfficialJob") == Job_Lumberjack)
	{
		new TreeIndx = GetPVarInt(playerid, "TreeIndx")-1;
		DeletePVar(playerid, "TreeIndx");
		if(LumberjackTree[TreeIndx][TreeTimer]) return 1;
		RemoveCarriedObj(playerid, false);
		ClearAnimations(playerid, true);
		SendClientMessage(playerid, -1, Main_Color"Вы срубили дерево, теперь отнесите бревна на склад");
		pInfo[playerid][pGPSType] = GPS_Type_Job;
		SetPlayerCheckpoint(playerid, -1632.7719,-2234.1228,31.4766, 3.0);
		ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
		SetPlayerAttachedObject(playerid, AttachSlotJob, 1463, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769);
		SetPVarInt(playerid, "ChopCount", 1);
		SetPVarInt(playerid, "TreeCutCount", GetPVarInt(playerid, "TreeCutCount")+1);

		new str[100];
		LumberjackTree[TreeIndx][TreeTimer] = 60;
		DestroyDynamicObject(LumberjackTree[TreeIndx][TreeID]);
		format(str, sizeof(str), Main_Color"Дерево: Уже срублено\nВырастет через "Color_White"%d "Main_Color"секунд", LumberjackTree[TreeIndx][TreeTimer]);
		UpdateDynamic3DTextLabelText(LumberjackTree[TreeIndx][TreeText], -1, str);

		DeletePVar(playerid, "DisableTextAnim");
	}
	else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Farm)
	{
		new PlantIndx = GetPVarInt(playerid, "PlantIndx")-1;
		DeletePVar(playerid, "PlantIndx");
		if(FarmPlant[PlantIndx][PlantTimer]) return 1;
		RemoveCarriedObj(playerid, false);
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid, true);
		SendClientMessage(playerid, -1, Main_Color"Вы собрали урожай, теперь отнесите его на склад");
		pInfo[playerid][pGPSType] = GPS_Type_Job;
		SetPlayerCheckpoint(playerid, -372.2107,-1428.8475,25.7266, 3.0);
		ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
		SetPlayerAttachedObject(playerid, AttachSlotJob, 2901, 17, -0.073969, 0.349906, 0.065601, 331.510559, 271.870788, 321.750610, 0.831871, 1.000000, 0.748390);
		SetPVarInt(playerid, "PlantCount", 1);

		new str[100];
		FarmPlant[PlantIndx][PlantTimer] = 60;
		DestroyDynamicObject(FarmPlant[PlantIndx][PlantID]);
		format(str, sizeof(str), Main_Color"Урожай: Уже собрано\nВырастет через "Color_White"%d "Main_Color"секунд", FarmPlant[PlantIndx][PlantTimer]);
		UpdateDynamic3DTextLabelText(FarmPlant[PlantIndx][PlantText], -1, str);

		switch(random(10))
		{
			case 7, 8, 9:
			{
				if(AddPlayerInventory(playerid, ItemRawDrugs)) SendClientMessage(playerid, -1, Main_Color"Вы нашли траву. Она добавлена в ваш инвентарь");
			}
		}


		DeletePVar(playerid, "DisableTextAnim");
	}
	else if(GetPVarInt(playerid, "UnOfficialJob") == Job_Mine)
	{
		new MetallIndx = GetPVarInt(playerid, "MetallIndx")-1;
		DeletePVar(playerid, "MetallIndx");
		if(MineMetall[MetallIndx][MetallTimer]) return 1;
		RemoveCarriedObj(playerid, false);
		ClearAnimations(playerid, true);
		SendClientMessage(playerid, -1, Main_Color"Вы добыли руду, теперь отнесите её на склад");
		CreateJobPickup(playerid, 19198, -593.4173,-1754.1420,792.4719, 2, 0);
		ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
		SetPlayerAttachedObject(playerid, AttachSlotJob, 3931, 14, 0.2969, -0.2269, 0.0230, 13.1999, 0.0000, 0.0000, 0.3449, 0.2769, 0.6209, 0, 0);
		SetPVarInt(playerid, "MetallCount", 1);

		new str[100];
		MineMetall[MetallIndx][MetallTimer] = 60;
		DestroyDynamicObject(MineMetall[MetallIndx][MetallID]);
		format(str, sizeof(str), Main_Color"Руда: Уже добыто\nМожно копнуть глубже через "Color_White"%d "Main_Color"секунд", MineMetall[MetallIndx][MetallTimer]);
		UpdateDynamic3DTextLabelText(MineMetall[MetallIndx][MetallText], -1, str);

		switch(random(4))
		{
			case 3:
			{
				if(AddPlayerInventory(playerid, ItemMetall)) SendClientMessage(playerid, -1, Main_Color"Вы нашли металл. Он добавлен в ваш инвентарь");
			}
		}

		DeletePVar(playerid, "DisableTextAnim");
	}
	else if(pInfo[playerid][pJail])
	{
		new MetallIndx = GetPVarInt(playerid, "MetallIndx")-1;
		DeletePVar(playerid, "MetallIndx");
		if(PrisonMineMetall[MetallIndx][MetallTimer]) return 1;
		RemoveCarriedObj(playerid, false);
		ClearAnimations(playerid, true);
		SendClientMessage(playerid, -1, Main_Color"Вы добыли камень, теперь отнесите его на склад который находится во внешнем дворе тюрьмы");
		pInfo[playerid][pGPSType] = GPS_Type_Job;
		SetPlayerCheckpoint(playerid, 236.6787,1900.7913,18.3294, 3.0);
		ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
		SetPlayerAttachedObject(playerid, AttachSlotJob, 3931, 14, 0.2969, -0.2269, 0.0230, 13.1999, 0.0000, 0.0000, 0.3449, 0.2769, 0.6209, 0, 0);
		SetPVarInt(playerid, "MetallCount", 1);

		new str[100];
		PrisonMineMetall[MetallIndx][MetallTimer] = 120;
		DestroyDynamicObject(PrisonMineMetall[MetallIndx][MetallID]);
		format(str, sizeof(str), Main_Color"Камень: Уже добыто\nМожно копнуть глубже через "Color_White"%d "Main_Color"секунд", PrisonMineMetall[MetallIndx][MetallTimer]);
		UpdateDynamic3DTextLabelText(PrisonMineMetall[MetallIndx][MetallText], -1, str);

		DeletePVar(playerid, "DisableTextAnim");
	}
	return 1;
}

stock CreateJobPickup(playerid, pickupid, Float:X, Float:Y, Float:Z, virtualworld, interiorid, Float:size = 2.0)
{
	RemoveJobPickup(playerid);
	SetPVarInt(playerid, "JobPick", CreateDynamicPickup(pickupid, 1, X, Y, Z, virtualworld, interiorid, playerid));
	SetPVarInt(playerid, "JobArea", CreateDynamicSphere(X, Y, Z, size, virtualworld, interiorid, playerid));
	Streamer_Update(playerid);
	return 1;
}

stock RemoveJobPickup(playerid)
{
	if(GetPVarInt(playerid, "JobPick"))
	{
		DestroyDynamicPickup(GetPVarInt(playerid, "JobPick"));
		DeletePVar(playerid, "JobPick");
	}
	if(GetPVarInt(playerid, "JobArea"))
	{
		DestroyDynamicArea(GetPVarInt(playerid, "JobArea"));
		DeletePVar(playerid, "JobArea");
	}
	return 1;
}

forward RemoveThiefCar(playerid, bool:msg);
public RemoveThiefCar(playerid, bool:msg)
{
	if(GetPVarInt(playerid, "ThiefCar"))
	{
		ClearVehicle(GetPVarInt(playerid, "ThiefCar"));
		DeletePVar(playerid, "ThiefCar");
		if(msg) SendClientMessage(playerid, -1,  Color_Yellow"Транспорт который вы должны были угнать, уничтожен.");
		if(GetPVarInt(playerid, "CarThiefTimer"))
		{
			KillTimer(GetPVarInt(playerid, "CarThiefTimer"));
			DeletePVar(playerid, "CarThiefTimer");
		}
		if(pInfo[playerid][pGPSType] == GPS_Type_Job)
		{
			pInfo[playerid][pGPSType] = GPS_Type_None;
			DisablePlayerCheckpoint(playerid);
		}
	}
}

stock AddVehicleAttachObj(ObjID, vehicleid, Float:offsetx, Float:offsety, Float:offsetz, Float:rx, Float:ry, Float:rz)
{
	for(new i = 0; i < MaxAttachedObjOnVehicle; i++)
	{
		if(!vInfo[vehicleid][vAttachedObj][i])
		{
			AttachDynamicObjectToVehicle(ObjID, vehicleid, offsetx, offsety, offsetz, rx, ry, rz);
			vInfo[vehicleid][vAttachedObj][i] = ObjID;
			return true;
		}
	}
	return false;
}

stock RemoveVehicleAttachObj(vehicleid, indx)
{
	if(!vInfo[vehicleid][vAttachedObj][indx]) return false;
	DestroyDynamicObject(vInfo[vehicleid][vAttachedObj][indx]);
	vInfo[vehicleid][vAttachedObj][indx] = 0;
	return true;
}

stock GetVehicleAttachObjCount(vehicleid)
{
	new count = 0;
	for(new i = 0; i < MaxAttachedObjOnVehicle; i++)
	{
		if(vInfo[vehicleid][vAttachedObj][i]) count++;
	}
	return count;
}

stock GetVehicleAttachObjID(vehicleid, indx)
{
	if(!vInfo[vehicleid][vAttachedObj][indx]) return -1;
	return Streamer_GetIntData(STREAMER_TYPE_OBJECT, vInfo[vehicleid][vAttachedObj][indx], E_STREAMER_MODEL_ID);
}

stock GetVehicleBootPos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	new Float:angle, Float:distance;
	if (0 == GetVehicleZAngle(vehicleid, angle)) return _:(x = y = z = 0.0); // return 0

	GetVehicleModelInfo(vInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE,x, distance, z);
	distance = floatadd(floatdiv(distance, 2.0), 0.1);
	GetVehiclePos(vehicleid, x, y, z);

	x = floatadd(x, floatmul(distance, floatsin(floatadd(-angle, 180.0),degrees)));
	y = floatadd(y, floatmul(distance, floatcos(floatadd(-angle, 180.0),degrees)));
	return 1;
}

stock GetVehicleLeftDoorPos(vehicletype, &Float:x,&Float:y, &Float:z)
{
	if (0 == GetVehiclePos(vehicletype, x, y, z)) return _:(x = y = z = 0.0); // return 0
	new Float:z_angle, Float:vehicle_x, Float:vehicle_y, Float:vehicle_z, Float:div;

	GetVehicleZAngle(vehicletype, z_angle);
	vehicletype = vInfo[vehicletype][vModel];
	GetVehicleModelInfo(vehicletype, VEHICLE_MODEL_INFO_FRONTSEAT, vehicle_x, vehicle_y, vehicle_z);

	div = -vehicle_x;

	x = (floatsin((z_angle = 360 - z_angle), degrees) * vehicle_y) + (floatcos(z_angle, degrees) * div) + x;
	y = (floatcos(z_angle, degrees) * vehicle_y) - (floatsin(z_angle, degrees) * div) + y;
	z += vehicle_z;

	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new veh = GetPlayerVehicleID(playerid);
		if(veh && vInfo[vehicleid][vType] == VehicleTypeTrailer)
		{
			if(vInfo[vehicleid][vOwner] == Job_Trucker)
			{
				if(vInfo[vehicleid][vRenter] == playerid)
				{
					if(GetPVarInt(playerid, "TrailerID") == vehicleid)
					{
						if(GetPVarInt(playerid, "TrailerID") == GetVehicleTrailer(veh) && GetPVarInt(playerid, "TrailerTimer"))
						{
							KillTimer(GetPVarInt(playerid, "TrailerTimer"));
							DeletePVar(playerid, "TrailerTimer");
						}
					}
				}
				else
				{
					new Float:X, Float:Y, Float:Z, Float:A;
					new Float:TrailerX, Float:TrailerY, Float:TrailerZ;
					GetVehiclePos(vehicleid, TrailerX, TrailerY, TrailerZ);
					GetVehiclePos(veh, X, Y, Z);
					GetVehicleZAngle(veh, A);
					X += (7.0 * floatsin(-A, degrees));
    				Y += (7.0 * floatcos(-A, degrees));
					DetachTrailerFromVehicle(veh);
					SetVehiclePos(veh, X, Y, Z+1.0);
					SetVehiclePos(vehicleid, TrailerX, TrailerY, TrailerZ+1.0);
					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это не ваш прицеп");
				}
			}
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new veh = GetPlayerVehicleID(playerid);
		if(veh && vInfo[vehicleid][vType] == VehicleTypeTrailer)
		{
			if(vInfo[vehicleid][vOwner] == Job_Trucker)
			{
				if(vInfo[vehicleid][vRenter] == playerid)
				{
					if(GetPVarInt(playerid, "TrailerID") == vehicleid)
					{
						if(!GetVehicleTrailer(veh) && TruckerQueue[0] != playerid && !GetPVarInt(playerid, "TrailerTimer"))
						{
							SetPVarInt(playerid, "TrailerTimer", SetTimerEx("RemoveTrailer", 600000, false, "dd", playerid, true));
							SendClientMessage(playerid, -1, Color_Grey"Ваш прицеп отцепился. У вас есть 10 минут чтобы прицепить его иначе он будет возвращен");
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(pInfo[playerid][pAFK])
	{
		if(pInfo[playerid][pAFK] > 2 && pInfo[playerid][pAuth] && !GetPVarInt(playerid, "FirstSpawn"))
		{
			new str[100];
			ConvertedSeconds(pInfo[playerid][pAFK], str);
			format(str, sizeof(str), Color_White"Вы были в АФК: ["Main_Color"%s"Color_White"]", str);
			SendClientMessage(playerid, -1, str);
		}

		if(pInfo[playerid][pAFKText] && IsValidDynamic3DTextLabel(pInfo[playerid][pAFKText]))
		{
			DestroyDynamic3DTextLabel(pInfo[playerid][pAFKText]);
			pInfo[playerid][pAFKText] = Text3D:0;
		}
		pInfo[playerid][pAFK] = 0;
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, const inputtext[])
{
	switch(dialogid)
	{
		case D_Reg_Pass:
		{
			if(!response)
			{
				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы отказались от регистрации и были кикнуты");
				KickPlayer(playerid);
				return 1;
			}
			if (!strlen(inputtext))
			{
				ShowDialog(playerid, D_Reg_Pass, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Регистрация",
				Color_White"Для продолжения игры на данном сервере необходимо пройти регистрацию\n\nПридумайте и введите пароль для своего аккаунта:\n"Color_Red"- "Color_White"Вы не ввели пароль\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа\n",
				Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if (strlen(inputtext) >  32)
			{
				ShowDialog(playerid, D_Reg_Pass, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Регистрация",
				Color_White"Для продолжения игры на данном сервере необходимо пройти регистрацию\n\nПридумайте и введите пароль для своего аккаунта:\n"Color_Red"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа\n",
				Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			new Regex:rg_passwordcheck = Regex_New("^[a-z,A-Z,0-9]*$");
			if (!Regex_Check(inputtext, rg_passwordcheck))
			{
				ShowDialog(playerid, D_Reg_Pass, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Регистрация",
				Color_White"Для продолжения игры на данном сервере необходимо пройти регистрацию\n\nПридумайте и введите пароль для своего аккаунта:\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Color_Red"- "Color_White"Пароль можеть содержать только латиницу и числа\n",
				Color_White"Далее", Color_White"Отмена");
				Regex_Delete(rg_passwordcheck);
				return 1;
			}
			Regex_Delete(rg_passwordcheck);
			strmid(pInfo[playerid][pPassword], inputtext, 0, strlen(inputtext));
			ShowDialog(playerid, D_Reg_Mail, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Привязка почты",
			Color_White"Если вы вдруг забудете свой пароль или потеряете доступ к своему аккаунту\n\
			Вам поможет почта благодаря которой вы сможете восстановить пароль от аккаунта:\n\
			Для подключения почты к своему аккаунту введите её в поле ниже",
			Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		case D_Reg_Mail:
		{
			if(!response)
			{
				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы отказались от регистрации и были кикнуты");
				KickPlayer(playerid);
				return 1;
			}
			if (!strlen(inputtext))
			{
				ShowDialog(playerid, D_Reg_Mail, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Привязка почты",
				Color_White"Если вы вдруг забудете свой пароль или потеряете доступ к своему аккаунту\n\
				Вам поможет почта благодаря которой вы сможете восстановить пароль от аккаунта:\n\
				Для подключения почты к своему аккаунту введите её в поле ниже\n\n\
				"Color_Red"- "Color_White"Вы не ввели почту",
				Color_White"Далее", Color_White"Отмена");
			}
			if (strlen(inputtext) > 320)
			{
				ShowDialog(playerid, D_Reg_Mail, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Привязка почты",
				Color_White"Если вы вдруг забудете свой пароль или потеряете доступ к своему аккаунту\n\
				Вам поможет почта благодаря которой вы сможете восстановить пароль от аккаунта:\n\
				Для подключения почты к своему аккаунту введите её в поле ниже\n\n\
				"Color_Red"- "Color_White"Почта не может быть такой длинной",
				Color_White"Далее", Color_White"Отмена");
			}
			new Regex:rg_mailcheck = Regex_New("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$");
			if (!Regex_Check(inputtext, rg_mailcheck))
			{
				ShowDialog(playerid, D_Reg_Mail, DIALOG_STYLE_INPUT,  Main_Color Project_Name " || "Color_White"Привязка почты",
				Color_White"Если вы вдруг забудете свой пароль или потеряете доступ к своему аккаунту\n\
				Вам поможет почта благодаря которой вы сможете восстановить пароль от аккаунта:\n\
				Для подключения почты к своему аккаунту введите её в поле ниже\n\n\
				"Color_Red"- "Color_White"Введите настоящий адрес электронной почты",
				Color_White"Далее", Color_White"Отмена");
				Regex_Delete(rg_mailcheck);
				return 1;
			}
			Regex_Delete(rg_mailcheck);
			strmid(pInfo[playerid][pMail], inputtext, 0, strlen(inputtext));
			ShowDialog(playerid, D_Reg_Gender, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Выбор пола", Color_White"Мужчина\nЖенщина", Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		case D_Reg_Gender:
		{
			if(!response)
			{
				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы отказались от регистрации и были кикнуты");
				KickPlayer(playerid);
				return 1;
			}
			pInfo[playerid][pGender] = listitem;

			if(!listitem)
			{
				pInfo[playerid][pSkins][0] = 289;
				pInfo[playerid][pSkin] = 0;
			}
			else
			{
				pInfo[playerid][pSkins][0] = 90;
				pInfo[playerid][pSkin] = 0;
			}

        	new query[700];
        	pInfo[playerid][pRegDate] = gettime();
        	GetPlayerIp(playerid, pInfo[playerid][pRegIp], 16);
			mysql_format(DB, query, sizeof(query), "INSERT INTO `account` (`Name`, `Password`, `Mail`, `Gender`, `Skin`, `RegIP`, `RegDate`) VALUES ('%e', '%e', '%e', '%d', '%d', '%s', '%d')", pInfo[playerid][pName], pInfo[playerid][pPassword], pInfo[playerid][pMail], pInfo[playerid][pGender], pInfo[playerid][pSkin], pInfo[playerid][pRegIp], pInfo[playerid][pRegDate]);
			pInfo[playerid][pHealth] = 100.0;
			pInfo[playerid][pLevel] = 0;
			pInfo[playerid][pExp] = 0;
			pInfo[playerid][pMoney] = 0;
			pInfo[playerid][pDonateMoney] = 0;
			pInfo[playerid][pAuth] = true;

			SendClientMessage(playerid, -1, Color_White"Приветствуем на "Main_Color Project_Name Color_White". Приятной игры!");

			if(GetPVarInt(playerid, "LoginCameraTimer"))
			{
				KillTimer(GetPVarInt(playerid, "LoginCameraTimer"));
				DeletePVar(playerid, "LoginCameraTimer");
			}
			if(GetPVarInt(playerid, "LoginCamera")) DeletePVar(playerid, "LoginCamera");

			SetPVarInt(playerid, "FirstSpawn", 10);
			TogglePlayerSpectating(playerid, false);

			mysql_tquery(DB, query, "GetRegID", "d", playerid);
			return 1;
		}
		case D_Auth:
		{
			if(!response)
			{
				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы отказались от авторизации и были кикнуты");
				KickPlayer(playerid);
				return 1;
			}
			if (!strcmp(pInfo[playerid][pPassword], inputtext))
			{
				DeletePVar(playerid, "AuthTry");
				if(pInfo[playerid][pPinCode])
				{
					SetPVarInt(playerid, "AuthTry", 3);
					ShowDialog(playerid, D_PinCode_Check, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Авторизация", Color_White"На вашем аккаунте установлен пин-код\nЧтобы зайти на сервер введите его в поле ниже", Color_White"Далее", Color_White"Отмена");
				}
				else
				{
					new query[200];
					mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `Name`='%s'", pInfo[playerid][pName]);
					mysql_tquery(DB, query, "LoadAccount", "d", playerid);
				}
			}
			else
			{
				SetPVarInt(playerid, "AuthTry", GetPVarInt(playerid, "AuthTry")-1);
				if(GetPVarInt(playerid, "AuthTry") <= 0)
				{
					SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы 3 раза ввели не верный пароль и были кикнуты");
					KickPlayer(playerid);
				}
				new string[250];
				format(string, sizeof(string),Color_White"Ваш аккаунт уже зарегестрирован в базе данных сервера\nДля продолжения введите пароль от вашего аккаунта\n"Color_Red"- "Color_White"Вы ввели неверный пароль, попыток авторизации осталось %d/3", GetPVarInt(playerid, "AuthTry"));
				ShowDialog(playerid, D_Auth, DIALOG_STYLE_PASSWORD, Main_Color Project_Name " || "Color_White"Авторизация", string, Color_White"Далее", Color_White"Отмена");
			}
			return 1;
		}
		case D_PinCode_Check:
		{
			if(!response)
			{
				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы отказались от авторизации и были кикнуты");
				KickPlayer(playerid);
				return 1;
			}
			if(strval(inputtext) == pInfo[playerid][pPinCode])
			{
				DeletePVar(playerid, "AuthTry");
				new query[200];
				mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `Name`='%s'", pInfo[playerid][pName]);
				mysql_tquery(DB, query, "LoadAccount", "d", playerid);
			}
			else
			{
				SetPVarInt(playerid, "AuthTry", GetPVarInt(playerid, "AuthTry")-1);
				if(GetPVarInt(playerid, "AuthTry") <= 0)
				{
					SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы 3 раза ввели не верный пин-код и были кикнуты");
					KickPlayer(playerid);
				}

				new string[250];
				format(string, sizeof(string), Color_White"На вашем аккаунте установлен пин-код\nЧтобы зайти на сервер введите его в поле ниже\n"Color_Red"- "Color_White"Вы ввели неверный пин-код, попыток авторизации осталось %d/3", GetPVarInt(playerid, "AuthTry"));
				ShowDialog(playerid, D_PinCode_Check, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Авторизация", string, Color_White"Далее", Color_White"Отмена");
			}
		}
		case D_ACreatePass:
		{
			if(!response) return 1;
			if (!strlen(inputtext))
			{
				ShowDialog(playerid, D_ACreatePass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Создание пароля администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
				необходимо придумать пароль от админ панели.\n\
				Введите пароль в поле ниже и запомните его.\n\n\
				"Color_Red"- "Color_White"Вы не ввели пароль\n\
				"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n\
				"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if (strlen(inputtext) >  32)
			{
				ShowDialog(playerid, D_ACreatePass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Создание пароля администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
				необходимо придумать пароль от админ панели.\n\
				Введите пароль в поле ниже и запомните его.\n\n\
				"Color_Red"- "Color_White"Пароль должен быть не больше 32 символов\n\
				"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if(!strcmp(inputtext, "None"))
			{
				ShowDialog(playerid, D_ACreatePass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Создание пароля администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
				необходимо придумать пароль от админ панели.\n\
				Введите пароль в поле ниже и запомните его.\n\n\
				"Color_Red"- "Color_White"Данный пароль запрещен\n\
				"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n\
				"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			new Regex:rg_passwordcheck = Regex_New("^[a-z,A-Z,0-9]*$");
			if (!Regex_Check(inputtext, rg_passwordcheck))
			{
				ShowDialog(playerid, D_ACreatePass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Создание пароля администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
				необходимо придумать пароль от админ панели.\n\
				Введите пароль в поле ниже и запомните его.\n\n\
				"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n\
				"Color_Red"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Отмена");
				Regex_Delete(rg_passwordcheck);
				return 1;
			}
			Regex_Delete(rg_passwordcheck);
			strmid(pInfo[playerid][pAdminPass], inputtext, 0, strlen(inputtext));
			SavePlayerStr(playerid, "AdminPass", pInfo[playerid][pAdminPass]);
			AuthAdmin(playerid);
			return 1;
		}
		case D_Alogin:
		{
			if(!response) return 1;
			if(!strcmp(inputtext, pInfo[playerid][pAdminPass])) AuthAdmin(playerid);
			else
			{
				new str[200];
				GetPlayerIp(playerid, str, 16);
				format(str, sizeof(str), "%s %s неверно ввел пароль от админ панели и был кикнут (RegIP: %s | IP: %s)", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[playerid][pRegIp], str);
				SendAdminMessage(str);

				SendClientMessage(playerid, -1, Color_Red"- "Color_White"Вы ввели не верный пароль от админ панели и были кикнуты");
				KickPlayer(playerid);
			}
			return 1;
		}
		case D_Donate:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					ShowDialog(playerid, D_Donate_Change_Name, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена ника", Color_White"Введите новый ник на который вы хотите сменить ваш ник\n\n"Color_White"Смена ника - 100р", Color_White"Далее", Color_White"Отмена");
				}
				case 1:
				{
					ShowDialog(playerid, D_Donate_Change_Gender, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Смена пола", Color_White"Мужчина\n"Color_White"Женщина", Color_White"Далее", Color_White"Отмена");
				}
				case 2:
				{
					ShowDialog(playerid, D_Donate_Buy_Level, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка уровня", Color_White"Введите количество уровней которые вы хотите купить\n\n"Color_White"1 уровень - 100р", Color_White"Далее", Color_White"Отмена");
				}
				case 3:
				{
					ShowDialog(playerid, D_Donate_Buy_UnWarn, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Снять предупреждение", Color_White"Вы уверены что хотите снять предупреждение\n\n"Color_White"1 предупреждение - 150р", Color_White"Далее", Color_White"Отмена");
				}
				case 4:
				{
					ShowDialog(playerid, D_Donate_Buy_Money, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка виртов", Color_White"Введите количество донат рублей которое хотите обменять на вирты\n\n"Color_Green"10.000$ "Color_White"- 100р", Color_White"Далее", Color_White"Отмена");
				}
				case 5:
				{
					if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
					ShowCarUpgrade(playerid, 2);
				}
			}
			return 1;
		}
		case D_Donate_Change_Name:
		{
			if(!response) return 1;
			if(pInfo[playerid][pDonateMoney] < 100) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");

			if(!strlen(inputtext))
			{
				ShowDialog(playerid, D_Donate_Change_Name, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена ника", Color_White"Введите новый ник на который вы хотите сменить ваш ник\n\n"Color_White"Смена ника - 100р\n\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if(strlen(inputtext) > 24)
			{
				ShowDialog(playerid, D_Donate_Change_Name, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена ника", Color_White"Введите новый ник на который вы хотите сменить ваш ник\n\n"Color_White"Смена ника - 100р\n\n"Color_Red"Максимальная длина ника 24 символа", Color_White"Далее", Color_White"Отмена");
				return 1;
			}

			new Regex:rg_namecheck = Regex_New("^[a-z,A-Z,0-9,_,-]*$");
			if (!Regex_Check(inputtext, rg_namecheck))
			{
				ShowDialog(playerid, D_Donate_Change_Name, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена ника", Color_White"Введите новый ник на который вы хотите сменить ваш ник\n\n"Color_White"Смена ника - 100р\n\n"Color_Red"Ник может состоять только из латиницы и цифр", Color_White"Далее", Color_White"Отмена");
				Regex_Delete(rg_namecheck);
				return 1;
			}
			Regex_Delete(rg_namecheck);

			new str[300];

			str[0] = EOS;
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) сменил ник c %s на %s", str, pInfo[playerid][pRegIp], pInfo[playerid][pName], inputtext);

			AddLog(LogTypeAccount, pInfo[playerid][pID], str);

			SetPlayerName(playerid, inputtext);
			pInfo[playerid][pName][0] = EOS;
			GetPlayerName(playerid, pInfo[playerid][pName], MAX_PLAYER_NAME);

			SavePlayerStr(playerid, "Name", pInfo[playerid][pName]);

			pInfo[playerid][pDonateMoney] -= 100;
			SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);

			str[0] = EOS;
			format(str, sizeof(str), Color_Yellow"Вы сменили ник. Не забудьте при следующем входе поменять ник в клиенте на %s", pInfo[playerid][pName]);
			SendClientMessage(playerid, -1, str);

			return 1;
		}
		case D_Donate_Change_Gender:
		{
			if(!response) return 1;
			if(pInfo[playerid][pDonateMoney] < 100) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");

			pInfo[playerid][pGender] = listitem;

			if(!listitem)
			{
				pInfo[playerid][pSkins][0] = 289;
				pInfo[playerid][pSkin] = 0;
			}
			else
			{
				pInfo[playerid][pSkins][0] = 90;
				pInfo[playerid][pSkin] = 0;
			}
			SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);

			SavePlayerInt(playerid, "Gender", pInfo[playerid][pGender]);
			SavePlayerSkins(playerid);

			pInfo[playerid][pDonateMoney] -= 100;
			SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);

			SendClientMessage(playerid, -1, Color_Yellow"Вы сменили пол!");
			return 1;
		}
		case D_Donate_Buy_Level:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Donate_Buy_Level, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка уровня", Color_White"Введите количество уровней которые вы хотите купить\n\n"Color_White"1 уровень - 100р\n\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Отмена");
			if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Donate_Buy_Level, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка уровня", Color_White"Введите количество уровней которые вы хотите купить\n\n"Color_White"1 уровень - 100р\n\n"Color_Red"Неверное количество уровней", Color_White"Далее", Color_White"Отмена");

			new lvl = strval(inputtext);

			if(strval(inputtext)+pInfo[playerid][pLevel] > 50) return ShowDialog(playerid, D_Donate_Buy_Level, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка уровня", Color_White"Введите количество уровней которые вы хотите купить\n\n"Color_White"1 уровень - 100р\n\n"Color_Red"Максимальное количество уровней 50", Color_White"Далее", Color_White"Отмена");

			if(pInfo[playerid][pDonateMoney] < lvl*100) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");

			pInfo[playerid][pDonateMoney] -= lvl*100;
			SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);

			pInfo[playerid][pLevel] += lvl;
			SavePlayerInt(playerid, "Level", pInfo[playerid][pLevel]);

			PlayerLevelUpdate(playerid);

			new str[100];
			format(str, sizeof(str), Color_Yellow"Вы купили %d уровней", lvl);
			SendClientMessage(playerid, -1, str);
			return 1;
		}
		case D_Donate_Buy_UnWarn:
		{
			if(!response) return 1;
			if(pInfo[playerid][pWarn] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет предупреждений");
			if(pInfo[playerid][pDonateMoney] < 150) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");

			pInfo[playerid][pDonateMoney] -= 150;
			SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);

			pInfo[playerid][pWarn] -= 1;
			SavePlayerInt(playerid, "Warn", pInfo[playerid][pWarn]);

			SendClientMessage(playerid, -1, Color_Yellow"Вы сняли 1 варн!");
		}
		case D_Donate_Buy_Money:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Donate_Buy_Money, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка виртов", Color_White"Введите количество донат рублей которое хотите обменять на вирты\n\n"Color_Green"10.000$ "Color_White"- 100р\n\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Отмена");
			if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Donate_Buy_Money, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Покупка виртов", Color_White"Введите количество донат рублей которое хотите обменять на вирты\n\n"Color_Green"10.000$ "Color_White"- 100р\n\n"Color_Red"Неверное количество донат рублей", Color_White"Далее", Color_White"Отмена");

			new donatemoney = strval(inputtext);
			if(pInfo[playerid][pDonateMoney] < donatemoney) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");

			pInfo[playerid][pDonateMoney] -= donatemoney;
			SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);

			GivePlayerMoneyEx(playerid, donatemoney*100);

			new str[100];
			format(str, sizeof(str), Color_Yellow"Вы купили %d виртов", donatemoney*100);
			SendClientMessage(playerid, -1, str);
		}
		case D_AC_Settings:
		{
			if(!response)
			{
				DeletePVar(playerid, "AC_List");
				return pc_cmd_apanel(playerid);
			}
			new ListCount = sizeof(AntiCheatCode)/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "AC_List") > ListCount) NextButton = sizeof(AntiCheatCode)%10;
			new LastButton = NextButton+1;


			if(listitem == NextButton)
			{
				if(GetPVarInt(playerid, "AC_List")*10 < sizeof(AntiCheatCode))
				{
					SetPVarInt(playerid, "AC_List", GetPVarInt(playerid, "AC_List")+1);
					return ShowAntiCheatSetting(playerid);
				}
				return ShowAntiCheatSettingNOP(playerid);
			}
			else if(listitem == LastButton)
			{
				SetPVarInt(playerid, "AC_List", GetPVarInt(playerid, "AC_List")-1);
				return ShowAntiCheatSetting(playerid);
			}
			else
			{
				ShowDialog(playerid, D_AC_Settings_Set, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Настройки античита", Color_Red"Выключить\n\
				"Color_Green"Режим предупреждения администрации\n\
				"Color_Yellow"Режим автоматического кика", Color_White"Далее", Color_White"Отмена");
				return SetPVarInt(playerid, "AC_Code", listitem+(GetPVarInt(playerid, "AC_List")*10)-10);
			}
		}
		case D_AC_Settings_Set:
		{
			if(!response) return ShowAntiCheatSetting(playerid);
			AntiCheatCode[GetPVarInt(playerid, "AC_Code")] = listitem;
			SaveAntiCheatCode(GetPVarInt(playerid, "AC_Code"), listitem);
			SendClientMessage(playerid, -1, Color_Yellow"Настройки античита изменены");

			if(AntiCheatCode[GetPVarInt(playerid, "AC_Code")]) EnableAntiCheat(GetPVarInt(playerid, "AC_Code"), 1);
			else EnableAntiCheat(GetPVarInt(playerid, "AC_Code"), 0);

			DeletePVar(playerid, "AC_Code");
			return ShowAntiCheatSetting(playerid);
		}
		case D_AC_Settings_NOP:
		{
			if(!response)
			{
				DeletePVar(playerid, "AC_List");
				return pc_cmd_apanel(playerid);
			}
			if(listitem == sizeof(AntiCheatCodeNOP))
			{
				return ShowAntiCheatSetting(playerid);
			}
			else
			{
				ShowDialog(playerid, D_AC_Settings_NOP_Set, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Настройки античита", Color_Red"Выключить\n\
				"Color_Green"Выключить", Color_White"Далее", Color_White"Отмена");
				return SetPVarInt(playerid, "AC_Code_NOP", listitem);
			}
		}
		case D_AC_Settings_NOP_Set:
		{
			if(!response) return ShowAntiCheatSettingNOP(playerid);
			AntiCheatCode[GetPVarInt(playerid, "AC_Code_NOP")] = listitem;
			SaveAntiCheatCodeNOP(GetPVarInt(playerid, "AC_Code_NOP"), listitem);
			SendClientMessage(playerid, -1, Color_Yellow"Настройки античита изменены");

			EnableAntiNOP(GetPVarInt(playerid, "AC_Code_NOP"), AntiCheatCodeNOP[GetPVarInt(playerid, "AC_Code_NOP")]);

			DeletePVar(playerid, "AC_Code_NOP");
			return ShowAntiCheatSettingNOP(playerid);
		}
		case D_APanel:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: pc_cmd_ahelp(playerid);
				case 1: pc_cmd_reportlist(playerid);
				case 2:
				{
					SetPVarInt(playerid, "AC_List", 1);
					ShowAntiCheatSetting(playerid);
				}
				case 3: pc_cmd_payday(playerid);
				case 4: pc_cmd_gpssettings(playerid);
				case 5: pc_cmd_fractionsettings(playerid);
				case 6: pc_cmd_iconsettings(playerid);
				case 7: pc_cmd_logs(playerid);
				case 8: pc_cmd_bots(playerid);
			}
			return 1;
		}
		case D_Report:
		{
			if(!response) return 1;
			if(!strlen(inputtext))
			{
				return ShowDialog(playerid, D_Report, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Связь с администрацией", Color_White"Четко опишите свою проблему чтобы администрация могла помочь вам.\n\
				"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
			}
			SetPVarInt(playerid, "ReportLenght", strlen(inputtext));
			SetPVarString(playerid, "Report", inputtext);
			new str[110];
			format(str, sizeof(str), "Поступил репорт от игрока %s[%d]. Открыть список репортов /reportlist", pInfo[playerid][pName], playerid);
			SendAdminMessage(str);
			return 1;
		}
		case D_Report_List:
		{
			if(!response) return 1;
			new SubStr[100], Player;
			format(SubStr, sizeof(SubStr), "ReportList_%d", listitem);
			Player = GetPVarInt(playerid, SubStr);
			if(GetPVarInt(Player, "ReportInWork")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Кто-то из администраторов уже взял этот репорт.");

			new str[300];
			format(str, sizeof(str), Main_Color"%s "Color_White"%s "Main_Color"принялся за ваш репорт.", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
			SendClientMessage(Player, -1, str);

			format(str, sizeof(str), Color_White"%s %s[%d] принялся за репорт "Main_Color"%s[%d]", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], playerid, pInfo[Player][pName], Player);
			SendAdminMessage(str);

			format(SubStr, sizeof(SubStr), Color_White"Репорт игрока "Main_Color"%s", pInfo[Player][pName]);
			GetPVarString(Player, "Report", str, sizeof(str));

			SetPVarInt(Player, "ReportInWork", 1);
			SetPVarInt(playerid, "ReportedID", Player+1);

			format(str, sizeof(str), Color_White"%s", str);

			ShowDialog(playerid, D_Report_List_Answer, DIALOG_STYLE_INPUT, SubStr, str, Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		case D_Report_List_Answer:
		{
			new Player = GetPVarInt(playerid, "ReportedID")-1;
			DeletePVar(playerid, "ReportedID");
			if(!response)
			{
				DeletePVar(Player, "ReportInWork");
				return pc_cmd_reportlist(playerid);
			}
			if(!strlen(inputtext))
			{
				new SubStr[100], str[300];

				format(SubStr, sizeof(SubStr), Color_White"Репорт игрока "Main_Color"%s", pInfo[Player][pName]);
				GetPVarString(Player, "Report", str, sizeof(str));

				SetPVarInt(Player, "ReportInWork", 1);
				SetPVarInt(playerid, "ReportedID", Player+1);

				format(str, sizeof(str), Color_White"%s\n\n"Color_Red"Вы ничего не ввели!", str);

				ShowDialog(playerid, D_Report_List_Answer, DIALOG_STYLE_INPUT, SubStr, str, Color_White"Далее", Color_White"Отмена");
				return 1;
			}

			new SubStr[100];

			DeletePVar(Player, "ReportLenght");
			DeletePVar(Player, "Report");
			DeletePVar(Player, "ReportInWork");

			ClearReportList(playerid);

			format(SubStr, sizeof(SubStr), Color_White"Ответ %s"Main_Color"%s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
			ShowDialog(Player, D_None, DIALOG_STYLE_MSGBOX, SubStr, inputtext, Color_White"Закрыть", "");
			return 1;
		}
		case D_Main_Menu:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerMenu(playerid);
				case 1: ShowPlayerGPSMenu(playerid);
				case 2: ShowPlayerOnlineMenu(playerid);
				case 3: ShowPlayerCommandMenu(playerid);
				case 4: ShowSettingMenu(playerid);
			}
			return 1;
		}
		case D_Main_Menu_Commands:
		{
			if(!response) return ShowPlayerMainMenu(playerid);
			switch(listitem)
			{
				case 0:
				{
					ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Основные команды", Main_Color"/showstats [id] "Color_White"- Показать свою статистику другому игроку\n\
					"Main_Color"/pay [id] [сумма] "Color_White"- Передать наличные деньги другому игроку\n\
					"Main_Color"/time "Color_White"- Узнать время(Заключения/Мута/Сервера)\n\
					"Main_Color"/lotto [0-80] "Color_White"- Купить лотерейный билет\n\
					"Main_Color"/buylevel "Color_White"- Перейти на следующий уровень\n\
					"Main_Color"/cvet [1-100] "Color_White"- Изменить цвет ника/цвет на карте\n\
					"Main_Color"/id [id] "Color_White"- Информация об игроке\n\
					"Main_Color"/showlicenses [id] "Color_White"- Показать список ваших лицензий другому игроку\n\
					"Main_Color"/report "Color_White"- Связь с администрацией\n\
					"Main_Color"/accept [услуга] "Color_White"- Принять услугу, которую вам предлагают\n\
					"Main_Color"/cancel [услуга] "Color_White"- Отказаться от услуги, которую вам предлагают\n\
					"Main_Color"/undo [услуга] "Color_White"- Отменить предложение об услуге\n\
					"Main_Color"/eject [id] "Color_White"- Выкинуть пассажира из вашего транспортного средства.\n\
					"Main_Color"/eject "Color_White"- Выкинуть всех пассажиров из транспорта\n\
					"Main_Color"/kiss [id] "Color_White"- Предложить игроку поцеловаться\n\
					"Main_Color"/iznas [id] "Color_White"- Изнасиловать игрока.\n\
					"Main_Color"/donat "Color_White"- Открыть меню платных услуг\n\
					"Main_Color"/skin "Color_White"- Открыть гардероб\n\
					"Main_Color"/gps off "Color_White"- Убирает активный маркер/метку с радара", Color_White"Закрыть", "");
				}
				case 1:
				{
					ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Команды чатов", Main_Color"/o(ooc) "Color_White"- Общий чат всех игроков\n\
					"Main_Color"/pm [id] "Color_White"- Отправить личное сообщение\n\
					"Main_Color"/ad "Color_White"- Подать объявление\n\
					"Main_Color"/s "Color_White"- крикнуть на дальнее расстояние\n\
					"Main_Color"/me "Color_White"- Совершение какого-либо действия\n\
					"Main_Color"/do "Color_White"- Описание действия от 3-го лица\n\
					"Main_Color"/try "Color_White"- Совершение действия с шансом\n\
					"Main_Color"/todo "Color_White"- Объединение действия и речи\n\
					"Main_Color"/togooc "Color_White"- Отключение общего чата лично для вас\n\
					"Main_Color"/togad "Color_White"- Отключение объявления лично для вас\n\
					"Main_Color"/togpm "Color_White"- Отключение личных сообщений\n\
					"Main_Color"/blacklist [id] "Color_White"- Запретить игроку отправлять тебе личные сообщения\n\
					"Main_Color"/whitelist [id] "Color_White"- Разрешить определенному игроку отправлять вам сообщения, даже когда PM отключен\n\
					"Main_Color"/unblacklist [id] "Color_White"- Убрать игрока из черного списка\n\
					"Main_Color"/unwhitelist [id] "Color_White"- Убрать игрока из белого списка", Color_White"Закрыть", "");
				}
				case 2:
				{
					ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Анимации", Main_Color"/piss "Color_White"- Справить нужду\n\
					"Main_Color"/wank "Color_White"- дрочить\n\
					"Main_Color"/slapass "Color_White"- шлепнуть по попе\n\
					"Main_Color"/walk [1-14] "Color_White"- изменить стиль походки персонажа\n\
					"Main_Color"/dance [1-15] "Color_White"- Танцевать\n\
					"Main_Color"/hi [id] "Color_White"- дружеское приветствие", Color_White"Закрыть", "");
				}
				case 3:
				{
					if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
					ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Дом", Main_Color"/sellhouse "Color_White"- Продать дом штату\n\
					"Main_Color"/sellhouse [id] [цена] "Color_White"- Продать дом игроку\n\
					"Main_Color"/exchangehouse [id] "Color_White"- Обменяться домами\n\
					"Main_Color"/open "Color_White"- Открыть/Закрыть дверь в доме\n\
					"Main_Color"/househeal "Color_White"- Использовать аптечку в доме\n\
					"Main_Color"/carupgrade "Color_White"- Покупка автомобиля\n\
					"Main_Color"/garage "Color_White"- Список домашнего транспорта\n\
					"Main_Color"/parking "Color_White"- Изменить место появления домашнего транспорта\n\
					"Main_Color"/carcolor "Color_White"- Перекрасить домашний транспорт\n\
					"Main_Color"/towcar "Color_White"- Эвакуировать транспорт к дому без его ремонта\n\
					"Main_Color"/fixcar "Color_White"- Эвакуировать транспорт к дому с ремонтом\n\
					"Main_Color"/platenumber "Color_White"- Изменить номерной знак транспорта", Color_White"Закрыть", "");
				}
				case 4:
				{
					ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Транспорт", Main_Color"/lock "Color_White"- Открыть/Закрыть дверь транспорта\n\
					"Main_Color"/tlock "Color_White"- Открыть/Закрыть дверь рабочего/арендованного транспорта\n\
					"Main_Color"/unrentcar "Color_White"- Отказаться от рабочего/арендованного транспорта\n\
					"Main_Color"/givekey [ID] "Color_White"- Передать ключи от машины другому игроку\n\
					"Main_Color"/(en)gine "Color_White"- Завести/Загулишть транспорт\n\
					"Main_Color"/light "Color_White"- Включить фары", Color_White"Закрыть", "");
				}
				case 5: ShowFractionCommand(playerid);
			}
		}
		case D_Main_Menu_Player:
		{
			if(!response) return ShowPlayerMainMenu(playerid);
			switch(listitem)
			{
				case 0: ShowPlayerStat(playerid);
				case 1: ShowPlayerInventory(playerid);
				case 2: pc_cmd_skill(playerid);
				case 3: ShowPlayerLicenses(playerid);
				case 4: ShowHouseInfo(playerid);
				case 5: ShowBusinessInfo(playerid);
			}
			return 1;
		}
		case D_Main_Menu_GPS:
		{
			if(!response)
			{
				DeletePVar(playerid, "FindHouse");
				if(GetPVarInt(playerid, "TaxiPoint"))
				{
					DeletePVar(playerid, "TaxiPoint");
					SendClientMessage(playerid, -1, Color_White"Вы отказались от выбора пункта назначения в GPS. Вы все ещё можете установить место назначения по карте");
					return 1;
				}
				else return ShowPlayerMainMenu(playerid);
			}
			new FindHouseListitem = GetPVarInt(playerid, "FindHouse");
			DeletePVar(playerid, "FindHouse");
			if(listitem == FindHouseListitem) ShowDialog(playerid, D_GPS_Find_House, DIALOG_STYLE_INPUT, Main_Color"Поиск дома", Color_White"Введите номер дома в поле ниже чтобы отметить его на карте", Color_White"Далее", Color_White"Назад");
			else if(listitem == FindHouseListitem+1)
			{
				SetPVarInt(playerid, "Business_List", 1);
				ShowBusinessList(playerid, 1);
			}
			else
			{
				SetPVarInt(playerid, "SelectedGPSTitle", listitem+1);
				ShowPlayerGPSSubMenu(playerid, listitem+1);
			}
			return 1;
		}
		case D_GPS:
		{
			if(!response)
			{
				DeletePVar(playerid, "SelectedGPSTitle");
				return pc_cmd_gps(playerid, "");
			}
			new TitleID = GetPVarInt(playerid, "SelectedGPSTitle");
			DeletePVar(playerid, "SelectedGPSTitle");
			for(new i = 0; i < sizeof(GPS[]); i++)
			{
				if(GPS[TitleID][i][GpsID])
				{
					if(listitem) listitem--;
					else
					{
						if(GetPVarInt(playerid, "TaxiPoint")) SetPlayerTaxiMarker(playerid, GPS[TitleID][i][GpsX], GPS[TitleID][i][GpsY], GPS[TitleID][i][GpsZ]);
						else
						{
							if(pInfo[playerid][pGPSType] == GPS_Type_Job) return SendClientMessage(playerid, -1, Color_Grey"На данный момент GPS недоступен так как у вас уже стоит метка с одной из работ.");
							pInfo[playerid][pGPSType] = GPS_Type_GPS;
							SetPlayerRaceCheckpoint(playerid, 2, GPS[TitleID][i][GpsX], GPS[TitleID][i][GpsY], GPS[TitleID][i][GpsZ], 0.0, 0.0, 0.0, 10.0);
							SendClientMessage(playerid, -1, Main_Color"[GPS] "Color_White"Навигатор включен");
						}
						break;
					}
				}
			}
		}
		case D_GPS_Find_House:
		{
			if(!response) return pc_cmd_gps(playerid, "");
			if(!strlen(inputtext)) return ShowDialog(playerid, D_GPS_Find_House, DIALOG_STYLE_INPUT, Main_Color"Поиск дома", Color_White"Введите номер дома в поле ниже чтобы отметить его на карте\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Назад");
			new HouseID = strval(inputtext);
			if(HouseID <= 0 || HouseID >= sizeof(hInfo)) return ShowDialog(playerid, D_GPS_Find_House, DIALOG_STYLE_INPUT, Main_Color"Поиск дома", Color_White"Введите номер дома в поле ниже чтобы отметить его на карте\n"Color_Red"Не верный номер дома", Color_White"Далее", Color_White"Назад");
			if(!hInfo[HouseID][hID]) return ShowDialog(playerid, D_GPS_Find_House, DIALOG_STYLE_INPUT, Main_Color"Поиск дома", Color_White"Введите номер дома в поле ниже чтобы отметить его на карте\n"Color_Red"Такого дома не существует", Color_White"Далее", Color_White"Назад");

			if(GetPVarInt(playerid, "TaxiPoint")) SetPlayerTaxiMarker(playerid, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ]);
			else
			{
				if(pInfo[playerid][pGPSType] == GPS_Type_Job) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже установлена метка с одной из работ, вы не можете сменить её");
				pInfo[playerid][pGPSType] = GPS_Type_GPS;
				SetPlayerRaceCheckpoint(playerid, 2, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], 0.0, 0.0, 0.0, 10.0);
				SendClientMessage(playerid, -1, Main_Color"[GPS] "Color_White"Навигатор включен");
			}
			return 1;
		}
		case D_GPS_Business:
		{
			if(!response)
			{
				DeletePVar(playerid, "Business_List");
				return pc_cmd_gps(playerid, "");
			}

			new count = BusinessCount();
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Business_List") > ListCount) NextButton = (count%10);
			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Business_List") * 10 <  count) SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")+1);
				else SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 1);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 1);
			}
			else
			{
				new BusinessID = listitem+(GetPVarInt(playerid, "Business_List")*10)-9;
				DeletePVar(playerid, "Business_List");

				if(GetPVarInt(playerid, "TaxiPoint")) SetPlayerTaxiMarker(playerid, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ]);
				else
				{
					if(pInfo[playerid][pGPSType] == GPS_Type_Job) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже установлена метка с одной из работ, вы не можете сменить её");
					pInfo[playerid][pGPSType] = GPS_Type_GPS;
					SetPlayerRaceCheckpoint(playerid, 2, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], 0.0, 0.0, 0.0, 10.0);
					SendClientMessage(playerid, -1, Main_Color"[GPS] "Color_White"Навигатор включен");
				}
			}
			return 1;
		}
		case D_Main_Menu_PlayerOnline:
		{
			if(!response) return ShowPlayerMainMenu(playerid);
			switch(listitem)
			{
				case 0: pc_cmd_leaders(playerid);
				case 1: pc_cmd_lawyers(playerid);
				case 2: pc_cmd_members(playerid);
				case 3: pc_cmd_admins(playerid);
			}
			return 1;
		}
		case D_Main_Menu_Setting:
		{
			if(!response) return ShowPlayerMainMenu(playerid);
			switch(listitem)
			{
				case 0: ShowChatMenu(playerid);
				case 1:
				{
					ShowDialog(playerid, D_Change_Pass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена пароля", Color_White"Введите свой новый пароль в поле ниже.\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Назад");
				}
				case 2: ShowSafeMenu(playerid);
			}
			return 1;
		}
		case D_Chat_Settings:
		{
			if(!response) return ShowSettingMenu(playerid);
			switch(listitem)
			{
				case 0: pc_cmd_togpm(playerid);
				case 1: pc_cmd_togooc(playerid);
				case 2: pc_cmd_togad(playerid);
			}
			ShowChatMenu(playerid);
			return 1;
		}
		case D_Account_Safe:
		{
			if(!response) return ShowSettingMenu(playerid);
			if(listitem)
			{
				if(!pInfo[playerid][pPinCode]) ShowDialog(playerid, D_Account_Set_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Установка пин-кода", Color_White"Придумайте и введите пин-код в поле ниже.\n"Main_Color"- "Color_White"Пин-код должен иметь 6 чисел\n"Main_Color"- "Color_White"Пин-код можеть содержать только из чисел", Color_White"Далее", Color_White"Назад");
				else ShowDialog(playerid, D_Account_Remove_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Удаление пин-кода", Color_White"Чтобы отключить пинкод от вашего аккаунта введите его в поле ниже.", Color_White"Далее", Color_White"Назад");
			}
			return 1;
		}
		case D_Account_Remove_PinCode:
		{
			if(!response) return ShowSafeMenu(playerid);
			if(strval(inputtext) != pInfo[playerid][pPinCode])
			{
				ShowDialog(playerid, D_Account_Remove_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Удаление пин-кода", Color_White"Чтобы отключить пинкод от вашего аккаунта введите его в поле ниже.\n\n"Color_Red"Пин-код не верный", Color_White"Далее", Color_White"Назад");
				return 1;
			}
			pInfo[playerid][pPinCode] = 0;
			SavePlayerInt(playerid, "PinCode", pInfo[playerid][pPinCode]);

			SendClientMessage(playerid, -1, Color_Yellow"Вы удалили пин-код со своего аккаунта!");
			return 1;
		}
		case D_Account_Set_PinCode:
		{
			if(!response) return ShowSafeMenu(playerid);
			if (!strlen(inputtext))
			{
				ShowDialog(playerid, D_Account_Set_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Установка пин-кода", Color_White"Придумайте и введите пин-код в поле ниже.\n"Color_Red"- "Color_White"Вы не ввели пин-код\n"Main_Color"- "Color_White"Пин-код должен иметь 6 чисел\n"Main_Color"- "Color_White"Пин-код можеть содержать только из чисел", Color_White"Далее", Color_White"Назад");
				return 1;
			}
			if (strlen(inputtext) != 6)
			{
				ShowDialog(playerid, D_Account_Set_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Установка пин-кода", Color_White"Придумайте и введите пин-код в поле ниже.\n"Color_Red"- "Color_White"Пин-код должен иметь 6 чисел\n"Main_Color"- "Color_White"Пин-код можеть содержать только из чисел", Color_White"Далее", Color_White"Назад");
				return 1;
			}
			new Regex:rg_pincodecheck = Regex_New("^[0-9]*$");
			if (!Regex_Check(inputtext, rg_pincodecheck))
			{
				ShowDialog(playerid, D_Account_Set_PinCode, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Установка пин-кода", Color_White"Придумайте и введите пин-код в поле ниже.\n"Main_Color"- "Color_White"Пин-код должен иметь 6 чисел\n"Color_Red"- "Color_White"Пин-код можеть содержать только числа", Color_White"Далее", Color_White"Назад");
				Regex_Delete(rg_pincodecheck);
				return 1;
			}
			Regex_Delete(rg_pincodecheck);
			pInfo[playerid][pPinCode] = strval(inputtext);
			SavePlayerInt(playerid, "PinCode", pInfo[playerid][pPinCode]);

			new str[100];
			format(str, sizeof(str), Color_Yellow"Вы установили пин-код [%d] на ваш аккаунт не забудьте его!", pInfo[playerid][pPinCode]);
			SendClientMessage(playerid, -1, str);
			return 1;
		}
		case D_Change_Pass:
		{
			if(!response) return ShowSettingMenu(playerid);
			if (!strlen(inputtext))
			{
				ShowDialog(playerid, D_Change_Pass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена пароля", Color_White"Введите свой новый пароль в поле ниже.\n"Color_Red"- "Color_White"Вы не ввели пароль\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Назад");
				return 1;
			}
			if (strlen(inputtext) >  32)
			{
				ShowDialog(playerid, D_Change_Pass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена пароля", Color_White"Введите свой новый пароль в поле ниже.\n"Color_Red"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Назад");
				return 1;
			}
			new Regex:rg_passwordcheck = Regex_New("^[a-z,A-Z,0-9]*$");
			if (!Regex_Check(inputtext, rg_passwordcheck))
			{
				ShowDialog(playerid, D_Change_Pass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Смена пароля", Color_White"Введите свой новый пароль в поле ниже.\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Color_Red"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Назад");
				Regex_Delete(rg_passwordcheck);
				return 1;
			}
			Regex_Delete(rg_passwordcheck);
			strmid(pInfo[playerid][pPassword], inputtext, 0, strlen(inputtext));
			SavePlayerStr(playerid, "Password", pInfo[playerid][pPassword]);

			new str[300];
			format(str, sizeof(str), Color_Yellow"Ваш пароль изменен на %s не забудьте его!", pInfo[playerid][pPassword]);
			SendClientMessage(playerid, -1, str);

			str[0] = EOS;
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) сменил пароль", str, pInfo[playerid][pRegIp]);

			AddLog(LogTypeAccount, pInfo[playerid][pID], str);
			return 1;
		}
		case D_Admin_Panel_Time:
		{
			if(!response) return 1;
			if(!strlen(inputtext))
			{
				if(GetPVarInt(playerid, "AdminPanelType") == 1) ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Посадить игрока в деморган", Color_White"Укажите количество минут на которые хотите посадить игрока в деморган\n"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
				else if(GetPVarInt(playerid, "AdminPanelType") == 3) ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Забанить игрока", Color_White"Укажите количество дней на которые хотите забанить игрока\n"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if(strval(inputtext) <= 0)
			{
				if(GetPVarInt(playerid, "AdminPanelType") == 1) ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Посадить игрока в деморган", Color_White"Укажите количество минут на которые хотите посадить игрока в деморган\n"Color_Red"Неверное количество минут!", Color_White"Далее", Color_White"Отмена");
				else if(GetPVarInt(playerid, "AdminPanelType") == 3) ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Забанить игрока", Color_White"Укажите количество дней на которые хотите забанить игрока\n"Color_Red"Неверное количество дней!", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			if(GetPVarInt(playerid, "AdminPanelType") == 1) ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Посадить игрока в деморган", Color_White"Укажите причину по которой вы хотите посадить игрока в деморган", Color_White"Далее", Color_White"Отмена");
			else if(GetPVarInt(playerid, "AdminPanelType") == 3) ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Забанить игрока", Color_White"Укажите причину по которой вы хотите забанить игрока", Color_White"Далее", Color_White"Отмена");

			SetPVarInt(playerid, "AdminPanelTime", strval(inputtext));
			return 1;
		}
		case D_Admin_Panel_Reason:
		{
			if(!response) return 1;
			if(!strlen(inputtext))
			{
				if(GetPVarInt(playerid, "AdminPanelType") == 1) ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Посадить игрока в деморган", Color_White"Укажите причину по которой вы хотите посадить игрока в деморган\n"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
				else if(GetPVarInt(playerid, "AdminPanelType") == 2) ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Выдать предупреждение игроку", Color_White"Укажите причину выдачи предупреждения\n"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
				else if(GetPVarInt(playerid, "AdminPanelType") == 3) ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Забанить игрока", Color_White"Укажите причину по которой вы хотите забанить игрока\n"Color_Red"Вы ничего не ввели!", Color_White"Далее", Color_White"Отмена");
				return 1;
			}
			new string[250];
			if(GetPVarInt(playerid, "AdminPanelType") == 1)
			{
				format(string, sizeof(string), "%d %d %s", GetPVarInt(playerid, "Spec_ID"), GetPVarInt(playerid, "AdminPanelTime"), inputtext);
				pc_cmd_jail(playerid, string);
			}
			else if(GetPVarInt(playerid, "AdminPanelType") == 2)
			{
				format(string, sizeof(string), "%d %s", GetPVarInt(playerid, "Spec_ID"), inputtext);
				pc_cmd_warn(playerid, string);
			}
			else if(GetPVarInt(playerid, "AdminPanelType") == 3)
			{
				format(string, sizeof(string), "%d %d %s", GetPVarInt(playerid, "Spec_ID"), GetPVarInt(playerid, "AdminPanelTime"), inputtext);
				pc_cmd_ban(playerid, string);
			}
			DeletePVar(playerid, "AdminPanelType");
			DeletePVar(playerid, "AdminPanelTime");
			return 1;
		}
		case D_Select_Clist:
		{
			if(!response) return DeletePVar(playerid, "Clist_List");
			if(listitem == 10)
			{
				if(GetPVarInt(playerid, "Clist_List")*10 < sizeof(PlayerColors)) SetPVarInt(playerid, "Clist_List", GetPVarInt(playerid, "Clist_List")+1);
				else SetPVarInt(playerid, "Clist_List", GetPVarInt(playerid, "Clist_List")-1);
				ShowClistMenu(playerid);
			}
			else if(listitem == 11)
			{
				SetPVarInt(playerid, "Clist_List", GetPVarInt(playerid, "Clist_List")-1);
				ShowClistMenu(playerid);
			}
			else
			{
				pInfo[playerid][pClist] = (GetPVarInt(playerid, "Clist_List")*10)+listitem-10;
				SavePlayerInt(playerid, "Clist", pInfo[playerid][pClist]);

				SetColor(playerid);
				SendClientMessage(playerid, -1, Color_Yellow"Вы изменили цвет");
				SendClientMessage(playerid, -1, Color_White"Вы можете использовать /cvet 100 чтобы вернуть стандартный цвет");
				DeletePVar(playerid, "Clist_List");
			}
			return 1;
		}
		case D_CreateCar_Type_Business:
		{
			if(!response) return DeletePVar(playerid, "Business_List");
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
			if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

			new count = BusinessCount();
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Business_List") > ListCount) NextButton = (count%10);
			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Business_List") * 10 <  count) SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")+1);
				else SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 2);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 2);
			}
			else
			{
				new BusinessID = listitem+(GetPVarInt(playerid, "Business_List")*10)-9;
				DeletePVar(playerid, "Business_List");
				vInfo[vehicleid][vOwner] = BusinessID;

				ShowDialog(playerid, D_CreateCar_Set_Price, DIALOG_STYLE_INPUT, Main_Color"Создание машины", Color_White"Укажите стоимость аренды машины в поле ниже\n"Color_White"Введите 0 если хотите чтобы машина была бесплатной", Color_White"Далее", Color_White"Закрыть");
			}

			return 1;
		}
		case D_CreateCar_Type_Job:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
			if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

			if(listitem+1 == Job_CarThief) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот тип работы не может иметь транспорт");
			if(listitem+1 == Job_Lumberjack) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот тип работы не может иметь транспорт");
			if(listitem+1 == Job_Farm) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот тип работы не может иметь транспорт");
			if(listitem+1 == Job_Mine) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот тип работы не может иметь транспорт");

			vInfo[vehicleid][vOwner] = listitem+1;

			ShowDialog(playerid, D_CreateCar_Set_Price, DIALOG_STYLE_INPUT, Main_Color"Создание машины", Color_White"Укажите стоимость аренды машины в поле ниже\n"Color_White"Введите 0 если хотите чтобы машина была бесплатной", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateCar_Type_Fraction:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
			if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

			vInfo[vehicleid][vOwner] = listitem+1;

			new str[500];
			for(new i = 1; i < FractionMaxRank+1; i++) format(str, sizeof(str), "%s"Color_White"%s\n", str, FractionRankName[vInfo[vehicleid][vOwner]][i]);
			ShowDialog(playerid, D_CreateCar_Fraction_Rank, DIALOG_STYLE_LIST, Main_Color"Фракционная машина | Выбор ранга", str, Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateCar_Fraction_Rank:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
			if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

			vInfo[vehicleid][vRank] = listitem+1;
			vInfo[vehicleid][vPrice] = 0;
			SaveCar(playerid, vehicleid);
			return 1;
		}
		case D_CreateCar_Set_Price:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
			if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");
			if(strval(inputtext) < 0) return ShowDialog(playerid, D_CreateCar_Set_Price, DIALOG_STYLE_INPUT, Main_Color"Создание машины", Color_White"Укажите стоимость аренды машины в поле ниже\n"Color_White"Введите 0 если хотите чтобы машина была бесплатной\n"Color_Red"Неверная стоимость", Color_White"Далее", Color_White"Закрыть");
			if(!strlen(inputtext)) return ShowDialog(playerid, D_CreateCar_Set_Price, DIALOG_STYLE_INPUT, Main_Color"Создание машины", Color_White"Укажите стоимость аренды машины в поле ниже\n"Color_White"Введите 0 если хотите чтобы машина была бесплатной\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			vInfo[vehicleid][vPrice] = strval(inputtext);
			SaveCar(playerid, vehicleid);
			return 1;
		}
		case D_Job_Invite:
		{
			if(!response) return DeletePVar(playerid, "JobInvited");
			new JobID = GetPVarInt(playerid, "JobInvited");
			DeletePVar(playerid, "JobInvited");
			new str[100];
			if(pInfo[playerid][pJob] == JobID || (Jobs[JobID][IsUnofficial] && GetPVarInt(playerid, "UnOfficialJob") == JobID))
			{
				if(Jobs[JobID][IsUnofficial])
				{
					if(JobID == Job_Lumberjack)
					{
						format(str, sizeof(str), Color_White"Вы принесли %d бревен и заработали"Color_Green" %d$", GetPVarInt(playerid, "ChopOnWare"), GetPVarInt(playerid, "ChopOnWare")*150);
						SendClientMessage(playerid, -1, str);
						format(str, sizeof(str), Color_White"Вы срубили %d деревьев и заработали"Color_Green" %d$", GetPVarInt(playerid, "TreeCutCount"), GetPVarInt(playerid, "TreeCutCount")*150);
						SendClientMessage(playerid, -1, str);
						GivePlayerMoneyEx(playerid, (GetPVarInt(playerid, "ChopOnWare")*150)+(GetPVarInt(playerid, "TreeCutCount")*150));
					}
					else if(JobID == Job_Farm)
					{
						format(str, sizeof(str), Color_White"Вы принесли %d урожая и заработали"Color_Green" %d$", GetPVarInt(playerid, "CollectPlant"), GetPVarInt(playerid, "CollectPlant")*150);
						SendClientMessage(playerid, -1, str);
						GivePlayerMoneyEx(playerid, GetPVarInt(playerid, "CollectPlant")*150);
					}
					else if(JobID == Job_Mine)
					{
						format(str, sizeof(str), Color_White"Вы принесли %d руды и заработали"Color_Green" %d$", GetPVarInt(playerid, "CollectOre"), GetPVarInt(playerid, "CollectOre")*150);
						SendClientMessage(playerid, -1, str);
						GivePlayerMoneyEx(playerid, GetPVarInt(playerid, "CollectOre")*150);
					}
					else
					{
						format(str, sizeof(str), Color_Yellow"Вы успешно уволились с работы "Main_Color"%sа", Jobs[JobID][JobNames]);
						SendClientMessage(playerid, -1, str);
					}
					ChangePlayerUnOfficialJob(playerid, Job_None);
				}
				else
				{
					format(str, sizeof(str), Color_Yellow"Вы успешно уволились с работы "Main_Color"%sа", Jobs[JobID][JobNames]);
					SendClientMessage(playerid, -1, str);
					ChangePlayerJob(playerid, Job_None);
				}
			}
			else
			{
				if(Jobs[JobID][IsUnofficial])
				{
					if(JobID == Job_Lumberjack)
					{
						SendClientMessage(playerid, -1, Color_Yellow"Вам была выдана пила, вы можете приступать к срубу деревьев");
						SendClientMessage(playerid, -1, Color_Yellow"Деревья находятся за этим домом.");
					}
					else if(JobID == Job_Farm)
					{
						SendClientMessage(playerid, -1, Color_Yellow"Вам были выданы грабли, вы можете приступать к сбору урожая");
					}
					else
					{
						format(str, sizeof(str), Color_Yellow"Вы успешно устроились на работу "Main_Color"%sа", Jobs[JobID][JobNames]);
						SendClientMessage(playerid, -1, str);
					}
					ChangePlayerUnOfficialJob(playerid, JobID);
				}
				else
				{
					if(JobID == Job_Lawyer && pInfo[playerid][pMembers] != Fraction_None && IsGovFraction(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Сотрудникам гос.организаций запрещено работать адвокатами");
					format(str, sizeof(str), Color_Yellow"Вы успешно устроились на работу "Main_Color"%sа", Jobs[JobID][JobNames]);
					SendClientMessage(playerid, -1, str);
					ChangePlayerJob(playerid, JobID);
				}
			}
			return 1;
		}
		case D_Job_CarThief_GetCar:
		{
			if(!response) return DeletePVar(playerid, "JobInvited");
			new JobID = GetPVarInt(playerid, "JobInvited");
			if(!listitem) SetThiefMarker(playerid);
			else
			{
				new str[100];
				format(str, sizeof(str), Color_Yellow"Увольнение с работы "Main_Color"%sа", Jobs[JobID][JobNames]);
				ShowDialog(playerid, D_Job_Invite, DIALOG_STYLE_MSGBOX, str, Color_White"Вы желаете уволиться в сданной работы?", Color_White"Да", Color_White"Нет");
			}
			return 1;
		}
		case D_Lic_Lawyer:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLevel] < 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Приобрести лицензию на освобождение можно только с 6-го уровня");
			if(GetPVarInt(playerid, "LawyerLic")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на освобождение");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на освобождение");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			SetPVarInt(playerid, "LawyerLic", 1);
			SavePlayerInt(playerid, "LawyerLic", 1);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на освобождение");
			return 1;
		}
		case D_Lic_Car:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLicAuto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление машинами");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на управление машинами");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			pInfo[playerid][pLicAuto] = true;
			SavePlayerBool(playerid, "LicAuto", pInfo[playerid][pLicAuto]);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на управление машинами");
			return 1;
		}
		case D_Lic_Moto:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLicMoto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление мототранспортом");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на управление мототранспортом");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			pInfo[playerid][pLicMoto] = true;
			SavePlayerBool(playerid, "LicMoto", pInfo[playerid][pLicMoto]);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на управление мототранспортом");
			return 1;
		}
		case D_Lic_Boat:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLicBoat]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление лодками");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на управление лодками");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			pInfo[playerid][pLicBoat] = true;
			SavePlayerBool(playerid, "LicBoat", pInfo[playerid][pLicBoat]);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на управление лодками");
			return 1;
		}
		case D_Lic_Plane:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLicPlane]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на управление воздушным транспортом");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на управление воздушным транспортом");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			pInfo[playerid][pLicPlane] = true;
			SavePlayerBool(playerid, "LicPlane", pInfo[playerid][pLicPlane]);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на управление воздушным транспортом");
			return 1;
		}
		case D_Lic_Gun:
		{
			if(!response) return 1;
			if(pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть лицензия на владение оружием");
			if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки лицензии на владение оружием");

			GivePlayerMoneyEx(playerid, -10000);
			FractionWare[Fraction_Police][FractionWareMoney] += 10000;
			SaveFractionWare(Fraction_Police);

			pInfo[playerid][pLicGun] = true;
			SavePlayerBool(playerid, "LicGun", pInfo[playerid][pLicGun]);

			SendClientMessage(playerid, -1,  Color_Yellow"Вы приобрели лицензию на владение оружием");
			return 1;
		}
		case D_Business_SellGov:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");

			bInfo[pInfo[playerid][pBusinessID]][bOwnerID] = 0;
			SaveBusinessNull(bInfo[pInfo[playerid][pBusinessID]][bID], "OwnerID");

			bInfo[pInfo[playerid][pBusinessID]][bTax] = 0;
			SaveBusinessInt(bInfo[pInfo[playerid][pBusinessID]][bID], "Tax", bInfo[pInfo[playerid][pBusinessID]][bTax]);

			UpdateBusiness(pInfo[playerid][pBusinessID]);

			new str[150];
			format(str, sizeof(str), Color_White"Вы продали "Main_Color"Бизнес №"Color_White"%d", bInfo[pInfo[playerid][pBusinessID]][bID]);
			SendClientMessage(playerid, -1, str);

			if(bInfo[pInfo[playerid][pBusinessID]][bIsDonate])
			{
				pInfo[playerid][pDonateMoney] += bInfo[pInfo[playerid][pBusinessID]][bPrice];
				SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
			}
			else
			{
				GivePlayerMoneyEx(playerid, bInfo[pInfo[playerid][pBusinessID]][bPrice]);
			}

			format(str, sizeof(str), Color_White"За продажу вы получили "Color_Green"%d%s", bInfo[pInfo[playerid][pBusinessID]][bPrice], (bInfo[pInfo[playerid][pBusinessID]][bIsDonate]) ? (" донат рублей"):("$"));
			SendClientMessage(playerid, -1, str);
			pInfo[playerid][pBusinessID] = 0;
			return 1;
		}
		case D_House_SellGov:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");

			hInfo[pInfo[playerid][pHouseID]][hOwnerID] = 0;
			SaveHouseNull(hInfo[pInfo[playerid][pHouseID]][hID], "OwnerID");
			hInfo[pInfo[playerid][pHouseID]][hTax] = 0;
			SaveHouseInt(hInfo[pInfo[playerid][pHouseID]][hID], "Tax", hInfo[pInfo[playerid][pHouseID]][hTax]);
			UpdateHouse(pInfo[playerid][pHouseID]);

			new str[150];
			format(str, sizeof(str), Color_White"Вы продали "Main_Color"Дом №"Color_White"%d", hInfo[pInfo[playerid][pHouseID]][hID]);
			SendClientMessage(playerid, -1, str);

			if(hInfo[pInfo[playerid][pHouseID]][hIsDonate])
			{
				pInfo[playerid][pDonateMoney] += hInfo[pInfo[playerid][pHouseID]][hPrice];
				SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
			}
			else
			{
				GivePlayerMoneyEx(playerid, hInfo[pInfo[playerid][pHouseID]][hPrice]);
			}

			format(str, sizeof(str), Color_White"За продажу вы получили "Color_Green"%d%s", hInfo[pInfo[playerid][pHouseID]][hPrice], (hInfo[pInfo[playerid][pHouseID]][hIsDonate]) ? (" донат рублей"):("$"));
			SendClientMessage(playerid, -1, str);

			ClearHouseVehicle(pInfo[playerid][pID], playerid);
			pInfo[playerid][pHouseID] = 0;
			if(pInfo[playerid][pSpawnChange] == SpawnChange_House)
			{
				pInfo[playerid][pSpawnChange] = SpawnChange_Standart;
				SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
			}
			return 1;
		}
		case D_Car_Buy:
		{
			if(!response)
			{
				DeletePVar(playerid, "CarUpgradeIndx");
				DeletePVar(playerid, "CarUpgradeSlot");
				CloseGarage(playerid);
				for(new i = 0; i < sizeof(CarUpgradePTD[]); i++) PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][i]);
				for(new i = 0; i < sizeof(CarUpgradePTDText[]); i++) PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][i]);
				TextDrawShowForPlayer(playerid, CarUpgradeTD);
				SelectTextDraw(playerid, BitColor_Main);
				return 1;
			}
			new indx = GetPVarInt(playerid, "CarUpgradeIndx");
			new slot = GetPVarInt(playerid, "CarUpgradeSlot");
			if(GetPVarInt(playerid, "OpenGarage") && GetPVarInt(playerid, "CarUpgrade") == 1)
			{
				if(pInfo[playerid][pMoney] < CarUpgrade[indx][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого автомобиля");
				if(CarUpgrade[indx][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
				if(CarUpgrade[indx][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

				new str[150];

				format(str, sizeof(str), "GarageID_%d", slot);
				DeleteCar(-1, GetPVarInt(playerid, str));

				GivePlayerMoneyEx(playerid, -CarUpgrade[indx][cuCarPrice]);

				GiveCompanyPay(playerid, BusinessCarDelivery, CarUpgrade[indx][cuCarPrice]);

				str[0] = EOS;
				format(str, sizeof(str), Color_White"Вы приобрели "Main_Color"%s "Color_White"за "Color_Green"%d$", CarName[CarUpgrade[indx][cuCarModel]-400], CarUpgrade[indx][cuCarPrice]);
				SendClientMessage(playerid, -1, str);

				AddHouseVehicle(playerid, CarUpgrade[indx][cuCarModel], slot);
			}
			else if(GetPVarInt(playerid, "OpenGarage") && GetPVarInt(playerid, "CarUpgrade") == 2)
			{
				if(pInfo[playerid][pDonateMoney] < CarUpgradeDonate[indx][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно донат рублей для покупки этого автомобиля");
				if(CarUpgradeDonate[indx][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
				if(CarUpgradeDonate[indx][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

				new str[150];

				format(str, sizeof(str), "GarageID_%d", slot);
				DeleteCar(-1, GetPVarInt(playerid, str));

				pInfo[playerid][pDonateMoney] -= CarUpgradeDonate[indx][cuCarPrice];
				SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
				str[0] = EOS;
				format(str, sizeof(str), Color_White"Вы приобрели "Main_Color"%s "Color_White"за "Color_Green"%d донат рублей", CarName[CarUpgradeDonate[indx][cuCarModel]-400], CarUpgradeDonate[indx][cuCarPrice]);
				SendClientMessage(playerid, -1, str);

				AddHouseVehicle(playerid, CarUpgradeDonate[indx][cuCarModel], slot);
			}
			CloseCarUpgrade(playerid);
			return 1;
		}
		case D_House_Buy:
		{
			if(!response) return DeletePVar(playerid, "House");
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");
			if(!hInfo[HouseID][hID]) return 1;
			if(hInfo[HouseID][hOwnerID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого дома уже есть владелец");
			if(pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть дом");
			if(hInfo[HouseID][hNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для покупки этого дома");
			if(hInfo[HouseID][hIsDonate])
			{
				if(pInfo[playerid][pDonateMoney] < hInfo[HouseID][hPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");
				pInfo[playerid][pDonateMoney] -= hInfo[HouseID][hPrice];
				SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
			}
			else
			{
				if(pInfo[playerid][pMoney] < hInfo[HouseID][hPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
				GivePlayerMoneyEx(playerid, -hInfo[HouseID][hPrice]);
			}

			pInfo[playerid][pHouseID] = hInfo[HouseID][hID];
			hInfo[HouseID][hOwnerID] = pInfo[playerid][pID];
			SaveHouseInt(hInfo[HouseID][hID], "OwnerID", hInfo[HouseID][hOwnerID]);

			hInfo[HouseID][hClose] = true;
			SaveHouseBool(hInfo[HouseID][hID], "Close", hInfo[HouseID][hClose]);
			hInfo[HouseID][hTax] = gettime()+86400;
			SaveHouseInt(hInfo[HouseID][hID], "Tax", hInfo[HouseID][hTax]);
			UpdateHouse(HouseID);

			new str[150];
			format(str, sizeof(str), Color_White"Поздравляем вы приобрели "Main_Color"Дом №"Color_White"%d", hInfo[HouseID][hID]);
			SendClientMessage(playerid, -1, str);

			format(str, sizeof(str), Color_White"Дом автоматически оплачен до "Main_Color"%s", date(hInfo[HouseID][hTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
			SendClientMessage(playerid, -1, str);
			SendClientMessage(playerid, -1, Color_White"Не забудьте оплатить его в ближайшем отделении банка");

			pInfo[playerid][pSpawnChange] = SpawnChange_House;
			SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);

			AddHouseVehicle(playerid, 492, 1);
			return 1;
		}
		case D_EditBusiness:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться на ногах");
					if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
					new Float:X, Float:Y, Float:Z, Float:A;
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, A);

					bInfo[BusinessID][bX] = X;
					bInfo[BusinessID][bY] = Y;
					bInfo[BusinessID][bZ] = Z;
					bInfo[BusinessID][bA] = A;

					SaveBusinessFloat(BusinessID, "X", bInfo[BusinessID][bX]);
					SaveBusinessFloat(BusinessID, "Y", bInfo[BusinessID][bY]);
					SaveBusinessFloat(BusinessID, "Z", bInfo[BusinessID][bZ]);
					SaveBusinessFloat(BusinessID, "A", bInfo[BusinessID][bA]);

					UpdateBusiness(BusinessID);
					SendClientMessage(playerid, -1, Main_Color"Местоположение бизнеса изменено");
				}
				case 1:
				{
					SetPVarInt(playerid, "Business", BusinessID);
					new str[1500];
					for(new i = 1; i < sizeof(BusinessType); i++) format(str, sizeof(str), "%s"Main_Color"- "Color_White"%s\n", str, BusinessType[i][bName]);
					ShowDialog(playerid, D_EditBusiness_Type, DIALOG_STYLE_LIST, Main_Color"Выбор типа бизнеса", str, Color_White"Далее", Color_White"Закрыть");
				}
				case 2:
				{
					SetPVarInt(playerid, "Business", BusinessID);
					ShowDialog(playerid, D_EditBusiness_MoneyType, DIALOG_STYLE_LIST, Main_Color"Выбор валюты для бизнеса", Main_Color"- "Color_White"Деньги\n\
					"Main_Color"- "Color_White"Донат", Color_White"Далее", Color_White"Закрыть");
				}
				case 3:
				{
					SetPVarInt(playerid, "Business", BusinessID);
					ShowDialog(playerid, D_EditBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса", Color_White"Далее", Color_White"Закрыть");
				}
				case 4:
				{
					SetPVarInt(playerid, "Business", BusinessID);
					ShowDialog(playerid, D_EditBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки", Color_White"Далее", Color_White"Закрыть");
				}
				case 5:
				{
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
					{
						SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться за рулем");
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для создания временной машины используйте /veh");
					}
					if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
					new vehicleid = GetPlayerVehicleID(playerid);
					new Float:X, Float:Y, Float:Z, Float:A;
					GetVehiclePos(vehicleid, X, Y, Z);
					GetVehicleZAngle(vehicleid, A);

					bInfo[BusinessID][bCarX] = X;
					bInfo[BusinessID][bCarY] = Y;
					bInfo[BusinessID][bCarZ] = Z;
					bInfo[BusinessID][bCarA] = A;

					SaveBusinessFloat(BusinessID, "CarX", bInfo[BusinessID][bCarX]);
					SaveBusinessFloat(BusinessID, "CarY", bInfo[BusinessID][bCarY]);
					SaveBusinessFloat(BusinessID, "CarZ", bInfo[BusinessID][bCarZ]);
					SaveBusinessFloat(BusinessID, "CarA", bInfo[BusinessID][bCarA]);

					UpdateBusiness(BusinessID);
					SendClientMessage(playerid, -1, Main_Color"Позиция обслуживания транспорта изменена");
				}
				case 6:
				{
					if(bInfo[BusinessID][bCarX] && bInfo[BusinessID][bCarY] && bInfo[BusinessID][bCarZ])
					{
						bInfo[BusinessID][bCarX] = 0.0;
						bInfo[BusinessID][bCarY] = 0.0;
						bInfo[BusinessID][bCarZ] = 0.0;
						bInfo[BusinessID][bCarA] = 0.0;

						SaveBusinessFloat(BusinessID, "CarX", bInfo[BusinessID][bCarX]);
						SaveBusinessFloat(BusinessID, "CarY", bInfo[BusinessID][bCarY]);
						SaveBusinessFloat(BusinessID, "CarZ", bInfo[BusinessID][bCarZ]);
						SaveBusinessFloat(BusinessID, "CarA", bInfo[BusinessID][bCarA]);

						UpdateBusiness(BusinessID);
						SendClientMessage(playerid, -1, Main_Color"Позиция обслуживания транспорта удалена");
					}
					else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для этого бизнеса не установлено место обслуживания для транспорта");
				}
			}
			return 1;
		}
		case D_EditBusiness_Type:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");

			bInfo[BusinessID][bType] = listitem+1;
			SaveBusinessInt(BusinessID, "Type", bInfo[BusinessID][bType]);

			foreach(new i: Player)
			{
				if(pInfo[i][pAuth] && GetPVarInt(i, "InBusiness") == bInfo[BusinessID][bID])
				{
					DeletePVar(i, "InBusiness");
					SetPlayerPosition(i, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ], bInfo[BusinessID][bA], 0, 0);
				}
			}
			UpdateBusiness(BusinessID);
			SendClientMessage(playerid, -1, Main_Color"Тип бизнеса изменен");
			return 1;
		}
		case D_EditBusiness_MoneyType:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");

			bInfo[BusinessID][bIsDonate] = bool:listitem;
			SaveBusinessInt(BusinessID, "IsDonate", bInfo[BusinessID][bIsDonate]);
			UpdateBusiness(BusinessID);
			SendClientMessage(playerid, -1, Main_Color"Валюта бизнеса изменена");
			return 1;
		}
		case D_EditBusiness_Price:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");

			if(!strlen(inputtext))
			{
				SetPVarInt(playerid, "Business", BusinessID);
				return ShowDialog(playerid, D_EditBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0)
			{
				SetPVarInt(playerid, "Business", BusinessID);
				return ShowDialog(playerid, D_EditBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса\n"Color_Red"Цена не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			}

			bInfo[BusinessID][bPrice] = strval(inputtext);

			SaveBusinessInt(BusinessID, "Price", bInfo[BusinessID][bPrice]);

			UpdateBusiness(BusinessID);
			SendClientMessage(playerid, -1, Main_Color"Цена бизнеса изменена");
			return 1;
		}
		case D_EditBusiness_NeedLevel:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");

			if(!strlen(inputtext))
			{
				SetPVarInt(playerid, "Business", BusinessID);
				return ShowDialog(playerid, D_EditBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0)
			{
				SetPVarInt(playerid, "Business", BusinessID);
				return ShowDialog(playerid, D_EditBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Уровень не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			}

			bInfo[BusinessID][bNeedLevel] = strval(inputtext);

			SaveBusinessInt(BusinessID, "NeedLevel", bInfo[BusinessID][bNeedLevel]);

			UpdateBusiness(BusinessID);
			SendClientMessage(playerid, -1, Main_Color"Минимальный уровень для бизнеса изменен");
			return 1;
		}
		case D_EditHouse:
		{
			if(!response) return DeletePVar(playerid, "House");
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться на ногах");
					if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
					new Float:X, Float:Y, Float:Z, Float:A;
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, A);

					hInfo[HouseID][hX] = X;
					hInfo[HouseID][hY] = Y;
					hInfo[HouseID][hZ] = Z;
					hInfo[HouseID][hA] = A;

					SaveHouseFloat(HouseID, "X", hInfo[HouseID][hX]);
					SaveHouseFloat(HouseID, "Y", hInfo[HouseID][hY]);
					SaveHouseFloat(HouseID, "Z", hInfo[HouseID][hZ]);
					SaveHouseFloat(HouseID, "A", hInfo[HouseID][hA]);

					UpdateHouse(HouseID);
					SendClientMessage(playerid, -1, Main_Color"Местоположение дома изменено");
				}
				case 1:
				{
					SetPVarInt(playerid, "House", HouseID);
					SetPVarInt(playerid, "Interior_List", 1);
					ShowHouseInteriorList(playerid, 2);
				}
				case 2:
				{
					SetPVarInt(playerid, "House", HouseID);
					ShowDialog(playerid, D_EditHouse_MoneyType, DIALOG_STYLE_LIST, Main_Color"Выбор валюты для дома", Main_Color"- "Color_White"Деньги\n\
					"Main_Color"- "Color_White"Донат", Color_White"Далее", Color_White"Закрыть");
				}
				case 3:
				{
					SetPVarInt(playerid, "House", HouseID);
					ShowDialog(playerid, D_EditHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома", Color_White"Далее", Color_White"Закрыть");
				}
				case 4:
				{
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
					{
						SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться за рулем");
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для создания временной машины используйте /veh");
					}
					if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
					new vehicleid = GetPlayerVehicleID(playerid);
					new Float:X, Float:Y, Float:Z, Float:A;
					GetVehiclePos(vehicleid, X, Y, Z);
					GetVehicleZAngle(vehicleid, A);

					hInfo[HouseID][hCarX] = X;
					hInfo[HouseID][hCarY] = Y;
					hInfo[HouseID][hCarZ] = Z;
					hInfo[HouseID][hCarA] = A;

					SaveHouseFloat(HouseID, "CarX", hInfo[HouseID][hCarX]);
					SaveHouseFloat(HouseID, "CarY", hInfo[HouseID][hCarY]);
					SaveHouseFloat(HouseID, "CarZ", hInfo[HouseID][hCarZ]);
					SaveHouseFloat(HouseID, "CarA", hInfo[HouseID][hCarA]);

					UpdateHouse(HouseID);
					SendClientMessage(playerid, -1, Main_Color"Позиция спавна транспорта для этого дома изменена");
				}
				case 5:
				{
					SetPVarInt(playerid, "House", HouseID);
					ShowDialog(playerid, D_EditHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки", Color_White"Далее", Color_White"Закрыть");
				}
			}
			return 1;
		}
		case D_EditHouse_Int:
		{
			if(!response)
			{
				DeletePVar(playerid, "House");
				DeletePVar(playerid, "Interior_List");
				return 1;
			}
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");

			new ListCount = sizeof(HouseInterior)/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Interior_List") > ListCount) NextButton = (sizeof(HouseInterior)%10)-1;
			new LastButton = NextButton+1;

			if(listitem == NextButton)
			{
				if(GetPVarInt(playerid, "Interior_List") * 10 <  sizeof(HouseInterior)) SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")+1);
				else SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")-1);
				SetPVarInt(playerid, "House", HouseID);
				return ShowHouseInteriorList(playerid, 2);
			}
			else if(listitem == LastButton)
			{
				SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")-1);
				SetPVarInt(playerid, "House", HouseID);
				return ShowHouseInteriorList(playerid, 2);
			}
			else
			{
				hInfo[HouseID][hInterior] = listitem+(GetPVarInt(playerid, "Interior_List")*10)-9;
				SaveHouseInt(HouseID, "Interior", hInfo[HouseID][hInterior]);
				DeletePVar(playerid, "Interior_List");

				foreach(new i: Player)
				{
					if(pInfo[i][pAuth] && GetPVarInt(i, "InHouse") == hInfo[HouseID][hID])
					{
						DeletePVar(i, "InHouse");
						SetPlayerPosition(i, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ], hInfo[HouseID][hA], 0, 0);
					}
				}
			}

			UpdateHouse(HouseID);
			SendClientMessage(playerid, -1, Main_Color"Интерьер дома изменен");
			return 1;
		}
		case D_EditHouse_MoneyType:
		{
			if(!response) return DeletePVar(playerid, "House");
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");

			hInfo[HouseID][hIsDonate] = bool:listitem;

			SaveHouseInt(HouseID, "IsDonate", hInfo[HouseID][hIsDonate]);

			UpdateHouse(HouseID);
			SendClientMessage(playerid, -1, Main_Color"Валюта дома изменена");
			return 1;
		}
		case D_EditHouse_Price:
		{
			if(!response) return DeletePVar(playerid, "House");
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");
			if(!strlen(inputtext))
			{
				SetPVarInt(playerid, "House", HouseID);
				return ShowDialog(playerid, D_EditHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0)
			{
				SetPVarInt(playerid, "House", HouseID);
				return ShowDialog(playerid, D_EditHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома\n"Color_Red"Цена не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			}

			hInfo[HouseID][hPrice] = strval(inputtext);

			SaveHouseInt(HouseID, "Price", hInfo[HouseID][hPrice]);

			UpdateHouse(HouseID);
			SendClientMessage(playerid, -1, Main_Color"Цена дома изменена");
			return 1;
		}
		case D_EditHouse_NeedLevel:
		{
			if(!response) return DeletePVar(playerid, "House");
			new HouseID = GetPVarInt(playerid, "House");
			DeletePVar(playerid, "House");

			if(!strlen(inputtext))
			{
				SetPVarInt(playerid, "House", HouseID);
				return ShowDialog(playerid, D_EditHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0)
			{
				SetPVarInt(playerid, "House", HouseID);
				return ShowDialog(playerid, D_EditHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Уровень не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			}

			hInfo[HouseID][hNeedLevel] = strval(inputtext);

			SaveHouseInt(HouseID, "NeedLevel", hInfo[HouseID][hNeedLevel]);

			UpdateHouse(HouseID);
			SendClientMessage(playerid, -1, Main_Color"Минимальный уровень для дома изменен");
			return 1;
		}
		case D_CreateBusiness_Type_Company:
		{
			if(!response)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				return 1;
			}
			for(new i = 1; i < sizeof(BusinessType); i++)
			{
				if(BusinessType[i][IsCompany])
				{
					if(listitem) listitem--;
					else
					{
						SetPVarInt(playerid, "BusinessType", i);
						break;
					}
				}
			}
			ShowDialog(playerid, D_CreateBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateBusiness_Type_Shop:
		{
			if(!response)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				return 1;
			}
			for(new i = 1; i < sizeof(BusinessType); i++)
			{
				if(!BusinessType[i][IsCompany])
				{
					if(listitem) listitem--;
					else
					{
						SetPVarInt(playerid, "BusinessType", i);
						break;
					}
				}
			}
			ShowDialog(playerid, D_CreateBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateBusiness_NeedLevel:
		{
			if(!response)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				DeletePVar(playerid, "BusinessType");
				return 1;
			}
			if(!strlen(inputtext)) return ShowDialog(playerid, D_CreateBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) < 0) return ShowDialog(playerid, D_CreateBusiness_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для бизнеса", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Уровень не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			SetPVarInt(playerid, "BusinessNeedLevel", strval(inputtext));
			ShowDialog(playerid, D_CreateBusiness_MoneyType, DIALOG_STYLE_LIST, Main_Color"Выбор валюты для бизнеса", Main_Color"- "Color_White"Деньги\n\
			"Main_Color"- "Color_White"Донат", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateBusiness_MoneyType:
		{
			if(!response)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				DeletePVar(playerid, "BusinessType");
				DeletePVar(playerid, "BusinessNeedLevel");
				return 1;
			}
			SetPVarInt(playerid, "BusinessIsDonate", listitem);
			ShowDialog(playerid, D_CreateBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateBusiness_Price:
		{
			if(!response)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				DeletePVar(playerid, "BusinessType");
				DeletePVar(playerid, "BusinessNeedLevel");
				DeletePVar(playerid, "BusinessIsDonate");
				return 1;
			}
			if(!strlen(inputtext)) ShowDialog(playerid, D_CreateBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) < 0) ShowDialog(playerid, D_CreateBusiness_Price, DIALOG_STYLE_INPUT, Main_Color"Цена бизнеса", Color_White"Введите стоимость бизнеса\n"Color_Red"Цена не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");

			new BusinessID = 0;
			for(new i = 1; i < sizeof(bInfo); i++)
			{
				if(!bInfo[i][bID])
				{
					BusinessID = i;
					break;
				}
			}
			if(!BusinessID)
			{
				DeletePVar(playerid, "BusinessX");
				DeletePVar(playerid, "BusinessY");
				DeletePVar(playerid, "BusinessZ");
				DeletePVar(playerid, "BusinessA");
				DeletePVar(playerid, "BusinessType");
				DeletePVar(playerid, "BusinessNeedLevel");
				DeletePVar(playerid, "BusinessIsDonate");
				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество бизнесов.");
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
			}
			ClearBusiness(BusinessID);

			bInfo[BusinessID][bPrice] = strval(inputtext);
			bInfo[BusinessID][bIsDonate] = bool:GetPVarInt(playerid, "BusinessIsDonate");
			bInfo[BusinessID][bX] = GetPVarFloat(playerid, "BusinessX");
			bInfo[BusinessID][bY] = GetPVarFloat(playerid, "BusinessY");
			bInfo[BusinessID][bZ] = GetPVarFloat(playerid, "BusinessZ");
			bInfo[BusinessID][bA] = GetPVarFloat(playerid, "BusinessA");
			bInfo[BusinessID][bType] = GetPVarInt(playerid, "BusinessType");
			bInfo[BusinessID][bNeedLevel] = GetPVarInt(playerid, "BusinessNeedLevel");
			DeletePVar(playerid, "BusinessX");
			DeletePVar(playerid, "BusinessY");
			DeletePVar(playerid, "BusinessZ");
			DeletePVar(playerid, "BusinessA");
			DeletePVar(playerid, "BusinessType");
			DeletePVar(playerid, "BusinessNeedLevel");
			DeletePVar(playerid, "BusinessIsDonate");

			new query[400];
			mysql_format(DB, query, sizeof(query), "INSERT INTO `business` (`Price`, `IsDonate`, `X`, `Y`, `Z`, `A`, `Type`, `NeedLevel`) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d')",
			bInfo[BusinessID][bPrice],
			bInfo[BusinessID][bIsDonate],
			bInfo[BusinessID][bX],
			bInfo[BusinessID][bY],
			bInfo[BusinessID][bZ],
			bInfo[BusinessID][bA],
			bInfo[BusinessID][bType],
			bInfo[BusinessID][bNeedLevel]);

			mysql_tquery(DB, query, "GetCreateBusinessID", "dd", BusinessID, playerid);
			return 1;
		}
		case D_CreateHouse_Int:
		{
			if(!response)
			{
				DeletePVar(playerid, "HouseX");
				DeletePVar(playerid, "HouseY");
				DeletePVar(playerid, "HouseZ");
				DeletePVar(playerid, "HouseA");
				DeletePVar(playerid, "Interior_List");
				return 1;
			}
			new ListCount = sizeof(HouseInterior)/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Interior_List") > ListCount) NextButton = (sizeof(HouseInterior)%10)-1;
			new LastButton = NextButton+1;

			if(listitem == NextButton)
			{
				if(GetPVarInt(playerid, "Interior_List") * 10 <  sizeof(HouseInterior)) SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")+1);
				else SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")-1);
				return ShowHouseInteriorList(playerid, 1);
			}
			else if(listitem == LastButton)
			{
				SetPVarInt(playerid, "Interior_List", GetPVarInt(playerid, "Interior_List")-1);
				return ShowHouseInteriorList(playerid, 1);
			}
			else
			{
				SetPVarInt(playerid, "HouseInt", listitem+(GetPVarInt(playerid, "Interior_List")*10)-9);
				DeletePVar(playerid, "Interior_List");
				ShowDialog(playerid, D_CreateHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки", Color_White"Далее", Color_White"Закрыть");
			}
			return 1;
		}
		case D_CreateHouse_NeedLevel:
		{
			if(!response)
			{
				DeletePVar(playerid, "HouseX");
				DeletePVar(playerid, "HouseY");
				DeletePVar(playerid, "HouseZ");
				DeletePVar(playerid, "HouseA");
				DeletePVar(playerid, "HouseInt");
				DeletePVar(playerid, "HouseIsDonate");
				return 1;
			}

			if(!strlen(inputtext)) return ShowDialog(playerid, D_CreateHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) < 0) return ShowDialog(playerid, D_CreateHouse_NeedLevel, DIALOG_STYLE_INPUT, Main_Color"Минимальный уровень для дома", Color_White"Введите минимальный уровень требуемый для покупки\n"Color_Red"Уровень не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");

			SetPVarInt(playerid, "HouseNeedLevel", strval(inputtext));
			ShowDialog(playerid, D_CreateHouse_MoneyType, DIALOG_STYLE_LIST, Main_Color"Выбор валюты для дома", Main_Color"- "Color_White"Деньги\n\
			"Main_Color"- "Color_White"Донат", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateHouse_MoneyType:
		{
			if(!response)
			{
				DeletePVar(playerid, "HouseX");
				DeletePVar(playerid, "HouseY");
				DeletePVar(playerid, "HouseZ");
				DeletePVar(playerid, "HouseA");
				DeletePVar(playerid, "HouseInt");
				DeletePVar(playerid, "HouseNeedLevel");
				return 1;
			}

			SetPVarInt(playerid, "HouseIsDonate", listitem);
			ShowDialog(playerid, D_CreateHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_CreateHouse_Price:
		{
			if(!response)
			{
				DeletePVar(playerid, "HouseX");
				DeletePVar(playerid, "HouseY");
				DeletePVar(playerid, "HouseZ");
				DeletePVar(playerid, "HouseA");
				DeletePVar(playerid, "HouseInt");
				DeletePVar(playerid, "HouseNeedLevel");
				DeletePVar(playerid, "HouseIsDonate");
				return 1;
			}

			if(!strlen(inputtext)) return ShowDialog(playerid, D_CreateHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) < 0) return ShowDialog(playerid, D_CreateHouse_Price, DIALOG_STYLE_INPUT, Main_Color"Цена дома", Color_White"Введите стоимость дома\n"Color_Red"Цена не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");

			new HouseID = 0;
			for(new i = 1; i < sizeof(hInfo); i++)
			{
				if(!hInfo[i][hID])
				{
					HouseID = i;
					break;
				}
			}
			if(!HouseID)
			{
				DeletePVar(playerid, "HouseX");
				DeletePVar(playerid, "HouseY");
				DeletePVar(playerid, "HouseZ");
				DeletePVar(playerid, "HouseA");
				DeletePVar(playerid, "HouseInt");
				DeletePVar(playerid, "HouseIsDonate");
				DeletePVar(playerid, "HouseNeedLevel");
				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество домов.");
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
			}
			ClearHouse(HouseID);

			hInfo[HouseID][hPrice] = strval(inputtext);
			hInfo[HouseID][hIsDonate] = bool:GetPVarInt(playerid, "HouseIsDonate");
			hInfo[HouseID][hX] = GetPVarFloat(playerid, "HouseX");
			hInfo[HouseID][hY] = GetPVarFloat(playerid, "HouseY");
			hInfo[HouseID][hZ] = GetPVarFloat(playerid, "HouseZ");
			hInfo[HouseID][hA] = GetPVarFloat(playerid, "HouseA");
			hInfo[HouseID][hInterior] = GetPVarInt(playerid, "HouseInt");
			hInfo[HouseID][hNeedLevel] = GetPVarInt(playerid, "HouseNeedLevel");
			DeletePVar(playerid, "HouseX");
			DeletePVar(playerid, "HouseY");
			DeletePVar(playerid, "HouseZ");
			DeletePVar(playerid, "HouseA");
			DeletePVar(playerid, "HouseInt");
			DeletePVar(playerid, "HouseIsDonate");
			DeletePVar(playerid, "HouseNeedLevel");

			new query[400];
			mysql_format(DB, query, sizeof(query), "INSERT INTO `house` (`Price`, `IsDonate`, `X`, `Y`, `Z`, `A`, `Interior`, `NeedLevel`) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d')",
			hInfo[HouseID][hPrice],
			hInfo[HouseID][hIsDonate],
			hInfo[HouseID][hX],
			hInfo[HouseID][hY],
			hInfo[HouseID][hZ],
			hInfo[HouseID][hA],
			hInfo[HouseID][hInterior],
			hInfo[HouseID][hNeedLevel]);

			mysql_tquery(DB, query, "GetCreateHouseID", "dd", HouseID, playerid);
			return 1;
		}
		case D_Remove_All_Job:
		{
			if(!response) return 1;
			if(pInfo[playerid][pJob] == Job_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы нигде не работаете");

			new str[100];
			format(str, sizeof(str), Color_Yellow"Вы успешно уволились с работы "Main_Color"%s", Jobs[pInfo[playerid][pJob]][JobNames]);
			SendClientMessage(playerid, -1, str);
			ChangePlayerJob(playerid, Job_None);
			return 1;
		}
		case D_Rent_Car:
		{
			if(!response) return RemovePlayerFromVehicle(playerid);

			if(GetPVarInt(playerid, "RentedCar"))
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже арендуете какой-то транспорт");
			}

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине");
			}

			if(vInfo[vehicleid][vPrice])
			{
				if(pInfo[playerid][pMoney] < vInfo[vehicleid][vPrice])
				{
					RemovePlayerFromVehicle(playerid);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для аренды");
				}
				GivePlayerMoneyEx(playerid, -vInfo[vehicleid][vPrice]);

				if(bInfo[vInfo[vehicleid][vOwner]][bOwnerID])
				{
					bInfo[vInfo[vehicleid][vOwner]][bMoney] += vInfo[vehicleid][vPrice];
					SaveBusinessInt(bInfo[vInfo[vehicleid][vOwner]][bID], "Money", bInfo[vInfo[vehicleid][vOwner]][bMoney]);
				}
			}
			vInfo[vehicleid][vRenter] = playerid;
			SetPVarInt(playerid, "RentedCar", vInfo[vehicleid][vServerID]);
			SendClientMessage(playerid, -1,  Color_Yellow"Вы арендовали транспорт, прекратить аренду вы можете командой /unrentcar");
			return 1;
		}
		case D_Rent_Job_Car:
		{
			if(!response) return RemovePlayerFromVehicle(playerid);

			if(GetPVarInt(playerid, "RentedCar"))
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже арендуете какой-то транспорт");
			}

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине");
			}

			if(GetPVarInt(playerid, "PilotCD") && vInfo[vehicleid][vType] == VehicleTypeJob && pInfo[playerid][pJob] == vInfo[vehicleid][vOwner] && vInfo[vehicleid][vOwner] == Job_Pilot)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны хотя бы немного отдохнуть между рейсами");
			}
			else if(GetPVarInt(playerid, "FisherCD") && vInfo[vehicleid][vType] == VehicleTypeJob && pInfo[playerid][pJob] == vInfo[vehicleid][vOwner] && vInfo[vehicleid][vOwner] == Job_Fisher)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны хотя бы немного отдохнуть после рыбалки");
			}
			else if(GetPVarInt(playerid, "BusCD") && vInfo[vehicleid][vType] == VehicleTypeJob && pInfo[playerid][pJob] == vInfo[vehicleid][vOwner] && vInfo[vehicleid][vOwner] == Job_Bus)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны хотя бы немного отдохнуть после маршрута на автобусе");
			}

			if(vInfo[vehicleid][vPrice])
			{
				if(pInfo[playerid][pMoney] < vInfo[vehicleid][vPrice])
				{
					RemovePlayerFromVehicle(playerid);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для аренды");
				}
				GivePlayerMoneyEx(playerid, -vInfo[vehicleid][vPrice]);
			}

			vInfo[vehicleid][vRenter] = playerid;
			SetPVarInt(playerid, "RentedCar", vInfo[vehicleid][vServerID]);
			SendClientMessage(playerid, -1,  Color_Yellow"Вы взяли транспорт, и можете приступать к работе");
			SendClientMessage(playerid, -1,  Color_Yellow"Вернуть транспорт вы можете командой /unrentcar");

			if(vInfo[vehicleid][vType] == VehicleTypeJob && (pInfo[playerid][pJob] == vInfo[vehicleid][vOwner] || GetPVarInt(playerid, "UnOfficialJob") == vInfo[vehicleid][vOwner]))
			{
				switch(vInfo[vehicleid][vOwner])
				{
					case Job_Trucker: SendClientMessage(playerid, -1,  Color_Yellow"Встаньте в очередь на загрузку чтобы получить груз.");
					case Job_TrashCollector:
					{
						vInfo[vehicleid][vItemInVehicle] = 0;
						vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Мусорных мешков загружено: 0", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
						SetPVarInt(playerid, "TrashBinCount", 3);
						SetTrashCollectorMarker(playerid);
					}
					case Job_Mechanic: SendClientMessage(playerid, -1,  Color_Yellow"Используйте "Main_Color"/fare "Color_Yellow"чтобы выйти на смену");
					case Job_Pilot:
					{
						SendClientMessage(playerid, -1,  Color_Yellow"Двигайтесь по маршруту указанному у вас на радаре.");
						DeletePVar(playerid, "PilotNumberPoint");
						DeletePVar(playerid, "PilotNextX");
						DeletePVar(playerid, "PilotNextY");
						SetPilotMarker(playerid);
					}
					case Job_Fisher:
					{
						vInfo[vehicleid][vItemInVehicle] = 0;
						vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Рыбы в лодке: 0", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
						SetFisherMarker(playerid);
					}
					case Job_DriverDelivery:
					{
						vInfo[vehicleid][vItemInVehicle] = 0;
						vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Коробок загружено: 0", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
						SetPVarInt(playerid, "DriverDeliveryStatus", 1);
						SetDriverDeliveryMarker(playerid);
					}
					case Job_Bus:
					{
						SetPVarInt(playerid, "BusRoute", 1+random(8));
						SetPVarInt(playerid, "BusRouteStage", 1);
						switch(GetPVarInt(playerid, "BusRoute"))
						{
							case 1:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Мэрия", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Мэрия");
							}
							case 2:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Больница", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Больница");
							}
							case 3:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Армия", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Армия");
							}
							case 4:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Завод", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Завод");
							}
							case 5:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Шахта", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Шахта");
							}
							case 6:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Ферма", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Ферма");
							}
							case 7:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Грузчики", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Грузчики");
							}
							case 8:
							{
								vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Маршрут: Деревня новичков – Водитель погрузчика", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
								SendClientMessage(playerid, -1, Color_Yellow"Вас назначили на маршрут Деревня новичков - Водитель погрузчика");
							}

						}
						SetBusMarker(playerid);
					}
					case Job_FarmDeliver:
					{
						SetFarmDeliverMarker(playerid);
					}
				}
			}
			return 1;
		}
		case D_SpawnChange:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					pInfo[playerid][pSpawnChange] = SpawnChange_Standart;
					SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
				}
				case 1:
				{
					if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
					pInfo[playerid][pSpawnChange] = SpawnChange_House;
					SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
				}
				case 2:
				{
					if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
					pInfo[playerid][pSpawnChange] = SpawnChange_Fraction;
					SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
				}
			}
			SendClientMessage(playerid, -1, Color_White"Место появления изменено");
			return 1;
		}
		case D_GPS_Settings:
		{
			if(!response) return pc_cmd_apanel(playerid);
			switch(listitem)
			{
				case 0: ShowDialog(playerid, D_GPS_Add_Title, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление заголовка", Color_White"Введите название заголовка в поле ниже", Color_White"Далее", Color_White"Назад");
				case 1:
				{
					if(!GetGpsTitleCount()) return SendClientMessage(playerid, -1, Color_Grey"На данный момент заголовки GPS отсутствуют.");
					new str[500];
					for(new i = 1; i < sizeof(GPSTitle); i++)
					{
						if(GPSTitle[i][GpsTitleID]) format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, i, GPSTitle[i][GpsTitleName]);
					}
					ShowDialog(playerid, D_GPS_Remove_Title, DIALOG_STYLE_LIST, Main_Color"GPS Удаление заголовка", str, Color_White"Далее", Color_White"Назад");
				}
				case 2:
				{
					if(!GetGpsTitleCount()) return SendClientMessage(playerid, -1, Color_Grey"На данный момент заголовки GPS отсутствуют.");
					new str[500];
					for(new i = 1; i < sizeof(GPSTitle); i++)
					{
						if(GPSTitle[i][GpsTitleID]) format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, i, GPSTitle[i][GpsTitleName]);
					}
					ShowDialog(playerid, D_GPS_Add_Select_Title, DIALOG_STYLE_LIST, Main_Color"GPS Добавление пункта", str, Color_White"Далее", Color_White"Назад");
				}
				case 3:
				{
					if(!GetGpsTitleCount()) return SendClientMessage(playerid, -1, Color_Grey"На данный момент заголовки GPS отсутствуют.");
					new str[500];
					for(new i = 1; i < sizeof(GPSTitle); i++)
					{
						if(GPSTitle[i][GpsTitleID]) format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, i, GPSTitle[i][GpsTitleName]);
					}
					ShowDialog(playerid, D_GPS_Remove_Select_Title, DIALOG_STYLE_LIST, Main_Color"GPS Удаление пункта", str, Color_White"Далее", Color_White"Назад");
				}
			}
			return 1;
		}
		case D_GPS_Add_Title:
		{
			if(!response) return pc_cmd_gpssettings(playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, D_GPS_Add_Title, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление заголовка", Color_White"Введите название заголовка в поле ниже\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Назад");
			if(strlen(inputtext) > 100) return ShowDialog(playerid, D_GPS_Add_Title, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление заголовка", Color_White"Введите название заголовка в поле ниже\n"Color_Red"Длина заголовка не может быть длинее 100 символов", Color_White"Далее", Color_White"Назад");
			AddGpsTitle(playerid, inputtext);
			return 1;
		}
		case D_GPS_Remove_Title:
		{
			if(!response) return pc_cmd_gpssettings(playerid);
			RemoveGPSTitle(playerid, listitem+1);
			return 1;
		}
		case D_GPS_Add_Select_Title:
		{
			if(!response) return pc_cmd_gpssettings(playerid);
			SetPVarInt(playerid, "GPS_Add_To_Title", listitem+1);
			ShowDialog(playerid, D_GPS_Add, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление пункта", Color_White"Введите название пункта в поле ниже\n"Color_White"В GPS запишеться то место где вы сейчас стоите", Color_White"Далее", Color_White"Назад");
			return 1;
		}
		case D_GPS_Add:
		{
			if(!response)
			{
				DeletePVar(playerid, "GPS_Add_To_Title");
				return pc_cmd_gpssettings(playerid);
			}
			if(!strlen(inputtext)) ShowDialog(playerid, D_GPS_Add, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление пункта", Color_White"Введите название пункта в поле ниже\n"Color_White"В GPS запишеться то место где вы сейчас стоите\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Назад");
			if(strlen(inputtext) > 100) ShowDialog(playerid, D_GPS_Add, DIALOG_STYLE_INPUT, Main_Color"GPS Добавление пункта", Color_White"Введите название пункта в поле ниже\n"Color_White"В GPS запишеться то место где вы сейчас стоите\n"Color_Red"Длина заголовка не может быть длинее 100 символов", Color_White"Далее", Color_White"Назад");
			AddGps(playerid, inputtext);
			return 1;
		}
		case D_GPS_Remove_Select_Title:
		{
			if(!response) return pc_cmd_gpssettings(playerid);
			new TitleIndx = listitem+1;
			if(!GetGpsCount(TitleIndx)) return SendClientMessage(playerid, -1, Color_Grey"На данный момент пункты под этим заголовком отсутствуют.");
			SetPVarInt(playerid, "GPS_Remove_To_Title", TitleIndx);
			new str[500];
			new count = 1;
			for(new i = 0; i < sizeof(GPS[]); i++)
			{
				if(GPS[TitleIndx][i][GpsID])
				{
					format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, count, GPS[TitleIndx][i][GpsName]);
					count++;
				}
			}
			ShowDialog(playerid, D_GPS_Remove, DIALOG_STYLE_LIST, Main_Color"GPS Удаление пункта", str, Color_White"Далее", Color_White"Назад");
			return 1;
		}
		case D_GPS_Remove:
		{
			if(!response)
			{
				DeletePVar(playerid, "GPS_Remove_To_Title");
				return pc_cmd_gpssettings(playerid);
			}
			new TitleID = GetPVarInt(playerid, "GPS_Remove_To_Title");
			DeletePVar(playerid, "GPS_Remove_To_Title");

			for(new i = 0; i < sizeof(GPS[]); i++)
			{
				if(GPS[TitleID][i][GpsID])
				{
					if(listitem) listitem--;
					else
					{
						RemoveGPS(playerid, i, TitleID);
						break;
					}
				}
			}
			return 1;
		}
		case D_Business_Buy:
		{
			if(!response) return DeletePVar(playerid, "Business");
			new BusinessID = GetPVarInt(playerid, "Business");
			DeletePVar(playerid, "Business");
			if(!bInfo[BusinessID][bID]) return 1;
			if(bInfo[BusinessID][bOwnerID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого бизнеса уже есть владелец");
			if(pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть бизнес");
			if(bInfo[BusinessID][bNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для покупки этого бизнеса");
			if(bInfo[BusinessID][bIsDonate])
			{
				if(pInfo[playerid][pDonateMoney] < bInfo[BusinessID][bPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно донат рублей");
				pInfo[playerid][pDonateMoney] -= bInfo[BusinessID][bPrice];
				SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
			}
			else
			{
				if(pInfo[playerid][pMoney] < bInfo[BusinessID][bPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
				GivePlayerMoneyEx(playerid, -bInfo[BusinessID][bPrice]);
			}

			pInfo[playerid][pBusinessID] = bInfo[BusinessID][bID];
			bInfo[BusinessID][bOwnerID] = pInfo[playerid][pID];
			SaveBusinessInt(bInfo[BusinessID][bID], "OwnerID", bInfo[BusinessID][bOwnerID]);

			bInfo[BusinessID][bTax] = gettime()+86400;
			SaveBusinessInt(bInfo[BusinessID][bID], "Tax", bInfo[BusinessID][bTax]);
			UpdateBusiness(BusinessID);

			new str[150];
			format(str, sizeof(str), Color_White"Поздравляем вы приобрели "Main_Color"бизнес №"Color_White"%d", bInfo[BusinessID][bID]);
			SendClientMessage(playerid, -1, str);

			format(str, sizeof(str), Color_White"Бизнес автоматически оплачен до "Main_Color"%s", date(bInfo[BusinessID][bTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
			SendClientMessage(playerid, -1, str);
			SendClientMessage(playerid, -1, Color_White"Не забудьте оплатить его в ближайшем отделении банка");
			return 1;
		}
		case D_Inventory:
		{
			if(!response) return ShowPlayerMenu(playerid);
			ShowDialog(playerid, D_Inventory_SubMenu, DIALOG_STYLE_LIST,  Main_Color"Инвентарь", Color_White"Использовать\n"Color_White"Выбросить", Color_White"Выбрать", Color_White"Назад");
			SetPVarInt(playerid, "InvSlot", listitem);
			return 1;
		}
		case D_Inventory_SubMenu:
		{
			if(!response)
			{
				DeletePVar(playerid, "InvSlot");
				return ShowPlayerInventory(playerid);
			}
			switch(listitem)
			{
				case 0:
				{
					UsePlayerInventory(playerid, pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemID]);
					DeletePVar(playerid, "InvSlot");
				}
				case 1:
				{
					if(pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemCount] > 1) ShowDialog(playerid, D_Inventory_Drop, DIALOG_STYLE_INPUT,  Main_Color"Инвентарь", Color_White"Введите количество которое хотите выбросить", Color_White"Далее", Color_White"Назад");
					else
					{
						DropPlayerInventory(playerid, pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemID], pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemCount]);
						DeletePVar(playerid, "InvSlot");
					}
				}
			}
			return 1;
		}
		case D_Inventory_Drop:
		{
			if(!response) return ShowDialog(playerid, D_Inventory_SubMenu, DIALOG_STYLE_LIST,  Main_Color"Инвентарь", Color_White"Использовать\n"Color_White"Выбросить", Color_White"Выбрать", Color_White"Назад");
			if(!strlen(inputtext)) ShowDialog(playerid, D_Inventory_Drop, DIALOG_STYLE_INPUT,  Main_Color"Инвентарь", Color_White"Введите количество которое хотите выбросить\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Назад");
			if(strval(inputtext) <= 0) ShowDialog(playerid, D_Inventory_Drop, DIALOG_STYLE_INPUT,  Main_Color"Инвентарь", Color_White"Введите количество которое хотите выбросить\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Назад");
			if(pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemCount] < strval(inputtext)) ShowDialog(playerid, D_Inventory_Drop, DIALOG_STYLE_INPUT,  Main_Color"Инвентарь", Color_White"Введите количество которое хотите выбросить\n"Color_Red"В этом слоте нет такого количества предметов", Color_White"Далее", Color_White"Назад");

			DropPlayerInventory(playerid, pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemID], strval(inputtext));
			DeletePVar(playerid, "InvSlot");

			return 1;
		}
		case D_Ammo_Sell_Menu:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет лицензии на владение оружием");
			switch(listitem)
			{
				case 0:
				{
					if(pInfo[playerid][pMoney] < 2300) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemDesertEagle)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -2300);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemDesertEagle][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += 2300;
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
				case 1:
				{
					if(pInfo[playerid][pMoney] < 3500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemMP5)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -3500);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemMP5][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += 3500;
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
				case 2:
				{
					if(pInfo[playerid][pMoney] < 3100) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemShotgun)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -3100);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemShotgun][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += 3100;
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
				case 3:
				{
					if(pInfo[playerid][pMoney] < 5100) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemAK47)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -5100);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemAK47][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += 5100;
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
				case 4:
				{
					if(pInfo[playerid][pMoney] < 5600) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemM4)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -5600);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemM4][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += 5600;
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
			}
			return 1;
		}
		case D_KFC_Sell_Menu:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(pInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemFrenchFries)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -300);
					GiveCompanyPay(playerid, BusinessKFCCompany, 300);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemFrenchFries][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 1:
				{
					if(pInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemNuggets)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -500);
					GiveCompanyPay(playerid, BusinessKFCCompany, 500);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemNuggets][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 2:
				{
					if(pInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemWing)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -500);
					GiveCompanyPay(playerid, BusinessKFCCompany, 500);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemWing][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 3:
				{
					if(pInfo[playerid][pMoney] < 800) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemBurger)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -800);
					GiveCompanyPay(playerid, BusinessKFCCompany, 800);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemBurger][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 4:
				{
					if(pInfo[playerid][pMoney] < 900) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemBigBurger)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -900);
					GiveCompanyPay(playerid, BusinessKFCCompany, 900);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemBigBurger][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
			}
			return 1;
		}
		case D_GeneralStore_Sell_Menu:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(pInfo[playerid][pMoney] < 1500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(GetItemCountInInventory(playerid, ItemWatch)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть часы");
					if(!AddPlayerInventory(playerid, ItemWatch)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1500);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1500);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemWatch][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 1:
				{
					if(pInfo[playerid][pMoney] < 1200) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemPhotos)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1200);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1200);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemPhotos][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 2:
				{
					if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemFlowers)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemFlowers][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 3:
				{
					if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemsGolfClub)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemsGolfClub][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 4:
				{
					if(pInfo[playerid][pMoney] < 1500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemBaseballBat)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1500);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1500);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemBaseballBat][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 5:
				{
					if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemShovel)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemShovel][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 6:
				{
					if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemCue)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemCue][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 7:
				{
					if(pInfo[playerid][pMoney] < 800) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemWalkingStick)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -800);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 800);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemWalkingStick][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 8:
				{
					if(pInfo[playerid][pMoney] < 3000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemRoller)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -3000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 3000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemRoller][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 9:
				{
					if(pInfo[playerid][pMoney] < 3000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemChainsaw)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -3000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 3000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemChainsaw][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 10:
				{
					if(pInfo[playerid][pMoney] < 3000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemKatana)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -3000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 3000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemKatana][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 11:
				{
					if(pInfo[playerid][pMoney] < 800) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemParchament)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -800);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 800);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemParchament][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
				case 12:
				{
					if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого товара");
					if(!AddPlayerInventory(playerid, ItemEmptyBarrel)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

					GivePlayerMoneyEx(playerid, -1000);
					GiveCompanyPay(playerid, BusinessGeneralStoreCompany, 1000);

					new str[100];
					format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"добавлен в ваш инвентарь", Items[ItemEmptyBarrel][ItemName]);
					SendClientMessage(playerid, -1, str);

					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);
				}
			}
			return 1;
		}
		case D_Fuel_Menu_Value:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на транспорте");
			if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return 1;
			new bool:Full = false;
			if(!strlen(inputtext)) Full = true;
			if(!Full && strval(inputtext) <= 0)
			{
				return ShowDialog(playerid, D_Fuel_Menu_Value, DIALOG_STYLE_INPUT, Main_Color"АЗС", Color_White"Введите количество бензина на которое хотите заправиться\n\
				"Color_White"Если вы хоите заправить полный бак оставьте поле пустым\n\
				"Color_White"Стоимость 1% - "Color_Green"10$\n\
				"Color_Red"Неверное количество бензина", Color_White"Далее", Color_White"Закрыть");
			}

			new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
			GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);

			if(engine) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Перед заправкой заглушите двигатель");

			if(vInfo[vehicleid][vFuel] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже полный бак");

			new Float:Fuel = 0.0;
			if(Full) Fuel = 100.0-vInfo[vehicleid][vFuel];
			else Fuel = float(strval(inputtext));
			if(Fuel+vInfo[vehicleid][vFuel] > 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Заправить транспорт можно только до 100%");
			GivePlayerMoneyEx(playerid, -strval(inputtext)*10);
			vInfo[vehicleid][vFuel] += Fuel;
			SaveCarFloat(vehicleid, "Fuel", vInfo[vehicleid][vFuel]);

			GiveCompanyPay(playerid, BusinessOilDepot, strval(inputtext)*10);

			SendClientMessage(playerid, -1, Color_White"Транспорт заправлен");
			return 1;
		}
		case D_AHelp:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					if(pInfo[playerid][pAdmin] >= 1)
					{
						new str[500], SubStr[100];
						format(str, sizeof(str), "%s"Color_White"/alogin - Авторизация в админ панели\n", str);
						format(str, sizeof(str), "%s"Color_White"/tp - Телепорт меню\n", str);
						format(str, sizeof(str), "%s"Color_White"/reportlist - Список репортов\n", str);
						format(str, sizeof(str), "%s"Color_White"/apanel - Панель администратора\n", str);
						format(str, sizeof(str), "%s"Color_White"/(a)msg - Чат администраторов\n", str);
						format(str, sizeof(str), "%s"Color_White"/mute - Заглушить игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/unmute - Снять заглушку с игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/jail - Посадить игрока в деморган\n", str);
						format(str, sizeof(str), "%s"Color_White"/unjail - Выпустить игрока из деморгана\n", str);
						format(str, sizeof(str), "%s"Color_White"/warn - Дать игроку предупреждение\n", str);
						format(str, sizeof(str), "%s"Color_White"/unwarn - Снять с игрока предупреждение\n", str);
						format(str, sizeof(str), "%s"Color_White"/gm - Проверить игрока на GM\n", str);
						format(SubStr, sizeof(SubStr), Main_Color"Админ панель ||"Color_White" Команды %s", AdminNames[1]);
						ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
					}
				}
				case 1:
				{
					if(pInfo[playerid][pAdmin] >= 2)
					{
						new str[800], SubStr[100];
						format(str, sizeof(str), "%s"Color_White"/kick - Кикнуть игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/ban - Забанить игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/offban - Забанить игрока оффлайн\n", str);
						format(str, sizeof(str), "%s"Color_White"/unban - Разбанить игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/baninfo - Информация о блокировке аккаунта\n", str);
						format(str, sizeof(str), "%s"Color_White"/getip - Узнать IP игрока(Регистрационный и Текущий)\n", str);
						format(str, sizeof(str), "%s"Color_White"/banip - Забанить IP игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/unbanip - Разбанить IP игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/slap - Подкинуть игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/aad - Сообщение всем игрокам\n", str);
						format(str, sizeof(str), "%s"Color_White"/goto - Телепортироваться к игроку\n", str);
						format(str, sizeof(str), "%s"Color_White"/gethere - Телепортировать игрока к себе\n", str);
						format(str, sizeof(str), "%s"Color_White"/veh - Создать временное ТС\n", str);
						format(str, sizeof(str), "%s"Color_White"/dveh - Удалить временное ТС\n", str);
						format(str, sizeof(str), "%s"Color_White"/spec - Включить режим слежки за игроком\n", str);
						format(str, sizeof(str), "%s"Color_White"/specoff - Выключить режим слежки за игроком\n", str);
						format(str, sizeof(str), "%s"Color_White"/spawn - Зареспавнить игрока\n", str);
						format(str, sizeof(str), "%s"Color_White"/sethp - Изменить уровень здоровья игрока\n", str);
						format(SubStr, sizeof(SubStr), Main_Color"Админ панель ||"Color_White" Команды %s", AdminNames[2]);
						ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
					}
				}
				case 2:
				{
					if(pInfo[playerid][pAdmin] >= 3)
					{
						new str[200], SubStr[100];
						format(str, sizeof(str), "%s"Color_White"/makeleader - Назначить игрока лидером\n", str);
						format(str, sizeof(str), "%s"Color_White"/spall - Зареспавнить весь не занятый транспорт\n", str);
						format(str, sizeof(str), "%s"Color_White"/cc - Очистить чат\n", str);
						format(SubStr, sizeof(SubStr), Main_Color"Админ панель ||"Color_White" Команды %s", AdminNames[3]);
						ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
					}
				}
				case 3:
				{
					if(pInfo[playerid][pAdmin] >= 4)
					{
						new str[1500], SubStr[100];
						format(str, sizeof(str), "%s"Color_White"/givemoney - Выдать игроку деньги\n", str);
						format(str, sizeof(str), "%s"Color_White"/givedonatemoney - Выдать игроку донат валюту\n", str);
						format(str, sizeof(str), "%s"Color_White"/giveskin - Выдать игроку скин\n", str);
						format(str, sizeof(str), "%s"Color_White"/makeadmin - Назначить игрока администратором\n", str);
						format(str, sizeof(str), "%s"Color_White"/createvehicle - Создать машину для сервера\n", str);
						format(str, sizeof(str), "%s"Color_White"/editvehicle - Отредактировать машину на сервере\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletevehicle - Удалить машину с сервера\n", str);
						format(str, sizeof(str), "%s"Color_White"/payday - Запустить PayDay\n", str);
						format(str, sizeof(str), "%s"Color_White"/gpssettings - Настройки GPS\n", str);
						format(str, sizeof(str), "%s"Color_White"/fractionsettings - Настройки фракций\n", str);
						format(str, sizeof(str), "%s"Color_White"/settime - Изменить время на сервере\n", str);
						format(str, sizeof(str), "%s"Color_White"/setweather - Изменить погоду на сервере\n", str);
						format(str, sizeof(str), "%s"Color_White"/createhouse - Создать дом\n", str);
						format(str, sizeof(str), "%s"Color_White"/edithouse - Редактировать дом\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletehouse - Удалить дом\n", str);
						format(str, sizeof(str), "%s"Color_White"/createbusiness - Создать бизнес\n", str);
						format(str, sizeof(str), "%s"Color_White"/editbusiness - Редактировать бизнес\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletebusiness - Удалить бизнес\n", str);
						format(str, sizeof(str), "%s"Color_White"/createsprunk - Создать автомат Sprunk\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletesprunk - Удалить автомат Sprunk\n", str);
						format(str, sizeof(str), "%s"Color_White"/createtable - Создать стол для казино\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletetable - Удалить стол для казино\n", str);
						format(str, sizeof(str), "%s"Color_White"/createtent - Создать палатку для торговли\n", str);
						format(str, sizeof(str), "%s"Color_White"/deletetent - Удалить палатку для торговли\n", str);
						format(str, sizeof(str), "%s"Color_White"/iconsettings - Настройки иконок\n", str);
						format(str, sizeof(str), "%s"Color_White"/logs - Логи\n", str);
						format(str, sizeof(str), "%s"Color_White"/bots - Настройки ботов\n", str);
						format(str, sizeof(str), "%s"Color_White"/createicon - Создание иконки\n", str);
						format(SubStr, sizeof(SubStr), Main_Color"Админ панель ||"Color_White" Команды %s", AdminNames[4]);
						ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
					}
				}
			}
			return 1;
		}
		case D_Bank_Menu:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
			switch(listitem)
			{
				case 0:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Input, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите положить на счет", Color_White"Далее", Color_White"Закрыть");
				}
				case 1:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Output, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите вывести со счета", Color_White"Далее", Color_White"Закрыть");
				}
				case 2:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод", Color_White"Далее", Color_White"Закрыть");
				}
				case 3:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Tax, DIALOG_STYLE_LIST, str, Color_White"Дом\n"Color_White"Бизнес", Color_White"Далее", Color_White"Закрыть");
				}
			}
			return 1;
		}
		case D_Bank_Input:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
			if(!strlen(inputtext))
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Input, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите положить на счет\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) <= 0)
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Input, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите положить на счет\n"Color_Red"Неверная сумма", Color_White"Далее", Color_White"Закрыть");
			}
			if(pInfo[playerid][pMoney] < strval(inputtext))
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для пополнения");
			}

			GivePlayerMoneyEx(playerid, -strval(inputtext));
			pInfo[playerid][pBankMoney] += strval(inputtext);
			SavePlayerInt(playerid, "BankMoney", pInfo[playerid][pBankMoney]);
			new str[200];
			format(str, sizeof(str), Color_White"Вы пополнили счет на "Color_Green"%d$", strval(inputtext));
			SendClientMessage(playerid, -1, str);

			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			str[0] = EOS;
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) пополннил счет на %d$", str, pInfo[playerid][pRegIp], strval(inputtext));

			AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			return 1;
		}
		case D_Bank_Output:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
			if(!strlen(inputtext))
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Output, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите вывести со счета\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) <= 0)
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Output, DIALOG_STYLE_INPUT, str, Color_White"Введите сумму которую хотите вывести со счета\n"Color_Red"Неверная сумма", Color_White"Далее", Color_White"Закрыть");
			}
			if(pInfo[playerid][pBankMoney] < strval(inputtext))
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств на банковском счете для снятия");
			}

			new Float:BankTax = strval(inputtext)*0.02;

			GivePlayerMoneyEx(playerid, strval(inputtext)-floatround(BankTax));
			pInfo[playerid][pBankMoney] -= strval(inputtext);
			SavePlayerInt(playerid, "BankMoney", pInfo[playerid][pBankMoney]);

			new str[300];
			format(str, sizeof(str), Color_White"Вы сняли со счета "Color_Green"%d$ "Color_White"банк взял комиссию в "Color_Green"%d$", strval(inputtext)-floatround(BankTax), floatround(BankTax));
			SendClientMessage(playerid, -1, str);

			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			GiveCompanyPay(playerid, BusinessBank, floatround(BankTax));

			str[0] = EOS;
			GetPlayerIp(playerid, str, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) снял со счета %d$", str, pInfo[playerid][pRegIp], strval(inputtext));

			AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			return 1;
		}
		case D_Bank_Transfer_ID:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
			if(!strlen(inputtext))
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод"Color_Red"\nВы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0 || strval(inputtext) > MAX_PLAYERS)
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод"Color_Red"\nНеверный ID игрока", Color_White"Далее", Color_White"Закрыть");
			}
			if(!IsPlayerConnected(strval(inputtext)))
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод"Color_Red"\nИгрок с данным ID не подключен", Color_White"Далее", Color_White"Закрыть");
			}
			if(!pInfo[strval(inputtext)][pAuth])
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод"Color_Red"\nИгрок с данным ID не авторизировался", Color_White"Далее", Color_White"Закрыть");
			}
			if(playerid == strval(inputtext))
			{
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_ID, DIALOG_STYLE_INPUT, str, Color_White"Укажите ID игрока которому хотите сделать перевод"Color_Red"\nВы ввели свой ID", Color_White"Далее", Color_White"Закрыть");
			}
			if(!pInfo[strval(inputtext)][pCard])
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока нет банковской карты");
			}
			SetPVarInt(playerid, "BankTransferID", strval(inputtext));
			new str[100];
			format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
			ShowDialog(playerid, D_Bank_Transfer_Value, DIALOG_STYLE_INPUT, str, Color_White"Укажите сумму которую хотите перевести игроку", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Bank_Transfer_Value:
		{
			if(!response) return DeletePVar(playerid, "BankTransferID");
			new id = GetPVarInt(playerid, "BankTransferID");
			DeletePVar(playerid, "BankTransferID");

			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");

			if(!IsPlayerConnected(id) || !pInfo[id][pAuth])
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок которому вы хотите сделать перевод вышел из игры");
			}
			if(!pInfo[id][pCard])
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока нет банковской карты");
			}
			if(!strlen(inputtext))
			{
				SetPVarInt(playerid, "BankTransferID", id);
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_Value, DIALOG_STYLE_INPUT, str, Color_White"Укажите сумму которую хотите перевести игроку\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) <= 0)
			{
				SetPVarInt(playerid, "BankTransferID", id);
				new str[100];
				format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
				return ShowDialog(playerid, D_Bank_Transfer_Value, DIALOG_STYLE_INPUT, str, Color_White"Укажите сумму которую хотите перевести игроку\n"Color_Red"Неверная сумма", Color_White"Далее", Color_White"Закрыть");
			}
			if(pInfo[playerid][pBankMoney] < strval(inputtext))
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств на банковском счете для перевода");
			}

			new Float:BankTax = strval(inputtext)*0.05;

			pInfo[playerid][pBankMoney] -= strval(inputtext);
			SavePlayerInt(playerid, "BankMoney", pInfo[playerid][pBankMoney]);

			pInfo[id][pBankMoney] += strval(inputtext)-floatround(BankTax);
			SavePlayerInt(id, "BankMoney", pInfo[id][pBankMoney]);

			new str[400];
			format(str, sizeof(str), Color_White"Вы перевели "Color_Green"%d$ "Color_White"игроку %s. Банк взял комиссию в "Color_Green"%d$", strval(inputtext)-floatround(BankTax),  pInfo[id][pName], floatround(BankTax));
			SendClientMessage(playerid, -1, str);

			str[0] = EOS;
			format(str, sizeof(str), Color_White"%s перевел на ваш банковский счет "Color_Green"%d$",  pInfo[playerid][pName], strval(inputtext)-floatround(BankTax));
			SendClientMessage(id, -1, str);

			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			GiveCompanyPay(playerid, BusinessBank, floatround(BankTax));

			str[0] = EOS;
			GetPlayerIp(playerid, str, 16);
			new SubStr[20];
			GetPlayerIp(id, SubStr, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) перевел %d$ на счет игрока %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], strval(inputtext)-floatround(BankTax), pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

			AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			return 1;
		}
		case D_Bank_Tax:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
			switch(listitem)
			{
				case 0:
				{
					if(!pInfo[playerid][pHouseID])
					{
						ShowPlayerBankMenu(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
					}
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Tax_House, DIALOG_STYLE_LIST, str, Color_White"Дни\t"Color_White"Стоимость\n\
					"Color_White"1 день\t"Color_Green"700$\n\
					"Color_White"3 дня\t"Color_Green"2.100$\n\
					"Color_White"1 неделя\t"Color_Green"4.900$\n\
					"Color_White"2 недели\t"Color_Green"9.800$", Color_White"Далее", Color_White"Закрыть");
				}
				case 1:
				{
					if(!pInfo[playerid][pBusinessID])
					{
						ShowPlayerBankMenu(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");
					}
					new str[100];
					format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
					ShowDialog(playerid, D_Bank_Tax_Business, DIALOG_STYLE_TABLIST_HEADERS, str, Color_White"Дни\t"Color_White"Стоимость\n\
					"Color_White"1 день\t"Color_Green"1.500$\n\
					"Color_White"3 дня\t"Color_Green"4.500$\n\
					"Color_White"1 неделя\t"Color_Green"10.500$\n\
					"Color_White"2 недели\t"Color_Green"21.000$", Color_White"Далее", Color_White"Закрыть");
				}
			}
			return 1;
		}
		case D_Bank_Tax_House:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");

			if(!pInfo[playerid][pHouseID])
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
			}

			new day = 0;
			switch(listitem)
			{
				case 0: day = 1;
				case 1: day = 3;
				case 2: day = 7;
				case 3: day = 14;
			}
			new Float:TempDay = (hInfo[pInfo[playerid][pHouseID]][hTax]-gettime())/86400.0;
			TempDay += float(day);
			if(TempDay > 14.5)
			{
				ShowPlayerBankMenu(playerid);
				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Оплатить дом можно только на 2 недели вперед");
				new str[100];
				format(str, sizeof(str), Color_White"Ваш дом уже оплачен до "Main_Color"%s", date(hInfo[pInfo[playerid][pHouseID]][hTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
				return SendClientMessage(playerid, -1, str);
			}
			new money = day*700;

			if(pInfo[playerid][pMoney] < money)
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для оплаты налога на дом");
			}
			GivePlayerMoneyEx(playerid, -money);

			hInfo[pInfo[playerid][pHouseID]][hTax] += day*86400;
			SaveHouseInt(hInfo[pInfo[playerid][pHouseID]][hID], "Tax", hInfo[pInfo[playerid][pHouseID]][hTax]);

			new str[100];
			format(str, sizeof(str), Color_White"Налог на дом оплачен до "Main_Color"%s", date(hInfo[pInfo[playerid][pHouseID]][hTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
			SendClientMessage(playerid, -1, str);

			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			GiveCompanyPay(playerid, BusinessElectricity, floatround(money));
			return 1;
		}
		case D_Bank_Tax_Business:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");

			if(!pInfo[playerid][pBusinessID])
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");
			}

			new day = 0;
			switch(listitem)
			{
				case 0: day = 1;
				case 1: day = 3;
				case 2: day = 7;
				case 3: day = 14;
			}
			new Float:TempDay = (bInfo[pInfo[playerid][pBusinessID]][bTax]-gettime())/86400.0;
			TempDay += float(day);
			if(TempDay > 14.5)
			{
				ShowPlayerBankMenu(playerid);
				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Оплатить бизнес можно только на 2 недели вперед");
				new str[100];
				format(str, sizeof(str), Color_White"Ваш бизнес уже оплачен до "Main_Color"%s", date(bInfo[pInfo[playerid][pBusinessID]][bTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
				return SendClientMessage(playerid, -1, str);
			}
			new money = day*1500;

			if(pInfo[playerid][pMoney] < money)
			{
				ShowPlayerBankMenu(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для оплаты налога на бизнес");
			}
			GivePlayerMoneyEx(playerid, -money);

			bInfo[pInfo[playerid][pBusinessID]][bTax] += day*86400;
			SaveBusinessInt(bInfo[pInfo[playerid][pBusinessID]][bID], "Tax",bInfo[pInfo[playerid][pBusinessID]][bTax]);

			new str[100];
			format(str, sizeof(str), Color_White"Налог на бизнес оплачен до "Main_Color"%s", date(bInfo[pInfo[playerid][pBusinessID]][bTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
			SendClientMessage(playerid, -1, str);

			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			GiveCompanyPay(playerid, BusinessElectricity, floatround(money));
			return 1;
		}
		case D_Bank_Buy_Card:
		{
			if(!response) return 1;
			if(pInfo[playerid][pMoney] < 5000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки банковской карты");
			GivePlayerMoneyEx(playerid, -5000);
			GiveCompanyPay(playerid, BusinessBank, 5000);
			pInfo[playerid][pCard] = true;
			SavePlayerBool(playerid, "Card", pInfo[playerid][pCard]);
			SendClientMessage(playerid, -1, Color_White"Вы приобрели банковскую карту. Теперь вы можете пользоваться услугами банка");
			return 1;
		}
		case D_Hospital_Buy_Card:
		{
			if(!response) return 1;
			if(!pInfo[playerid][pMedCard])
			{
				if(pInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки медицинской карты");

				GivePlayerMoneyEx(playerid, -10000);
				FractionWare[Fraction_Hospital][FractionWareMoney] += 10000;
				SaveFractionWare(Fraction_Hospital);

				pInfo[playerid][pMedCard] = 1;
				SavePlayerInt(playerid, "MedCard", pInfo[playerid][pMedCard]);
				SendClientMessage(playerid, -1, Color_White"Вы приобрели медицинскую карту.");
			}
			else if(pInfo[playerid][pMedCard] == 2)
			{
				if(pInfo[playerid][pMoney] < 50000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для восстановления медицинской карты");

				GivePlayerMoneyEx(playerid, -50000);
				FractionWare[Fraction_Hospital][FractionWareMoney] += 50000;
				SaveFractionWare(Fraction_Hospital);

				pInfo[playerid][pMedCard] = 1;
				SavePlayerInt(playerid, "MedCard", pInfo[playerid][pMedCard]);
				SendClientMessage(playerid, -1, Color_White"Вы восстановили медицинскую карту.");
			}
		}
		case D_Buy_Cloth:
		{
			if(!response) return 1;
			new BusinessID = GetPVarInt(playerid, "InBusiness");
			SetPlayerPosition(playerid, 215.1753, -41.2095, 1002.0234, 117.0, playerid+1000, BusinessType[bInfo[BusinessID][bType]][bInt], false);
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerCameraPos(playerid, X, Y, Z);
			InterpolateCameraPos(playerid, X, Y, Z, 210.2262, -41.2242, 1003.0, 1000, CAMERA_MOVE);
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			SetPVarFloat(playerid, "SkinSelectX", X);
			SetPVarFloat(playerid, "SkinSelectY", Y);
			SetPVarFloat(playerid, "SkinSelectZ", Z);
			SetPVarFloat(playerid, "SkinSelectA", A);
			InterpolateCameraLookAt(playerid, X, Y, Z, 215.1753, -41.2095, 1002.7, 1000, CAMERA_MOVE);
			ShowSkinSelect(playerid);
			return 1;
		}
		case D_Select_Skin:
		{
			if(GetPVarInt(playerid, "SkinChanged"))
			{
				if(!response) return DeletePVar(playerid, "SkinChanged");

				if(GetPVarInt(playerid, "SkinSelect"))
				{
					new indx = GetPVarInt(playerid, "SkinIndx");
					if(pInfo[playerid][pGender])
					{
						if(pInfo[playerid][pMoney] < SkinFemale[indx][1])
						{
							DeletePVar(playerid, "SkinChanged");
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
						}
						GivePlayerMoneyEx(playerid, -SkinFemale[indx][1]);

						HideSkinSelect(playerid);
						new BusinessID = GetPVarInt(playerid, "InBusiness");
						ActivateBusinessActors(playerid, BusinessID);

						if(bInfo[BusinessID][bOwnerID])
						{
							bInfo[BusinessID][bMoney] += SkinFemale[indx][1];
							SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
						}
					}
					else
					{
						if(pInfo[playerid][pMoney] < SkinMale[indx][1])
						{
							DeletePVar(playerid, "SkinChanged");
							return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
						}
						GivePlayerMoneyEx(playerid, -SkinMale[indx][1]);

						HideSkinSelect(playerid);
						new BusinessID = GetPVarInt(playerid, "InBusiness");
						ActivateBusinessActors(playerid, BusinessID);

						if(bInfo[BusinessID][bOwnerID])
						{
							bInfo[BusinessID][bMoney] += SkinMale[indx][1];
							SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
						}
					}
				}

				pInfo[playerid][pSkins][listitem] = GetPVarInt(playerid, "SkinChanged")-1;
				pInfo[playerid][pSkin] = listitem;
				SavePlayerSkins(playerid);
				SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
				DeletePVar(playerid, "SkinChanged");
				SendClientMessage(playerid, -1, Color_White"Скин заменен");
			}
			else
			{
				if(!response) return 1;
				if(!pInfo[playerid][pSkins][listitem]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На этой вешалке ничего нет");
				pInfo[playerid][pSkin] = listitem;
				SavePlayerSkins(playerid);
				SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);

				new str[100];
				if(pInfo[playerid][pGender]) strcat(str, "переоделась");
				else strcat(str, "переоделся");
				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
			}
		}
		case D_Tuning:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине");

			if(!response) return ExitVehicleInTuning(playerid, vehicleid);
			new ComponentTypes[ZVEH_MAX_COMPONENT_TYPES];
			new size = 0;
			GetVehicleCompatibleTypes(vInfo[vehicleid][vModel], ComponentTypes, size);

			if(listitem >= size && GetVehiclePaintJobCount(vInfo[vehicleid][vModel]))
			{
				SetPVarInt(playerid, "ComponentType", CARMODTYPE_PAINTJOB);
				ShowTuningComponentDialog(playerid, vehicleid, CARMODTYPE_PAINTJOB);
			}
			else
			{
				SetPVarInt(playerid, "ComponentType", ComponentTypes[listitem]);
				ShowTuningComponentDialog(playerid, vehicleid, ComponentTypes[listitem]);
			}
			return 1;
		}
		case D_Tuning_Component:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине");

			if(!response)
			{
				DeletePVar(playerid, "ComponentType");
				return ShowTuningDialog(playerid, vehicleid);
			}
			new componenttype = GetPVarInt(playerid, "ComponentType");
			if(componenttype == CARMODTYPE_PAINTJOB)
			{
				if(listitem == GetVehiclePaintJobCount(vInfo[vehicleid][vModel])) SetPVarInt(playerid, "ComponentID", 3);
				else SetPVarInt(playerid, "ComponentID", listitem);
			}
			else
			{
				new Component[ZVEH_MAX_COMPONENTS];
				new size = 0;
				GetVehicleCompatibleUpgrades(vInfo[vehicleid][vModel], Component, size);

				for(new i = 0; i < size; i++)
				{
					if(GetVehicleComponentType(Component[i]) == componenttype)
					{
						if(listitem) listitem--;
						else
						{
							SetPVarInt(playerid, "ComponentID", Component[i]);
							break;
						}
					}
				}
			}

			ShowDialog(playerid, D_Tuning_Component_Select, DIALOG_STYLE_LIST, Main_Color"House Tuning Cars", Color_White"Осмотреть\n"Color_White"Установить", Color_White"Далее", Color_White"Назад");
			return 1;
		}
		case D_Tuning_Component_Select:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине");
			if(!response)
			{
				DeletePVar(playerid, "ComponentID");
				return ShowTuningComponentDialog(playerid, vehicleid, GetPVarInt(playerid, "ComponentType"));
			}
			if(!listitem) WatchComponent(playerid, vehicleid, GetPVarInt(playerid, "ComponentType"));
			else
			{
				new componenttype = GetPVarInt(playerid, "ComponentType");
				new componentid = GetPVarInt(playerid, "ComponentID");

				new money = GetPriceComponent(componenttype, componentid);
				if(pInfo[playerid][pMoney] < money)
				{
					DeletePVar(playerid, "ComponentID");
					DeletePVar(playerid, "ComponentType");
					ShowTuningDialog(playerid, vehicleid);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
				}
				GivePlayerMoneyEx(playerid, -money);
				GiveCompanyPay(playerid, BusinessTuningCompany, money);

				if(componenttype == CARMODTYPE_PAINTJOB) PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				else PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				AddVehicleTuning(vehicleid, componentid, componenttype);

				DeletePVar(playerid, "ComponentID");
				DeletePVar(playerid, "ComponentType");
				ShowTuningDialog(playerid, vehicleid);
			}
			return 1;
		}
		case D_Casino_Menu:
		{
			if(!response) return 1;
			if(!listitem) ShowDialog(playerid, D_Casino_Buy_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите купить\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%", Color_White"Купить", Color_White"Закрыть");
			else ShowDialog(playerid, D_Casino_Sell_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите продать\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%", Color_White"Продать", Color_White"Закрыть");
			return 1;
		}
		case D_Casino_Sell_Menu:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) ShowDialog(playerid, D_Casino_Sell_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите продать\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%\n"Color_Red"Вы ничего не ввели", Color_White"Продать", Color_White"Закрыть");
			if(strval(inputtext) <= 0) ShowDialog(playerid, D_Casino_Sell_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите продать\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%\n"Color_Red"Неверное количество фишек", Color_White"Продать", Color_White"Закрыть");
			new count = strval(inputtext);
			if(GetItemCountInInventory(playerid, ItemCasinoCoin) < count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет столько фишек");
			new BusinessID = GetPVarInt(playerid, "InBusiness");
			new Price = floatround(count*1000 - (count*1000)*0.02);
			if(bInfo[BusinessID][bMoney] < Price) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В казино сейчас нет столько денег оно не может выкупить фишки");

			ActivateBusinessActors(playerid, BusinessID);
			GivePlayerMoneyEx(playerid, Price);
			RemovePlayerInventory(playerid, ItemCasinoCoin, count);

			if(bInfo[BusinessID][bOwnerID])
			{
				bInfo[BusinessID][bMoney] -= Price;
				SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
			}
			return 1;
		}
		case D_Casino_Buy_Menu:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Casino_Buy_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите купить\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%\n"Color_Red"Вы ничего не ввели", Color_White"Купить", Color_White"Закрыть");
			if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Casino_Buy_Menu, DIALOG_STYLE_INPUT, Main_Color"CASINO", Color_White"Введите количество фишек которое хотите купить\n"Color_White"1 фишка стоит "Color_Green"1000$\n"Color_White"Казино взимает комиссию 2%\n"Color_Red"Неверное количество фишек", Color_White"Купить", Color_White"Закрыть");
			new count = strval(inputtext);
			new Price = floatround(count*1000 + (count*1000)*0.02);
			if(pInfo[playerid][pMoney] < Price) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
			if(!AddPlayerInventory(playerid, ItemCasinoCoin, count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");
			GivePlayerMoneyEx(playerid, -Price);
			new BusinessID = GetPVarInt(playerid, "InBusiness");
			ActivateBusinessActors(playerid, BusinessID);

			if(bInfo[BusinessID][bOwnerID])
			{
				bInfo[BusinessID][bMoney] += Price;
				SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
			}
			return 1;
		}
		case D_Tent_Rent:
		{
			if(!response) return DeletePVar(playerid, "TentIndx");
			new indx = GetPVarInt(playerid, "TentIndx");
			DeletePVar(playerid, "TentIndx");
			if(indx)
			{
				indx--;
				if(pInfo[playerid][pMoney] < Tent[indx][TentPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
				if(GetPVarInt(playerid, "TentCD")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Палатку можно арендовать 1 раз в час");
				GivePlayerMoneyEx(playerid, -Tent[indx][TentPrice]);
				GiveCompanyPay(playerid, BusinessMarketplace, Tent[indx][TentPrice]);

				Tent[indx][TentTime] = gettime()+3600;

				Tent[indx][TentPlayer] = playerid;
				new str[200];
				format(str, sizeof(str), Main_Color"Палатка\n\
				"Main_Color"Арендована: "Color_White"%s\n\
				"Main_Color"Количество мест: "Color_Green"%d\n\
				"Color_White"Чтобы посмотреть товары нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", pInfo[Tent[indx][TentPlayer]][pName], Tent[indx][TentSlot]);
				UpdateDynamic3DTextLabelText(Tent[indx][TentText], -1, str);
				SendClientMessage(playerid, -1, Color_Yellow"Палатка арендована на 1 час. Вы можете открыть меню палатки с помощью"Main_Color"["Color_Yellow"~k~~SNEAK_ABOUT~"Main_Color"]");
				SendClientMessage(playerid, -1, Color_Yellow"Палатка автоматически продлится по истечению 1 часа");
				SetPVarInt(playerid, "TentRent", indx+1);
			}
			return 1;
		}
		case D_Tent_Menu:
		{
			if(!response) return 1;
			new indx = GetPVarInt(playerid, "TentRent");
			if(indx)
			{
				indx--;
				switch(listitem)
				{
					case 0:
					{
						if(GetTentSlot(indx) >= Tent[indx][TentSlot]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В палатке заняты все доступные места");
						ShowPlayerInventory(playerid, 2);
					}
					case 1:
					{
						if(!GetTentSlot(indx)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нет предметов на продаже");
						ShowTentItem(playerid, indx, 2);
					}
					case 2: UnrentTent(playerid);
				}
			}
			return 1;
		}
		case D_Tent_Menu_Sell:
		{
			if(!response) return 1;
			SetPVarInt(playerid, "InvSlot", listitem);
			ShowDialog(playerid, D_Tent_Menu_Sell_Count, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите количество этого предмета которое хотите выставить на продажу", Color_White"Далее", Color_White"Закрыть");
		}
		case D_Tent_Menu_Sell_Count:
		{
			if(!response) return DeletePVar(playerid, "InvSlot");
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Tent_Menu_Sell_Count, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите количество этого предмета которое хотите выставить на продажу\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Tent_Menu_Sell_Count, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите количество этого предмета которое хотите выставить на продажу\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
			if(pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemCount] < strval(inputtext)) return ShowDialog(playerid, D_Tent_Menu_Sell_Count, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите количество этого предмета которое хотите выставить на продажу\n"Color_Red"У вас нет такого количества этого предмета", Color_White"Далее", Color_White"Закрыть");
			SetPVarInt(playerid, "InvCount", strval(inputtext));
			ShowDialog(playerid, D_Tent_Menu_Sell_Price, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите стоимость этого предмета за 1 штуку", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Tent_Menu_Sell_Price:
		{
			if(!response)
			{
				DeletePVar(playerid, "InvCount");
				return DeletePVar(playerid, "InvSlot");
			}
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Tent_Menu_Sell_Price, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите стоимость этого предмета за 1 штуку\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Tent_Menu_Sell_Price, DIALOG_STYLE_INPUT, Main_Color"Инвентарь", Color_White"Укажите стоимость этого предмета за 1 штуку\n"Color_Red"Неверная стоимость", Color_White"Далее", Color_White"Закрыть");
			if(pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemCount] < GetPVarInt(playerid, "InvCount"))
			{
				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас больше нет такого количества этого предмета");
				DeletePVar(playerid, "InvCount");
				return DeletePVar(playerid, "InvSlot");
			}
			new indx = GetPVarInt(playerid, "TentRent");
			if(indx)
			{
				indx--;
				AddTentItem(indx, pInventory[playerid][GetPVarInt(playerid, "InvSlot")][ItemID], strval(inputtext), GetPVarInt(playerid, "InvCount"));
			}
			DeletePVar(playerid, "InvCount");
			DeletePVar(playerid, "InvSlot");
			return 1;
		}
		case D_Tent_Menu_Remove:
		{
			if(!response) return 1;
			new indx = GetPVarInt(playerid, "TentRent");
			if(indx)
			{
				indx--;
				if(Tent[indx][TentItemID][listitem] == ItemNone)
				{
					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Пусто");
					return ShowTentItem(playerid, indx, 2);
				}
				if(!AddPlayerInventory(playerid, Tent[indx][TentItemID][listitem], Tent[indx][TentItemCount][listitem])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

				new str[200];
				format(str, sizeof(str), Color_White"Предмет "Main_Color"%s "Color_White"убран с продажи", Items[Tent[indx][TentItemID][listitem]][ItemName]);
				SendClientMessage(playerid, -1, str);

				RemoveTentItem(indx, listitem);
			}
			return 1;
		}
		case D_Tent_Menu_Buy:
		{
			if(!response) return DeletePVar(playerid, "TentIndx");
			new indx = GetPVarInt(playerid, "TentIndx");
			DeletePVar(playerid, "TentIndx");
			if(indx)
			{
				indx--;
				if(Tent[indx][TentItemID][listitem] == ItemNone)
				{
					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Пусто");
					SetPVarInt(playerid, "TentIndx", indx+1);
					return ShowTentItem(playerid, indx);
				}
				SetPVarInt(playerid, "TentIndx", indx+1);
				SetPVarInt(playerid, "TentSlot", listitem);
				ShowDialog(playerid, D_Tent_Menu_Buy_Count, DIALOG_STYLE_INPUT, Main_Color"Палатка", Color_White"Укажите количество предмета которое хотите купить", Color_White"Далее", Color_White"Закрыть");
			}
			return 1;
		}
		case D_Tent_Menu_Buy_Count:
		{
			if(!response)
			{
				DeletePVar(playerid, "TentSlot");
				return DeletePVar(playerid, "TentIndx");
			}
			new indx = GetPVarInt(playerid, "TentIndx");
			DeletePVar(playerid, "TentIndx");
			if(indx)
			{
				indx--;
				if(!strlen(inputtext))
				{
					SetPVarInt(playerid, "TentIndx", indx+1);
					return ShowDialog(playerid, D_Tent_Menu_Buy_Count, DIALOG_STYLE_INPUT, Main_Color"Палатка", Color_White"Укажите количество предмета которое хотите купить\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				}
				if(strval(inputtext) <= 0)
				{
					SetPVarInt(playerid, "TentIndx", indx+1);
					return ShowDialog(playerid, D_Tent_Menu_Buy_Count, DIALOG_STYLE_INPUT, Main_Color"Палатка", Color_White"Укажите количество предмета которое хотите купить\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
				}
				new slot = GetPVarInt(playerid, "TentSlot");
				if(strval(inputtext) > Tent[indx][TentItemCount][slot])
				{
					SetPVarInt(playerid, "TentIndx", indx+1);
					return ShowDialog(playerid, D_Tent_Menu_Buy_Count, DIALOG_STYLE_INPUT, Main_Color"Палатка", Color_White"Укажите количество предмета которое хотите купить\n"Color_Red"В палатке нет такого количества этого предмета", Color_White"Далее", Color_White"Закрыть");
				}
				new money = strval(inputtext)*Tent[indx][TentItemPrice][slot];
				if(pInfo[playerid][pMoney] < money) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств");
				if(!AddPlayerInventory(playerid, Tent[indx][TentItemID][slot], strval(inputtext))) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно места в инвентаре");

				GivePlayerMoneyEx(playerid, -money);
				GivePlayerMoneyEx(Tent[indx][TentPlayer], money);

				new str[300];
				format(str, sizeof(str), Main_Color"%s "Color_White"приобрел(а) "Main_Color"%s %dшт. "Color_White"за "Color_Green"%d$", pInfo[playerid][pName], Items[Tent[indx][TentItemID][slot]][ItemName], strval(inputtext), money);
				SendClientMessage(Tent[indx][TentPlayer], -1, str);

				format(str, sizeof(str), Color_White"Вы купили "Main_Color"%s %dшт. "Color_White"за "Color_Green"%d$", Items[Tent[indx][TentItemID][slot]][ItemName], strval(inputtext), money);
				SendClientMessage(playerid, -1, str);

				Tent[indx][TentItemCount][slot] -= strval(inputtext);
				if(Tent[indx][TentItemCount][slot] <= 0) RemoveTentItem(indx, slot);

				DeletePVar(playerid, "TentSlot");
				DeletePVar(playerid, "TentIndx");
			}
			return 1;
		}
		case D_Main_Menu_TP:
		{
			if(!response) return DeletePVar(playerid, "FindHouse");
			new FindHouseListitem = GetPVarInt(playerid, "FindHouse");
			DeletePVar(playerid, "FindHouse");
			if(listitem == FindHouseListitem) ShowDialog(playerid, D_TP_House, DIALOG_STYLE_INPUT, Main_Color"Телепорт к дому", Color_White"Введите номер дома в поле ниже чтобы телепортироваться к нему", Color_White"Далее", Color_White"Назад");
			else if(listitem == FindHouseListitem+1)
			{
				SetPVarInt(playerid, "Business_List", 1);
				ShowBusinessList(playerid, 3);
			}
			else
			{
				SetPVarInt(playerid, "SelectedGPSTitle", listitem+1);
				ShowPlayerTPSubMenu(playerid, listitem+1);
			}
			return 1;
		}
		case D_TP:
		{
			if(!response)
			{
				DeletePVar(playerid, "SelectedGPSTitle");
				return pc_cmd_tp(playerid);
			}
			new TitleID = GetPVarInt(playerid, "SelectedGPSTitle");
			DeletePVar(playerid, "SelectedGPSTitle");
			for(new i = 0; i < sizeof(GPS[]); i++)
			{
				if(GPS[TitleID][i][GpsID])
				{
					if(listitem) listitem--;
					else
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerPosition(playerid, GPS[TitleID][i][GpsX], GPS[TitleID][i][GpsY], GPS[TitleID][i][GpsZ]+1.0);
						else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							SetVehiclePos(vehicleid, GPS[TitleID][i][GpsX], GPS[TitleID][i][GpsY], GPS[TitleID][i][GpsZ]+1.0);
							LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
						}
						break;
					}
				}
			}
		}
		case D_TP_Business:
		{
			if(!response) return DeletePVar(playerid, "Business_List");
			new count = BusinessCount();
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Business_List") > ListCount) NextButton = (count%10);
			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Business_List") * 10 <  count) SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")+1);
				else SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 3);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Business_List", GetPVarInt(playerid, "Business_List")-1);
				ShowBusinessList(playerid, 3);
			}
			else
			{
				new BusinessID = listitem+(GetPVarInt(playerid, "Business_List")*10)-9;
				DeletePVar(playerid, "Business_List");
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerPosition(playerid, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ]+1.0);
				else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					SetVehiclePos(vehicleid, bInfo[BusinessID][bX], bInfo[BusinessID][bY], bInfo[BusinessID][bZ]+1.0);
					LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
				}
			}

			return 1;
		}
		case D_TP_House:
		{
			if(!response) return pc_cmd_tp(playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, D_TP_House, DIALOG_STYLE_INPUT, Main_Color"Телепорт к дому", Color_White"Введите номер дома в поле ниже чтобы телепортироваться к нему\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Назад");
			new HouseID = strval(inputtext);
			if(HouseID <= 0 || HouseID >= sizeof(hInfo)) return ShowDialog(playerid, D_TP_House, DIALOG_STYLE_INPUT, Main_Color"Телепорт к дому", Color_White"Введите номер дома в поле ниже чтобы телепортироваться к нему\n"Color_Red"Не верный номер дома", Color_White"Далее", Color_White"Назад");
			if(!hInfo[HouseID][hID]) return ShowDialog(playerid, D_TP_House, DIALOG_STYLE_INPUT, Main_Color"Телепорт к дому", Color_White"Введите номер дома в поле ниже чтобы телепортироваться к нему\n"Color_Red"Такого дома не существует", Color_White"Далее", Color_White"Назад");

			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerPosition(playerid, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ]+1.0);
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				SetVehiclePos(vehicleid, hInfo[HouseID][hX], hInfo[HouseID][hY], hInfo[HouseID][hZ]+1.0);
				LinkVehicleToInterior(vehicleid, 0);
				SetVehicleVirtualWorld(vehicleid, 0);
			}
			return 1;
		}
		case D_MakeLeader:
		{
			if(!response) return DeletePVar(playerid, "MakeLeaderID");
			if(!listitem)
			{
				new id = GetPVarInt(playerid, "MakeLeaderID");
				DeletePVar(playerid, "MakeLeaderID");
				if(pInfo[id][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не является членом фракции");
				if(pInfo[id][pRank] != FractionMaxRank) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не является лидером фракции");

				new str[400];
				format(str, sizeof(str), Main_Color"%s %s "Color_White"cнял вас с должности лидера организации "Main_Color"%s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], FractionName[pInfo[id][pMembers]]);
				SendClientMessage(id, -1, str);

				format(str, sizeof(str), "%s %s снял %s с должности лидера организации %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], FractionName[pInfo[id][pMembers]]);
				SendAdminMessage(str);

				str[0] = EOS;
				GetPlayerIp(playerid, str, 16);
				new SubStr[20];
				GetPlayerIp(id, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) снял %s (IP: %s | RegIP: %s) с должности лидера организации %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], FractionName[pInfo[id][pMembers]]);

				AddLog(LogTypeAdmin, pInfo[playerid][pID], str);

				pInfo[id][pMembers] = Fraction_None;
				SavePlayerInt(id, "Members", pInfo[id][pMembers]);
				pInfo[id][pRank] = 0;
				SavePlayerInt(id, "Rank", pInfo[id][pRank]);
				if(pInfo[id][pSpawnChange] == SpawnChange_Fraction)
				{
					pInfo[id][pSpawnChange] = SpawnChange_Standart;
					SavePlayerInt(id, "SpawnChange", pInfo[id][pSpawnChange]);
				}
				SetColor(id);
				SpawnPlayer(id);
			}
			else
			{
				new FractionID = listitem;
				new id = GetPVarInt(playerid, "MakeLeaderID");
				DeletePVar(playerid, "MakeLeaderID");
				new str[400];
				format(str, sizeof(str), Main_Color"%s %s "Color_White"назначил вас на должность лидера организации "Main_Color"%s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], FractionName[FractionID]);
				SendClientMessage(id, -1, str);

				format(str, sizeof(str), "%s %s назначил %s на должность лидера организации %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], FractionName[FractionID]);
				SendAdminMessage(str);

				str[0] = EOS;
				GetPlayerIp(playerid, str, 16);
				new SubStr[20];
				GetPlayerIp(id, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) назначил %s (IP: %s | RegIP: %s) на должность лидера организации %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], FractionName[FractionID]);

				AddLog(LogTypeAdmin, pInfo[playerid][pID], str);

				pInfo[id][pMembers] = FractionID;
				SavePlayerInt(id, "Members", pInfo[id][pMembers]);
				pInfo[id][pRank] = FractionMaxRank;
				SavePlayerInt(id, "Rank", pInfo[id][pRank]);
				pInfo[id][pSpawnChange] = SpawnChange_Fraction;
				SavePlayerInt(id, "SpawnChange", pInfo[id][pSpawnChange]);
				SetColor(id);

				if(pInfo[id][pGender]) SetPlayerSkin(id, FractionSkinFemale[pInfo[id][pMembers]][pInfo[id][pRank]]);
				else SetPlayerSkin(id, FractionSkinMale[pInfo[id][pMembers]][pInfo[id][pRank]]);

				if(pInfo[id][pJob] == Job_Lawyer && pInfo[id][pMembers] != Fraction_None && IsGovFraction(pInfo[id][pMembers])) ChangePlayerJob(id, Job_None);

				SpawnPlayer(id);
			}
			FillLeaderBoard();
			return 1;
		}
		case D_Invite:
		{
			if(!response) return DeletePVar(playerid, "InviterID");
			new id = GetPVarInt(playerid, "InviterID");
			DeletePVar(playerid, "InviterID");
			if(pInfo[id][pMembers] == Fraction_None) return 1;

			new str[300];
			format(str, sizeof(str), Main_Color"%s %s "Color_White"принял "Main_Color"%s "Color_White"в организацию", FractionRankName[pInfo[id][pMembers]][pInfo[id][pRank]], pInfo[id][pName], pInfo[playerid][pName]);
			SendRMessage(id, str);

			pInfo[playerid][pMembers] = pInfo[id][pMembers];
			SavePlayerInt(playerid, "Members", pInfo[playerid][pMembers]);
			pInfo[playerid][pRank] = 1;
			SavePlayerInt(playerid, "Rank", pInfo[playerid][pRank]);
			pInfo[playerid][pSpawnChange] = SpawnChange_Fraction;
			SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
			SetColor(playerid);

			if(pInfo[playerid][pGender]) SetPlayerSkin(playerid, FractionSkinFemale[pInfo[playerid][pMembers]][pInfo[playerid][pRank]]);
			else SetPlayerSkin(playerid, FractionSkinMale[pInfo[playerid][pMembers]][pInfo[playerid][pRank]]);

			if(pInfo[playerid][pJob] == Job_Lawyer && pInfo[playerid][pMembers] != Fraction_None && IsGovFraction(pInfo[playerid][pMembers])) ChangePlayerJob(playerid, Job_None);

			SpawnPlayer(playerid);

			format(str, sizeof(str), Color_White"Вы вступили в организацию "Main_Color"%s", FractionName[pInfo[playerid][pMembers]]);
			SendClientMessage(playerid, -1, str);

			str[0] = EOS;
			GetPlayerIp(id, str, 16);
			new SubStr[20];
			GetPlayerIp(playerid, SubStr, 16);
			format(str, sizeof(str), "(IP: %s | RegIP: %s) принял %s (IP: %s | RegIP: %s) в организацию %s", str, pInfo[id][pRegIp], pInfo[playerid][pName], SubStr, pInfo[playerid][pRegIp], FractionName[pInfo[playerid][pMembers]]);

			AddLog(LogTypeFraction, pInfo[id][pID], str);
			return 1;
		}
		case D_Edit_Fraction:
		{
			if(!response) return pc_cmd_apanel(playerid);

			SetPVarInt(playerid, "FractionID", listitem+1);
			ShowDialog(playerid, D_Edit_Fraction_Type, DIALOG_STYLE_LIST, Main_Color"Редактирование фракций", Color_White"Скины\n"Color_White"Названия рангов", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Edit_Fraction_Type:
		{
			if(!response) return DeletePVar(playerid, "FractionID");

			if(!listitem) ShowDialog(playerid, D_Edit_Fraction_Skin_Gender, DIALOG_STYLE_LIST, Main_Color"Редактирование фракций", Color_White"Мужские\n"Color_White"Женские", Color_White"Далее", Color_White"Закрыть");
			else
			{
				new str[500];
				new FractionID = GetPVarInt(playerid, "FractionID");
				for(new i = 1; i < FractionMaxRank+1; i++)
				{
					format(str, sizeof(str), "%s%d. %s\n", str, i, FractionRankName[FractionID][i]);
				}
				ShowDialog(playerid, D_Edit_Fraction_Rank_Select, DIALOG_STYLE_LIST, Main_Color"Редактирование фракций", str, Color_White"Далее", Color_White"Закрыть");
			}
			return 1;
		}
		case D_Edit_Fraction_Rank_Select:
		{
			if(!response) return DeletePVar(playerid, "FractionID");

			SetPVarInt(playerid, "FractionSkinRank", listitem+1);
			ShowDialog(playerid, D_Edit_Fraction_Rank, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите новое название ранга в поле ниже", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Edit_Fraction_Rank:
		{
			if(!response)
			{
				DeletePVar(playerid, "FractionSkinRank");
				return DeletePVar(playerid, "FractionID");
			}

			if(!strlen(inputtext)) return ShowDialog(playerid, D_Edit_Fraction_Rank, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите новое название ранга в поле ниже\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strlen(inputtext) > 50) return ShowDialog(playerid, D_Edit_Fraction_Rank, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите новое название ранга в поле ниже\n"Color_Red"Название ранга не может быть более 50 символов", Color_White"Далее", Color_White"Закрыть");

			new FractionID = GetPVarInt(playerid, "FractionID");
			new FractionRank = GetPVarInt(playerid, "FractionSkinRank");

			FractionRankName[FractionID][FractionRank][0] = EOS;
			strcat(FractionRankName[FractionID][FractionRank], inputtext);

			new str[500];

			for(new i = 0; i < FractionMaxRank+1; i++)
			{
				if(!i) format(str, sizeof(str), "%s", FractionRankName[FractionID][i]);
				else format(str, sizeof(str), "%s,%s", str, FractionRankName[FractionID][i]);
			}

			mysql_format(DB, str, sizeof(str), "UPDATE `fraction_info` SET `RankName` = '%s' WHERE `ID` = '%d'", str, FractionID);
			mysql_tquery(DB, str);

			DeletePVar(playerid, "FractionSkinRank");
			DeletePVar(playerid, "FractionID");
			SendClientMessage(playerid, -1, Color_White"Название ранга изменено");
			return 1;
		}
		case D_Edit_Fraction_Skin_Gender:
		{
			if(!response) return DeletePVar(playerid, "FractionID");
			new FractionID = GetPVarInt(playerid, "FractionID");
			SetPVarInt(playerid, "FractionSkinGender", listitem);

			new str[500];
			if(!GetPVarInt(playerid, "FractionSkinGender"))
			{
				for(new i = 1; i < FractionMaxRank+1; i++)
				{
					format(str, sizeof(str), "%s%d. %s(ID: %d)\n", str, i, FractionRankName[FractionID][i], FractionSkinMale[FractionID][i]);
				}
			}
			else
			{
				for(new i = 1; i < FractionMaxRank+1; i++)
				{
					format(str, sizeof(str), "%s%d. %s(ID: %d)\n", str, i, FractionRankName[FractionID][i], FractionSkinFemale[FractionID][i]);
				}
			}
			format(str, sizeof(str), Color_White"%s", str);

			ShowDialog(playerid, D_Edit_Fraction_Skin_Rank, DIALOG_STYLE_LIST, Main_Color"Редактирование фракций", str, Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Edit_Fraction_Skin_Rank:
		{
			if(!response)
			{
				DeletePVar(playerid, "FractionSkinGender");
				return DeletePVar(playerid, "FractionID");
			}

			SetPVarInt(playerid, "FractionSkinRank", listitem+1);

			ShowDialog(playerid, D_Edit_Fraction_Skin, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите ID скина в поле ниже", Color_White"Далее", Color_White"Закрыть");

			return 1;
		}
		case D_Edit_Fraction_Skin:
		{
			if(!response)
			{
				DeletePVar(playerid, "FractionSkinGender");
				DeletePVar(playerid, "FractionSkinRank");
				return DeletePVar(playerid, "FractionID");
			}
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Edit_Fraction_Skin, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите ID скина в поле ниже\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			if(strval(inputtext) < 0 || strval(inputtext) > 311) return ShowDialog(playerid, D_Edit_Fraction_Skin, DIALOG_STYLE_INPUT, Main_Color"Редактирование фракций", Color_White"Введите ID скина в поле ниже\n"Color_Red"ID скина от 0 до 311", Color_White"Далее", Color_White"Закрыть");

			new FractionID = GetPVarInt(playerid, "FractionID");
			new FractionRank = GetPVarInt(playerid, "FractionSkinRank");

			if(!GetPVarInt(playerid, "FractionSkinGender")) FractionSkinMale[FractionID][FractionRank] = strval(inputtext);
			else FractionSkinFemale[FractionID][FractionRank] = strval(inputtext);

			new MaleStr[300], FemaleStr[100];
			for(new i = 0; i < FractionMaxRank+1; i++)
			{
				if(!i)
				{
					format(MaleStr, sizeof(MaleStr), "%d", FractionSkinMale[FractionID][i]);
					format(FemaleStr, sizeof(FemaleStr), "%d", FractionSkinFemale[FractionID][i]);
				}
				else
				{
					format(MaleStr, sizeof(MaleStr), "%s,%d", MaleStr, FractionSkinMale[FractionID][i]);
					format(FemaleStr, sizeof(FemaleStr), "%s,%d", FemaleStr, FractionSkinFemale[FractionID][i]);
				}
			}
			mysql_format(DB, MaleStr, sizeof(MaleStr), "UPDATE `fraction_info` SET `RankSkinsMale` = '%s', `RankSkinsFemale` = '%s' WHERE `ID` = '%d'", MaleStr, FemaleStr, FractionID);
			mysql_tquery(DB, MaleStr);

			DeletePVar(playerid, "FractionSkinGender");
			DeletePVar(playerid, "FractionSkinRank");
			DeletePVar(playerid, "FractionID");
			SendClientMessage(playerid, -1, Color_White"Скин изменен");
			return 1;
		}
		case D_Icon_Settings:
		{
			if(!response)
			{
				DeletePVar(playerid, "Icons_List");
				return pc_cmd_apanel(playerid);
			}
			new count = GetIconCount();
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Icons_List") > ListCount) NextButton = (count%10);
			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Icons_List") * 10 <  count) SetPVarInt(playerid, "Icons_List", GetPVarInt(playerid, "Icons_List")+1);
				else SetPVarInt(playerid, "Icons_List", GetPVarInt(playerid, "Icons_List")-1);
				ShowMapIconList(playerid);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Icons_List", GetPVarInt(playerid, "Icons_List")-1);
				ShowMapIconList(playerid);
			}
			else
			{
				new indx = (GetPVarInt(playerid, "Icons_List")*10)+listitem-10;
				DeletePVar(playerid, "Icons_List");
				SetPVarInt(playerid, "Icons_Indx", indx);
				new str[150];
				format(str, sizeof(str), Color_White"Иконка номер %d | Комментарий %s\nВы желаете удалить эту иконку?", Icons[indx][IconID], Icons[indx][IconComment]);
				ShowDialog(playerid, D_Icon_Settings_Sub_Menu, DIALOG_STYLE_MSGBOX, Main_Color"Админ панель || "Color_White"Настройки иконок на карте", str, Color_White"Да", Color_White"Нет");
			}
			return 1;
		}
		case D_Icon_Settings_Sub_Menu:
		{
			if(!response)
			{
				pc_cmd_iconsettings(playerid);
				return DeletePVar(playerid, "Icons_Indx");
			}
			new indx = GetPVarInt(playerid, "Icons_Indx");
			DeletePVar(playerid, "Icons_Indx");
			new query[100];
			mysql_format(DB, query, sizeof(query), "DELETE FROM `mapicon` WHERE `ID` = '%d'", Icons[indx][IconID]);
			mysql_tquery(DB, query, "ReloadMapIcon");
			SendClientMessage(playerid, -1, Color_White"Иконка удалена");
			return 1;
		}
		case D_FractionWare:
		{
			if(!response) return 1;
			SetPVarInt(playerid, "WareType", listitem);
			switch(listitem)
			{
				case 0:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
					ShowDialog(playerid, D_FractionWare_Select, DIALOG_STYLE_LIST, str, Color_White"Положить\nВзять", Color_White"Далее", Color_White"Закрыть");
				}
				case 1:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
					ShowDialog(playerid, D_FractionWare_Select, DIALOG_STYLE_LIST, str, Color_White"Положить\nВзять", Color_White"Далее", Color_White"Закрыть");
				}
				case 2:
				{
					new str[100];
					format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
					ShowDialog(playerid, D_FractionWare_Select, DIALOG_STYLE_LIST, str, Color_White"Положить\nВзять", Color_White"Далее", Color_White"Закрыть");
				}
			}
			return 1;
		}
		case D_FractionWare_Select:
		{
			if(!response) return DeletePVar(playerid, "WareType");
			if(!listitem)
			{
				switch(GetPVarInt(playerid, "WareType"))
				{
					case 0:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить", Color_White"Далее", Color_White"Закрыть");
					}
					case 1:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить", Color_White"Далее", Color_White"Закрыть");
					}
					case 2:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить", Color_White"Далее", Color_White"Закрыть");
					}
				}
			}
			else
			{
				if(pInfo[playerid][pRank] < FractionMaxRank) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только лидеру организации");
				switch(GetPVarInt(playerid, "WareType"))
				{
					case 0:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять", Color_White"Далее", Color_White"Закрыть");
					}
					case 1:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять", Color_White"Далее", Color_White"Закрыть");
					}
					case 2:
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять", Color_White"Далее", Color_White"Закрыть");
					}
				}
			}
			return 1;
		}
		case D_FractionWare_Give:
		{
			if(!response) return DeletePVar(playerid, "WareType");
			switch(GetPVarInt(playerid, "WareType"))
			{
				case 0:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(pInfo[playerid][pMoney] < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"У вас нет такого количества денег", Color_White"Далее", Color_White"Закрыть");
					}

					GivePlayerMoneyEx(playerid, -strval(inputtext));
					FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] += strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"пополнил банк организации на "Color_Green"%d$", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общая сумма в банке "Color_Green"%d$", FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
					SendRMessage(playerid, str);
				}
				case 1:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(GetItemCountInInventory(playerid, ItemMaterial) < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"У вас нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");
					}

					RemovePlayerInventory(playerid, ItemMaterial, strval(inputtext));
					FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] += strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"положил в общак организации "Main_Color"%d"Color_White" материалов", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общее количество материалов в общаке "Main_Color"%d", FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
					SendRMessage(playerid, str);
				}
				case 2:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(GetItemCountInInventory(playerid, ItemDrugs) < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Give, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите положить\n"Color_Red"У вас нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");
					}

					RemovePlayerInventory(playerid, ItemDrugs, strval(inputtext));
					FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] += strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"положил в общак организации "Main_Color"%d г."Color_White" наркотиков", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общее количество наркотиков в общаке "Main_Color"%d г.", FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
					SendRMessage(playerid, str);
				}
			}
			DeletePVar(playerid, "WareType");
			return 1;
		}
		case D_FractionWare_Take:
		{
			if(!response) return DeletePVar(playerid, "WareType");
			switch(GetPVarInt(playerid, "WareType"))
			{
				case 0:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"На счету организации нет такого количества денег", Color_White"Далее", Color_White"Закрыть");
					}

					GivePlayerMoneyEx(playerid, strval(inputtext));
					FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] -= strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"забрал из банка организации "Color_Green"%d$", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общая сумма в банке "Color_Green"%d$", FractionWare[pInfo[playerid][pMembers]][FractionWareMoney]);
					SendRMessage(playerid, str);
				}
				case 1:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"В общаке нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");
					}
					if(!AddPlayerInventory(playerid, ItemMaterial, strval(inputtext)))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d мат.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Недостаточно места в инвентаре", Color_White"Далее", Color_White"Закрыть");
					}

					FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] -= strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"забрал из общака организации "Main_Color"%d"Color_White" материалов", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общее количество материалов в общаке "Main_Color"%d", FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials]);
					SendRMessage(playerid, str);
				}
				case 2:
				{
					if(!strlen(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					}
					if(strval(inputtext) <= 0)
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Неверное количество", Color_White"Далее", Color_White"Закрыть");
					}
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] < strval(inputtext))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"В общаке нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");
					}
					if(!AddPlayerInventory(playerid, ItemDrugs, strval(inputtext)))
					{
						new str[100];
						format(str, sizeof(str), Main_Color"%s "Color_White"|| "Color_Green"%d г.", FractionName[pInfo[playerid][pMembers]], FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
						return ShowDialog(playerid, D_FractionWare_Take, DIALOG_STYLE_INPUT, str, Color_White"Введите количество которое хотите взять\n"Color_Red"Недостаточно места в инвентаре", Color_White"Далее", Color_White"Закрыть");
					}

					FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] -= strval(inputtext);
					SaveFractionWare(pInfo[playerid][pMembers]);

					new str[200];
					format(str, sizeof(str), Main_Color"%s %s "Color_White"забрал из общака организации "Main_Color"%d г."Color_White" наркотиков", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], strval(inputtext));
					SendRMessage(playerid, str);
					format(str, sizeof(str), Color_White"Общее количество наркотиков в общаке "Main_Color"%d г.", FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs]);
					SendRMessage(playerid, str);
				}
			}
			DeletePVar(playerid, "WareType");
			return 1;
		}
		case D_Heal:
		{
			new id = GetPVarInt(playerid, "HealID");
			DeletePVar(playerid, "HealID");
			if(!response)
			{
				new str[100];
				format(str, sizeof(str), Main_Color"%s[%d] "Color_White"отказался от лечения", pInfo[playerid], playerid);
				SendClientMessage(id, -1, str);
				DeletePVar(playerid, "HealMoney");
				return 1;
			}
			new money = GetPVarInt(playerid, "HealMoney");
			DeletePVar(playerid, "HealMoney");

			if(pInfo[playerid][pMoney] < money)
			{
				new str[100];
				format(str, sizeof(str), Color_White"У "Main_Color"%s[%d] "Color_White"недостаточно средств на лечение", pInfo[playerid], playerid);
				SendClientMessage(id, -1, str);

				SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для лечения");
				return 1;
			}

			new str[100];
			if(pInfo[playerid][pGender]) format(str, sizeof(str), Main_Color"%s[%d] "Color_White"согласилась вылечиться", pInfo[playerid][pName], playerid);
			else format(str, sizeof(str), Main_Color"%s[%d] "Color_White"согласился вылечиться", pInfo[playerid][pName], playerid);
			SendClientMessage(id, -1, str);

			format(str, sizeof(str), "вылечил(а) %s", pInfo[playerid][pName]);
			ProxDetector(id, MESSAGE_DIST, BitColor_Me, str);

			pInfo[playerid][pHealth] = 100.0;
			SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
			SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);

			GivePlayerMoneyEx(playerid, -money);
			GivePlayerMoneyEx(id, money);
			return 1;
		}
		case D_Sperm_Donor:
		{
			if(!response) return 1;
			ClearAnimations(playerid, true);
			TogglePlayerControllable(playerid, false);
			ApplyAnimation(playerid,"PAULNMAC", "wank_loop", 1.800001, true, false, false, false, 0, true);

			SendClientMessage(playerid, -1, Color_White"Вы приступили к сдаче спермы");
			SetPVarInt(playerid, "SpermDonorTime", 60);
			SetPVarInt(playerid, "DisableTextAnim", 1);
			return 1;
		}
		case D_Blood_Donor:
		{
			if(!response) return RemovePlayerFromVehicle(playerid);
			TogglePlayerControllable(playerid, false);

			SendClientMessage(playerid, -1, Color_White"Вы приступили к сдаче крови");
			SetPVarInt(playerid, "BloodDonorTime", 60);
			return 1;
		}
		case D_Taxi_Point:
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_Taxi)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не в такси");
			}
			if(vInfo[vehicleid][vRenter] == -1)
			{
				RemovePlayerFromVehicle(playerid);
				return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Таксист не на дежурстве");
			}

			if(!response) return RemovePlayerFromVehicle(playerid);
			SetPVarInt(playerid, "TaxiPoint", vInfo[vehicleid][vRenter]+1);

			if(!listitem) ShowPlayerGPSMenu(playerid);
			else SendClientMessage(playerid, -1, Color_White"Откройте карту в главном меню, после чего нажмите ПКМ по любому месту чтобы установить место назначения для таксиста");
			return 1;
		}
		case D_GiveGun:
		{
			if(!response)
			{
				DeletePVar(playerid, "GiveGunMoney");
				return DeletePVar(playerid, "GiveGunID");
			}

			SetPVarInt(playerid, "GiveGunType", listitem);

			new str[200];
			format(str, sizeof(str), Color_White"Введите количество оружие которое хотите создать\n\
			Вы выбрали: "Main_Color"%s\n\
			"Color_White"Требуется материалов на 1 штуку: "Main_Color"%d\n\
			"Color_White"Патрон в 1 штуке: "Main_Color"%d", Items[GunInfo[listitem][ItemID]][ItemName], GunInfo[listitem][MaterialCount], Items[GunInfo[listitem][ItemID]][AmmoCount]);

			ShowDialog(playerid, D_GiveGun_Count, DIALOG_STYLE_INPUT, Main_Color"Создание оружия", str, Color_White"Далее", Color_White"Закрыть");

			return 1;
		}
		case D_GiveGun_Count:
		{
			if(!response)
			{
				DeletePVar(playerid, "GiveGunMoney");
				DeletePVar(playerid, "GiveGunType");
				return DeletePVar(playerid, "GiveGunID");
			}

			new indx = GetPVarInt(playerid, "GiveGunType");

			if(!strlen(inputtext))
			{
				new str[200];
				format(str, sizeof(str), Color_White"Введите количество оружие которое хотите создать\n\
				Вы выбрали: "Main_Color"%s\n\
				"Color_White"Требуется материалов на 1 штуку: "Main_Color"%d\n\
				"Color_White"Патрон в 1 штуке: "Main_Color"%d\n\
				"Color_Red"Вы ничего не ввели", Items[GunInfo[indx][ItemID]][ItemName], GunInfo[indx][MaterialCount], Items[GunInfo[indx][ItemID]][AmmoCount]);

				ShowDialog(playerid, D_GiveGun_Count, DIALOG_STYLE_INPUT, Main_Color"Создание оружия", str, Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) <= 0)
			{
				new str[200];
				format(str, sizeof(str), Color_White"Введите количество оружие которое хотите создать\n\
				Вы выбрали: "Main_Color"%s\n\
				"Color_White"Требуется материалов на 1 штуку: "Main_Color"%d\n\
				"Color_White"Патрон в 1 штуке: "Main_Color"%d\n\
				"Color_Red"Неверное количество", Items[GunInfo[indx][ItemID]][ItemName], GunInfo[indx][MaterialCount], Items[GunInfo[indx][ItemID]][AmmoCount]);

				ShowDialog(playerid, D_GiveGun_Count, DIALOG_STYLE_INPUT, Main_Color"Создание оружия", str, Color_White"Далее", Color_White"Закрыть");
			}

			new money = GetPVarInt(playerid, "GiveGunMoney");
			new id = GetPVarInt(playerid, "GiveGunID");
			DeletePVar(playerid, "GiveGunID");
			DeletePVar(playerid, "GiveGunType");
			DeletePVar(playerid, "GiveGunMoney");

			if(money)
			{

				new count = strval(inputtext) * GunInfo[indx][MaterialCount];

				if(GetItemCountInInventory(playerid, ItemMaterial) < count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно материалов");

				new str[300];
				format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s "Color_White"купить "Main_Color"%s (%dшт.) "Color_White"за "Color_Green"%d$", pInfo[id][pName], Items[GunInfo[indx][ItemID]][ItemName], strval(inputtext), money);
				SendClientMessage(playerid, -1, str);
				SendClientMessage(playerid, -1, "Используйте /undo sellgun чтобы отменить свое предложение");

				str[0] = EOS;
				format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам купить "Main_Color"%s (%dшт.) "Color_White"за "Color_Green"%d$", pInfo[playerid][pName], Items[GunInfo[indx][ItemID]][ItemName], strval(inputtext), money);
				SendClientMessage(id, -1, str);
				SendClientMessage(id, -1, "Используйте /accept sellgun принять предложение или /cancel sellgun чтобы отменить предложение");

				SetPlayerOffer(playerid, id, OfferID_SellGun, money, strval(inputtext), indx);
			}
			else
			{

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(id, X, Y, Z);
				if(playerid != id && (!IsPlayerInRangeOfPoint(playerid, 1.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id))) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите собрать оружие");

				new count = strval(inputtext) * GunInfo[indx][MaterialCount];

				if(!RemovePlayerInventory(playerid, ItemMaterial, count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно материалов");

				if(!AddPlayerInventory(id, GunInfo[indx][ItemID], strval(inputtext)))
				{
					AddPlayerInventory(playerid, ItemMaterial, count);
					if(id != playerid)
					{
						SendClientMessage(id, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно места в инвентаре чтобы взять оружие");
						SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока которому вы хотите дать оружие недостаточно места в инвентаре");
					}
					else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно места в инвентаре чтобы сделать оружие");
					return 1;
				}

				if(id != playerid)
				{
					UpdatePlayerSkillEx(playerid, GunDealler, strval(inputtext));

					new str[100];
					format(str, sizeof(str), "собрал(а) %s и передал(а) %s", Items[GunInfo[indx][ItemID]][ItemName], pInfo[id][pName]);
					ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

					format(str, sizeof(str), Color_White"%s помещен в ваш инвентарь", Items[GunInfo[indx][ItemID]][ItemName]);
					SendClientMessage(id, -1, str);
				}
				else
				{
					new str[100];
					format(str, sizeof(str), "собрал(а) %s", Items[GunInfo[indx][ItemID]][ItemName]);
					ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

					format(str, sizeof(str), Color_White"%s помещен в ваш инвентарь", Items[GunInfo[indx][ItemID]][ItemName]);
					SendClientMessage(playerid, -1, str);
				}
			}
			return 1;
		}
		case D_Log_Type:
		{
			if(!response) return pc_cmd_apanel(playerid);
			SetPVarInt(playerid, "Log_Type", listitem+1);
			SetPVarInt(playerid, "Log_List", 1);

			new query[200];
			mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
			mysql_tquery(DB, query, "ShowLogList", "d", playerid);
			return 1;
		}
		case D_Log_Info:
		{
			if(!response)
			{
				DeletePVar(playerid, "RawMateriallTransfer");
				DeletePVar(playerid, "Log_List");
				DeletePVar(playerid, "Log_Count");
				return pc_cmd_logs(playerid);
			}

			new count = GetPVarInt(playerid, "Log_Count");
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Log_List") > ListCount) NextButton = (count%10);
			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Log_List") * 10 <  count) SetPVarInt(playerid, "Log_List", GetPVarInt(playerid, "Log_List")+1);
				else SetPVarInt(playerid, "Log_List", GetPVarInt(playerid, "Log_List")-1);

				new query[200];
				mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
				mysql_tquery(DB, query, "ShowLogList", "d", playerid);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Log_List", GetPVarInt(playerid, "Log_List")-1);

				new query[200];
				mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
				mysql_tquery(DB, query, "ShowLogList", "d", playerid);
			}
			else
			{
				new indx = (GetPVarInt(playerid, "Log_List")*10)+listitem-10;

				new query[200];
				mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
				mysql_tquery(DB, query, "ShowLogInfo", "dd", playerid, indx);
			}

			return 1;
		}
		case D_Log_Info_Row:
		{
			if(!response)
			{
				DeletePVar(playerid, "Log_Type");
				DeletePVar(playerid, "Log_List");
				DeletePVar(playerid, "Log_Count");
				return 1;
			}

			new query[200];
			mysql_format(DB, query, sizeof(query), "SELECT `log`.*, `account`.`Name` FROM `log` INNER JOIN `account` ON `account`.`ID` = `log`.`ID` WHERE `Type` = '%d'", GetPVarInt(playerid, "Log_Type"));
			mysql_tquery(DB, query, "ShowLogList", "d", playerid);
			return 1;
		}
		case D_Bots_Settings:
		{
			if(!response) return pc_cmd_apanel(playerid);
			switch(listitem)
			{
				case 0:
				{
					SetPVarInt(playerid, "Bot_Name_List", 1);
					mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
				}
				case 1: ShowBotTime(playerid);
				case 2:
				{
					if(!BotStatus)
					{
						pc_cmd_bots(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Боты уже выключены");
					}

					BotStatus = false;
					BotCount = 0;

					foreach(new i: Player) if(IsBot[i]) Kick(i);

					new query[200];
					mysql_format(DB, query, sizeof(query), "UPDATE `bot_time` SET `Status` = '%d'", _:BotStatus);
					mysql_tquery(DB, query);
					pc_cmd_bots(playerid);
				}
				case 3:
				{
					if(BotStatus)
					{
						pc_cmd_bots(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Боты уже включены");
					}

					BotStatus = true;

					new query[200];
					mysql_format(DB, query, sizeof(query), "UPDATE `bot_time` SET `Status` = '%d'", _:BotStatus);
					mysql_tquery(DB, query);
					pc_cmd_bots(playerid);
				}
			}
			return 1;
		}
		case D_Bots_Name:
		{
			if(!response)
			{
				DeletePVar(playerid, "Bot_Name_List");
				DeletePVar(playerid, "Bot_Name_Count");
				return pc_cmd_bots(playerid);
			}
			if(!listitem) return ShowDialog(playerid, D_Bots_Name_Add, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Ники ботов", Color_White"Введите ник\nВ дальнейшем при подключении боты будут случайныи образом выбирать ники из списка", "Далее", "Назад");

			new count = GetPVarInt(playerid, "Bot_Name_Count");
			new ListCount = count/10;
			new NextButton = 10;
			if(GetPVarInt(playerid, "Bot_Name_List") > ListCount) NextButton = (count%10);

			NextButton++;

			new LastButton = NextButton+1;

			if(listitem == NextButton && count > 10)
			{
				if(GetPVarInt(playerid, "Bot_Name_List") * 10 <  count) SetPVarInt(playerid, "Bot_Name_List", GetPVarInt(playerid, "Bot_Name_List")+1);
				else SetPVarInt(playerid, "Bot_Name_List", GetPVarInt(playerid, "Bot_Name_List")-1);

				mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
			}
			else if(listitem == LastButton && count > 10)
			{
				SetPVarInt(playerid, "Bot_Name_List", GetPVarInt(playerid, "Bot_Name_List")-1);

				mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
			}
			else
			{
				new indx = (GetPVarInt(playerid, "Bot_Name_List")*10)+listitem-11;

				mysql_tquery(DB, "SELECT * FROM `bot_name`", "RemoveBotName", "dd", playerid, indx);
			}

			return 1;
		}
		case D_Bots_Name_Add:
		{
			if(!response) return mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, D_Bots_Name_Add, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Ники ботов", Color_White"Введите ник\nВ дальнейшем при подключении боты будут случайныи образом выбирать ники из списка\n"Color_Red"Вы ничего не ввели", "Далее", "Назад");
			if(strlen(inputtext) > MAX_PLAYER_NAME) return ShowDialog(playerid, D_Bots_Name_Add, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Ники ботов", Color_White"Введите ник\nВ дальнейшем при подключении боты будут случайныи образом выбирать ники из списка\n"Color_Red"Длина ника не может быть более 24х символов", "Далее", "Назад");

			new query[100];
			mysql_format(DB, query, sizeof(query), "SELECT * FROM `bot_name` WHERE `Name` = '%s'", inputtext);
			mysql_tquery(DB, query, "AddNewBotName", "ds", playerid, inputtext);
			return 1;
		}
		case D_Bots_Name_Remove:
		{
			if(!response)
			{
				DeletePVar(playerid, "BotName");
				return mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
			}
			new Name[MAX_PLAYER_NAME+1];
			GetPVarString(playerid, "BotName", Name, sizeof(Name));
			DeletePVar(playerid, "BotName");

			new query[100];
			mysql_format(DB, query, sizeof(query), "DELETE FROM `bot_name` WHERE `Name` = '%s'", Name);
			mysql_tquery(DB, query);

			format(query, sizeof(query), Color_White"Ник "Main_Color"%s"Color_White" удален");
			SendClientMessage(playerid, -1, query);

			mysql_tquery(DB, "SELECT * FROM `bot_name`", "ShowBotNameList", "d", playerid);
			return 1;
		}
		case D_Bots_Time:
		{
			if(!response) return pc_cmd_bots(playerid);

			SetPVarInt(playerid, "BotTime", listitem);
			ShowDialog(playerid, D_Bots_Set_Time, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Почасовой онлайн", Color_White"Введите количество онлайна которое должно держаться на сервере\n\
			в выбранное время\n\n\
			"Main_Color"Внимание"Color_White": Если указать 10, а на сервере будет онлайн 9, то будет подключен 1 бот", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Bots_Set_Time:
		{
			if(!response)
			{
				DeletePVar(playerid, "BotTime");
				return ShowBotTime(playerid);
			}

			if(!strlen(inputtext))
			{
				ShowDialog(playerid, D_Bots_Set_Time, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Почасовой онлайн", Color_White"Введите количество онлайна которое должно держаться на сервере\n\
				в выбранное время\n\n\
				"Main_Color"Внимание"Color_White": Если указать 10, а на сервере будет онлайн 9, то будет подключен 1 бот\n\
				"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) < 0)
			{
				ShowDialog(playerid, D_Bots_Set_Time, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Почасовой онлайн", Color_White"Введите количество онлайна которое должно держаться на сервере\n\
				в выбранное время\n\n\
				"Main_Color"Внимание"Color_White": Если указать 10, а на сервере будет онлайн 9, то будет подключен 1 бот\n\
				"Color_Red"Онлайн не может быть меньше 0", Color_White"Далее", Color_White"Закрыть");
			}
			if(strval(inputtext) > 1000)
			{
				ShowDialog(playerid, D_Bots_Set_Time, DIALOG_STYLE_INPUT, Main_Color"Админ панель || "Color_White"Почасовой онлайн", Color_White"Введите количество онлайна которое должно держаться на сервере\n\
				в выбранное время\n\n\
				"Main_Color"Внимание"Color_White": Если указать 10, а на сервере будет онлайн 9, то будет подключен 1 бот\n\
				"Color_Red"Онлайн не может быть больше 1000", Color_White"Далее", Color_White"Закрыть");
			}

			new indx = GetPVarInt(playerid, "BotTime");
			DeletePVar(playerid, "BotTime");
			BotTime[indx] = strval(inputtext);

			new query[200];
			for(new i = 0; i < sizeof(BotTime); i++)
			{
				if(!i) format(query, sizeof(query), "%d", BotTime[i]);
				else format(query, sizeof(query), "%s,%d", query, BotTime[i]);
			}

			mysql_format(DB, query, sizeof(query), "UPDATE `bot_time` SET `Time` = '%s'", query);
			mysql_tquery(DB, query);

			ShowBotTime(playerid);
			return 1;
		}
		case D_Stash:
		{
			if(!response) return 1;

			SetPVarInt(playerid, "StashType", listitem+1);
			ShowDialog(playerid, D_Stash_Select, DIALOG_STYLE_LIST, Main_Color"Тайник", Color_White"Положить\nВзять", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_Stash_Select:
		{
			if(!response) return DeletePVar(playerid, "StashType");
			if(GetPVarInt(playerid, "StashType") == 1)
			{
				if(!listitem) ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите положить в тайник", Color_White"Далее", Color_White"Закрыть");
				else ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите взять из тайника", Color_White"Далее", Color_White"Закрыть");
			}
			else
			{
				if(!listitem) ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите положить в тайник", Color_White"Далее", Color_White"Закрыть");
				else ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите взять из тайника", Color_White"Далее", Color_White"Закрыть");
			}
			return 1;
		}
		case D_Stash_Give:
		{
			if(!response) return DeletePVar(playerid, "StashType");

			if(GetPVarInt(playerid, "StashType") == 1)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите положить в тайник\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите положить в тайник\n"Color_Red"Количество должно быть больше 0", Color_White"Далее", Color_White"Закрыть");
				if(GetItemCountInInventory(playerid, ItemMaterial) < strval(inputtext)) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите положить в тайник\n"Color_Red"У вас нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");

				pInfo[playerid][pStashMaterials] += strval(inputtext);
				RemovePlayerInventory(playerid, ItemMaterial, strval(inputtext));
				SavePlayerInt(playerid, "StashMaterials", pInfo[playerid][pStashMaterials]);

				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "положил(а) что-то в тайник");
				ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
				DeletePVar(playerid, "StashType");
			}
			else
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите положить в тайник\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите положить в тайник\n"Color_Red"Количество должно быть больше 0", Color_White"Далее", Color_White"Закрыть");
				if(GetItemCountInInventory(playerid, ItemDrugs) < strval(inputtext)) return ShowDialog(playerid, D_Stash_Give, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите положить в тайник\n"Color_Red"У вас нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");

				pInfo[playerid][pStashDrugs] += strval(inputtext);
				RemovePlayerInventory(playerid, ItemDrugs, strval(inputtext));
				SavePlayerInt(playerid, "StashDrugs", pInfo[playerid][pStashDrugs]);

				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "положил(а) что-то в тайник");
				ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
				DeletePVar(playerid, "StashType");
			}
			return 1;
		}
		case D_Stash_Take:
		{
			if(!response) return DeletePVar(playerid, "StashType");
			if(GetPVarInt(playerid, "StashType") == 1)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите взять из тайника\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите взять из тайника\n"Color_Red"Количество должно быть больше 0", Color_White"Далее", Color_White"Закрыть");
				if(pInfo[playerid][pStashMaterials] < strval(inputtext)) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите взять из тайника\n"Color_Red"В тайнике нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");
				if(!AddPlayerInventory(playerid, ItemMaterial, strval(inputtext))) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество материалов которое хотите взять из тайника\n"Color_Red"Недостаточно места в инвентаре", Color_White"Далее", Color_White"Закрыть");

				pInfo[playerid][pStashMaterials] -= strval(inputtext);
				SavePlayerInt(playerid, "StashMaterials", pInfo[playerid][pStashMaterials]);

				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "взял(а) что-то из тайника");
				ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
				DeletePVar(playerid, "StashType");

			}
			else
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите взять из тайника\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				if(strval(inputtext) <= 0) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите взять из тайника\n"Color_Red"Количество должно быть больше 0", Color_White"Далее", Color_White"Закрыть");
				if(pInfo[playerid][pStashDrugs] < strval(inputtext)) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите взять из тайника\n"Color_Red"В тайнике нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");
				if(!AddPlayerInventory(playerid, ItemDrugs, strval(inputtext))) return ShowDialog(playerid, D_Stash_Take, DIALOG_STYLE_INPUT, Main_Color"Тайник", Color_White"Введите количество наркотиков которое хотите взять из тайника\n"Color_Red"Недостаточно места в инвентаре", Color_White"Далее", Color_White"Закрыть");

				pInfo[playerid][pStashDrugs] -= strval(inputtext);
				SavePlayerInt(playerid, "StashDrugs", pInfo[playerid][pStashDrugs]);

				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "взял(а) что-то из тайника");
				ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, true);
				DeletePVar(playerid, "StashType");
			}
			return 1;
		}
		case D_Neon:
		{
			if(!response) return 1;

			switch(listitem)
			{
				case 0: SetPVarInt(playerid, "NeonID", 18648);
		        case 1: SetPVarInt(playerid, "NeonID", 18647);
		        case 2: SetPVarInt(playerid, "NeonID", 18649);
		        case 3: SetPVarInt(playerid, "NeonID", 18652);
		        case 4: SetPVarInt(playerid, "NeonID", 18651);
		        case 5: SetPVarInt(playerid, "NeonID", 18650);
			}

			ShowDialog(playerid, D_Neon_Position, DIALOG_STYLE_LIST, Main_Color"Установка неона", Color_White"Левая сторона\nПравая сторона\nОбе стороны", Color_White"Далее", Color_White"Закрыть");

			return 1;
		}
		case D_Neon_Position:
		{
			if(!response) return DeletePVar(playerid, "NeonID");

			new modelid = GetPVarInt(playerid, "NeonID");
			DeletePVar(playerid, "NeonID");

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");

            switch (listitem)
            {
                case 0:
                {
    				if(vInfo[vehicleid][vNeon][0] && IsValidDynamicObject(vInfo[vehicleid][vNeon][0])) DestroyDynamicObject(vInfo[vehicleid][vNeon][0]);
    				vInfo[vehicleid][vNeon][0] = CreateDynamicObject(modelid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
    				AttachDynamicObjectToVehicle(vInfo[vehicleid][vNeon][0], vehicleid, -0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
    				SendClientMessage(playerid, -1, Color_White"Неон на левую сторону установлен");
    			}
                case  1:
                {
    				if(vInfo[vehicleid][vNeon][1] && IsValidDynamicObject(vInfo[vehicleid][vNeon][1])) DestroyDynamicObject(vInfo[vehicleid][vNeon][1]);
    				vInfo[vehicleid][vNeon][1] = CreateDynamicObject(modelid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
    				AttachDynamicObjectToVehicle(vInfo[vehicleid][vNeon][1], vehicleid, 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
    				SendClientMessage(playerid, -1, Color_White"Неон на правую сторону установлен");
    			}
                case 2:
                {
                    if(vInfo[vehicleid][vNeon][0] && IsValidDynamicObject(vInfo[vehicleid][vNeon][0])) DestroyDynamicObject(vInfo[vehicleid][vNeon][0]);
    				vInfo[vehicleid][vNeon][0] = CreateDynamicObject(modelid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
    				AttachDynamicObjectToVehicle(vInfo[vehicleid][vNeon][0], vehicleid, -0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
    				SendClientMessage(playerid, -1, Color_White"Неон на левую сторону установлен");

                    if(vInfo[vehicleid][vNeon][1] && IsValidDynamicObject(vInfo[vehicleid][vNeon][1])) DestroyDynamicObject(vInfo[vehicleid][vNeon][1]);
    				vInfo[vehicleid][vNeon][1] = CreateDynamicObject(modelid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
    				AttachDynamicObjectToVehicle(vInfo[vehicleid][vNeon][1], vehicleid, 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
    				SendClientMessage(playerid, -1, Color_White"Неон на правую сторону установлен");
                }
            }
			Streamer_Update(playerid);
			return 1;
		}
		case D_War_Select_Zone:
		{
			if(!response) return 1;

			for(new i = 0; i < MAX_FRACTION; i++)
			{
				if(GangWarZone[i] == listitem+1 && GangWarStatus[i] == Gang_Status_War)
				{
					pc_cmd_war(playerid);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это место для войны уже занято какой-то бандой");
				}
			}

			SetPVarInt(playerid, "StartGangWarZone", listitem+1);

			new str[200];
			for(new i = Fraction_Vagos; i <= Fraction_FarmOfTruth; i++)
			{
				format(str, sizeof(str), "%s%s\n", str, FractionName[i]);
			}
			format(str, sizeof(str), Color_White"%s", str);

			ShowDialog(playerid, D_War_Select_Gang, DIALOG_STYLE_LIST, Main_Color"Выбор оппонента", str, Color_White"Далее", Color_White"Закрыть");

			return 1;
		}
		case D_War_Select_Gang:
		{
			if(!response) return DeletePVar(playerid, "StartGangWarZone");

			new ZoneID = GetPVarInt(playerid, "StartGangWarZone");
			DeletePVar(playerid, "StartGangWarZone");

			if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");

			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже с кем-то ведет войну");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже предложила войну кому-то");

			new FractionID = listitem+Fraction_Vagos;

			if(FractionID == pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете объявить войну своей банде");

			if(GangWarStatus[FractionID] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже с кем-то ведет войну");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этой банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже предложила войну кому-то");

			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
			SetPVarInt(playerid, "StartGangWarZone", ZoneID);

			ShowDialog(playerid, D_War_Select_Bet, DIALOG_STYLE_LIST, Main_Color"Выбор ставки", Color_White"Деньги\nМатериалы\nНаркотики", Color_White"Далее", Color_White"Закрыть");
			return 1;
		}
		case D_War_Select_Bet:
		{
			if(!response)
			{
				DeletePVar(playerid, "StartGangWarZone");
				return DeletePVar(playerid, "StartGangWarFraction");
			}

			new ZoneID = GetPVarInt(playerid, "StartGangWarZone");
			DeletePVar(playerid, "StartGangWarZone");

			new FractionID = GetPVarInt(playerid, "StartGangWarFraction");
			DeletePVar(playerid, "StartGangWarFraction");

			if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");

			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже с кем-то ведет войну");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже предложила войну кому-то");

			if(GangWarStatus[FractionID] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже с кем-то ведет войну");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этой банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже предложила войну кому-то");

			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
			SetPVarInt(playerid, "StartGangWarZone", ZoneID);

			switch(listitem)
			{
				case 0:
				{
					SetPVarInt(playerid, "StartGangWarBetType", Gang_Bet_Type_Money);
					ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война", Color_White"Далее", Color_White"Закрыть");
				}
				case 1:
				{
					SetPVarInt(playerid, "StartGangWarBetType", Gang_Bet_Type_Materials);
					ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество материалов на которые будет идти война", Color_White"Далее", Color_White"Закрыть");
				}
				case 2:
				{
					SetPVarInt(playerid, "StartGangWarBetType", Gang_Bet_Type_Drugs);
					ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество наркотиков на которые будет идти война", Color_White"Далее", Color_White"Закрыть");
				}
			}
			return 1;
		}
		case D_War_Set_Bet:
		{
			if(!response)
			{
				DeletePVar(playerid, "StartGangWarZone");
				DeletePVar(playerid, "StartGangWarBetType");
				return DeletePVar(playerid, "StartGangWarFraction");
			}

			new ZoneID = GetPVarInt(playerid, "StartGangWarZone");
			DeletePVar(playerid, "StartGangWarZone");

			new FractionID = GetPVarInt(playerid, "StartGangWarFraction");
			DeletePVar(playerid, "StartGangWarFraction");

			new BetType = GetPVarInt(playerid, "StartGangWarBetType");
			DeletePVar(playerid, "StartGangWarBetType");

			if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");

			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже с кем-то ведет войну");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже предложила войну кому-то");

			if(GangWarStatus[FractionID] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже с кем-то ведет войну");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этой банде уже кто-то сделал предложение о войне");
			if(GangWarStatus[FractionID] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта банда уже предложила войну кому-то");

			if(!strlen(inputtext))
			{
                SetPVarInt(playerid, "StartGangWarZone", ZoneID);
    			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                SetPVarInt(playerid, "StartGangWarBetType", BetType);

				switch(BetType)
				{
					case Gang_Bet_Type_Money: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					case Gang_Bet_Type_Materials: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество материалов на которые будет идти война\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
					case Gang_Bet_Type_Drugs: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество наркотиков на которые будет идти война\n"Color_Red"Вы ничего не ввели", Color_White"Далее", Color_White"Закрыть");
				}
			}

			new count = strval(inputtext);

			if(count < 1)
			{
                SetPVarInt(playerid, "StartGangWarZone", ZoneID);
    			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                SetPVarInt(playerid, "StartGangWarBetType", BetType);

				switch(BetType)
				{
					case Gang_Bet_Type_Money: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"Ставка не может быть меньше 1", Color_White"Далее", Color_White"Закрыть");
					case Gang_Bet_Type_Materials: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество материалов на которые будет идти война\n"Color_Red"Ставка не может быть меньше 1", Color_White"Далее", Color_White"Закрыть");
					case Gang_Bet_Type_Drugs: return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите количество наркотиков на которые будет идти война\n"Color_Red"Ставка не может быть меньше 1", Color_White"Далее", Color_White"Закрыть");
				}
			}

			new str[200];
			switch(BetType)
			{
				case Gang_Bet_Type_Money:
				{
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации нет такой суммы", Color_White"Далее", Color_White"Закрыть");
                    }
                    if(FractionWare[FractionID][FractionWareMoney] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации оппонента нет такой суммы", Color_White"Далее", Color_White"Закрыть");
                    }

					format(str, sizeof(str), Color_White"Банда "Main_Color"%s "Color_White"объявила войну вашей банде. Ставка: "Color_Green"%d$", FractionName[pInfo[playerid][pMembers]], count);
					SendRMessageEx(FractionID, str);
					SendRMessageEx(FractionID, "/accept war - Принять войну || /cancel war - Отказаться от войны");

					format(str, sizeof(str), Main_Color"%s %s "Color_White"объявил войну банде "Main_Color"%s"Color_White". Ставка: "Color_Green"%d$", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], FractionName[FractionID], count);
					SendRMessage(playerid, str);

					GangWarBetType[FractionID] = Gang_Bet_Type_Money;
					GangWarBetType[pInfo[playerid][pMembers]] = Gang_Bet_Type_Money;
				}
				case Gang_Bet_Type_Materials:
				{
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");
                    }
                    if(FractionWare[FractionID][FractionWareMaterials] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации оппонента нет такого количества материалов", Color_White"Далее", Color_White"Закрыть");
                    }

					format(str, sizeof(str), Color_White"Банда "Main_Color"%s "Color_White"объявила войну вашей банде. Ставка: "Main_Color"%d "Color_White"материалов", FractionName[pInfo[playerid][pMembers]], count);
					SendRMessageEx(FractionID, str);
					SendRMessageEx(FractionID, "/accept war - Принять войну || /cancel war - Отказаться от войны");

					format(str, sizeof(str), Main_Color"%s %s "Color_White"объявил войну банде "Main_Color"%s"Color_White". Ставка: "Main_Color"%d "Color_White"материалов", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], FractionName[FractionID], count);
					SendRMessage(playerid, str);

					GangWarBetType[FractionID] = Gang_Bet_Type_Materials;
					GangWarBetType[pInfo[playerid][pMembers]] = Gang_Bet_Type_Materials;
				}
				case Gang_Bet_Type_Drugs:
				{
					if(FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");
                    }
                    if(FractionWare[FractionID][FractionWareDrugs] < count)
                    {
                        SetPVarInt(playerid, "StartGangWarZone", ZoneID);
            			SetPVarInt(playerid, "StartGangWarFraction", FractionID);
                        SetPVarInt(playerid, "StartGangWarBetType", BetType);
                        return ShowDialog(playerid, D_War_Set_Bet, DIALOG_STYLE_INPUT, Main_Color"Выбор ставки", Color_White"Введите сумму на которую будет идти война\n"Color_Red"На складе организации оппонента нет такого количества наркотиков", Color_White"Далее", Color_White"Закрыть");
                    }

					format(str, sizeof(str), Color_White"Банда "Main_Color"%s "Color_White"объявила войну вашей банде. Ставка: "Main_Color"%d "Color_White"наркотиков", FractionName[pInfo[playerid][pMembers]], count);
					SendRMessageEx(FractionID, str);
					SendRMessageEx(FractionID, "/accept war - Принять войну || /cancel war - Отказаться от войны");

					format(str, sizeof(str), Main_Color"%s %s "Color_White"объявил войну банде "Main_Color"%s"Color_White". Ставка: "Main_Color"%d "Color_White"наркотиков", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], FractionName[FractionID], count);
					SendRMessage(playerid, str);

					GangWarBetType[FractionID] = Gang_Bet_Type_Drugs;
					GangWarBetType[pInfo[playerid][pMembers]] = Gang_Bet_Type_Drugs;
				}
			}

			GangWarBet[FractionID] = count;
			GangWarBet[pInfo[playerid][pMembers]] = count;

			GangWarStatus[FractionID] = Gang_Status_Wait_Accept;
			GangWarStatus[pInfo[playerid][pMembers]] = Gang_Status_Wait_Accept_Request;

			GangWarOpponent[FractionID] = pInfo[playerid][pMembers];
			GangWarOpponent[pInfo[playerid][pMembers]] = FractionID;

			GangWarTimer[FractionID] = 300;
			GangWarTimer[pInfo[playerid][pMembers]] = 300;

			GangWarZone[FractionID] = ZoneID;
			GangWarZone[pInfo[playerid][pMembers]] = ZoneID;
			return 1;
		}
        case D_Paint:
        {
            if(!response) return 1;

            new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");

            if(listitem == GetVehiclePaintJobCount(vInfo[vehicleid][vModel]))
            {
                ChangeVehiclePaintjob(vehicleid, 3);
                SendClientMessage(playerid, -1, Color_White"Винил снят");
            }
            else
            {
                ChangeVehiclePaintjob(vehicleid, listitem);
                SendClientMessage(playerid, -1, Color_White"Винил нанесен");
            }
            return 1;
        }
	}
	///////////////////////////////End Dialog Response///////////////////////////////////////
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "FishingTime"))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid)
		{
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher && vInfo[vehicleid][vRenter] == playerid)
			{
				new FishCount = GetPVarInt(playerid, "FishCount");
				if(FishCount)
				{
					for(new i = 0; i < FishCount; i++)
					{
						new str[100];
						format(str, sizeof(str), "FishPTD_%d", i);

						new PlayerText:FishPTD = PlayerText:GetPVarInt(playerid, str);

						if(playertextid == FishPTD)
						{
							if(random(2))
							{
								PlayerTextDrawHide(playerid, FishPTD);
								PlayerTextDrawDestroy(playerid, FishPTD);

								new SubStr[50];
								format(SubStr, sizeof(SubStr), "FishPTD_%d", FishCount-1);
								SetPVarInt(playerid, str, _:GetPVarInt(playerid, SubStr));
								DeletePVar(playerid, SubStr);

								SendClientMessage(playerid, -1, Color_White"Вы "Color_Green"поймали "Color_White"рыбу, теперь она лежит в вашей лодке");
								vInfo[vehicleid][vItemInVehicle]++;
								format(str, sizeof(str), Main_Color"Рыбы в лодке: %d", vInfo[vehicleid][vItemInVehicle]);
								UpdateDynamic3DTextLabelText(vInfo[vehicleid][vText], -1, str);

								FishCount--;
								if(FishCount <= 0)
								{
									DeletePVar(playerid, "FishCount");
									DeletePVar(playerid, "FishingTime");
									SendClientMessage(playerid, -1, Color_Yellow"Вы поймали всю рыбу, из этого косяка!");
									HideFisherPanel(playerid);
									SetFisherMarker(playerid);
								}
								else SetPVarInt(playerid, "FishCount", FishCount);
							}
							else
							{
								SendClientMessage(playerid, -1, Color_White"Рыба "Color_Red"сорвалась "Color_White"попробуйте ещё раз");
							}
							break;
						}
					}
				}
			}
		}
	}
	else if(GetPVarInt(playerid, "CarUpgrade"))
	{
		if(playertextid == CarUpgradePTD[playerid][9])
		{
			SetPVarInt(playerid, "CarUpgradeList", GetPVarInt(playerid, "CarUpgradeList")-1);
			UpdateCarUpgrade(playerid);
		}
		else if(playertextid == CarUpgradePTD[playerid][10])
		{
			SetPVarInt(playerid, "CarUpgradeList", GetPVarInt(playerid, "CarUpgradeList")+1);
			UpdateCarUpgrade(playerid);
		}
		else
		{
			if(GetPVarInt(playerid, "OpenGarage") && GetPVarInt(playerid, "CarUpgrade") == 1)
			{
				new indx = GetPVarInt(playerid, "CarUpgradeIndx");
				if(pInfo[playerid][pMoney] < CarUpgrade[indx][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого автомобиля");
				if(CarUpgrade[indx][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
				if(CarUpgrade[indx][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

				for(new i = 0; i < sizeof(GaragePTD[]); i++)
				{
					if(GaragePTD[playerid][i] == playertextid)
					{

						new str[150];
						format(str, sizeof(str), "GarageID_%d", i+1);
						new VehID = GetPVarInt(playerid, str);
						if(!VehID)
						{
							AddHouseVehicle(playerid, CarUpgrade[indx][cuCarModel], i+1);
							GivePlayerMoneyEx(playerid, -CarUpgrade[indx][cuCarPrice]);

							GiveCompanyPay(playerid, BusinessCarDelivery, CarUpgrade[indx][cuCarPrice]);

							format(str, sizeof(str), Color_White"Вы приобрели "Main_Color"%s "Color_White"за "Color_Green"%d$", CarName[CarUpgrade[indx][cuCarModel]-400], CarUpgrade[indx][cuCarPrice]);
							SendClientMessage(playerid, -1, str);
							CloseCarUpgrade(playerid);
						}
						else
						{
							SetPVarInt(playerid, "CarUpgradeSlot", i+1);
							format(str, sizeof(str), Color_White"Покупка "Main_Color"%s", CarName[CarUpgrade[indx][cuCarModel]-400]);
							ShowDialog(playerid, D_Car_Buy, DIALOG_STYLE_MSGBOX, str, Color_White"В данном слоте гаража уже есть какое-то транспортное средство\n\
							"Color_White"При покупке транспорта в этот слот, предыдущий транспорт будет удален\n\
							"Color_White"Вы хотите купить транспорт?", Color_White"Да", Color_White"Нет");
						}
					}
				}
			}
			else if(GetPVarInt(playerid, "OpenGarage") && GetPVarInt(playerid, "CarUpgrade") == 2)
			{
				new indx = GetPVarInt(playerid, "CarUpgradeIndx");
				if(pInfo[playerid][pDonateMoney] < CarUpgradeDonate[indx][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно донат рублей для покупки этого автомобиля");
				if(CarUpgradeDonate[indx][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
				if(CarUpgradeDonate[indx][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

				for(new i = 0; i < sizeof(GaragePTD[]); i++)
				{
					if(GaragePTD[playerid][i] == playertextid)
					{

						new str[150];
						format(str, sizeof(str), "GarageID_%d", i+1);
						new VehID = GetPVarInt(playerid, str);
						if(!VehID)
						{
							AddHouseVehicle(playerid, CarUpgradeDonate[indx][cuCarModel], i+1);
							pInfo[playerid][pDonateMoney] -= CarUpgradeDonate[indx][cuCarPrice];
							SavePlayerInt(playerid, "DonateMoney", pInfo[playerid][pDonateMoney]);
							format(str, sizeof(str), Color_White"Вы приобрели "Main_Color"%s "Color_White"за "Color_Green"%d донат рублей", CarName[CarUpgradeDonate[indx][cuCarModel]-400], CarUpgradeDonate[indx][cuCarPrice]);
							SendClientMessage(playerid, -1, str);
							CloseCarUpgrade(playerid);
						}
						else
						{
							SetPVarInt(playerid, "CarUpgradeSlot", i+1);
							format(str, sizeof(str), Color_White"Покупка "Main_Color"%s", CarName[CarUpgradeDonate[indx][cuCarModel]-400]);
							ShowDialog(playerid, D_Car_Buy, DIALOG_STYLE_MSGBOX, str, Color_White"В данном слоте гаража уже есть какое-то транспортное средство\n\
							"Color_White"При покупке транспорта в этот слот, предыдущий транспорт будет удален\n\
							"Color_White"Вы хотите купить транспорт?", Color_White"Да", Color_White"Нет");
						}
					}
				}
			}
			else if(GetPVarInt(playerid, "CarUpgrade") == 1)
			{
				for(new i = 0; i < 9; i++)
				{
					if(playertextid == CarUpgradePTD[playerid][i])
					{
						new str[200];
						new List = GetPVarInt(playerid, "CarUpgradeList");
						new indx = (List-1)*9;
						if(pInfo[playerid][pMoney] < CarUpgrade[indx+i][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для покупки этого автомобиля");
						if(CarUpgrade[indx+i][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
						if(CarUpgrade[indx+i][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

						format(str, sizeof(str), Color_White"Вы выбрали "Main_Color"%s "Color_White"её стоимость "Color_Green"%d$", CarName[CarUpgrade[indx+i][cuCarModel]-400], CarUpgrade[indx+i][cuCarPrice]);
						SendClientMessage(playerid, -1, str);
						SendClientMessage(playerid, -1, Color_White"Выберите слот в вашем гараже в котором хотели бы расположить новый транспорт");

						for(new j = 0; j < sizeof(CarUpgradePTD[]); j++) PlayerTextDrawHide(playerid, CarUpgradePTD[playerid][j]);
						for(new j = 0; j < sizeof(CarUpgradePTDText[]); j++) PlayerTextDrawHide(playerid, CarUpgradePTDText[playerid][j]);
						TextDrawHideForPlayer(playerid, CarUpgradeTD);

						SetPVarInt(playerid, "CarUpgradeIndx", indx+i);

						str[0] = EOS;
						mysql_format(DB, str, sizeof(str), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d'", VehicleTypePlayer, pInfo[playerid][pID]);
						mysql_tquery(DB, str, "ShowGarage", "d", playerid);
					}
				}
			}
			else if(GetPVarInt(playerid, "CarUpgrade") == 2)
			{
				for(new i = 0; i < 9; i++)
				{
					if(playertextid == CarUpgradePTD[playerid][i])
					{
						new str[200];
						new List = GetPVarInt(playerid, "CarUpgradeList");
						new indx = (List-1)*9;
						if(pInfo[playerid][pDonateMoney] < CarUpgradeDonate[indx+i][cuCarPrice]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно донат рублей для покупки этого автомобиля");
						if(CarUpgradeDonate[indx+i][cuCarType] == CarUpgradeTypeVIP1 && pInfo[playerid][pLevel] < 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 1 доступен с 15го уровня");
						if(CarUpgradeDonate[indx+i][cuCarType] == CarUpgradeTypeVIP2 && pInfo[playerid][pLevel] < 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Транспорт VIP 2 доступен с 20го уровня");

						format(str, sizeof(str), Color_White"Вы выбрали "Main_Color"%s "Color_White"её стоимость "Color_Green"%d донат рублей", CarName[CarUpgradeDonate[indx+i][cuCarModel]-400], CarUpgradeDonate[indx+i][cuCarPrice]);
						SendClientMessage(playerid, -1, str);
						SendClientMessage(playerid, -1, Color_White"Выберите слот в вашем гараже в котором хотели бы расположить новый транспорт");

						for(new j = 0; j < sizeof(CarUpgradePTD[]); j++) PlayerTextDrawHide(playerid, CarUpgradePTD[playerid][j]);
						for(new j = 0; j < sizeof(CarUpgradePTDText[]); j++) PlayerTextDrawHide(playerid, CarUpgradePTDText[playerid][j]);
						TextDrawHideForPlayer(playerid, CarUpgradeTD);

						SetPVarInt(playerid, "CarUpgradeIndx", indx+i);

						str[0] = EOS;
						mysql_format(DB, str, sizeof(str), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d'", VehicleTypePlayer, pInfo[playerid][pID]);
						mysql_tquery(DB, str, "ShowGarage", "d", playerid);
					}
				}
			}
		}
	}
	else if(GetPVarInt(playerid, "OpenGarage"))
	{
		for(new i = 0; i < sizeof(GaragePTD[]); i++)
		{
			if(GaragePTD[playerid][i] == playertextid)
			{
				if(!pInfo[playerid][pHouseID]) CloseGarage(playerid);
				if(pInfo[playerid][pVehicleID])
				{
					if(GetVehicleDistanceFromPoint(pInfo[playerid][pVehicleID], hInfo[pInfo[playerid][pHouseID]][hCarX], hInfo[pInfo[playerid][pHouseID]][hCarY], hInfo[pInfo[playerid][pHouseID]][hCarZ]) > 10.0)
					{
						CloseGarage(playerid);
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для смены транспорта, ваше текущее тс должно находится возле места его стоянки");
					}
				}
				new str[150];
				format(str, sizeof(str), "GarageID_%d", i+1);
				new VehID = GetPVarInt(playerid, str);
				if(!VehID) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В этом слоте нет транспорта");
				if(vInfo[pInfo[playerid][pVehicleID]][vID] == VehID) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот транспорт уже выбран");
				UnloadHouseVehicle(playerid);
				ResecelctHouseVehicle(playerid, VehID);
				str[0] = EOS;
				mysql_format(DB, str, sizeof(str), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d' AND `Selected` = '1'", VehicleTypePlayer, pInfo[playerid][pID]);
				mysql_tquery(DB, str, "LoadVehicle", "d", playerid);
				CloseGarage(playerid);
			}
		}
	}
	else if(GetPVarInt(playerid, "CasinoTable"))
	{
		new TableID = GetPVarInt(playerid, "CasinoTable");
		if(TableID)
		{
			TableID--;
			if(CasinoPTD[playerid][5] == playertextid)
			{
				for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
				{
					if(CasinoTable[TableID][CasTabPlayers][i] == playerid && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWaitAction && CasinoTable[TableID][CasTabStatus] && CasinoTable[TableID][CasTabTimer])
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice)
						{
							CasinoTable[TableID][CasTabPlayersScore][i] = 1+random(6);
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerRolled;

							ApplyAnimation(CasinoTable[TableID][CasTabPlayers][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
							ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "бросает кости");

							new str[200];
							format(str, sizeof(str), Main_Color"%s "Color_White"выпадает "Main_Color"%d", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName], CasinoTable[TableID][CasTabPlayersScore][i]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Points)
						{
							new score = 6+random(6);
							CasinoTable[TableID][CasTabPlayersScore][i] += score;
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerRolled;

							ApplyAnimation(CasinoTable[TableID][CasTabPlayers][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
							ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "берет карту");

							new str[100];
							format(str, sizeof(str), Main_Color"%s "Color_White"взял карту наминалом "Main_Color"%d", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName], score);
							SendMessageTable(TableID, str);

							if(CasinoTable[TableID][CasTabPlayersScore][i] == 21)
							{
								str[0] = EOS;
								format(str, sizeof(str), Main_Color"%s "Color_White"набрал "Main_Color"21", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
								SendMessageTable(TableID, str);
							}
							else if(CasinoTable[TableID][CasTabPlayersScore][i] > 21)
							{
								str[0] = EOS;
								format(str, sizeof(str), Main_Color"%s "Color_White"перебрал", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
								SendMessageTable(TableID, str);
							}

							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
						{
							CasinoTable[TableID][CasTabPlayersScore][i] = 1; // Red
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerRolled;

							ApplyAnimation(CasinoTable[TableID][CasTabPlayers][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
							ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "сделал(а) ставку");

							new str[100];
							format(str, sizeof(str), Main_Color"%s "Color_White"поставил на "Main_Color"красное", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						break;
					}
				}
			}
			else if(CasinoPTD[playerid][6] == playertextid)
			{
				for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
				{
					if(CasinoTable[TableID][CasTabPlayers][i] == playerid && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWaitAction && CasinoTable[TableID][CasTabStatus] && CasinoTable[TableID][CasTabTimer])
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points)
						{
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerPass;

							new str[100];
							format(str, sizeof(str), Main_Color"%s "Color_White"спасовал", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
						{
							CasinoTable[TableID][CasTabPlayersScore][i] = 2; // Green
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerRolled;

							ApplyAnimation(CasinoTable[TableID][CasTabPlayers][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
							ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "сделал(а) ставку");

							new str[100];
							format(str, sizeof(str), Main_Color"%s "Color_White"поставил на "Main_Color"зеленое", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						break;
					}
				}
			}
			else if(CasinoPTD[playerid][7] == playertextid)
			{
				for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
				{
					if(CasinoTable[TableID][CasTabPlayers][i] == playerid && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWaitAction && CasinoTable[TableID][CasTabStatus] && CasinoTable[TableID][CasTabTimer])
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
						{
							CasinoTable[TableID][CasTabPlayersScore][i] = 3; // Black
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerRolled;

							ApplyAnimation(CasinoTable[TableID][CasTabPlayers][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
							ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "сделал(а) ставку");

							new str[100];
							format(str, sizeof(str), Main_Color"%s "Color_White"поставил на "Main_Color"черное", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 0;

							TableUpdateInfo(TableID);
						}
						break;
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(GetPVarInt(playerid, "Spec_Mode"))
	{
		if(clickedid == Text:INVALID_TEXT_DRAW)
		{
			return SpectatePlayer(playerid, GetPVarInt(playerid, "Spec_ID"));
		}
		else if(clickedid == SpecPanelTD[9]) return SpectatePlayer(playerid, GetPVarInt(playerid, "Spec_ID"));
		else if(clickedid == SpecPanelTD[10])
		{
			new FindedID = -1;
			foreach(new i: Player)
			{
				if(i == playerid || i <= GetPVarInt(playerid, "Spec_ID") || GetPVarInt(i, "Spec_Mode")) continue;
				FindedID = i;
			}

			if(FindedID == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Больше нет игроков на которых можно было бы переключится");
			else
			{
				DeletePVar(GetPVarInt(playerid, "Spec_ID"), "Spec_Admin_ID");
				DeletePVar(playerid, "Spec_ID");

				SetPVarInt(playerid, "Spec_ID", FindedID);
				SetPVarInt(FindedID, "Spec_Admin_ID", playerid+1);
				SpectatePlayer(playerid, FindedID);
			}
			return 1;
		}
		else if(clickedid == SpecPanelTD[11])return ShowPlayerStat(GetPVarInt(playerid, "Spec_ID"), playerid);
		else if(clickedid == SpecPanelTD[12])
		{
			new str[20];
			format(str, sizeof(str), "%d", GetPVarInt(playerid, "Spec_ID"));
			pc_cmd_gm(playerid, str);
			return 1;
		}
		else if(clickedid == SpecPanelTD[13])
		{
			SetPVarInt(playerid, "AdminPanelType", 1);
			ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Посадить игрока в деморган", Color_White"Укажите количество минут на которые хотите посадить игрока в деморган", Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		else if(clickedid == SpecPanelTD[14])
		{
			SetPVarInt(playerid, "AdminPanelType", 2);
			ShowDialog(playerid, D_Admin_Panel_Reason, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Выдать предупреждение игроку", Color_White"Укажите причину выдачи предупреждения", Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		else if(clickedid == SpecPanelTD[15])
		{
			SetPVarInt(playerid, "AdminPanelType", 3);
			ShowDialog(playerid, D_Admin_Panel_Time, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Забанить игрока", Color_White"Укажите количество дней на которые хотите забанить игрока", Color_White"Далее", Color_White"Отмена");
			return 1;
		}
		else if(clickedid == SpecPanelTD[16]) return pc_cmd_specoff(playerid);
	}
	else if(GetPVarInt(playerid, "FishingTime") && clickedid == Text:INVALID_TEXT_DRAW) SelectTextDraw(playerid, BitColor_Main);
	else if(GetPVarInt(playerid, "CarUpgrade") && clickedid == Text:INVALID_TEXT_DRAW) CloseCarUpgrade(playerid);
	else if(GetPVarInt(playerid, "OpenGarage") && clickedid == Text:INVALID_TEXT_DRAW) CloseGarage(playerid);
	else if(GetPVarInt(playerid, "CasinoTable") && clickedid == Text:INVALID_TEXT_DRAW) PlayerExitTable(playerid);
	else if(GetPVarInt(playerid, "SkinSelect"))
	{
		if(clickedid == Text:INVALID_TEXT_DRAW) HideSkinSelect(playerid);
		else if(clickedid == SkinSelectTD[0])
		{
			new indx = GetPVarInt(playerid, "SkinIndx");
			if(pInfo[playerid][pGender])
			{
				if(indx+1 >= sizeof(SkinFemale)) return PlayerPlaySound(playerid, 17000, 0.0, 0.0, 0.0);
				indx++;
				SetPVarInt(playerid, "SkinIndx", indx);
				SetSkin(playerid, SkinFemale[indx][0], true);

				new str[100];
				format(str, sizeof(str), "%d$", SkinFemale[indx][1]);
				PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
				PlayerTextDrawShow(playerid, SkinSelectPTD[playerid]);
			}
			else
			{
				if(indx+1 >= sizeof(SkinMale)) return PlayerPlaySound(playerid, 17000, 0.0, 0.0, 0.0);
				indx++;
				SetPVarInt(playerid, "SkinIndx", indx);
				SetSkin(playerid, SkinMale[indx][0], true);

				new str[100];
				format(str, sizeof(str), "%d$", SkinMale[indx][1]);
				PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
				PlayerTextDrawShow(playerid, SkinSelectPTD[playerid]);
			}
		}
		else if(clickedid == SkinSelectTD[1])
		{
			new indx = GetPVarInt(playerid, "SkinIndx");
			if(pInfo[playerid][pGender])
			{
				if(indx-1 < 0) return PlayerPlaySound(playerid, 17000, 0.0, 0.0, 0.0);
				indx--;
				SetPVarInt(playerid, "SkinIndx", indx);
				SetSkin(playerid, SkinFemale[indx][0], true);

				new str[100];
				format(str, sizeof(str), "%d$", SkinFemale[indx][1]);
				PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
				PlayerTextDrawShow(playerid, SkinSelectPTD[playerid]);
			}
			else
			{
				if(indx-1 < 0) return PlayerPlaySound(playerid, 17000, 0.0, 0.0, 0.0);
				indx--;
				SetPVarInt(playerid, "SkinIndx", indx);
				SetSkin(playerid, SkinMale[indx][0], true);

				new str[100];
				format(str, sizeof(str), "%d$", SkinMale[indx][1]);
				PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
				PlayerTextDrawShow(playerid, SkinSelectPTD[playerid]);
			}
		}
		else if(clickedid == SkinSelectTD[2])
		{
			new indx = GetPVarInt(playerid, "SkinIndx");
			if(pInfo[playerid][pGender])
			{
				if(pInfo[playerid][pMoney] < SkinFemale[indx][1]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
				AddPlayerSkins(playerid, SkinFemale[indx][0]);
			}
			else
			{
				if(pInfo[playerid][pMoney] < SkinMale[indx][1]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
				AddPlayerSkins(playerid, SkinMale[indx][0]);
			}
			return 1;
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPVarInt(playerid, "TaxiPoint")) SetPlayerTaxiMarker(playerid, fX, fY, fZ);
	else if(pInfo[playerid][pAdmin] >= 1 && GetPVarInt(playerid, "AdmAuth"))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			MapAndreas_FindZ_For2DCoord(fX, fY, fZ);
			SetPlayerPosition(playerid, fX, fY, fZ+1.0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			MapAndreas_FindZ_For2DCoord(fX, fY, fZ);
			SetVehiclePos(vehicleid, fX, fY, fZ+1.0);
			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, 0);
		}
	}
	return 1;
}

/////////////////////////////CMD///////////////////////////////////////////////
CMD:main(playerid)
{
	ShowPlayerMainMenu(playerid);
	return 1;
}
alias:main("mm", "menu");

CMD:robbery(playerid)
{
    if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");
    if(pInfo[playerid][pRank] < 3) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 3 ранга");
    if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только на улице");

    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в транспорте вашей организации");

	else if(IsABand(pInfo[playerid][pMembers]) && vInfo[vehicleid][vModel] != 482) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в грузовике");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть за рулем");

    new BusinessID = -1;
    for(new i = 1; i < sizeof(bInfo); i++)
    {
        if(!bInfo[i][bID]) continue;
        if(bInfo[i][bType] == BusinessBankFillial || bInfo[i][bType] == BusinessGeneralStore1 || bInfo[i][bType] == BusinessGeneralStore2 || bInfo[i][bType] == BusinessGeneralStore3)
        {
            if(IsPlayerInRangeOfPoint(playerid, 20.0, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]))
            {
                BusinessID = i;
                break;
            }
        }
    }

    if(BusinessID == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится возле отделения банка либо магазина General Store");



    return 1;
}

CMD:war(playerid)
{
	if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");

	if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_War) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже с кем-то ведет войну");
	if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде уже кто-то сделал предложение о войне");
	if(GangWarStatus[pInfo[playerid][pMembers]] == Gang_Status_Wait_Accept_Request) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ваша банда уже предложила войну кому-то");

	new str[200];

	for(new i = 1; i < sizeof(GangWarZones); i++)
	{
		new bool:Finded = false;

		for(new j = 0; j < MAX_FRACTION; j++)
		{
			if(GangWarZone[j] == i && GangWarStatus[j] == Gang_Status_War)
			{
				Finded = true;
				break;
			}
		}

		format(str, sizeof(str), "%s%s%s\n", str, (Finded) ? (Color_Red):(Color_White), GangWarZones[i][GangWarZoneName]);
	}
	ShowDialog(playerid, D_War_Select_Zone, DIALOG_STYLE_LIST, Main_Color"Выбор места проведения войны", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:gtime(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только организации StreetRacers");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	new VW = GetPlayerVirtualWorld(playerid);
	new Int = GetPlayerInterior(playerid);

	foreach(new i:Player)
	{
		if(pInfo[i][pAuth] && IsPlayerInRangeOfPoint(i, 15.0, X, Y, Z) && GetPlayerVirtualWorld(i) == VW && GetPlayerInterior(i) == Int)
		{
			PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
			SetPVarInt(i, "StreetRacersTime", 5);
			new str[20];
			format(str, sizeof(str), "~w~%d", GetPVarInt(i, "StreetRacersTime"));
			GameTextForPlayer(i, str, 1000, 3);
		}
	}

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "начал(а) отсчет");
	return 1;
}

CMD:neon(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только организации StreetRacers");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");

	ShowDialog(playerid, D_Neon, DIALOG_STYLE_LIST, Main_Color"Установка неона", Color_White"Голубой неон\n\
    Красный неон\n\
    Зелёный неон\n\
    Белый неон\n\
    Розовый неон\n\
    Жёлтый неон", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:paint(playerid)
{
    if(pInfo[playerid][pMembers] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только организации StreetRacers");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_StreetRacers) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");

    new count = GetVehiclePaintJobCount(vInfo[vehicleid][vModel]);
    if(!count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для этой машины недоступны винилы.");
    new str[200];
    for(new i = 0; i < count; i++)
    {
        format(str, sizeof(str), "%s"Color_White"Покрасочная работа №%d\n", str, i+1);
    }
    format(str, sizeof(str), "%s"Color_White"Убрать покрасочные работы", str);
    ShowDialog(playerid, D_Paint, DIALOG_STYLE_LIST, Main_Color"Наклейка винилов", str, Color_White"Далее", Color_White"Закрыть");
    return 1;
}

CMD:load(playerid)
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(pInfo[playerid][pMembers] != Fraction_Army && !IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недоступно вашей организации");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в транспорте вашей организации");

	if(pInfo[playerid][pMembers] == Fraction_Army && vInfo[vehicleid][vModel] != 433) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в армейском грузовике");
	else if(IsABand(pInfo[playerid][pMembers]) && vInfo[vehicleid][vModel] != 482) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в грузовике");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть за рулем");

	if((vInfo[vehicleid][vPickup] && IsValidDynamicPickup(vInfo[vehicleid][vPickup])) || (vInfo[vehicleid][vArea] && IsValidDynamicArea(vInfo[vehicleid][vArea]))) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Загрузка/разгрузка уже начата, чтобы завершить заведите двигатель");

	new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine) EngineVehicle(vehicleid, playerid);

	new Float:X, Float:Y, Float:Z;

	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	GetVehicleBootPos(vehicleid, X, Y, Z);

	vInfo[vehicleid][vPickup] = CreateDynamicPickup(19832, 1, X, Y, Z, 0, 0);
	vInfo[vehicleid][vArea] = CreateDynamicSphere(X, Y, Z, 1.5, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, vInfo[vehicleid][vArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Car);
	Streamer_SetIntData(STREAMER_TYPE_AREA, vInfo[vehicleid][vArea],  E_STREAMER_INDX, vehicleid);

	RemovePlayerFromVehicle(playerid);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "начал(а) загрузку/разгрузку");
	Streamer_Update(playerid);
	return 1;
}

CMD:usedrugs(playerid, const params[])
{
	new count;
	if(sscanf(params, "d", count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/usedrugs [Количество грамм]");

	if(count <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество грамм должно быть больше 0");
	if(!RemovePlayerInventory(playerid, ItemDrugs, count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет такого количества наркотиков");

    AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
    if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "достает пакетик с травой");

	SetPVarInt(playerid, "DisableTextAnim", 1);
	TogglePlayerControllable(playerid, false);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid, "SMOKING", "M_SMK_IN", 6.0, true, false, false, false, 0, true);

	SetTimerEx("StopUseDrugs", 2000, false, "d", playerid);
	return 1;
}
alias:usedrugs("ud");

forward StopUseDrugs(playerid);
public StopUseDrugs(playerid)
{
	AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);

	new str[100];

	pInfo[playerid][pHealth] += 30.0;
	if(pInfo[playerid][pHealth] > 100.0) pInfo[playerid][pHealth] = 100.0;

	SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
	format(str, sizeof(str), "Здоровье пополнено до %.0f", pInfo[playerid][pHealth]);
	SendClientMessage(playerid, BitColor_Main, str);

	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid, true);
	DeletePVar(playerid, "DisableTextAnim");
	return 1;
}

CMD:givedrugs(playerid, params[])
{
	new id, count;
	if(sscanf(params, "dd", id, count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/givedrugs [ID] [Количество грамм]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(id == playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	if(count <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество грамм должно быть больше 0");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите передать наркотики");

	if(!RemovePlayerInventory(playerid, ItemDrugs, count)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет такого количества наркотиков");
	if(!AddPlayerInventory(id, ItemDrugs, count))
	{
		AddPlayerInventory(playerid, ItemDrugs, count);
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока недостаточно места в инвентаре");
	}

	new str[100];
	format(str, sizeof(str), "передал(а) какой-то пакетик %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:selldrugs(playerid, params[])
{
	new id, count, money;
	if(sscanf(params, "ddd", id, count, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/selldrugs [ID] [Количество грамм] [Стоимость за 1г.]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(id == playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	if(count <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество грамм должно быть больше 0");
	if(money < 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Стоимость не может быть ниже 1$");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите продать наркотики");

	if(GetItemCountInInventory(playerid, ItemDrugs) < count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет такого количества наркотиков");

	new str[300];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s "Color_White"купить "Main_Color"%dг. "Color_White"наркотиков за "Color_Green"%d$", pInfo[id][pName], count, money*count);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, "Используйте /undo selldrugs чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам купить "Main_Color"%dг. "Color_White"наркотиков за "Color_Green"%d$", pInfo[playerid][pName], count, money*count);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, "Используйте /accept selldrugs принять предложение или /cancel selldrugs чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_SellDrugs, money*count, count, ItemDrugs);
	return 1;
}

CMD:givegun(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/givegun [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(playerid != id && (!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id))) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите собрать оружие");

	SetPVarInt(playerid, "GiveGunID", id);
	new str[300];
	for(new i = 0; i < sizeof(GunInfo); i++)
	{
		format(str, sizeof(str), "%s%s - %dмат.\n", str, Items[GunInfo[i][ItemID]][ItemName], GunInfo[i][MaterialCount]);
	}
	ShowDialog(playerid, D_GiveGun, DIALOG_STYLE_LIST, Main_Color"Создание оружия", str, Color_White"Далее", Color_White"Закрыть");

	return 1;
}

CMD:sellgun(playerid, params[])
{
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/sellgun [ID] [Стоимость]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(id == playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(money < 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Стоимость не может быть ниже 1$");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(playerid != id && (!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id))) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите продать оружие");

	SetPVarInt(playerid, "GiveGunID", id);
	SetPVarInt(playerid, "GiveGunMoney", money);
	new str[300];
	for(new i = 0; i < sizeof(GunInfo); i++)
	{
		format(str, sizeof(str), "%s%s - %dмат.\n", str, Items[GunInfo[i][ItemID]][ItemName], GunInfo[i][MaterialCount]);
	}
	ShowDialog(playerid, D_GiveGun, DIALOG_STYLE_LIST, Main_Color"Создание оружия", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:fsd(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только МЧС");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/fsd [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете вколоть препарат самому себе");
	if(GetPVarInt(playerid, "PlayerKnockoutStatus") != Player_No_Knockout) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ранены");
	if(GetPVarInt(id, "PlayerKnockoutStatus") != Player_In_Knockout) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не ранен");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите вколоть препарат");

	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid, "BOMBER","BOM_PLANT_LOOP", 4.1, true, false, false, false, 0, true);
	SetPVarInt(playerid, "DisableTextAnim", 1);
	SetTimerEx("WaitFSD", 3000, false, "dd", playerid, id);
	return 1;
}

forward WaitFSD(playerid, id);
public WaitFSD(playerid, id)
{
	new str[100];
	format(str, sizeof(str), "вколол(а) препарат %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

	pInfo[id][pHealth] = 20.0+float(random(6));
	SetPlayerHealth(id, pInfo[id][pHealth]);
	SavePlayerFloat(id, "Health", pInfo[id][pHealth]);

	ClearAnimations(id, true);
	TogglePlayerControllable(id, true);
	SetPVarInt(id, "PlayerKnockoutStatus", Player_No_Knockout);
	DeletePVar(id, "DisableTextAnim");

	ClearAnimations(playerid, true);
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "DisableTextAnim");

	FractionWare[Fraction_Hospital][FractionWareMoney] += 5000;
	SaveFractionWare(Fraction_Hospital);
	return 1;
}

CMD:startblood(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только МЧС");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers] || vInfo[vehicleid][vModel] != 416) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Собирать кровь можно только в карете скорой помощи");
	if(vInfo[vehicleid][vRenter] == playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже принимаете кровь в этой машине");
	if(vInfo[vehicleid][vRenter] != -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Какой-то сотрудник уже принимает кровь в этой машине");
	if(GetPlayerVehicleSeat(playerid) <= 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на заднем пассажирском месте");
	if(GetPVarInt(playerid, "BloodCount") >= 20) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже собрали 20 литров крови, сначала сдайте их в больницу");

	if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText])) DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
	vInfo[vehicleid][vText] = CreateDynamic3DTextLabel("Сотрудник готов принять кровь", BitColor_Main, 0.0, 0.0, 0.0, 20.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
	vInfo[vehicleid][vRenter] = playerid;
	SetPVarInt(playerid, "StartBloodVehicle", vehicleid);
	Streamer_Update(playerid);
	return 1;
}

CMD:duty(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только МЧС");
	if(GetPVarInt(playerid, "DutyCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Использовать /duty можно раз в 3 минуты");
	if(GetPVarInt(playerid, "MedicDuty"))
	{
		SendClientMessage(playerid, -1, Color_Yellow"Вы покинули дежурство.");
		DeletePVar(playerid, "MedicDuty");
		SetPVarInt(playerid, "DutyCD", gettime()+180);
	}
	else
	{
		SetPVarInt(playerid, "MedicDuty", 1);
		new str[200];
		format(str, sizeof(str), Color_Red2"[Диспетчер] Сотрудник %s %s готов(а) к выезду. Вызвать медика (/service medic)", FractionName[pInfo[playerid][pMembers]], pInfo[playerid][pName]);
		SendAllMessage(str);

		SetPVarInt(playerid, "DutyCD", gettime()+180);
	}
	return 1;
}

CMD:heal(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только МЧС");
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/heal [ID] [Стоимость]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(money < 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Минимальная стоимость 1$");
	if(money > 2000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Максимальная стоимость 2000$");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете лечить самого себя");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid, "InPickup")-1 != HospitalEnter && (!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Лечить можно только в больнице или в карете скорой помощи");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите вылечить");

	AntiCheatGetHealth(id, pInfo[id][pHealth]);
	if(pInfo[id][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок здоров");

	new str[200];
	format(str, sizeof(str), Main_Color"%s %s[%d] "Color_White"предложил вам вылечиться\n\
	Стоимость: "Color_Green"%d$\n\
	"Color_White"Вы согласны?", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, money);
	ShowDialog(id, D_Heal, DIALOG_STYLE_MSGBOX, Main_Color"Медицинская помощь", str, Color_White"Да", Color_White"Нет");
	SetPVarInt(id, "HealID", playerid);
	SetPVarInt(id, "HealMoney", money);

	str[0] = EOS;
	format(str, sizeof(str), "Вы предложили вылечиться "Main_Color"%s "Color_White"за "Color_Green"%d$", pInfo[id][pName], money);
	SendClientMessage(playerid, BitColor_White, str);
	return 1;
}

CMD:psih(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только МЧС");
	new id, time, message[145];
	if(sscanf(params, "dds[145]", id, time, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/jail [ID] [Время в минутах] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(time < 10) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Минимальное время 10 минут");
	if(time > 60) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете посадить игрока в деморган более чем на 60 минут");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете посадить в психушку самого себя");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите посадить в психушку");

	ChangePlayerJob(id, pInfo[id][pJob]);
	ChangePlayerUnOfficialJob(id, Job_None);

	SetPVarInt(id, "DemorganCD", 5);

	pInfo[id][pDemorgan] = time*60;
	SavePlayerInt(id, "Demorgan", pInfo[id][pDemorgan]);
	SpawnPlayer(id);

	new str[300];
	format(str, sizeof(str), Color_White"%s %s %s посадил игрока %s в психушку на %d минут, по причине: %s", FractionName[pInfo[playerid][pMembers]], FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], pInfo[id][pName], time, message);
	SendAllMessage(str);

	format(str, sizeof(str), Main_Color"%s %s "Color_White"посадил вас в психушку на "Main_Color"%d "Color_White"минут, по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], time, message);
	SendClientMessage(id, -1, str);

	if(pInfo[id][pMedCard] == 1)
	{
		pInfo[id][pMedCard] = 2;
		SavePlayerInt(id, "MedCard", pInfo[id][pMedCard]);
		SendClientMessage(id, -1, Color_Yellow"Ваша медицинская карта была аннулирована");
	}
	return 1;
}

CMD:barrier(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только на улице");
	if(GetPVarInt(playerid, "BarrierCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ставить барьер можно раз в 5 минут");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	X += (10.0 * floatsin(-A, degrees));
    Y += (10.0 * floatcos(-A, degrees));

	FBIBarrier[playerid][BarrierObj] = CreateDynamicObject(4519, X, Y, Z+0.75, 0.0, 0.0, A, 0, 0);
	FBIBarrier[playerid][BarrierTime] = 60;

	SetPVarInt(playerid, "BarrierCD", gettime()+300);

	ApplyAnimation(playerid, "BOMBER","BOM_PLANT", 2.0, false, false, false, false, 0, true);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "установил(а) барьер");
	Streamer_Update(playerid);
	return 1;
}

CMD:barrieroff(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только на улице");
	if(!FBIBarrier[playerid][BarrierObj] || !IsValidDynamicObject(FBIBarrier[playerid][BarrierObj])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Барьер не установлен");

	new Float:X, Float:Y, Float:Z;
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, FBIBarrier[playerid][BarrierObj], E_STREAMER_X, X);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, FBIBarrier[playerid][BarrierObj], E_STREAMER_Y, Y);
	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, FBIBarrier[playerid][BarrierObj], E_STREAMER_Z, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть рядом с вашим барьером");

	if(FBIBarrier[playerid][BarrierObj] && IsValidDynamicObject(FBIBarrier[playerid][BarrierObj])) DestroyDynamicObject(FBIBarrier[playerid][BarrierObj]);
	FBIBarrier[playerid][BarrierObj] = 0;
	FBIBarrier[playerid][BarrierTime] = 0;

	ApplyAnimation(playerid, "BOMBER","BOM_PLANT", 2.0, false, false, false, false, 0, true);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "убрал(а) барьер");
	Streamer_Update(playerid);
	return 1;
}

CMD:find(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/find [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(!pInfo[id][pWanted]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в розыске");

	new Float:X, Float:Y, Float:Z;


	if(GetPVarInt(id, "InBusiness"))
	{
		new indx = GetPVarInt(id, "InBusiness");
		X = bInfo[indx][bX];
		Y = bInfo[indx][bY];
		Z = bInfo[indx][bZ];
	}
	else if(GetPVarInt(id, "InHouse"))
	{
		new indx = GetPVarInt(id, "InHouse");
		X = hInfo[indx][hX];
		Y = hInfo[indx][hY];
		Z = hInfo[indx][hZ];
	}
	else if(GetPVarInt(id, "InPickup"))
	{
		new indx = GetPVarInt(id, "InPickup")-1;
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_X, X);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Y, Y);
		Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Z, Z);
	}
	else GetPlayerPos(id, X, Y, Z);

	pInfo[playerid][pGPSType] = GPS_Type_GPS;
	SetPlayerRaceCheckpoint(playerid, 2, X, Y, Z, 0.0, 0.0, 0.0, 10.0);

	SendClientMessage(playerid, -1, Color_White"Местоположение игрока удалось отследить");
	return 1;
}

CMD:findoff(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	if(pInfo[playerid][pGPSType] != GPS_Type_GPS) return SendClientMessage(playerid, -1, Color_Grey"На данный момент метка на игрока не установлена.");

	DisablePlayerRaceCheckpoint(playerid);
	pInfo[playerid][pGPSType] = GPS_Type_None;
	SendClientMessage(playerid, -1, Color_Yellow"GPS выключен");
	return 1;
}

CMD:mask(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	if(pInfo[playerid][pMask]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вас уже одета маска");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth]) ShowPlayerNameTagForPlayer(i, playerid, false);
	}
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "Надел(а) маску");
	pInfo[playerid][pMask] = true;
	SetColor(playerid);
	return 1;
}

CMD:maskoff(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_FBI) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только ФБР");
	if(!pInfo[playerid][pMask]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вас не одета маска");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth]) ShowPlayerNameTagForPlayer(i, playerid, true);
	}
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "Снял(а) маску");
	pInfo[playerid][pMask] = false;
	SetColor(playerid);
	return 1;
}

CMD:giveguard(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_Army) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только армии");
	if(pInfo[playerid][pRank] < FractionMaxRank) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только лидеру");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/giveguard [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(pInfo[id][pArmyTicket]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока уже есть военный билет");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите выписать военный билет");

	new str[300];
	format(str, sizeof(str), "%s %s[%d] выдал военный билет %s[%d]", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"выдал вам военный билет", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
	SendClientMessage(id, BitColor_Main, str);

	pInfo[id][pArmyTicket] = true;
	SavePlayerBool(id, "ArmyTicket", pInfo[id][pArmyTicket]);
	return 1;
}

CMD:shisp(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_Police) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только полиции");
	if(GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только на улице");
	if(GetPVarInt(playerid, "ShispCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ставить шипы можно раз в 3 минуты");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	X += (5.1 * floatsin(-A, degrees));
    Y += (5.1 * floatcos(-A, degrees));

	PoliceSpike[playerid][SpikeObj] = CreateDynamicObject(2892, X, Y, Z-1.0, 0.0, 0.0, A, 0, 0);
	PoliceSpike[playerid][SpikeArea] = CreateDynamicCube(X-0.715, Y-5.02, Z-1.0, X+0.715, Y+5.02, Z+1.0, 0, 0);
	PoliceSpike[playerid][SpikeTime] = 30;

	Streamer_SetIntData(STREAMER_TYPE_AREA, PoliceSpike[playerid][SpikeArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Spike);
	Streamer_SetIntData(STREAMER_TYPE_AREA, PoliceSpike[playerid][SpikeArea],  E_STREAMER_INDX, playerid);
	SetPVarInt(playerid, "ShispCD", gettime()+180);

	ApplyAnimation(playerid, "BOMBER","BOM_PLANT", 2.0, false, false, false, false, 0, true);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "установил(а) шипы");
	Streamer_Update(playerid);
	return 1;
}

CMD:tazer(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_Police) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только полиции");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && !IsSecurityAgency(pInfo[i][pMembers]))
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(i, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) && IsPlayerStreamedIn(playerid, i)) ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, false, true, true, false, 5000, true);
		}
	}

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "использовал(а) Tazer");
	return 1;
}

CMD:block(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	if(pInfo[playerid][pRank] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 5 ранга");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/block [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(!pInfo[id][pJail]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в тюрьме");
	if(pInfo[id][pJailNoFree]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Выкуп для этого игрока уже запрещен");

	new str[300];
	format(str, sizeof(str), "%s %s[%d] запретил %s[%d] выкупаться из тюрьмы", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"запретил вам выкупаться из тюрьмы", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
	SendClientMessage(id, BitColor_Main, str);

	pInfo[id][pJailNoFree] = true;
	SavePlayerBool(id, "JailNoFree", pInfo[id][pJailNoFree]);
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/arrest [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(!pInfo[id][pWanted]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в розыске");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите посадить в тюрьму");
	if(!IsPlayerInDynamicArea(playerid, Pickups[ArrestPickup][PickAreaID])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны доставить преступника к воротам тюрьмы");

	SetPVarInt(id, "JailCD", 5);

	switch(pInfo[id][pWanted])
	{
		case 1: pInfo[id][pJail] = 30;
		case 2: pInfo[id][pJail] = 40;
		case 3: pInfo[id][pJail] = 50;
		case 4: pInfo[id][pJail] = 60;
		case 5: pInfo[id][pJail] = 80;
		case 6: pInfo[id][pJail] = 100;
		default: pInfo[id][pJail] = 30;
	}
	SavePlayerInt(id, "Jail", pInfo[id][pJail]);

	pInfo[id][pJailedFraction] = pInfo[playerid][pMembers];
	SavePlayerInt(id, "JailedFraction", pInfo[id][pJailedFraction]);

	if(pInfo[id][pFollow] != -1) DeletePVar(pInfo[id][pFollow], "Following");
	pInfo[id][pFollow] = -1;
	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(id, true);

	new str[300];
	format(str, sizeof(str), "%s %s[%d] посадил в тюрьму %s[%d] с приоритетом розыска %d", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id, pInfo[id][pWanted]);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"посадил вас в тюрьму с приоритетом розыска "Main_Color"%d", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pWanted]);
	SendClientMessage(id, BitColor_Main, str);

	format(str, sizeof(str), Color_White"Вы попали в тюрьму вам нужно добыть "Main_Color"%d "Color_White"камня чтобы выйти", pInfo[id][pJail]);
	SendClientMessage(id, BitColor_Main, str);

	pInfo[id][pWanted] = 0;
	SetPlayerWantedLevel(id, pInfo[id][pWanted]);
	SavePlayerInt(id, "Wanted", pInfo[id][pWanted]);

	ChangePlayerJob(id, pInfo[id][pJob]);
	ChangePlayerUnOfficialJob(id, Job_None);
	SpawnPlayer(id);
	return 1;
}

CMD:take(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");
	if(pInfo[playerid][pRank] < 3) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 3 ранга");

	new id, Type[145];
	if(sscanf(params, "ds[145]", id, Type)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/take [ID] [drive/gun/moto/plane/boat]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите конфисковать лицензию");

	if(strcmp(Type, "drive", true))
	{
		if(!pInfo[id][pLicAuto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет лицензии на управление автомобилями");
		pInfo[id][pLicAuto] = false;
		SavePlayerBool(id, "LicAuto", pInfo[id][pLicAuto]);
		new vehicleid = GetPlayerVehicleID(id);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vehicleid
		&& !IsAMoped(vInfo[vehicleid][vModel])
		&& !IsABike(vInfo[vehicleid][vModel])
		&& !IsABoat(vInfo[vehicleid][vModel])
		&& !IsAPlane(vInfo[vehicleid][vModel])
		&& !IsAMoto(vInfo[vehicleid][vModel])) RemovePlayerFromVehicle(id);

		new str[100];
		format(str, sizeof(str), "конфисковал(а) лицензию %s на управление автомобилями", pInfo[id][pName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	else if(strcmp(Type, "gun", true))
	{
		if(!pInfo[id][pLicGun]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет лицензии на владение оружием");
		pInfo[id][pLicGun] = false;
		SavePlayerBool(id, "LicGun", pInfo[id][pLicGun]);

		new str[100];
		format(str, sizeof(str), "конфисковал(а) лицензию %s на владение оружием", pInfo[id][pName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	else if(strcmp(Type, "moto", true))
	{
		if(!pInfo[id][pLicMoto]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет лицензии на управление мототранспортом");
		pInfo[id][pLicMoto] = false;
		SavePlayerBool(id, "LicMoto", pInfo[id][pLicMoto]);
		new vehicleid = GetPlayerVehicleID(id);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vehicleid && IsAMoto(vInfo[vehicleid][vModel])) RemovePlayerFromVehicle(id);

		new str[100];
		format(str, sizeof(str), "конфисковал(а) лицензию %s на управление мототранспортом", pInfo[id][pName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	else if(strcmp(Type, "plane", true))
	{
		if(!pInfo[id][pLicPlane]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет лицензии на управление воздушным транспортом");
		pInfo[id][pLicPlane] = false;
		SavePlayerBool(id, "LicPlane", pInfo[id][pLicPlane]);
		new vehicleid = GetPlayerVehicleID(id);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vehicleid && IsAPlane(vInfo[vehicleid][vModel])) RemovePlayerFromVehicle(id);

		new str[100];
		format(str, sizeof(str), "конфисковал(а) лицензию %s на управление воздушным транспортом", pInfo[id][pName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	else if(strcmp(Type, "boat", true))
	{
		if(!pInfo[id][pLicBoat]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет лицензии на управление лодками");
		pInfo[id][pLicBoat] = false;
		SavePlayerBool(id, "LicBoat", pInfo[id][pLicBoat]);
		new vehicleid = GetPlayerVehicleID(id);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && vehicleid && IsABoat(vInfo[vehicleid][vModel])) RemovePlayerFromVehicle(id);

		new str[100];
		format(str, sizeof(str), "конфисковал(а) лицензию %s на управление лодками", pInfo[id][pName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	return 1;
}

CMD:checklic(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/checklic [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите проверить лицензии");

	ShowPlayerLicenses(id, playerid);

	new str[100];
	format(str, sizeof(str), "проверил(а) лицензии %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:tm(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/tm [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите конфисковать материалы");
	new count = GetItemCountInInventory(id, ItemMaterial);
	if(!count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет материалов");

	RemovePlayerInventory(id, ItemMaterial, count);

	new str[100] = EOS;
	format(str, sizeof(str), "конфисковал(а) все материалы у %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:td(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/td [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите конфисковать наркотики");
	new count = GetItemCountInInventory(id, ItemDrugs);
	if(!count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет наркотиков");

	RemovePlayerInventory(id, ItemDrugs, count);

	new str[100] = EOS;
	format(str, sizeof(str), "конфисковал(а) все наркотики у %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:tw(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/tw [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока у которого хотите конфисковать оружие");
	new bool:Finded = false;

	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(Items[pInventory[id][i][ItemID]][WeaponsID])
		{
			RemovePlayerInventory(id, pInventory[id][i][ItemID], pInventory[id][i][ItemCount]);
			Finded = true;
			i = 0;
		}
	}

	UpdatePlayerWeapon(id);
	for(new i = 0; i < 13; i++)
	{
		if(pInfo[id][pWeapon][i] && pInfo[id][pAmmo][i])
		{
			ResetPlayerWeapons(id);
			SavePlayerWeapon(id);
			Finded = true;
			break;
		}
	}

	if(!Finded) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет оружия");

	new str[100];
	format(str, sizeof(str), "конфисковал(а) все оружие у %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:frisk(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/frisk [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите обыскать");

	new str[1000];
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[id][i][ItemID] == ItemDrugs || pInventory[id][i][ItemID] == ItemMaterial || Items[pInventory[id][i][ItemID]][WeaponsID])
		{
			format(str, sizeof(str), "%s"Color_Red"%s\t"Color_White"%dшт.\n", str, Items[pInventory[id][i][ItemID]][ItemName], GetItemCountInInventory(id, pInventory[id][i][ItemID]));
		}
	}

	strcat(str, "\n"Color_White"Экипировано:\n");

	UpdatePlayerWeapon(id);
	new bool:Finded = false;
	for(new i = 0; i < 13; i++)
	{
		if(pInfo[id][pWeapon][i] && pInfo[id][pAmmo][i])
		{
			format(str, sizeof(str), "%s"Color_Red"%s\t"Color_White"%dпт.\n", str, GunNames[pInfo[id][pWeapon][i]], pInfo[id][pAmmo][i]);
			Finded = true;
		}
	}
	if(!Finded) strcat(str, Color_White"Пусто");

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Обыск", str, Color_White"Закрыть", "");

	str[0] = EOS;
	format(str, sizeof(str), "обыскал(а) %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:putcop(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться в машине вашей организации");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/putcop [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	if(pInfo[id][pFollow] != -1 && pInfo[id][pFollow] != playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этого игрока уже кто-то ведет за собой");
	if(GetPlayerVehicleID(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок уже сидит в машине, сначала вытащите его");

	new seat = GetFreeVehicleSeat(vehicleid);
	if(seat == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В транспорте нет свободных мест");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите затащить в транспорт");
	ClearAnimations(id);
	TogglePlayerControllable(id, false);
	PutPlayerInVehicle(id, vehicleid, seat);

	new str[100];
	format(str, sizeof(str), "затащил(а) %s в машину", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:putout(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/putout [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");

	new vehicleid = GetPlayerVehicleID(id);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в машине");

	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(vehicleid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите вытащить из машины");
	RemovePlayerFromVehicle(id);

	new str[100];
	format(str, sizeof(str), "вытащил(а) %s из машины", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:unfollow(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	if(!GetPVarInt(playerid, "Following")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не ведете никого за собой");

	new id = GetPVarInt(playerid, "Following")-1;

	pInfo[id][pFollow] = -1;
	TogglePlayerControllable(id, true);
	DeletePVar(playerid, "Following");

	new str[100];
	format(str, sizeof(str), "отпустил(а) %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:follow(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	if(GetPVarInt(playerid, "Following")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже ведете кого-то за собой");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/follow [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	if(pInfo[id][pFollow] != -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этого игрока уже кто-то ведет за собой");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите тащить за собой");

	pInfo[id][pFollow] = playerid;
	SetPVarInt(playerid, "Following", id+1);

	new str[100];
	format(str, sizeof(str), "потащил(а) %s за собой", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/uncuff [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(AntiCheatGetSpecialAction(id) != SPECIAL_ACTION_CUFFED) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в наручниках");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока с которого хотите снять наручники");

	new str[100];
	format(str, sizeof(str), "снял(а) наручники на %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/cuff [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(!pInfo[id][pWanted]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в розыске");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока на которого хотите надеть наручники");

	new str[100];
	format(str, sizeof(str), "надел(а) наручники на %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:wanted(playerid)
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new str[500];
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pWanted]) format(str, sizeof(str), "%s"Main_Color"%s[%d] "Color_White"Приоритет: "Main_Color"%d\n", str, pInfo[i][pName], i, pInfo[i][pWanted]);
	}
	if(!strlen(str)) strcat(str, Main_Color"На данный момент нет разыскиваемых");
	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Список разыскиваемых", str, Color_White"Закрыть", "");
	return 1;
}

CMD:clear(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");
	if(pInfo[playerid][pRank] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 5 ранга");

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/clear [ID] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(!pInfo[id][pWanted]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в розыске");

	new str[300];
	format(str, sizeof(str), "%s %s[%d] убрал %s[%d] из розыска, по причине: %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id, message);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"убрал вас из розыска, по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, message);
	SendClientMessage(id, BitColor_Main, str);

	pInfo[id][pWanted] = 0;
	SetPlayerWantedLevel(id, pInfo[id][pWanted]);
	SavePlayerInt(id, "Wanted", pInfo[id][pWanted]);
	return 1;
}

CMD:su(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id, wanted, message[145];
	if(sscanf(params, "dds[145]", id, wanted, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/su [ID] [Приоритет розыска] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(wanted < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Минимальный приоритет розыска 1");
	if(wanted > 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Максимальный приоритет розыска 6");

	new str[300];
	format(str, sizeof(str), "%s %s[%d] объявил %s[%d] в розыск с приоритетом %d, по причине: %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id, wanted, message);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"объявил вас в розыск с приоритетом "Main_Color"%d"Color_White", по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, wanted, message);
	SendClientMessage(id, BitColor_Main, str);

	pInfo[id][pWanted] = wanted;
	SetPlayerWantedLevel(id, pInfo[id][pWanted]);
	SavePlayerInt(id, "Wanted", pInfo[id][pWanted]);
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");

	new id, money, message[145];
	if(sscanf(params, "dds[145]", id, money, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/ticket [ID] [Сумма] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(money < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Минимальная сумма штрафа 1000$");
	if(money > 5000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Максимальная сумма штрафа 5000$");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите выписать штраф");

	new str[300];
	format(str, sizeof(str), "%s %s[%d] выписал штраф %s[%d] на сумму %d$, по причине: %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, pInfo[id][pName], id, money, message);
	SendDMessage(playerid, str);

	format(str, sizeof(str), "%s %s[%d] "Color_White"выписал вам штраф на сумму "Color_Green"%d$"Color_White", по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, money, message);
	SendClientMessage(id, BitColor_Main, str);

	GivePlayerMoneyEx(id, -money);
	GivePlayerMoneyInPayDay(playerid, money);
	return 1;
}

CMD:invite(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(pInfo[playerid][pRank] < 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 6 ранга");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/invite [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(pInfo[id][pMembers] != Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок уже состоит в какой-то организации");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите пригласить в организацию");

	SetPVarInt(id, "InviterID", playerid);
	new str[200];
	format(str, sizeof(str), Color_White"Вы пригласили "Main_Color"%s[%d] "Color_White"присоедениться к вашей организации", pInfo[id][pName], id);
	SendClientMessage(playerid, -1, str);

	format(str, sizeof(str), Main_Color"%s "Color_White"приглашает вас присоедениться к организации "Main_Color"%s\n\
	"Color_White"Вы согласны?", pInfo[playerid][pName], FractionName[pInfo[playerid][pMembers]]);
	ShowDialog(id, D_Invite, DIALOG_STYLE_MSGBOX, Main_Color"Приглашение во фракцию", str, Color_White"Да", Color_White"Нет");
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(pInfo[playerid][pRank] < 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 6 ранга");

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/uninvite [ID] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(pInfo[id][pMembers] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок не состоит в вашей организации");

	pInfo[id][pMembers] = Fraction_None;
	SavePlayerInt(id, "Members", pInfo[id][pMembers]);

	pInfo[id][pRank] = 0;
	SavePlayerInt(id, "Rank", pInfo[id][pRank]);

	if(pInfo[id][pSpawnChange] == SpawnChange_Fraction)
	{
		pInfo[id][pSpawnChange] = SpawnChange_Standart;
		SavePlayerInt(id, "SpawnChange", pInfo[id][pSpawnChange]);
	}

	SetSkin(id, pInfo[id][pSkins][pInfo[id][pSkin]]);
	SetColor(id);

	if(GetPlayerState(id) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(id);
		if(vehicleid && vInfo[vehicleid][vType] == VehicleTypeFraction) RemovePlayerFromVehicle(id);
	}

	if(pInfo[playerid][pMembers] == Fraction_Hospital)
	{
		if(GetPVarInt(id, "StartBloodVehicle"))
		{
			new vehicleid = GetPVarInt(id, "StartBloodVehicle");
			if(vInfo[vehicleid][vRenter] == id)
			{
				if(vInfo[vehicleid][vOwner] == Fraction_Hospital) DeletePVar(id, "StartBloodVehicle");
				vInfo[vehicleid][vRenter] = -1;
			}
			if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
			{
				DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
				vInfo[vehicleid][vText] = Text3D:0;
			}
		}
	}
	else if(pInfo[playerid][pMembers] == Fraction_Taxi)
	{
		if(GetPVarInt(id, "TaxiVehicle"))
		{
			new vehicleid = GetPVarInt(id, "TaxiVehicle");
			if(vInfo[vehicleid][vRenter] == id)
			{
				if(vInfo[vehicleid][vOwner] == Fraction_Taxi) DeletePVar(id, "TaxiVehicle");
				vInfo[vehicleid][vRenter] = -1;

				DeletePVar(id, "TaxiFare");
			}
			if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
			{
				DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
				vInfo[vehicleid][vText] = Text3D:0;
			}
		}
	}


	if(GetPVarInt(id, "AmmoBox")) RemoveCarriedObj(id, true);

	new str[400];
	format(str, sizeof(str), Main_Color"%s %s "Color_White"выгнал "Main_Color"%s "Color_White"из организации по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], pInfo[id][pName], message);
	SendRMessage(playerid, str);

	format(str, sizeof(str), Main_Color"%s %s "Color_White"выгнал вас из организации по причине: "Main_Color"%s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], message);
	SendClientMessage(id, -1, str);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выгнал %s (IP: %s | RegIP: %s) из организации %s по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], FractionName[pInfo[playerid][pMembers]], message);

	AddLog(LogTypeFraction, pInfo[playerid][pID], str);
	return 1;
}

CMD:giverank(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(pInfo[playerid][pRank] < 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 6 ранга");

	new id, rank;
	if(sscanf(params, "dd", id, rank)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/giverank [ID] [Ранг]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(pInfo[id][pMembers] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок не состоит в вашей организации");
	if(rank <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Ранг должен быть больше 0");
	if(rank >= FractionMaxRank) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Максимальный ранг 6");
	if(rank >= pInfo[playerid][pRank]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете повысить игрока до или выше вашего ранга");

	if(rank == pInfo[id][pRank]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок уже находится на этой должности");

	new str[400];
	if(rank > pInfo[id][pRank]) format(str, sizeof(str), "%s %s повысил %s %s до должности %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], FractionRankName[pInfo[id][pMembers]][pInfo[id][pRank]], pInfo[id][pName], FractionRankName[pInfo[playerid][pMembers]][rank]);
	else format(str, sizeof(str), "%s %s понизил %s %s до должности %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], FractionRankName[pInfo[id][pMembers]][pInfo[id][pRank]], pInfo[id][pName], FractionRankName[pInfo[playerid][pMembers]][rank]);
	SendRMessage(playerid, str);

	if(rank > pInfo[id][pRank])
	{
		format(str, sizeof(str), Color_White"Вы были повышены до должности "Main_Color"%s", FractionRankName[pInfo[id][pMembers]][rank]);
		SendClientMessage(id, -1, str);

		str[0] = EOS;
		GetPlayerIp(playerid, str, 16);
		new SubStr[20];
		GetPlayerIp(id, SubStr, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) повысил %s (IP: %s | RegIP: %s) в организации %s до ранга %d", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], FractionName[pInfo[playerid][pMembers]], rank);

		AddLog(LogTypeFraction, pInfo[playerid][pID], str);
	}
	else
	{
		format(str, sizeof(str), Color_White"Вы были понижены до должности "Main_Color"%s", FractionRankName[pInfo[id][pMembers]][rank]);
		SendClientMessage(id, -1, str);

		str[0] = EOS;
		GetPlayerIp(playerid, str, 16);
		new SubStr[20];
		GetPlayerIp(id, SubStr, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) понизил %s (IP: %s | RegIP: %s) в организации %s до ранга %d", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], FractionName[pInfo[playerid][pMembers]], rank);

		AddLog(LogTypeFraction, pInfo[playerid][pID], str);
	}

	pInfo[id][pRank] = rank;
	SavePlayerInt(id, "Rank", pInfo[id][pRank]);
	SetColor(id);

	if(pInfo[id][pGender]) SetPlayerSkin(id, FractionSkinFemale[pInfo[id][pMembers]][pInfo[id][pRank]]);
	else SetPlayerSkin(id, FractionSkinMale[pInfo[id][pMembers]][pInfo[id][pRank]]);

	return 1;
}

CMD:members(playerid)
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	new str[1500];

	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] == pInfo[playerid][pMembers]) format(str, sizeof(str), "%s%s %s[%d]\n", str, FractionRankName[pInfo[i][pMembers]][pInfo[i][pRank]], pInfo[i][pName], i);
	}
	format(str, sizeof(str), Color_White"%s", str);
	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Члены организации онлайн", str, Color_White"Закрыть", "");
	return 1;
}

CMD:m(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsSecurityAgency(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом силовой структуры");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться в машине вашей организации");
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/m [Сообщение]");

	new str[200];
	format(str, sizeof(str), "<< Мегафон >> %s %s[%d]: %s", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, message);
	ProxDetector(playerid, MESSAGE_DIST*2.5, BitColor_Yellow, str, false);
	return 1;
}

CMD:r(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!CanUseRChat(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет доступа к этому чату");
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/r [Сообщение]");

	new str[200];
	format(str, sizeof(str), "** %s %s[%d]: %s...конец связи **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, message);
	SendRMessage(playerid, str);
	return 1;
}

CMD:f(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!CanUseFChat(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет доступа к этому чату");
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/f [Сообщение]");

	new str[200];
	format(str, sizeof(str), "** %s %s[%d]: %s **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, message);
	SendRMessage(playerid, str);
	return 1;
}

CMD:d(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsGovFraction(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступ к этому чату есть только у государственных организаций");

	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/d [Сообщение]");

	new str[200];
	format(str, sizeof(str), "** [%s] %s %s[%d]: %s...конец связи **", FractionName[pInfo[playerid][pMembers]], FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, message);
	SendDMessage(playerid, str);
	return 1;
}

CMD:gov(playerid, params[])
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не состоите не в одной из организаций");
	if(!IsGovFraction(pInfo[playerid][pMembers]) && pInfo[playerid][pMembers] != Fraction_Hospital && pInfo[playerid][pMembers] != Fraction_Taxi) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступ к этому чату есть только у государственных организаций");
	if(pInfo[playerid][pRank] < 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно с 5 ранга");

	if(GetPVarInt(playerid, "GovCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Гос.новости можно использовать раз в 3 минуты");
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/gov [Сообщение]");

	SendGovMessage(playerid, message);
	SetPVarInt(playerid, "GovCD", gettime()+180);
	return 1;
}

CMD:akick(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");
	if(GetPVarInt(playerid, "InPickup")-1 != HangarOneEnter && GetPVarInt(playerid, "InPickup")-1 != HangarTwoEnter
	&& GetPVarInt(playerid, "InPickup")-1 != HangarThreeEnter && GetPVarInt(playerid, "InPickup")-1 != HangarFourEnter
	&& GetPVarInt(playerid, "InPickup")-1 != HangarFiveEnter && GetPVarInt(playerid, "InPickup")-1 != HangarSixEnter) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не в ангаре");

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/akick [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	if(GetPVarInt(playerid, "InPickup") != GetPVarInt(id, "InPickup")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не с вами в ангаре");

	new Float:X, Float:Y, Float:Z, virtualworld, interiorid;
	new indx = GetPVarInt(playerid, "InPickup")-1;

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_X, X);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Y, Y);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Z, Z);

	virtualworld = Streamer_GetIntData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_WORLD_ID);
	interiorid = Streamer_GetIntData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_INTERIOR_ID);
	DeletePVar(id, "InPickup");

	SetPlayerPosition(id, X, Y, Z, Pickups[indx][PickAngle], virtualworld, interiorid);

	new str[200];
	format(str, sizeof(str), Color_Gold"%s %s[%d] выгнал вас из ангара", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
	SendClientMessage(id, -1, str);

	format(str, sizeof(str), Color_Gold"Вы выгнали %s[%d] из ангара", pInfo[id][pName], id);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:astart(playerid)
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");
	if(GetPVarInt(playerid, "InPickup")-1 != HangarOneEnter && GetPVarInt(playerid, "InPickup")-1 != HangarTwoEnter
	&& GetPVarInt(playerid, "InPickup")-1 != HangarThreeEnter && GetPVarInt(playerid, "InPickup")-1 != HangarFourEnter
	&& GetPVarInt(playerid, "InPickup")-1 != HangarFiveEnter && GetPVarInt(playerid, "InPickup")-1 != HangarSixEnter) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не в ангаре");

	foreach(new i:Player)
	{
		if(pInfo[i][pAuth] && GetPVarInt(playerid, "InPickup") == GetPVarInt(i, "InPickup"))
		{
			PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
			SetPVarInt(i, "HangarTime", 5);
			new str[20];
			format(str, sizeof(str), "~w~%d", GetPVarInt(i, "HangarTime"));
			GameTextForPlayer(i, str, 1000, 3);
		}
	}
	return 1;
}

CMD:aclose(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/aclose [1-6]");
	if(id < 1 || id > 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Номер ангара от 1 до 6");
	id--;
	if(!HangarStatus[id]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот ангар уже закрыт");
	HangarStatus[id] = false;

	new str[200];
	format(str, sizeof(str), "** %s %s[%d] закрыл ангар номер %d **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, id+1);
	SendRMessage(playerid, str);

	switch(id)
	{
		case 0: UpdateDynamic3DTextLabelText(Pickups[HangarOneEnter][PickTextID], -1, Color_White"Ангар №1\nСтатус: "Color_Red"Закрыт");
		case 1: UpdateDynamic3DTextLabelText(Pickups[HangarTwoEnter][PickTextID], -1, Color_White"Ангар №2\nСтатус: "Color_Red"Закрыт");
		case 2: UpdateDynamic3DTextLabelText(Pickups[HangarThreeEnter][PickTextID], -1, Color_White"Ангар №3\nСтатус: "Color_Red"Закрыт");
		case 3: UpdateDynamic3DTextLabelText(Pickups[HangarFourEnter][PickTextID], -1, Color_White"Ангар №4\nСтатус: "Color_Red"Закрыт");
		case 4: UpdateDynamic3DTextLabelText(Pickups[HangarFiveEnter][PickTextID], -1, Color_White"Ангар №5\nСтатус: "Color_Red"Закрыт");
		case 5: UpdateDynamic3DTextLabelText(Pickups[HangarSixEnter][PickTextID], -1, Color_White"Ангар №6\nСтатус: "Color_Red"Закрыт");
	}
	return 1;
}

CMD:aopen(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/aopen [1-6]");
	if(id < 1 || id > 6) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Номер ангара от 1 до 6");
	id--;
	if(HangarStatus[id]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот ангар уже открыт");
	HangarStatus[id] = true;

	new str[200];
	format(str, sizeof(str), "** %s %s[%d] открыл ангар номер %d **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid, id+1);
	SendRMessage(playerid, str);

	switch(id)
	{
		case 0: UpdateDynamic3DTextLabelText(Pickups[HangarOneEnter][PickTextID], -1, Color_White"Ангар №1\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
		case 1: UpdateDynamic3DTextLabelText(Pickups[HangarTwoEnter][PickTextID], -1, Color_White"Ангар №2\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
		case 2: UpdateDynamic3DTextLabelText(Pickups[HangarThreeEnter][PickTextID], -1, Color_White"Ангар №3\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
		case 3: UpdateDynamic3DTextLabelText(Pickups[HangarFourEnter][PickTextID], -1, Color_White"Ангар №4\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
		case 4: UpdateDynamic3DTextLabelText(Pickups[HangarFiveEnter][PickTextID], -1, Color_White"Ангар №5\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
		case 5: UpdateDynamic3DTextLabelText(Pickups[HangarSixEnter][PickTextID], -1, Color_White"Ангар №6\nСтатус: "Color_Green"Открыт\n"Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]");
	}
	return 1;
}

CMD:news(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid, "InPickup")-1 != SanNewsEnter && (!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только в офисе San News либо в фургоне");
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/news [Сообщение]");

	format(message, sizeof(message), Color_News"Новости от %s[%d]: %s", pInfo[playerid][pName], playerid, message);
	SendAllMessage(message);
	return 1;
}

CMD:live(playerid, params[])
{
	if(pInfo[playerid][pMembers] != Fraction_SanNews) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам San News");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid, "InPickup")-1 == SanNewsEnter)
	{
		LiveStatus = !LiveStatus;
		new str[200];
		if(LiveStatus)
		{
			format(str, sizeof(str), "** %s %s[%d] запустил эфир **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
			SendRMessage(playerid, str);
			UpdateDynamic3DTextLabelText(Texts3D[LiveText], -1, Main_Color"Эфир\n"Color_White"Статус: "Color_Green"Онлайн");
		}
		else
		{
			format(str, sizeof(str), "** %s %s[%d] завершил эфир **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
			SendRMessage(playerid, str);
			UpdateDynamic3DTextLabelText(Texts3D[LiveText], -1, Main_Color"Эфир\n"Color_White"Статус: "Color_Red"Оффлайн");
		}
	}
	else if(vehicleid && vInfo[vehicleid][vType] == VehicleTypeFraction && vInfo[vehicleid][vOwner] == pInfo[playerid][pMembers])
	{
		new str[200];
		if(vInfo[vehicleid][vModel] != 582 && vInfo[vehicleid][vModel] != 488) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В этом транспорте отсутствует оборудование для эфира");
		if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
		{
			format(str, sizeof(str), "** %s %s[%d] завершил эфир в транспорте **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
			SendRMessage(playerid, str);
			DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
			ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "Отключил(а) аппаратуру прямого эфира");
		}
		else
		{
			format(str, sizeof(str), "** %s %s[%d] запустил эфир в транспорте **", FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]], pInfo[playerid][pName], playerid);
			SendRMessage(playerid, str);

			vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(Main_Color"Эфир запущен", -1, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
			ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "Подключил(а) аппаратуру прямого эфира");
		}
	}
	else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только в офисе San News либо в фургоне/вертолете");
	return 1;
}

CMD:skin(playerid)
{
	ShowPlayerSkinList(playerid);
	return 1;
}

CMD:spawnchange(playerid)
{
	ShowDialog(playerid, D_SpawnChange, DIALOG_STYLE_LIST, Main_Color"Изменить место появления", Main_Color"- "Color_White"Респавн новичков\n\
	"Main_Color"- "Color_White"Дом\n\
	"Main_Color"- "Color_White"Респавн фракции", "Далее", "Закрыть");
	return 1;
}
alias:spawnchange("spch");

CMD:househeal(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(GetPVarInt(playerid, "InHouse") != pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится у себя дома");

	AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
	if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");

	pInfo[playerid][pHealth] = 100.0;
	SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
	SendClientMessage(playerid, -1, Color_White"Вы использовали аптечку");
	return 1;
}

CMD:towcar(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");

	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && GetPlayerVehicleID(i) == pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Кто-то сидит в вашей машине, вы не можете её отбуксировать");
	}

	if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Буксировка стоит 1.000$ у вас недостаточно средств");
	GivePlayerMoneyEx(playerid, -1000);

	GiveCompanyPay(playerid, BusinessTowCar, 1000);

	new panels, doors, lights, tires, Float:Health;
	GetVehicleDamageStatus(pInfo[playerid][pVehicleID], panels, doors, lights, tires);
	AntiCheatGetVehicleHealth(pInfo[playerid][pVehicleID], Health);

	SetVehicleToRespawn(pInfo[playerid][pVehicleID]);

	UpdateVehicleDamageStatus(pInfo[playerid][pVehicleID], panels, doors, lights, tires);
	SetVehicleHealth(pInfo[playerid][pVehicleID], Health);
	SendClientMessage(playerid, -1, Color_White"Транспорт успешно отбуксирован к месту стоянки");
	return 1;
}

CMD:fixcar(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");

	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && GetPlayerVehicleID(i) == pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Кто-то сидит в вашей машине, вы не можете её отбуксировать");
	}

	if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Буксировка стоит 1.000$ у вас недостаточно средств");
	GivePlayerMoneyEx(playerid, -1000);

	GiveCompanyPay(playerid, BusinessTowCar, 1000);

	SetVehicleToRespawn(pInfo[playerid][pVehicleID]);
	SendClientMessage(playerid, -1, Color_White"Транспорт успешно отбуксирован к месту стоянки");
	return 1;
}

CMD:parking(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине");
	if(vehicleid != pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в вашем личном транспорте");
	if(GetVehicleDistanceFromPoint(vehicleid, hInfo[pInfo[playerid][pHouseID]][hCarX], hInfo[pInfo[playerid][pHouseID]][hCarY], hInfo[pInfo[playerid][pHouseID]][hCarZ]) > 50.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Место появления машины не может быть дальше 50 метров от дома");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetVehiclePos(vehicleid, X, Y, Z);
	GetVehicleZAngle(vehicleid, A);

	hInfo[pInfo[playerid][pHouseID]][hCarX] = X;
	hInfo[pInfo[playerid][pHouseID]][hCarY] = Y;
	hInfo[pInfo[playerid][pHouseID]][hCarZ] = Z;
	hInfo[pInfo[playerid][pHouseID]][hCarA] = A;

	UnloadHouseVehicle(playerid);
	new query[250];
	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `X` = '%f', `Y` = '%f', `Z` = '%f', `A` = '%f' WHERE `Type` = '%d' AND `Owner` = '%d'",
	hInfo[pInfo[playerid][pHouseID]][hCarX],
	hInfo[pInfo[playerid][pHouseID]][hCarY],
	hInfo[pInfo[playerid][pHouseID]][hCarZ],
	hInfo[pInfo[playerid][pHouseID]][hCarA],
	VehicleTypePlayer,
	pInfo[playerid][pID]);
	mysql_tquery(DB, query);

	SaveHouseFloat(pInfo[playerid][pHouseID], "CarX", hInfo[pInfo[playerid][pHouseID]][hCarX]);
	SaveHouseFloat(pInfo[playerid][pHouseID], "CarY", hInfo[pInfo[playerid][pHouseID]][hCarY]);
	SaveHouseFloat(pInfo[playerid][pHouseID], "CarZ", hInfo[pInfo[playerid][pHouseID]][hCarZ]);
	SaveHouseFloat(pInfo[playerid][pHouseID], "CarA", hInfo[pInfo[playerid][pHouseID]][hCarA]);

	query[0] = EOS;

	mysql_format(DB, query, sizeof(query), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d' AND `Selected` = '1'", VehicleTypePlayer, pInfo[playerid][pID]);
	mysql_tquery(DB, query, "LoadVehicle", "d", playerid);
	SendClientMessage(playerid, -1, Color_White"Вы успешно изменили место парковки транспорта");
	return 1;
}

CMD:platenumber(playerid, params[])
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");
	new Number[30];
	if(sscanf(params, "s[30]", Number)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/platenumber [Номер]");
	if(strlen(Number) > 9) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Номерной знак не должен быть длинее 9 символов");
	if(GetVehicleDistanceFromPoint(pInfo[playerid][pVehicleID], hInfo[pInfo[playerid][pHouseID]][hCarX], hInfo[pInfo[playerid][pHouseID]][hCarY], hInfo[pInfo[playerid][pHouseID]][hCarZ]) > 10.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Для смены транспорта, ваше текущее тс должно находится возле места его стоянки");

	vInfo[pInfo[playerid][pVehicleID]][vPlateNumber][0] = EOS;
	strcat(vInfo[pInfo[playerid][pVehicleID]][vPlateNumber], Number);
	SetVehicleNumberPlate(pInfo[playerid][pVehicleID], vInfo[pInfo[playerid][pVehicleID]][vPlateNumber]);
	SetVehicleToRespawn(pInfo[playerid][pVehicleID]);

	SaveCarStr(pInfo[playerid][pVehicleID], "PlateNumber", vInfo[pInfo[playerid][pVehicleID]][vPlateNumber]);

	SendClientMessage(playerid, -1, Color_White"Вы успешно изменили номерной знак транспорта");
	return 1;
}

CMD:givekey(playerid, params[])
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/givekey [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите передать ключи");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" взять ключи от "Main_Color"%s", pInfo[id][pName], CarName[vInfo[pInfo[playerid][pVehicleID]][vModel]-400]);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo givekey чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам взять ключи от "Main_Color"%s", pInfo[playerid][pName], CarName[vInfo[pInfo[playerid][pVehicleID]][vModel]-400]);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept givekey принять предложение или /cancel givekey чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_GiveKey);
	return 1;
}

CMD:carcolor(playerid, params[])
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(!pInfo[playerid][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас не выбрана машина");

	new color1, color2;
	if(sscanf(params, "dd", color1, color2)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/carcolor [Цвет 1] [Цвет 2]");
	if(color1 > 255 || color1 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 1 может быть от 0 до 255");
	if(color2 > 255 || color2 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 2 может быть от 0 до 255");
	if(pInfo[playerid][pMoney] < 2500) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Смена цвета стоит 2.500$ у вас недостаточно средств");
	GivePlayerMoneyEx(playerid, -2500);

	vInfo[pInfo[playerid][pVehicleID]][vColor1] = color1;
	vInfo[pInfo[playerid][pVehicleID]][vColor2] = color2;

	SaveCarInt(pInfo[playerid][pVehicleID], "Color1", vInfo[pInfo[playerid][pVehicleID]][vColor1]);
	SaveCarInt(pInfo[playerid][pVehicleID], "Color2", vInfo[pInfo[playerid][pVehicleID]][vColor2]);

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(pInfo[playerid][pVehicleID], vInfo[pInfo[playerid][pVehicleID]][vColor1], vInfo[pInfo[playerid][pVehicleID]][vColor2]);
	SendClientMessage(playerid, -1, Color_White"Вы успешно перекрасили транспорт");
	return 1;
}

CMD:garage(playerid)
{
	if(GetPVarInt(playerid, "CarUpgrade")) return 1;
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");

	if(!GetPVarInt(playerid, "OpenGarage"))
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d'", VehicleTypePlayer, pInfo[playerid][pID]);
		mysql_tquery(DB, query, "ShowGarage", "d", playerid);
	}
	else CloseGarage(playerid);
	return 1;
}

CMD:carupgrade(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	if(GetPVarInt(playerid, "CarUpgrade")) CloseCarUpgrade(playerid);
	else ShowCarUpgrade(playerid, 1);
	return 1;
}

CMD:sellbusiness(playerid, params[])
{
	if(!pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");
	new id, money;
	if(sscanf(params, "dd", id, money))
	{
		new str[200];
		new BusinessID = pInfo[playerid][pBusinessID];
		format(str, sizeof(str), Color_White"Вы уверены что хотите продать "Main_Color"Бизнес №"Color_White": %d\n\
		"Main_Color"%s\n\
		"Color_White"Цена продажи: "Color_Green"%d%s",
		bInfo[BusinessID][bID],
		BusinessType[bInfo[BusinessID][bType]][bName],
		bInfo[BusinessID][bPrice],
		(bInfo[BusinessID][bIsDonate]) ? (" донат рублей"):("$"));
		ShowDialog(playerid, D_Business_SellGov, DIALOG_STYLE_MSGBOX, Main_Color"Продажа бизнеса", str, Color_White"Да", Color_White"Нет");
		return SendClientMessage(playerid, -1, Color_Grey"Если вы хотите продать бизнес игроку используйте /sellbusiness [ID] [Цена]");
	}
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(money < 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверная цена");
	if(pInfo[id][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока уже есть бизнес");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите продать бизнес");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" купить "Main_Color"Бизнес №"Color_White": %d за "Color_Green"%d$", pInfo[id][pName], pInfo[playerid][pBusinessID], money);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo business чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам купить "Main_Color"Бизнес №"Color_White": %d за "Color_Green"%d$", pInfo[playerid][pName], pInfo[playerid][pBusinessID], money);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept business принять предложение или /cancel business чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_SellBusiness, money);
	return 1;
}

CMD:exchangebusiness(playerid, params[])
{
	if(!pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/exchangebusiness [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(!pInfo[id][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока нет бизнеса");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока с которым хотите обменяться бизнесами");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" обменять ваш бизнес на "Main_Color"Бизнес №"Color_White": %d", pInfo[id][pName], pInfo[id][pBusinessID]);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo exchangebusiness чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам обменять ваш бизнес на "Main_Color"Бизнес №"Color_White": %d", pInfo[playerid][pName], pInfo[playerid][pBusinessID]);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept exchangebusiness принять предложение или /cancel exchangebusiness чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_ExcangeBusiness);
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");

	new id, money;
	if(sscanf(params, "dd", id, money))
	{
		new str[200];
		format(str, sizeof(str), Color_White"Вы уверены что хотите продать "Main_Color"Дом №"Color_White": %d\n\
		"Color_White"Цена продажи: "Color_Green"%d%s",
		pInfo[playerid][pHouseID],
		hInfo[pInfo[playerid][pHouseID]][hPrice],
		(hInfo[pInfo[playerid][pHouseID]][hIsDonate]) ? (" донат рублей"):("$"));
		ShowDialog(playerid, D_House_SellGov, DIALOG_STYLE_MSGBOX, Main_Color"Продажа дома", str, Color_White"Да", Color_White"Нет");
		return SendClientMessage(playerid, -1, Color_Grey"Если вы хотите продать дом игроку используйте /sellhouse [ID] [Цена]");
	}
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(money < 1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверная цена");
	if(pInfo[id][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока уже есть дом");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите продать дом");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" купить "Main_Color"Дом №"Color_White": %d за "Color_Green"%d$", pInfo[id][pName], pInfo[playerid][pHouseID], money);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo house чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам купить "Main_Color"Дом №"Color_White": %d за "Color_Green"%d$", pInfo[playerid][pName], pInfo[playerid][pHouseID], money);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept house принять предложение или /cancel house чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_SellHouse, money);
	return 1;
}

CMD:exchangehouse(playerid, params[])
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/exchangehouse [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(!pInfo[id][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У этого игрока нет дома");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока с которым хотите обменяться домами");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" обменять ваш дом на "Main_Color"Дом №"Color_White": %d", pInfo[id][pName], pInfo[id][pHouseID]);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo exchangehouse чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам обменять ваш дом на "Main_Color"Дом №"Color_White": %d", pInfo[playerid][pName], pInfo[playerid][pHouseID]);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept exchangehouse принять предложение или /cancel exchangehouse чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_ExcangeHouse);
	return 1;
}

CMD:open(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");

	new str[100];
	hInfo[pInfo[playerid][pHouseID]][hClose] = (hInfo[pInfo[playerid][pHouseID]][hClose]) ? (false) : (true);
	SaveHouseBool(hInfo[pInfo[playerid][pHouseID]][hID], "Close", hInfo[pInfo[playerid][pHouseID]][hClose]);
	UpdateHouse(hInfo[pInfo[playerid][pHouseID]][hID]);

	format(str, sizeof(str), Color_White"Вы %s "Color_White"дверь дома", (hInfo[pInfo[playerid][pHouseID]][hClose]) ? (Color_Red"закрыли") : (Color_Green"открыли"));
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:free(playerid, params[])
{
	if(pInfo[playerid][pJob] != Job_Lawyer) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не работаете адвокатом");
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/free [ID] [Сумма]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(money < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверная сумма");
	if(!GetPVarInt(playerid, "LawyerLic")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нет лицензии на освобождение, приобрести её можно в мэрии");
	if(GetPVarInt(playerid, "LawyerCD")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже недавно освободили кого-то, подождите немного пока разберутся с бумагами");
	if(pInfo[id][pJail] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не в тюрьме");
	if(pInfo[id][pJailNoFree]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этого игрока запрещено выпускать");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите выпустить");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" освободиться за "Color_Green"%d$", pInfo[id][pName], money);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, Color_White"Используйте /undo free чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам освободиться за "Color_Green"%d$", pInfo[playerid][pName], money);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, Color_White"Используйте /accept free принять предложение или /cancel free чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_Free, money);
	return 1;
}

CMD:service(playerid, params[])
{
	if(GetPVarInt(playerid, "ServiceCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Использовать /service можно раз в 2 минуты");
	new type[50];
	if(sscanf(params, "s[50]", type)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/service [mechanic/medic]");

	if(!strcmp(type, "mechanic"))
	{
		new str[200];
		format(str, sizeof(str), Color_Blue2"[Диспетчер] %s[%d] вызывает механика. Приянть вызов (/accept mechanic)", pInfo[playerid][pName], playerid);
		foreach(new i:Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pJob] == Job_Mechanic && GetPVarInt(i, "MechanicFare"))
			{
				SendClientMessage(i, -1, str);
			}
		}
		SendClientMessage(playerid, -1, Color_Blue2"[Диспетчер] Ваш запрос отправлен всем механикам находящимся на дежурстве. Ожидайте ответа.");
		SetPVarInt(playerid, "WaitMechanic", 1);
		SetPVarInt(playerid, "ServiceCD", gettime()+120);
	}
	else if(!strcmp(type, "medic"))
	{
		if(GetPVarInt(playerid, "PlayerKnockoutStatus") != Player_In_Knockout) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не нуждаетесь в помощи медика");
		new str[200];
		format(str, sizeof(str), Color_Red2"[Диспетчер] %s[%d] вызывает медика. Приянть вызов (/accept medic)", pInfo[playerid][pName], playerid);
		foreach(new i:Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == Fraction_Hospital && GetPVarInt(i, "MedicDuty"))
			{
				SendClientMessage(i, -1, str);
			}
		}
		SendClientMessage(playerid, -1, Color_Red2"[Диспетчер] Ваш запрос отправлен всем медикам находящимся на дежурстве. Ожидайте ответа.");
		SetPVarInt(playerid, "WaitMedic", 1);
		SetPVarInt(playerid, "ServiceCD", gettime()+120);
	}
	else if(!strcmp(type, "taxi"))
	{
		new str[200];
		format(str, sizeof(str), "[Диспетчер] %s[%d] заказывает такси. Приянть заказ (/accept taxi)", pInfo[playerid][pName], playerid);
		foreach(new i:Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == Fraction_Taxi && GetPVarInt(i, "TaxiFare"))
			{
				SendClientMessage(i, FractionColor[Fraction_Taxi], str);
			}
		}
		SendClientMessage(playerid, FractionColor[Fraction_Taxi], "[Диспетчер] Ваш запрос отправлен всем таксистам находящимся на дежурстве. Ожидайте ответа.");
		SetPVarInt(playerid, "WaitTaxi", 1);
		SetPVarInt(playerid, "ServiceCD", gettime()+120);
	}
	return 1;
}

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");
	if(!GetPVarInt(playerid, "MechanicFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на дежурстве");
	if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Mechanic && vInfo[vehicleid][vRenter] == playerid)
	{
		new id, money;
		if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/repair [ID] [Сумма]");
		if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
		if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
		if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
		if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
		if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
		if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок которому вы хотите предложить починиться не находится в машине");
		if(money <= 0 || money > 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Сумма починки от 1$ до 10.000$");

		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(GetPlayerVehicleID(id), X, Y, Z);
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от машины которую хотите починить");

		new str[200];
		format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" починиться за "Color_Green"%d$", pInfo[id][pName], money);
		SendClientMessage(playerid, -1, str);
		SendClientMessage(playerid, -1, Color_White"Используйте /undo repair чтобы отменить свое предложение");

		str[0] = EOS;
		format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам починиться за "Color_Green"%d$", pInfo[playerid][pName], money);
		SendClientMessage(id, -1, str);
		SendClientMessage(id, -1, Color_White"Используйте /accept repair принять предложение или /cancel repair чтобы отменить предложение");

		SetPlayerOffer(playerid, id, OfferID_Repair, money);
	}
	else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");
	return 1;
}

CMD:mfill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");
	if(!GetPVarInt(playerid, "MechanicFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на дежурстве");
	if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Mechanic && vInfo[vehicleid][vRenter] == playerid)
	{
		new id, money, percent;
		if(sscanf(params, "ddd", id, money, percent)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/mfill [ID] [Сумма за 1%] [Количество %]");
		if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
		if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
		if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
		if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
		if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
		if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок которому вы хотите предложить заправиться не находится в машине");
		if(money <= 0 || money > 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Сумма починки от 1$ до 10.000$");
		if(percent <= 0 || percent > 200) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество процентов от 1% до 200%");

		new PlayerVehicleid = GetPlayerVehicleID(id);

		switch(pInfo[playerid][pSkill][Job_Mechanic])
		{
			case 1:
			{
				if(float(percent)+vInfo[PlayerVehicleid][vFuel] > 50.0)
				{
					new str[200];
					format(str, sizeof(str), Color_White"Сейчас в машине %s "Main_Color"%.1f"Color_White"%% топлива", pInfo[id][pName], vInfo[PlayerVehicleid][vFuel]);
					SendClientMessage(playerid, -1, str);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вашем уровне механика вы не можете заправить машину более чем на 50 процентов");
				}
			}
			case 2:
			{
				if(float(percent)+vInfo[PlayerVehicleid][vFuel] > 70.0)
				{
					new str[200];
					format(str, sizeof(str), Color_White"Сейчас в машине %s "Main_Color"%.1f"Color_White"%% топлива", pInfo[id][pName], vInfo[PlayerVehicleid][vFuel]);
					SendClientMessage(playerid, -1, str);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вашем уровне механика вы не можете заправить машину более чем на 70 процентов");
				}
			}
			case 3:
			{
				if(float(percent)+vInfo[PlayerVehicleid][vFuel] > 100.0)
				{
					new str[200];
					format(str, sizeof(str), Color_White"Сейчас в машине %s "Main_Color"%.1f"Color_White"%% топлива", pInfo[id][pName], vInfo[PlayerVehicleid][vFuel]);
					SendClientMessage(playerid, -1, str);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вашем уровне механика вы не можете заправить машину более чем на 100 процентов");
				}
			}
			case 4:
			{
				if(float(percent)+vInfo[PlayerVehicleid][vFuel] > 150.0)
				{
					new str[200];
					format(str, sizeof(str), Color_White"Сейчас в машине %s "Main_Color"%.1f"Color_White"%% топлива", pInfo[id][pName], vInfo[PlayerVehicleid][vFuel]);
					SendClientMessage(playerid, -1, str);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вашем уровне механика вы не можете заправить машину более чем на 150 процентов");
				}
			}
			case 5:
			{
				if(float(percent)+vInfo[PlayerVehicleid][vFuel] > 200.0)
				{
					new str[200];
					format(str, sizeof(str), Color_White"Сейчас в машине %s "Main_Color"%.1f"Color_White"%% топлива", pInfo[id][pName], vInfo[PlayerVehicleid][vFuel]);
					SendClientMessage(playerid, -1, str);
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На вашем уровне механика вы не можете заправить машину более чем на 200 процентов");
				}
			}
		}

		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(PlayerVehicleid, X, Y, Z);
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от машины которую хотите заправить");

		new str[300];
		format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s"Color_White" заправиться на %d%% за "Color_Green"%d$ "Color_White"за 1%%", pInfo[id][pName], percent, money);
		SendClientMessage(playerid, -1, str);
		SendClientMessage(playerid, -1, "Используйте /undo mfill чтобы отменить свое предложение");

		str[0] = EOS;
		format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам заправиться на %d%% за "Color_Green"%d$ за 1%%", pInfo[playerid][pName], percent, money);
		SendClientMessage(id, -1, str);
		SendClientMessage(id, -1, "Используйте /accept mfill принять предложение или /cancel mfill чтобы отменить предложение");

		SetPlayerOffer(playerid, id, OfferID_Fill, money, percent);
	}
	else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в рабочем транспорте");
	return 1;
}

CMD:fare(playerid, params[])
{
	if(GetPVarInt(playerid, "FareCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Использовать /fare можно раз в 3 минуты");
	if(pInfo[playerid][pJob] != Job_Mechanic && pInfo[playerid][pMembers] != Fraction_Taxi) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам недоступна данная команда");

	if(pInfo[playerid][pMembers] == Fraction_Taxi)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeFraction || vInfo[vehicleid][vOwner] != Fraction_Taxi || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть за рулем рабочего транспорта");
		if(GetPVarInt(playerid, "TaxiFare"))
		{
			if(GetPVarInt(playerid, "TaxiVehicle") != vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Чтобы закончить дежурство, вы должны находится в машине на которой вышли на дежурство");
			SendClientMessage(playerid, -1, Color_Yellow"Вы покинули дежурство.");
			DeletePVar(playerid, "TaxiFare");
			SetPVarInt(playerid, "FareCD", gettime()+180);
			if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText])) DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			vInfo[vehicleid][vText] = Text3D:0;
		}
		else
		{
			if(vInfo[vehicleid][vRenter] != -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На этой машине уже кто-то вышел на дежурство");
			new money;
			if(sscanf(params, "d", money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/fare [Тариф]");
			if(money < 1 || money > 2000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Тариф должен быть не меньше 1$ и не больше 2000$");
			SetPVarInt(playerid, "TaxiFare", money);
			new str[200];
			format(str, sizeof(str), Color_Gold"[Диспетчер] Сотрудник такси %s готов(а) к выезду. Тариф - %d$. Вызвать такси (/service taxi)", pInfo[playerid][pName], money);
			SendAllMessage(str);
			SetPVarInt(playerid, "FareCD", gettime()+180);
			if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText])) DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
			format(str, sizeof(str), "Тариф: "Color_Green"%d$ "Color_Gold"за 1 км\n"Color_Gold"Новичкам бесплатно", money);
			vInfo[vehicleid][vText] = CreateDynamic3DTextLabel(str, FractionColor[Fraction_Taxi], 0.0, 0.0, 0.0, 15.0, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
			SetPVarInt(playerid, "TaxiVehicle", vehicleid);
			vInfo[vehicleid][vRenter] = playerid;
		}
	}
	else if(pInfo[playerid][pJob] == Job_Mechanic)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!vehicleid || vInfo[vehicleid][vType] != VehicleTypeJob || vInfo[vehicleid][vOwner] != Job_Mechanic || vInfo[vehicleid][vRenter] != playerid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть за рулем рабочего транспорта");
		if(GetPVarInt(playerid, "MechanicFare"))
		{
			SendClientMessage(playerid, -1, Color_Yellow"Вы покинули дежурство.");
			DeletePVar(playerid, "MechanicFare");
			SetPVarInt(playerid, "FareCD", gettime()+180);
		}
		else
		{
			SetPVarInt(playerid, "MechanicFare", 1);
			new str[200];
			format(str, sizeof(str), Color_Blue2"[Диспетчер] Механик %s готов(а) к выезду. Вызвать механика (/service mechanic)", pInfo[playerid][pName]);
			SendAllMessage(str);
			SendClientMessage(playerid, -1, Color_Yellow"Используйте /mfill - Для заправки транспорта");
			SendClientMessage(playerid, -1, Color_Yellow"Используйте /repair - Для починки транспорта");
			SetPVarInt(playerid, "FareCD", gettime()+180);
		}
	}
	return 1;
}

CMD:carjack(playerid)
{
	if(pInfo[playerid][pJob] != Job_CarThief) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не работаете автоугонщиком");
	if(!GetPVarInt(playerid, "ThiefCar")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам не выдано задание на угон автомобиля");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не должны быть в машине");
	foreach(new i: Vehicle)
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(i, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
		{
			if(GetPVarInt(playerid, "ThiefCar") != i) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это не тот автомобиль который нужно угнать");
			GetVehicleLeftDoorPos(i, X, Y, Z);
			if(!IsPlayerInRangeOfPoint(playerid, 1.25, X, Y, Z)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Встаньте рядом с передней левой дверью чтобы начать взлом");

			new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
			GetVehicleParamsEx(vInfo[i][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);

			if(!doors) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Двери этого транспорта уже открыты");

			TogglePlayerControllable(playerid, false);
        	ApplyAnimation(playerid,"OTB","betslp_lkabt",4.1, true, true, true, false, 0, true);
        	SendClientMessage(playerid, -1, Color_Yellow"Вы начали взлом, нажимайте кнопки показаные у вас на экране чтобы взломать дверь.");
        	SetPVarInt(playerid, "CarJackMiniGame", 1+random(3));
        	SetPVarInt(playerid, "CarJackMiniGameStatus", 1);
        	return 1;
		}
	}
	SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть возле машины");
	return 1;
}

CMD:skill(playerid)
{
	new str[700];
	for(new i = Job_Trucker; i < sizeof(Jobs); i++)
	{
		if(Jobs[i][IsUnofficial]) continue;
		format(str, sizeof(str), "%s"Main_Color"%s"Color_White" %d уровень (%d/%d)\n", str, Jobs[i][JobNames], pInfo[playerid][pSkill][i], pInfo[playerid][pSkillExp][i], Jobs[i][JobLeveling][pInfo[playerid][pSkill][i]]);
	}

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Навыки", str, Color_White"Закрыть", "");
	return 1;
}

CMD:lotto(playerid, params[])
{
	if(!LotteryStarted) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Сейчас лотерея не проводится");
	new num;
	if(sscanf(params, "d", num)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/lotto [Число 0-80]");
	if(num < 0 || num > 80) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"В лотерее нужно выбирать числа от 0 до 80");

	new query[100];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `lottery` WHERE `ID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, query, "LotteryCheckAccount", "dd", playerid, num);
	return 1;
}

forward LotteryCheckAccount(playerid, num);
public LotteryCheckAccount(playerid, num)
{
	new row = cache_num_rows();
	if(row) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже участвуете в лотерее");

	if(pInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Лотерейный билет стоит 1000$ у вас недостаточно средств");
	GivePlayerMoneyEx(playerid, -1000);

	new query[200];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `lottery` (`ID`, `Num`) VALUES ('%d', '%d')", pInfo[playerid][pID], num);
	mysql_tquery(DB, query);

	query[0] = EOS;
	format(query, sizeof(query), Color_Yellow"Вы сделали ставку в лотерее на номер "Main_Color"%d", num);
	SendClientMessage(playerid, -1, query);
	return 1;
}

CMD:buylevel(playerid)
{
	if(pInfo[playerid][pLevel] >= 50) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы достигли максимального уровня!");
	new money = (pInfo[playerid][pLevel]+1)*10000;
	if(pInfo[playerid][pExp] >= (pInfo[playerid][pLevel]+1)*4)
	{
		if(pInfo[playerid][pMoney] < money)
		{
			new str[200];
			format(str, sizeof(str), Color_Red"[Ошибка] "Color_Grey"Повышене на %d уровень стоит "Color_Green"%d$"Color_Grey". У вас недостаточно средств", pInfo[playerid][pLevel]+1, money);
			return SendClientMessage(playerid, -1, str);
		}
		GivePlayerMoneyEx(playerid, -money);

		pInfo[playerid][pLevel] += 1;
		pInfo[playerid][pExp] = 0;
		pInfo[playerid][pUpgradePoint] += 2;

		SendClientMessage(playerid, -1, Color_Yellow"Ваш уровень повышен, поздравляем!");
		SendClientMessage(playerid, -1, Color_White"Спасибо что играете на сервере "Main_Color Project_Name);

		if(pInfo[playerid][pLevel] >= 50)
		{
			pInfo[playerid][pLevel] = 50;
			SendClientMessage(playerid, -1, Color_White"Поздравляем! Вы достигли максимального "Main_Color"50"Color_White"уровня");
			SendClientMessage(playerid, -1, Color_White"Спасибо что играете на сервере "Main_Color Project_Name);
		}

		SavePlayerInt(playerid, "Level", pInfo[playerid][pLevel]);
		SavePlayerInt(playerid, "Exp", pInfo[playerid][pExp]);
		SavePlayerInt(playerid, "UpgradePoint", pInfo[playerid][pUpgradePoint]);
		PlayerLevelUpdate(playerid);
	}
	else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно EXP для перехода на следующий уровень!");
	return 1;
}

stock SetPlayerOffer(ProposePlayer, playerid, OfferID, money = 0, count = 0, ItemsID = -1)
{
	SetPVarInt(ProposePlayer, "ProposeOfferID", OfferID);
	SetPVarInt(ProposePlayer, "ProposePlayerID", playerid+1);
	SetPVarInt(ProposePlayer, "ProposeAccountID", pInfo[playerid][pID]);

	SetPVarInt(playerid, "AcceptOfferID", OfferID);
	SetPVarInt(playerid, "AcceptPlayerID", ProposePlayer+1);
	SetPVarInt(playerid, "AcceptAccountID", pInfo[ProposePlayer][pID]);
	if(money) SetPVarInt(playerid, "AcceptMoney", money);
	if(count) SetPVarInt(playerid, "AcceptCount", count);
	if(ItemsID != -1) SetPVarInt(playerid, "AcceptItemID", ItemsID);
	return 1;
}

stock UndoPropose(playerid)
{
	new OfferID = GetPVarInt(playerid, "ProposeOfferID");
	new AcceptPlayer = GetPVarInt(playerid, "ProposePlayerID") - 1;
	new AcceptPlayerAccountID = GetPVarInt(playerid, "ProposeAccountID");
	DeletePVar(playerid, "ProposeOfferID");
	DeletePVar(playerid, "ProposePlayerID");
	DeletePVar(playerid, "ProposeAccountID");

	new str[200];
	new SubStr[50];

	switch(OfferID)
	{
		case OfferID_Kiss: strcat(SubStr, "поцеловаться");
		case OfferID_Repair: strcat(SubStr, "починиться");
		case OfferID_Fill: strcat(SubStr, "заправиться");
		case OfferID_Free: strcat(SubStr, "об освобождении");
		case OfferID_GiveKey: strcat(SubStr, "о передачи ключей");
		case OfferID_SellHouse: strcat(SubStr, "о продаже дома");
		case OfferID_ExcangeHouse: strcat(SubStr, "об обмене дома");
		case OfferID_SellBusiness: strcat(SubStr, "о продаже бизнеса");
		case OfferID_ExcangeBusiness: strcat(SubStr, "об обмене бизнеса");
		case OfferID_SellGun: strcat(SubStr, "о продаже оружия");
		case OfferID_SellDrugs: strcat(SubStr, "о продаже наркотиков");
	}

	if(IsPlayerConnected(AcceptPlayer) && pInfo[AcceptPlayer][pID] == AcceptPlayerAccountID)
	{
		format(str, sizeof(str), Main_Color"%s"Color_White" отменил предложение %s", pInfo[playerid][pName], SubStr);
		SendClientMessage(AcceptPlayer, -1, str);

		DeletePVar(AcceptPlayer, "AcceptOfferID");
		DeletePVar(AcceptPlayer, "AcceptPlayerID");
		DeletePVar(AcceptPlayer, "AcceptAccountID");
		DeletePVar(AcceptPlayer, "AcceptMoney");
		DeletePVar(AcceptPlayer, "AcceptCount");
		DeletePVar(AcceptPlayer, "AcceptItemID");
	}

	format(str, sizeof(str), Color_White"Вы отменили предложение %s", SubStr);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:undo(playerid, params[])
{
	if(!GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ничего никому не предлагали");
	new type[50];
	if(sscanf(params, "s[50]", type)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/undo [предложение]");

	if(!strcmp(type, "kiss")) UndoPropose(playerid);
	else if(!strcmp(type, "repair")) UndoPropose(playerid);
	else if(!strcmp(type, "mfill")) UndoPropose(playerid);
	else if(!strcmp(type, "free")) UndoPropose(playerid);
	else if(!strcmp(type, "givekey")) UndoPropose(playerid);
	else if(!strcmp(type, "house")) UndoPropose(playerid);
	else if(!strcmp(type, "exchangehouse")) UndoPropose(playerid);
	else if(!strcmp(type, "business")) UndoPropose(playerid);
	else if(!strcmp(type, "exchangebusiness")) UndoPropose(playerid);
	else if(!strcmp(type, "sellgun")) UndoPropose(playerid);
	else if(!strcmp(type, "selldrugs")) UndoPropose(playerid);
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/undo [kiss/repair/mfill/free/givekey/house/exchangehouse/business/exchangebusiness/sellgun/selldrugs]");
	return 1;
}

stock PlayerAccept(playerid)
{
	new OfferID = GetPVarInt(playerid, "AcceptOfferID");
	new ProposePlayer = GetPVarInt(playerid, "AcceptPlayerID") - 1;
	new ProposPlayerAccountID = GetPVarInt(playerid, "AcceptAccountID");
	new money = GetPVarInt(playerid, "AcceptMoney");
	new count = GetPVarInt(playerid, "AcceptCount");
	new ItemsID = GetPVarInt(playerid, "AcceptItemID");
	DeletePVar(playerid, "AcceptOfferID");
	DeletePVar(playerid, "AcceptPlayerID");
	DeletePVar(playerid, "AcceptAccountID");
	DeletePVar(playerid, "AcceptMoney");
	DeletePVar(playerid, "AcceptCount");
	DeletePVar(playerid, "AcceptItemID");

	if(IsPlayerConnected(ProposePlayer) && pInfo[ProposePlayer][pID] == ProposPlayerAccountID)
	{
		DeletePVar(ProposePlayer, "ProposeOfferID");
		DeletePVar(ProposePlayer, "ProposePlayerID");
		DeletePVar(ProposePlayer, "ProposeAccountID");
		switch(OfferID)
		{
			case OfferID_Kiss:
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
				if(IsPlayerInAnyVehicle(ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Второй игрок находится в машине");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);

				if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока с которым хотите поцеловаться");

				SetPlayerFacingPos(playerid, X, Y);

				GetPlayerPos(playerid, X, Y, Z);
				SetPlayerFacingPos(ProposePlayer, X, Y);

				ApplyAnimation(playerid,"BD_FIRE","GRLFRD_KISS_03",4.0,0,0,0,0,0, true);
				ApplyAnimation(ProposePlayer,"BD_FIRE","PLAYA_KISS_03",4.0,0,0,0,0,0, true);

				new str[200];
				format(str, sizeof(str), "%s с %s", (pInfo[playerid][pGender]) ? ("поцеловалась"):("поцеловался"), pInfo[ProposePlayer][pName]);
				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

				format(str, sizeof(str), "%s с %s", (pInfo[ProposePlayer][pGender]) ? ("поцеловалась"):("поцеловался"), pInfo[playerid][pName]);
				ProxDetector(ProposePlayer, MESSAGE_DIST, BitColor_Me, str);
			}
			case OfferID_Repair:
			{
				new vehicleid = GetPlayerVehicleID(ProposePlayer);
				if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Механик должен быть в машине");
				if(!GetPVarInt(ProposePlayer, "MechanicFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот механик больше не на дежурстве");
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Mechanic && vInfo[vehicleid][vRenter] == ProposePlayer)
				{
					if(pInfo[playerid][pMoney] < money) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для починки");
					if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине чтобы принять предложение о починке");

					new Float:X, Float:Y, Float:Z;
					GetVehiclePos(vehicleid, X, Y, Z);
					if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от машины механика");

					GivePlayerMoneyEx(playerid, -money);
					new PlayerVehicleid = GetPlayerVehicleID(playerid);
					RepairVehicle(PlayerVehicleid);
					SetVehicleHealth(PlayerVehicleid, 1000.0);

					UpdatePlayerSkill(ProposePlayer);

					new str[200];
					format(str, sizeof(str), Color_White"Вы починили машину игрока %s к вашей зарплате добавлено"Color_Green" %d$", pInfo[playerid][pName], money);
					SendClientMessage(ProposePlayer, -1, str);

					GivePlayerMoneyInPayDay(ProposePlayer, money);
				}
				else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Механик должен быть в рабочем транспорте");
			}
			case OfferID_Fill:
			{
				new vehicleid = GetPlayerVehicleID(ProposePlayer);
				if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Механик должен быть в машине");
				if(!GetPVarInt(ProposePlayer, "MechanicFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот механик больше не на дежурстве");
				if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Mechanic && vInfo[vehicleid][vRenter] == ProposePlayer)
				{

					if(pInfo[playerid][pMoney] < money*count) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для заправки");
					if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине чтобы принять предложение о заправке");

					new PlayerVehicleid = GetPlayerVehicleID(playerid);
					new Float:X, Float:Y, Float:Z;
					GetVehiclePos(PlayerVehicleid, X, Y, Z);
					if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от машины механика");

					switch(pInfo[ProposePlayer][pSkill][Job_Mechanic])
					{
						case 1:
						{
							if(float(count)+vInfo[PlayerVehicleid][vFuel] > 50.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У механика 1 уровень он не может заправить машину более чем на 50 процентов");
						}
						case 2:
						{
							if(float(count)+vInfo[PlayerVehicleid][vFuel] > 70.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У механика 2 уровень он не может заправить машину более чем на 70 процентов");
						}
						case 3:
						{
							if(float(count)+vInfo[PlayerVehicleid][vFuel] > 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У механика 3 уровень он не может заправить машину более чем на 100 процентов");
						}
						case 4:
						{
							if(float(count)+vInfo[PlayerVehicleid][vFuel] > 150.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У механика 4 уровень он не может заправить машину более чем на 150 процентов");
						}
						case 5:
						{
							if(float(count)+vInfo[PlayerVehicleid][vFuel] > 200.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У механика 5 уровень он не может заправить машину более чем на 200 процентов");
						}
					}

					GivePlayerMoneyEx(playerid, -money*count);
					vInfo[PlayerVehicleid][vFuel] += float(count);
					SaveCarFloat(PlayerVehicleid, "Fuel", vInfo[PlayerVehicleid][vFuel]);

					UpdatePlayerSkill(ProposePlayer);

					new str[200];
					format(str, sizeof(str), Color_White"Вы заправили машину игрока %s на %d%% к вашей зарплате добавлено"Color_Green" %d$", pInfo[playerid][pName], count, money*count);
					SendClientMessage(ProposePlayer, -1, str);

					GivePlayerMoneyInPayDay(ProposePlayer, money*count);

				}
				else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Механик должен быть в рабочем транспорте");
			}
			case OfferID_Free:
			{
				if(pInfo[ProposePlayer][pJob] != Job_Lawyer) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок больше не работаете адвокатом");
				if(!GetPVarInt(ProposePlayer, "LawyerLic")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У адвоката нет лицензии на освобождение");
				if(pInfo[playerid][pJail] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не в тюрьме");
				if(pInfo[playerid][pJailNoFree]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вас запрещено выпускать");
				if(GetPVarInt(ProposePlayer, "LawyerCD")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот адвокат недавно уже освободил кого-то");
				if(pInfo[playerid][pMoney] < money) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств для освобождения");
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от адвоката");

				GivePlayerMoneyEx(playerid, -money);

				UpdatePlayerSkill(ProposePlayer);

				new str[200];
				format(str, sizeof(str), Color_White"Вы освободили игрока "Main_Color"%s "Color_White"к вашей зарплате добавлено"Color_Green" %d$", pInfo[playerid][pName], money);
				SendClientMessage(ProposePlayer, -1, str);

				GivePlayerMoneyInPayDay(ProposePlayer, money);

				format(str, sizeof(str), Main_Color"%s "Color_White"освободил вас из тюрьмы за"Color_Green" %d$", pInfo[ProposePlayer][pName], money);
				SendClientMessage(playerid, -1, str);

				pInfo[playerid][pJail] = 0;
				pInfo[playerid][pJailNoFree] = false;
				SavePlayerInt(playerid, "Jail", pInfo[playerid][pJail]);
				SavePlayerBool(playerid, "JailNoFree", pInfo[playerid][pJailNoFree]);
				pInfo[playerid][pJailedFraction] = Fraction_None;
				SavePlayerInt(playerid, "JailedFraction", pInfo[playerid][pJailedFraction]);

				SendClientMessage(playerid, -1, Color_White"Вы были выпущены из тюрьмы, больше не нарушайте закон");
				SetPlayerPosition(playerid, 144.3278, 1918.0723, 18.9930, 92.2102, 0, 0);

				DeletePVar(ProposePlayer, "LawyerLic");
				SavePlayerInt(ProposePlayer, "LawyerLic", 0);
				SendClientMessage(ProposePlayer, -1, Color_Yellow"Лицензия на освобождение использована.");

				switch(pInfo[ProposePlayer][pSkill][Job_Lawyer])
				{
					case 1:
					{
						SetPVarInt(ProposePlayer, "LawyerCD", 3600);
						SendClientMessage(ProposePlayer, -1, Color_Yellow"Вы сможете освободить следующего игрока через 60 минут");
					}
					case 2:
					{
						SetPVarInt(ProposePlayer, "LawyerCD", 3000);
						SendClientMessage(ProposePlayer, -1, Color_Yellow"Вы сможете освободить следующего игрока через 50 минут");
					}
					case 3:
					{
						SetPVarInt(ProposePlayer, "LawyerCD", 2400);
						SendClientMessage(ProposePlayer, -1, Color_Yellow"Вы сможете освободить следующего игрока через 40 минут");
					}
					case 4:
					{
						SetPVarInt(ProposePlayer, "LawyerCD", 1800);
						SendClientMessage(ProposePlayer, -1, Color_Yellow"Вы сможете освободить следующего игрока через 30 минут");
					}
					case 5:
					{
						SetPVarInt(ProposePlayer, "LawyerCD", 1200);
						SendClientMessage(ProposePlayer, -1, Color_Yellow"Вы сможете освободить следующего игрока через 20 минут");
					}
				}
			}
			case OfferID_GiveKey:
			{
				if(!pInfo[ProposePlayer][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока который дает ключи нет дома");
				if(!pInfo[ProposePlayer][pVehicleID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока который дает ключи не выбрана машина");
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока который хочет передать вам ключи");

				new str[200];
				format(str, sizeof(str), Main_Color"%s "Color_White"взял(а) ключи от"Main_Color" %s", pInfo[playerid][pName], CarName[vInfo[pInfo[ProposePlayer][pVehicleID]][vModel]-400]);
				SendClientMessage(ProposePlayer, -1, str);

				format(str, sizeof(str), Color_White"Вы взяли ключи у "Main_Color"%s "Color_White"от"Main_Color" %s", pInfo[ProposePlayer][pName], CarName[vInfo[pInfo[ProposePlayer][pVehicleID]][vModel]-400]);
				SendClientMessage(playerid, -1, str);
				SetPVarInt(playerid, "CarKey", pInfo[ProposePlayer][pVehicleID]);
			}
			case OfferID_SellBusiness:
			{
				if(!pInfo[ProposePlayer][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца больше нет бизнеса");
				if(pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть бизнес");

				if(bInfo[pInfo[ProposePlayer][pBusinessID]][bNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для покупки этого бизнеса");

				if(pInfo[playerid][pMoney] < money) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки бизнеса");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока который продает бизнес");

				new str[400];
				format(str, sizeof(str), Main_Color"%s"Color_White" купил "Main_Color"Бизнес №"Color_White": %d за "Color_Green"%d$", pInfo[playerid][pName], pInfo[ProposePlayer][pBusinessID], money);
				SendClientMessage(ProposePlayer, -1, str);

				format(str, sizeof(str), Color_White"Вы купили "Main_Color"Бизнес №"Color_White": %d у игрока "Main_Color"%s"Color_White" за "Color_Green"%d$", pInfo[ProposePlayer][pBusinessID], pInfo[ProposePlayer][pName], money);
				SendClientMessage(playerid, -1, str);

				bInfo[pInfo[ProposePlayer][pBusinessID]][bOwnerID] = pInfo[playerid][pID];
				pInfo[playerid][pBusinessID] = pInfo[ProposePlayer][pBusinessID];

				pInfo[ProposePlayer][pBusinessID] = 0;

				SaveBusinessInt(pInfo[playerid][pBusinessID], "OwnerID", bInfo[pInfo[playerid][pBusinessID]][bOwnerID]);
				UpdateBusiness(pInfo[playerid][pBusinessID]);

				GivePlayerMoneyEx(playerid, -money);
				GivePlayerMoneyEx(ProposePlayer, money);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				new SubStr[20];
				GetPlayerIp(playerid, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) продал бизнес №%d за %d$ игроку %s (IP: %s | RegIP: %s)", str, pInfo[ProposePlayer][pRegIp], pInfo[playerid][pBusinessID], money, pInfo[playerid][pName], SubStr, pInfo[playerid][pRegIp]);
				AddLog(LogTypeMoney, pInfo[ProposePlayer][pID], str);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) купил бизнес №%d за %d$ у %s (IP: %s | RegIP: %s)", SubStr, pInfo[playerid][pRegIp], pInfo[playerid][pBusinessID], money, pInfo[ProposePlayer][pName], str, pInfo[ProposePlayer][pRegIp]);
				AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			}
			case OfferID_ExcangeBusiness:
			{
				if(!pInfo[ProposePlayer][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца больше нет бизнеса");
				if(!pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас больше нет бизнеса");
				if(bInfo[pInfo[ProposePlayer][pBusinessID]][bNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для обмена на этот бизнес");
				if(bInfo[pInfo[playerid][pBusinessID]][bNeedLevel] > pInfo[ProposePlayer][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока предложившего обмен слишком низкий уровень для обмена на ваш бизнес");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока c которым хотите обменяться");

				new str[400];
				format(str, sizeof(str), Color_White"Вы обменяли свой бизнес на "Main_Color"Бизнес №"Color_White": %d игрока "Main_Color"%s", pInfo[playerid][pBusinessID], pInfo[playerid][pName]);
				SendClientMessage(ProposePlayer, -1, str);

				format(str, sizeof(str), Color_White"Вы обменяли свой бизнес на "Main_Color"Бизнес №"Color_White": %d игрока "Main_Color"%s", pInfo[ProposePlayer][pBusinessID], pInfo[ProposePlayer][pName]);
				SendClientMessage(playerid, -1, str);

				new TransferBusiness = pInfo[ProposePlayer][pBusinessID];

				bInfo[TransferBusiness][bOwnerID] = pInfo[playerid][pID];
				bInfo[pInfo[playerid][pBusinessID]][bOwnerID] = pInfo[ProposePlayer][pID];

				pInfo[ProposePlayer][pBusinessID] = pInfo[playerid][pBusinessID];
				pInfo[playerid][pBusinessID] = TransferBusiness;

				SaveBusinessInt(pInfo[playerid][pBusinessID], "OwnerID", bInfo[pInfo[playerid][pBusinessID]][bOwnerID]);
				SaveBusinessInt(pInfo[ProposePlayer][pBusinessID], "OwnerID", bInfo[pInfo[ProposePlayer][pBusinessID]][bOwnerID]);

				UpdateBusiness(pInfo[playerid][pBusinessID]);
				UpdateBusiness(pInfo[ProposePlayer][pBusinessID]);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				new SubStr[20];
				GetPlayerIp(playerid, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) обменял бизнес №%d на бизнес №%d игрока %s (IP: %s | RegIP: %s)", str, pInfo[ProposePlayer][pRegIp], pInfo[playerid][pBusinessID], pInfo[ProposePlayer][pBusinessID], pInfo[playerid][pName], SubStr, pInfo[playerid][pRegIp]);
				AddLog(LogTypeMoney, pInfo[ProposePlayer][pID], str);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) обменял бизнес №%d на бизнес №%d игрока %s (IP: %s | RegIP: %s)", SubStr, pInfo[playerid][pRegIp], pInfo[ProposePlayer][pBusinessID], pInfo[playerid][pBusinessID], pInfo[ProposePlayer][pName], str, pInfo[ProposePlayer][pRegIp]);
				AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			}
			case OfferID_SellHouse:
			{
				if(!pInfo[ProposePlayer][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца больше нет дома");
				if(pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас уже есть дом");
				if(hInfo[pInfo[ProposePlayer][pHouseID]][hNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для покупки этого дома");

				if(pInfo[playerid][pMoney] < money) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для покупки дома");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока который продает дом");

				UnloadHouseVehicle(playerid);
				UnloadHouseVehicle(ProposePlayer);

				new str[400];
				format(str, sizeof(str), Main_Color"%s"Color_White" купил "Main_Color"Дом №"Color_White": %d за "Color_Green"%d$", pInfo[playerid][pName], pInfo[ProposePlayer][pHouseID], money);
				SendClientMessage(ProposePlayer, -1, str);

				format(str, sizeof(str), Color_White"Вы купили "Main_Color"Дом №"Color_White": %d у игрока "Main_Color"%s"Color_White" за "Color_Green"%d$", pInfo[ProposePlayer][pHouseID], pInfo[ProposePlayer][pName], money);
				SendClientMessage(playerid, -1, str);

				hInfo[pInfo[ProposePlayer][pHouseID]][hOwnerID] = pInfo[playerid][pID];
				pInfo[playerid][pHouseID] = pInfo[ProposePlayer][pHouseID];

				pInfo[ProposePlayer][pHouseID] = 0;

				if(pInfo[ProposePlayer][pSpawnChange] == SpawnChange_House)
				{
					pInfo[ProposePlayer][pSpawnChange] = SpawnChange_Standart;
					SavePlayerInt(ProposePlayer, "SpawnChange", pInfo[ProposePlayer][pSpawnChange]);
				}

				pInfo[playerid][pSpawnChange] = SpawnChange_House;
				SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);

				SaveHouseInt(pInfo[playerid][pHouseID], "OwnerID", hInfo[pInfo[playerid][pHouseID]][hOwnerID]);
				UpdateHouse(pInfo[playerid][pHouseID]);

				ExcangeHouseVehicle(pInfo[playerid][pID], pInfo[ProposePlayer][pID]);

				GivePlayerMoneyEx(playerid, -money);
				GivePlayerMoneyEx(ProposePlayer, money);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				new SubStr[20];
				GetPlayerIp(playerid, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) продал дом №%d за %d$ игроку %s (IP: %s | RegIP: %s)", str, pInfo[ProposePlayer][pRegIp], pInfo[playerid][pHouseID], money, pInfo[playerid][pName], SubStr, pInfo[playerid][pRegIp]);
				AddLog(LogTypeMoney, pInfo[ProposePlayer][pID], str);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) купил дом №%d за %d$ у %s (IP: %s | RegIP: %s)", SubStr, pInfo[playerid][pRegIp], pInfo[playerid][pHouseID], money, pInfo[ProposePlayer][pName], str, pInfo[ProposePlayer][pRegIp]);
				AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			}
			case OfferID_ExcangeHouse:
			{
				if(!pInfo[ProposePlayer][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца больше нет дома");
				if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас больше нет дома");
				if(hInfo[pInfo[ProposePlayer][pHouseID]][hNeedLevel] > pInfo[playerid][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас слишком низкий уровень для обмена на этот дом");
				if(hInfo[pInfo[playerid][pHouseID]][hNeedLevel] > pInfo[ProposePlayer][pLevel]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока предложившего обмен слишком низкий уровень для обмена на ваш дом");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока c которым хотите обменяться");

				UnloadHouseVehicle(playerid);
				UnloadHouseVehicle(ProposePlayer);

				new str[400];
				format(str, sizeof(str), Color_White"Вы обменяли свой дом на "Main_Color"Дом №"Color_White": %d игрока "Main_Color"%s", pInfo[playerid][pHouseID], pInfo[playerid][pName]);
				SendClientMessage(ProposePlayer, -1, str);

				format(str, sizeof(str), Color_White"Вы обменяли свой дом на "Main_Color"Дом №"Color_White": %d игрока "Main_Color"%s", pInfo[ProposePlayer][pHouseID], pInfo[ProposePlayer][pName]);
				SendClientMessage(playerid, -1, str);

				new TransferHouse = pInfo[ProposePlayer][pHouseID];

				hInfo[TransferHouse][hOwnerID] = pInfo[playerid][pID];
				hInfo[pInfo[playerid][pHouseID]][hOwnerID] = pInfo[ProposePlayer][pID];

				pInfo[ProposePlayer][pHouseID] = pInfo[playerid][pHouseID];
				pInfo[playerid][pHouseID] = TransferHouse;

				SaveHouseInt(pInfo[playerid][pHouseID], "OwnerID", hInfo[pInfo[playerid][pHouseID]][hOwnerID]);
				SaveHouseInt(pInfo[ProposePlayer][pHouseID], "OwnerID", hInfo[pInfo[ProposePlayer][pHouseID]][hOwnerID]);

				UpdateHouse(pInfo[playerid][pHouseID]);
				UpdateHouse(pInfo[ProposePlayer][pHouseID]);

				ExcangeHouseVehicle(pInfo[playerid][pID], pInfo[ProposePlayer][pID]);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				new SubStr[20];
				GetPlayerIp(playerid, SubStr, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) обменял дом №%d на дом №%d игрока %s (IP: %s | RegIP: %s)", str, pInfo[ProposePlayer][pRegIp], pInfo[playerid][pHouseID], pInfo[ProposePlayer][pHouseID], pInfo[playerid][pName], SubStr, pInfo[playerid][pRegIp]);
				AddLog(LogTypeMoney, pInfo[ProposePlayer][pID], str);

				str[0] = EOS;
				GetPlayerIp(ProposePlayer, str, 16);
				format(str, sizeof(str), "(IP: %s | RegIP: %s) обменял дом №%d на дом №%d игрока %s (IP: %s | RegIP: %s)", SubStr, pInfo[playerid][pRegIp], pInfo[ProposePlayer][pHouseID], pInfo[playerid][pHouseID], pInfo[ProposePlayer][pName], str, pInfo[ProposePlayer][pRegIp]);
				AddLog(LogTypeMoney, pInfo[playerid][pID], str);
			}
			case OfferID_SellGun:
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока который продает вам оружие");

				if(pInfo[playerid][pMoney] < money)
				{
					SendClientMessage(ProposePlayer, -1, Color_Red"[Ошибка] "Color_Grey"У покупателя недостаточно средств");
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
				}

				new counts = count * GunInfo[ItemsID][MaterialCount];

				if(!RemovePlayerInventory(ProposePlayer, ItemMaterial, counts))
				{
					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца недостаточно материалов");
					return SendClientMessage(ProposePlayer, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно материалов");
				}

				if(!AddPlayerInventory(playerid, GunInfo[ItemsID][ItemID], count))
				{
					AddPlayerInventory(ProposePlayer, ItemMaterial, counts);

					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно места в инвентаре чтобы купить оружие");
					SendClientMessage(ProposePlayer, -1, Color_Red"[Ошибка] "Color_Grey"У игрока которому вы хотите продать оружие недостаточно места в инвентаре");
					return 1;
				}

				UpdatePlayerSkillEx(ProposePlayer, GunDealler, count);

				new str[100];
				format(str, sizeof(str), "собрал(а) %s и передал(а) %s", Items[GunInfo[ItemsID][ItemID]][ItemName], pInfo[playerid][pName]);
				ProxDetector(ProposePlayer, MESSAGE_DIST, BitColor_Me, str);

				format(str, sizeof(str), Color_White"%s помещен в ваш инвентарь", Items[GunInfo[ItemsID][ItemID]][ItemName]);
				SendClientMessage(playerid, -1, str);

				GivePlayerMoneyEx(playerid, -money);
				GivePlayerMoneyEx(ProposePlayer, money);
			}
			case OfferID_SellDrugs:
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(ProposePlayer, X, Y, Z);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, ProposePlayer)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока который продает вам наркотики");

				if(!RemovePlayerInventory(ProposePlayer, ItemDrugs, count))
				{
					SendClientMessage(ProposePlayer, -1, Color_Red"[Ошибка] "Color_Grey"У вас больше нет такого количества наркотиков");
					return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У продавца больше нет такого количества наркотиков");
				}
				if(!AddPlayerInventory(playerid, ItemDrugs, count))
				{
					AddPlayerInventory(ProposePlayer, ItemDrugs, count);
					SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно места в инвентаре");
					return SendClientMessage(ProposePlayer, -1, Color_Red"[Ошибка] "Color_Grey"У игрока недостаточно места в инвентаре");
				}

				UpdatePlayerSkillEx(ProposePlayer, DrugDealler, count);

				new str[100];
				format(str, sizeof(str), "передал(а) какой-то пакетик %s", pInfo[playerid][pName]);
				ProxDetector(ProposePlayer, MESSAGE_DIST, BitColor_Me, str);

				GivePlayerMoneyEx(playerid, -money);
				GivePlayerMoneyEx(ProposePlayer, money);
			}
		}
	}
	else SendClientMessage(playerid, -1, Color_Grey"Игрок который предлагал сделку больше не в сети");
	return 1;
}

CMD:accept(playerid, params[])
{
	new type[100];
	if(sscanf(params, "s[100]", type)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept [предложение]");

	if(!strcmp(type, "kiss"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(strfind(type, "mechanic") != -1)
	{
		if(pInfo[playerid][pJob] != Job_Mechanic) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не работаете механиком");
		if(!GetPVarInt(playerid, "MechanicFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не на дежурстве");
		new id;
		if(sscanf(type, "s[100]d", type, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept mechanic [ID]");
		if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
		if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
		if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
		if(!GetPVarInt(id, "WaitMechanic")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не вызывал механика либо его вызов уже кто-то принял");

		new str[200];
		format(str, sizeof(str), Color_Blue2"[Диспетчер] Механик %s[%d] принял ваш вызов. Оставайтесь на месте чтобы механик мог вас найти", pInfo[playerid][pName], playerid);
		SendClientMessage(id, -1, str);

		format(str, sizeof(str), Color_Blue2"[Диспетчер] Вы приняли вызов %s[%d]", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, str);

		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerRaceCheckpoint(playerid, 2, X, Y, Z, 0.0, 0.0, 0.0, 12.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;

		DeletePVar(id, "WaitMechanic");
	}
	else if(strfind(type, "medic") != -1)
	{
		if(pInfo[playerid][pMembers] != Fraction_Hospital) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам больницы");
		if(!GetPVarInt(playerid, "MedicDuty")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не на дежурстве");
		new id;
		if(sscanf(type, "s[100]d", type, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept medic [ID]");
		if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
		if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
		if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
		if(!GetPVarInt(id, "WaitMedic")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не вызывал медика либо его вызов уже кто-то принял");

		new str[200];
		format(str, sizeof(str), Color_Red2"[Диспетчер] Медик %s[%d] принял ваш вызов. Ожидайте его прибытия", pInfo[playerid][pName], playerid);
		SendClientMessage(id, -1, str);

		format(str, sizeof(str), Color_Red2"[Диспетчер] Вы приняли вызов %s[%d]", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, str);

		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerRaceCheckpoint(playerid, 2, X, Y, Z, 0.0, 0.0, 0.0, 12.0);
		pInfo[playerid][pGPSType] = GPS_Type_Job;

		DeletePVar(id, "WaitMedic");
	}
	else if(strfind(type, "taxi") != -1)
	{
		if(pInfo[playerid][pMembers] != Fraction_Taxi) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только сотрудникам таксопарка");
		if(!GetPVarInt(playerid, "TaxiFare")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не на дежурстве");
		new id;
		if(sscanf(type, "s[100]d", type, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept taxi [ID]");
		if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
		if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
		if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
		if(!GetPVarInt(id, "WaitTaxi")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не заказывал такси либо его заказ уже кто-то принял");

		new str[200];
		format(str, sizeof(str), "[Диспетчер] Таксист %s[%d] принял ваш заказ. Ожидайте его прибытия", pInfo[playerid][pName], playerid);
		SendClientMessage(id, FractionColor[Fraction_Taxi], str);

		format(str, sizeof(str), "[Диспетчер] Вы приняли вызов %s[%d]", pInfo[id][pName], id);
		SendClientMessage(playerid, FractionColor[Fraction_Taxi], str);

		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerRaceCheckpoint(playerid, 2, X, Y, Z, 0.0, 0.0, 0.0, 12.0);
		pInfo[playerid][pGPSType] = GPS_Type_GPS;

		DeletePVar(id, "WaitTaxi");
	}
	else if(!strcmp(type, "repair"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "mfill"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "givekey"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "house"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "exchangehouse"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "free"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "business"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "exchangebusiness"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "sellgun"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "selldrugs"))
	{
		if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
		PlayerAccept(playerid);
	}
	else if(!strcmp(type, "war"))
	{
		if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");
		if(GangWarOpponent[pInfo[playerid][pMembers]] == Fraction_None || GangWarStatus[pInfo[playerid][pMembers]] != Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде не предлагали войну");

		new bool:FindedAcceptLeader = false;
		new bool:FindedRequestLeader = false;

		foreach(new i:Player)
		{
			if(pInfo[i][pAuth])
			{
				if(pInfo[i][pMembers] == GangWarOpponent[pInfo[playerid][pMembers]] && pInfo[i][pRank] >= FractionMaxRank) FindedRequestLeader = true;
				if(pInfo[i][pMembers] == pInfo[playerid][pMembers] && pInfo[i][pRank] >= FractionMaxRank) FindedAcceptLeader = true;
			}

			if(FindedAcceptLeader && FindedRequestLeader) break;
		}

		new FractionID = GangWarOpponent[pInfo[playerid][pMembers]];

		if(!FindedAcceptLeader)
		{
			SendRMessageEx(FractionID, "В банде соперника нет лидера онлайн. Предложение о войне автоматически отклонено");
			ClearGangWar(FractionID);

			SendRMessageEx(pInfo[playerid][pMembers], "В вашей банде нет лидера онлайн. Предложение о войне автоматически отклонено");
			ClearGangWar(pInfo[playerid][pMembers]);

			return 1;
		}

		if(!FindedRequestLeader)
		{
			SendRMessageEx(FractionID, "В вашей банде нет лидера онлайн. Предложение о войне автоматически отклонено");
			ClearGangWar(FractionID);

			SendRMessageEx(pInfo[playerid][pMembers], "В банде соперника нет лидера онлайн. Предложение о войне автоматически отклонено");
			ClearGangWar(pInfo[playerid][pMembers]);

			return 1;
		}

		for(new i = 0; i < MAX_FRACTION; i++)
		{
			if((GangWarZone[i] == GangWarZone[FractionID] || GangWarZone[i] == GangWarZone[pInfo[playerid][pMembers]]) && GangWarStatus[i] == Gang_Status_War)
			{
				SendRMessageEx(FractionID, "Выбранное место для войны уже занято. Предложение о войне автоматически отклонено");
				ClearGangWar(FractionID);

				SendRMessageEx(pInfo[playerid][pMembers], "Выбранное место для войны уже занято. Предложение о войне автоматически отклонено");
				ClearGangWar(pInfo[playerid][pMembers]);

				return 1;
			}
		}

		switch(GangWarBetType[FractionID])
		{
			case Gang_Bet_Type_Money:
			{
				if(FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] < GangWarBet[pInfo[playerid][pMembers]])
				{
					SendRMessageEx(FractionID, "На складе банды соперника недостаточно средств. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе вашей банды недостаточно средств. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);
					return 1;
				}

				if(FractionWare[FractionID][FractionWareMoney] < GangWarBet[FractionID])
				{
					SendRMessageEx(FractionID, "На складе вашей банды недостаточно средств. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе банды соперника недостаточно средств. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);

					return 1;
				}

				FractionWare[pInfo[playerid][pMembers]][FractionWareMoney] -= GangWarBet[pInfo[playerid][pMembers]];
				FractionWare[FractionID][FractionWareMoney] -= GangWarBet[FractionID];

				SaveFractionWare(pInfo[playerid][pMembers]);
				SaveFractionWare(FractionID);
			}
			case Gang_Bet_Type_Materials:
			{
				if(FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] < GangWarBet[pInfo[playerid][pMembers]])
				{
					SendRMessageEx(FractionID, "На складе банды соперника недостаточно материалов. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе вашей банды недостаточно материалов. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);

					return 1;
				}

				if(FractionWare[FractionID][FractionWareMaterials] < GangWarBet[FractionID])
				{
					SendRMessageEx(FractionID, "На складе вашей банды недостаточно материалов. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе банды соперника недостаточно материалов. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);
					return 1;
				}

				FractionWare[pInfo[playerid][pMembers]][FractionWareMaterials] -= GangWarBet[pInfo[playerid][pMembers]];
				FractionWare[FractionID][FractionWareMaterials] -= GangWarBet[FractionID];

				SaveFractionWare(pInfo[playerid][pMembers]);
				SaveFractionWare(FractionID);
			}
			case Gang_Bet_Type_Drugs:
			{
				if(FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] < GangWarBet[pInfo[playerid][pMembers]])
				{
					SendRMessageEx(FractionID, "На складе банды соперника недостаточно наркотиков. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе вашей банды недостаточно наркотиков. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);

					return 1;
				}

				if(FractionWare[FractionID][FractionWareDrugs] < GangWarBet[FractionID])
				{
					SendRMessageEx(FractionID, "На складе вашей банды недостаточно наркотиков. Предложение о войне автоматически отклонено");
					ClearGangWar(FractionID);

					SendRMessageEx(pInfo[playerid][pMembers], "На складе банды соперника недостаточно наркотиков. Предложение о войне автоматически отклонено");
					ClearGangWar(pInfo[playerid][pMembers]);

					return 1;
				}

				FractionWare[pInfo[playerid][pMembers]][FractionWareDrugs] -= GangWarBet[pInfo[playerid][pMembers]];
				FractionWare[FractionID][FractionWareDrugs] -= GangWarBet[FractionID];

				SaveFractionWare(pInfo[playerid][pMembers]);
				SaveFractionWare(FractionID);
			}
		}
		StartGangWar(pInfo[playerid][pMembers]);
		StartGangWar(FractionID);
	}
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept [kiss/mechanic/repair/mfill/givekey/house/exchangehouse/free/business/exchangebusiness/sellgun/selldrugs/war]");
	return 1;
}

stock CancelPlayerAccept(playerid)
{
	new OfferID = GetPVarInt(playerid, "AcceptOfferID");
	new ProposePlayer = GetPVarInt(playerid, "AcceptPlayerID") - 1;
	new ProposPlayerAccountID = GetPVarInt(playerid, "AcceptAccountID");
	DeletePVar(playerid, "AcceptOfferID");
	DeletePVar(playerid, "AcceptPlayerID");
	DeletePVar(playerid, "AcceptAccountID");
	DeletePVar(playerid, "AcceptMoney");
	DeletePVar(playerid, "AcceptCount");
	DeletePVar(playerid, "AcceptItemID");

	new str[200];
	new SubStr[50];

	switch(OfferID)
	{
		case OfferID_Kiss: strcat(SubStr, "поцеловаться");
		case OfferID_Repair: strcat(SubStr, "починиться");
		case OfferID_Fill: strcat(SubStr, "заправиться");
		case OfferID_Free: strcat(SubStr, "освободиться");
		case OfferID_GiveKey: strcat(SubStr, "о передачи ключей");
		case OfferID_SellHouse: strcat(SubStr, "купить дом");
		case OfferID_ExcangeHouse: strcat(SubStr, "об обмене дома");
		case OfferID_SellBusiness: strcat(SubStr, "купить бизнес");
		case OfferID_ExcangeBusiness: strcat(SubStr, "об обмене бизнеса");
		case OfferID_SellGun: strcat(SubStr, "о покупке оружия");
		case OfferID_SellDrugs: strcat(SubStr, "о покупке наркотиков");
	}

	if(IsPlayerConnected(ProposePlayer) && pInfo[ProposePlayer][pID] == ProposPlayerAccountID)
	{
		format(str, sizeof(str), Main_Color"%s"Color_White" отказался от вашего предложения %s", pInfo[playerid][pName], SubStr);
		SendClientMessage(ProposePlayer, -1, str);

		DeletePVar(ProposePlayer, "ProposeOfferID");
		DeletePVar(ProposePlayer, "ProposePlayerID");
		DeletePVar(ProposePlayer, "ProposeAccountID");
	}

	format(str, sizeof(str), Color_White"Вы отказались от предложения %s", SubStr);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new type[50];
	if(sscanf(params, "s[50]", type)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/cancel [предложение]");

	if(!strcmp(type, "kiss"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "repair"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "mfill"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "free"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "givekey"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "house"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "exchangehouse"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "business"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "exchangebusiness"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "sellgun"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "selldrugs"))
    {
        if(!GetPVarInt(playerid, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вам ничего не предлагали");
        CancelPlayerAccept(playerid);
    }
    else if(!strcmp(type, "war"))
	{
		if(!IsABand(pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Доступно только бандам");
		if(GangWarOpponent[pInfo[playerid][pMembers]] == Fraction_None || GangWarStatus[pInfo[playerid][pMembers]] != Gang_Status_Wait_Accept) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вашей банде не предлагали войну");

		new str[200];
        format(str, sizeof(str), "Банда %s отклонила прдложение о войне", FractionName[pInfo[playerid][pMembers]]);
        SendRMessageEx(GangWarOpponent[pInfo[playerid][pMembers]], str);

		SendRMessageEx(pInfo[playerid][pMembers], "Ваша банда отклонила прдложение о войне");

        ClearGangWar(GangWarOpponent[pInfo[playerid][pMembers]]);
		ClearGangWar(pInfo[playerid][pMembers]);
	}
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/accept [kiss/repair/mfill/free/givekey/house/exchangehouse/business/exchangebusiness/sellgun/selldrugs/war]");
	return 1;
}

CMD:gps(playerid, const params[])
{
	new type[50];
	if(sscanf(params, "s[50]", type)) return ShowPlayerGPSMenu(playerid);

	if(!strcmp(type, "off"))
	{
		if(pInfo[playerid][pGPSType] != GPS_Type_GPS) return SendClientMessage(playerid, -1, Color_Grey"На данный момент метка из GPS не установлена.");
		DisablePlayerRaceCheckpoint(playerid);
		pInfo[playerid][pGPSType] = GPS_Type_None;
		SendClientMessage(playerid, -1, Color_Yellow"GPS выключен");
	}
	return 1;
}

CMD:iznas(playerid, params[])
{
	if(GetPVarInt(playerid, "IznasCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не так быстро");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/iznas [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок которого вы хотите изнасиловать находится в машине");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которого хотите изнасиловать");

	SetPlayerFacingPos(playerid, X, Y);

	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingPos(id, X, Y, true);

  	ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1, true);
  	ApplyAnimation(id,"SNM","SPANKINGW",4.1,0,1,1,1,1, true);
  	SetTimerEx("ClearAnim", 1000, false, "d", playerid);
  	SetTimerEx("ClearAnim", 1000, false, "d", id);

	new str[200];
	format(str, sizeof(str), "%s %s", (pInfo[playerid][pGender]) ? ("изнасиловала"):("изнасиловал"), pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

	format(str, sizeof(str), "%s %s", (pInfo[id][pGender]) ? ("была изнасилована"):("был изнасилован"), pInfo[playerid][pName]);
	ProxDetector(id, MESSAGE_DIST, BitColor_Me, str);
	SetPVarInt(playerid, "IznasCD", gettime()+5);
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/kiss [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "AcceptOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этому игроку уже что-то предложили");
	if(GetPVarInt(playerid, "ProposeOfferID")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже что-то кому-то предложили");
	if(IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок которому вы хотите предложить поцеловаться находится в машине");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите предложить поцеловаться");

	new str[200];
	format(str, sizeof(str), Color_White"Вы предложили "Main_Color"%s поцеловаться", pInfo[id][pName]);
	SendClientMessage(playerid, -1, str);
	SendClientMessage(playerid, -1, "Используйте /undo kiss чтобы отменить свое предложение");

	str[0] = EOS;
	format(str, sizeof(str), Main_Color"%s"Color_White" предложил вам поцеловаться", pInfo[playerid][pName]);
	SendClientMessage(id, -1, str);
	SendClientMessage(id, -1, "Используйте /accept kiss чтобы принять предложение или /cancel kiss чтобы отменить предложение");

	SetPlayerOffer(playerid, id, OfferID_Kiss);
	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/hi [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с которым вы хотите поздороваться находится в машине");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите пожат руку");

	SetPlayerFacingPos(playerid, X, Y);

	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingPos(id, X, Y);

	ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0, true);
	ApplyAnimation(id,"GANGS","hndshkfa",4.0,0,0,0,0,0, true);

	new str[200];
	format(str, sizeof(str), "%s с %s", (pInfo[playerid][pGender]) ? ("поздоровалась"):("поздоровался"), pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);

	format(str, sizeof(str), "%s с %s", (pInfo[id][pGender]) ? ("поздоровалась"):("поздоровался"), pInfo[playerid][pName]);
	ProxDetector(id, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:piss(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	SendClientMessage(playerid, -1, Color_Yellow"Чтобы прекратить писать нажмите Enter");
	return 1;
}

CMD:wank(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	ApplyAnimation(playerid,"PAULNMAC", "wank_loop", 1.800001, true, false, false, false, 0, true);
	SendClientMessage(playerid, -1, Color_Yellow"Чтобы прекратить дрочить нажмите Enter");
	return 1;
}

CMD:slapass(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Нельзя использовать в машине");
	ApplyAnimation(playerid,"SWEET", "SWEET_ASS_SLAP", 4.0, false, false, false, false, 0, true);
	return 1;
}

CMD:dance(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/dance [1-15]");
	if(id < 1 || id > 15) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Номер танцев от 1 до 15");
	switch(id)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		case 5: ApplyAnimation(playerid, "DANCING", "DANCE_LOOP", 4.0, true, false, false, false, 0, true);
		case 6: ApplyAnimation(playerid, "DANCING", "DAN_DOWN_A", 4.0, true, false, false, false, 0, true);
		case 7: ApplyAnimation(playerid, "DANCING", "DAN_LEFT_A", 4.0, true, false, false, false, 0, true);
		case 8: ApplyAnimation(playerid, "DANCING", "DAN_LOOP_A", 4.0, true, false, false, false, 0, true);
		case 9: ApplyAnimation(playerid, "DANCING", "DAN_RIGHT_A", 4.0, true, false, false, false, 0, true);
		case 10: ApplyAnimation(playerid, "DANCING", "DAN_UP_A", 4.0, true, false, false, false, 0, true);
		case 11: ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.0, true, false, false, false, 0, true);
		case 12: ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.0, true, false, false, false, 0, true);
		case 13: ApplyAnimation(playerid, "DANCING", "DNCE_M_C", 4.0, true, false, false, false, 0, true);
		case 14: ApplyAnimation(playerid, "DANCING", "DNCE_M_D", 4.0, true, false, false, false, 0, true);
		case 15: ApplyAnimation(playerid, "DANCING", "DNCE_M_E", 4.0, true, false, false, false, 0, true);
	}
	SendClientMessage(playerid, -1, Color_Yellow"Чтобы прекратить танцевать нажмите Enter");
	return 1;
}

CMD:walk(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/walk [1-14]");
	if(id < 1 || id > 14) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Типы ходьбы от 1 до 14");
	pInfo[playerid][pWalkStyle] = id-1;
	SavePlayerInt(playerid, "WalkStyle", pInfo[playerid][pWalkStyle]);
	SendClientMessage(playerid, -1, Color_Yellow"Вы изменили тип ходьбы. Нажмите [ALT + W] чтобы использовать");
	return 1;
}

CMD:roll(playerid)
{
	if(!GetPVarInt(playerid, "Roller"))
	{
		if(!GetItemCountInInventory(playerid, ItemRoller)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет роликов");
		if(pInfo[playerid][pGender]) SetSkin(playerid, 92, true);
		else SetSkin(playerid, 99, true);
		SetPVarInt(playerid, "Roller", 1);

		new str[100];
		format(str, sizeof(str), "надел(а) %s", Items[ItemRoller][ItemName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	else
	{
		DeletePVar(playerid, "Roller");
		SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);

		new str[100];
		format(str, sizeof(str), "снял(а) %s", Items[ItemRoller][ItemName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	return 1;
}

CMD:cvet(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SetPVarInt(playerid, "Clist_List", 1);
		ShowClistMenu(playerid);
		return SendClientMessage(playerid, -1, Color_White"Вы так же можете использовать /cvet [ID цвета]");
	}
	if(id < 0 || id > sizeof(PlayerColors)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"ID цвета может быть от 0 до 100");

	if(id == sizeof(PlayerColors))
	{
		pInfo[playerid][pClist] = 0;
		SavePlayerInt(playerid, "Clist", pInfo[playerid][pClist]);
		SetColor(playerid);
		SendClientMessage(playerid, -1, Color_Yellow"Вы установили стандартный цвет");
	}
	else
	{
		pInfo[playerid][pClist] = id;
		SavePlayerInt(playerid, "Clist", pInfo[playerid][pClist]);
		SetColor(playerid);
		SendClientMessage(playerid, -1, Color_Yellow"Вы изменили цвет");
		SendClientMessage(playerid, -1, Color_White"Вы можете использовать /cvet 100 чтобы вернуть стандартный цвет");
	}
	return 1;
}
alias:cvet("clist");

stock ShowClistMenu(playerid)
{
	new List = GetPVarInt(playerid, "Clist_List");
	new str[400];
	for(new i = (10*List)-10; i < 10*List; i++)
	{
		if(i >= sizeof(PlayerColors)) break;
		format(str, sizeof(str), "%s%sЦвет №%d\n", str, PlayerColorsHEX[i], i);
	}
	if(List*10 < sizeof(PlayerColors)) format(str, sizeof(str), "%s"Color_White"Следующая страница\n", str);
	if(List >= 2) format(str, sizeof(str), "%s"Color_White"Предыдущая страница", str);
	ShowDialog(playerid, D_Select_Clist, DIALOG_STYLE_LIST, Color_White"Выбор цвета", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:togpm(playerid)
{
	if(pInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/togpm доступен со 2го уровня");
	pInfo[playerid][pTogglePM] = !pInfo[playerid][pTogglePM];

	new str[100];
	format(str, sizeof(str), Color_Gold"[PM]"Color_White" Вы %s "Color_White"личные сообщения", (pInfo[playerid][pTogglePM]) ? (Color_Green"включили"):(Color_Red"выключили"));
	SendClientMessage(playerid, -1, str);
	SavePlayerBool(playerid, "TogglePM", pInfo[playerid][pTogglePM]);
	return 1;
}

CMD:pm(playerid, params[])
{
	if(!pInfo[playerid][pTogglePM]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас выключены личные сообщения");
	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/pm [ID] [Сообщение]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	if(!pInfo[id][pTogglePM])
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_wl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[id][pID], pInfo[playerid][pID]);
		mysql_tquery(DB, query, "CheckPMWhiteList", "dds", id, playerid, message);
	}
	else
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_bl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[id][pID], pInfo[playerid][pID]);
		mysql_tquery(DB, query, "CheckPMBlackList", "dds", id, playerid, message);
	}
	return 1;
}

forward CheckPMWhiteList(playerid, SenderID, message[]);
public CheckPMWhiteList(playerid, SenderID, message[])
{
	new row = cache_num_rows();
	new string[200];
	if(row)
	{
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		format(string, sizeof(string), Color_Gold"Личное сообщение от %s[%d]: %s", pInfo[SenderID][pName], SenderID, message);
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), Color_Gold"Личное сообщение к %s[%d]: %s", pInfo[playerid][pName], playerid, message);
		SendClientMessage(SenderID, -1, string);
	}
	else
	{
		format(string, sizeof(string), Color_Gold"[PM] "Color_White"У %s[%d] отключены личные сообщения и вы не находитесь в его белом списке", pInfo[playerid][pName], playerid);
		SendClientMessage(SenderID, -1, string);
	}
	return 1;
}

forward CheckPMBlackList(playerid, SenderID, message[]);
public CheckPMBlackList(playerid, SenderID, message[])
{
	new row = cache_num_rows();
	if(row)
	{
		SendClientMessage(SenderID, -1, Color_Gold"[PM] "Color_White"Вы находитесь в черном списке у того, кому хотите отправить личное сообщение");
	}
	else
	{
		new string[200];
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		format(string, sizeof(string), Color_Gold"Личное сообщение от %s[%d]: %s", pInfo[SenderID][pName], SenderID, message);
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), Color_Gold"Личное сообщение к %s[%d]: %s", pInfo[playerid][pName], playerid, message);
		SendClientMessage(SenderID, -1, string);
	}
	return 1;
}

CMD:blacklist(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/blacklist [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	new query[100];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_wl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
	mysql_tquery(DB, query, "AddBlackListCheckOnWl", "dd", playerid, id);

	return 1;
}

forward AddBlackListCheckOnWl(playerid, id);
public AddBlackListCheckOnWl(playerid, id)
{
	new row = cache_num_rows();
	if(row)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок уже находится в вашем белом списке, вы не можете добавить его в черный список пока не уберете из белого");
	}
	else
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_bl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query, "AddBlackListCheckOnBl", "dd", playerid, id);
	}
	return 1;
}

forward AddBlackListCheckOnBl(playerid, id);
public AddBlackListCheckOnBl(playerid, id)
{
	new row = cache_num_rows();
	if(row) SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок уже находится в вашем черном списке");
	else
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `pm_bl` (`ID`, `SenderID`) VALUES ('%d', '%d')", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query);

		format(query, sizeof(query), Color_Yellow"Игрок %s[%d] добавлен в черный список", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, query);
	}
	return 1;
}

CMD:unblacklist(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unblacklist [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	new query[100];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_bl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
	mysql_tquery(DB, query, "UnBlackListCheck", "dd", playerid, id);

	return 1;
}

forward UnBlackListCheck(playerid, id);
public UnBlackListCheck(playerid, id)
{
	new row = cache_num_rows();
	if(row)
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "DELETE FROM `pm_bl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query);

		format(query, sizeof(query), Color_Yellow"Игрок %s[%d] удален из черного списка", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, query);
	}
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в вашем черном списке");
	return 1;
}

CMD:whitelist(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/whitelist [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	new query[100];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_bl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
	mysql_tquery(DB, query, "AddWhiteListCheckOnBl", "dd", playerid, id);

	return 1;
}

forward AddWhiteListCheckOnBl(playerid, id);
public AddWhiteListCheckOnBl(playerid, id)
{
	new row = cache_num_rows();
	if(row)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок уже находится в вашем черном списке, вы не можете добавить его в белый список пока не уберете из черного");
	}
	else
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_wl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query, "AddWhiteListCheckOnWl", "dd", playerid, id);
	}
	return 1;
}

forward AddWhiteListCheckOnWl(playerid, id);
public AddWhiteListCheckOnWl(playerid, id)
{
	new row = cache_num_rows();
	if(row) SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок уже находится в вашем белом списке");
	else
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "INSERT INTO `pm_wl` (`ID`, `SenderID`) VALUES ('%d', '%d')", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query);

		format(query, sizeof(query), Color_Yellow"Игрок %s[%d] добавлен в белый список", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, query);
	}
	return 1;
}

CMD:unwhitelist(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unwhitelist [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	new query[100];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `pm_wl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
	mysql_tquery(DB, query, "UnWhiteListCheck", "dd", playerid, id);

	return 1;
}

forward UnWhiteListCheck(playerid, id);
public UnWhiteListCheck(playerid, id)
{
	new row = cache_num_rows();
	if(row)
	{
		new query[200];
		mysql_format(DB, query, sizeof(query), "DELETE FROM `pm_wl` WHERE `ID` = '%d' AND `SenderID` = '%d'", pInfo[playerid][pID], pInfo[id][pID]);
		mysql_tquery(DB, query);

		format(query, sizeof(query), Color_Yellow"Игрок %s[%d] удален из белого списка", pInfo[id][pName], id);
		SendClientMessage(playerid, -1, query);
	}
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не находится в вашем белом списке");
	return 1;
}

CMD:me(playerid, params[])
{
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/me [Текст]");

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);
	return 1;
}

CMD:do(playerid, params[])
{
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/do [Текст]");

	SetPlayerChatBubble(playerid, message, BitColor_Do, MESSAGE_DIST, 5000);

	if(pInfo[playerid][pMask])
	{
		if(pInfo[playerid][pGender]) format(message, sizeof(message), "%s (Неизвестная[%d])", message, playerid);
		else format(message, sizeof(message), "%s (Неизвестный[%d])", message, playerid);
	}
	else format(message, sizeof(message), "%s (%s[%d])", message, pInfo[playerid][pName], playerid);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Do, message, false);
	return 1;
}

CMD:try(playerid, params[])
{
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/try [Текст]");

	format(message, sizeof(message), "%s | %s", message, (random(2)) ? Color_Green"Удачно":Color_Red"Неудачно");

	SetPlayerChatBubble(playerid, message, BitColor_Me, MESSAGE_DIST, 5000);

	if(pInfo[playerid][pMask])
	{
		if(pInfo[playerid][pGender]) format(message, sizeof(message), "Неизвестная[%d] %s", playerid, message);
		else format(message, sizeof(message), "Неизвестный[%d] %s", playerid, message);
	}
	else format(message, sizeof(message), "%s[%d] %s", pInfo[playerid][pName], playerid, message);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message, false);
	return 1;
}

CMD:s(playerid, params[])
{
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/s [Текст]");

	SetPlayerChatBubble(playerid, message, BitColor_S, MESSAGE_DIST*1.5, 5000);

	if(pInfo[playerid][pMask])
	{
		if(pInfo[playerid][pGender]) format(message, sizeof(message), "Неизвестная[%d] крикнул(а): %s", playerid, message);
		else format(message, sizeof(message), "Неизвестный[%d] крикнул(а): %s", playerid, message);
	}
	else format(message, sizeof(message), "%s[%d] крикнул(а): %s", pInfo[playerid][pName], playerid, message);

	ProxDetector(playerid, MESSAGE_DIST*1.5, BitColor_S, message, false);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && AntiCheatGetSpecialAction(playerid) == SPECIAL_ACTION_NONE && !GetPVarInt(playerid, "DisableTextAnim")) ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1,0,0,0,0,0, true);
	return 1;
}

CMD:todo(playerid, params[])
{
	new message[300], action[145];
	if(sscanf(params, "p<*>s[300]s[145]", message, action)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/todo [Текст]*[Действие]");

	new BubleStr[300];
	format(BubleStr, sizeof(BubleStr), Color_White"\"%s\" - "Color_Me"%s", message, action);
	SetPlayerChatBubble(playerid, BubleStr, BitColor_Me, MESSAGE_DIST, 5000);

	if(pInfo[playerid][pMask])
	{
		if(pInfo[playerid][pGender]) format(message, sizeof(message), Color_White"\"%s\" - сказала неизвестная[%d], "Color_Me"%s", message, playerid, action);
		else format(message, sizeof(message), Color_White"\"%s\" - сказал неизвестный[%d], "Color_Me"%s", message, playerid, action);
	}
	else format(message, sizeof(message), Color_White"\"%s\" - сказал%s %s[%d], "Color_Me"%s", message, (pInfo[playerid][pGender]) ? "а":"", pInfo[playerid][pName], playerid, action);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message, false);
	return 1;
}

CMD:togooc(playerid)
{
	pInfo[playerid][pToggleOOC] = !pInfo[playerid][pToggleOOC];

	new str[100];
	format(str, sizeof(str), Color_White"[OOC] Вы %s "Color_White"общий чат", (pInfo[playerid][pToggleOOC]) ? (Color_Green"включили"):(Color_Red"выключили"));
	SendClientMessage(playerid, -1, str);
	SavePlayerBool(playerid, "ToggleOOC", pInfo[playerid][pToggleOOC]);
	return 1;
}

CMD:ooc(playerid, params[])
{
	if(GetPVarInt(playerid, "OOCCD") > gettime() && !pInfo[playerid][pAdmin]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Писать в OOC чат можно раз в 3 минуты");
	if(pInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Общий чат доступен со 2го уровня");
	if(!pInfo[playerid][pToggleOOC]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас выключен общий чат");
	new message[200];
	if(sscanf(params, "s[200]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/ooc [Сообщение]");

	new SubStr[50];
	if(pInfo[playerid][pAdmin]+1 == sizeof(AdminNames)) strcat(SubStr, Color_White"("Color_Red"A"Color_White")");
	else if(pInfo[playerid][pAdmin]) strcat(SubStr, Color_White"("Color_Green"M"Color_White")");

	if(strlen(SubStr)) format(message, sizeof(message), Color_White"["Color_Orange"Общий чат"Color_White"] %s >> "Color_Orange"%s[%d]"Color_White": %s", SubStr, pInfo[playerid][pName], playerid, message);
	else format(message, sizeof(message), Color_White"["Color_Orange"Общий чат"Color_White"] >> "Color_Orange"%s[%d]"Color_White": %s", pInfo[playerid][pName], playerid, message);
	SendOOCMessage(message);
	SetPVarInt(playerid, "OOCCD", gettime()+180);
	return 1;
}
alias:ooc("o");

CMD:togad(playerid)
{
	pInfo[playerid][pToggleAD] = !pInfo[playerid][pToggleAD];

	new str[100];
	format(str, sizeof(str), Color_Green"[AD] "Color_White"Вы %s "Color_White"чат объявлений", (pInfo[playerid][pToggleAD]) ? (Color_Green"включили"):(Color_Red"выключили"));
	SendClientMessage(playerid, -1, str);
	SavePlayerBool(playerid, "ToggleAD", pInfo[playerid][pToggleAD]);
	return 1;
}

CMD:ad(playerid, params[])
{
	if(GetPVarInt(playerid, "ADCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Подавать объявление можно раз в 5 минут");
	if(pInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Объявления доступны со 2го уровня");
	if(!pInfo[playerid][pToggleAD]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас выключены объявления");
	new message[200];
	if(sscanf(params, "s[200]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/ad [Сообщение]");
	if(pInfo[playerid][pMoney] < 2000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Подача объявления стоит 2000$ у вас недостаточно средств");
	GivePlayerMoneyEx(playerid, -2000);

	GiveCompanyPay(playerid, BusinessCNN, 2000);

	format(message, sizeof(message), Color_Green"[Реклама] %s. Отправлено: %s[%d]", message, pInfo[playerid][pName], playerid);
	SendADMessage(message);
	SetPVarInt(playerid, "ADCD", gettime()+300);
	return 1;
}

CMD:id(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/id [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	new string[145];
	format(string, sizeof(string), Main_Color"%s"Color_White"["Main_Color"%d"Color_White"]", pInfo[id][pName], id);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), Main_Color"Уровень"Color_White": %d", pInfo[id][pLevel]);
	SendClientMessage(playerid, -1, string);

	if(pInfo[id][pDemorgan])
	{
		format(string, sizeof(string), Main_Color"В деморгане до: "Color_White"%s", date(gettime()+pInfo[id][pDemorgan], 3, "%hh:%ii"));
		SendClientMessage(playerid, -1, string);
	}

	if(pInfo[id][pJail])
	{
		format(string, sizeof(string), Main_Color"Нужно добыть камней в тюрьме: "Color_White"%d", pInfo[id][pJail]);
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), Main_Color"Можно освободить: "Color_White"%s", (pInfo[id][pJailNoFree]) ? Color_Red"X" : Color_Green"V");
		SendClientMessage(playerid, -1, string);
	}

	if(pInfo[id][pAFKText] && IsValidDynamic3DTextLabel(pInfo[id][pAFKText]))
	{
		string[0] = EOS;
		ConvertedSeconds(pInfo[id][pAFK], string);
		format(string, sizeof(string), Main_Color"AФК: "Color_White"%s", string);
		SendClientMessage(playerid, -1, string);
	}
	else
	{
		format(string, sizeof(string), Main_Color"AФК: "Color_Red"X");
		SendClientMessage(playerid, -1, string);
	}
	return 1;
}

CMD:pay(playerid, params[])
{
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/pay [ID] [Сумма]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(money > 10000) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"За один раз можно передать не больше 10.000$");

	GivePlayerMoneyEx(id, money);
	GivePlayerMoneyEx(playerid, -money);
	new str[300];
	format(str, sizeof(str), Color_Yellow"%s передал вам "Color_Green"%d$", pInfo[playerid][pName], money);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы передали %s "Color_Green"%d$", pInfo[id][pName], money);
	SendClientMessage(playerid, -1, str);

	new message[145];
	format(message, sizeof(message), "передал(а) деньги %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);

	ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 1, 1, 0, 0, true);

	message[0] = EOS;
	GetPlayerIp(id, message, 16);
	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	format(message, sizeof(message), "(IP: %s | RegIP: %s) передал %d$ %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], money, pInfo[id][pName], message, pInfo[id][pRegIp]);

	AddLog(LogTypeMoney, pInfo[playerid][pID], message);
	return 1;
}

CMD:time(playerid)
{
	if(!GetItemCountInInventory(playerid, ItemWatch)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет часов");

	new str[145];
	format(str, sizeof(str), Color_White"Сейчас: "Main_Color" %s", date(gettime(), 3, "%dd.%mm.%yyyy %hh:%ii"));
	SendClientMessage(playerid, -1, str);

	str[0] = EOS;
	ConvertedSeconds(pInfo[playerid][pPlayedTime], str);
	format(str, sizeof(str), Color_White"Отыграно: "Main_Color" %s", str);
	SendClientMessage(playerid, -1, str);

	if(pInfo[playerid][pDemorgan])
	{
		format(str, sizeof(str), Color_White"Вас выпустят из деморгана в:"Main_Color" %s", date(gettime()+pInfo[playerid][pDemorgan], 3, "%hh:%ii"));
		SendClientMessage(playerid, -1, str);
	}

	if(pInfo[playerid][pJail])
	{
		format(str, sizeof(str), Color_White"Нужно добыть камней в тюрьме:"Main_Color" %d", pInfo[playerid][pJail]);
		SendClientMessage(playerid, -1, str);
	}

	if(pInfo[playerid][pMute])
	{
		format(str, sizeof(str), Color_White"Мут закончится в:"Main_Color" %s", date(gettime()+pInfo[playerid][pMute], 3, "%hh:%ii"));
		SendClientMessage(playerid, -1, str);
	}

	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0, true);
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине");
	new id;
	if(sscanf(params, "d", id))
	{
		new count = 0;
		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(GetPlayerVehicleID(i) == vehicleid)
			{
				RemovePlayerFromVehicle(i);
				count++;
			}
		}
		if(count) ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "выгнал(а) всех из своего транспортного средства");
		return 1;
	}
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPlayerVehicleID(id) != vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот игрок не сидит в вашей машине");

	new message[145];
	RemovePlayerFromVehicle(id);
	format(message, sizeof(message), "выгнал(а) %s из своего транспортного средства", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);
	return 1;
}

CMD:showstats(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/showstats [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if((!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) && id != playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите показать статистику");

	ShowPlayerStat(playerid, id);
	new message[145];
	format(message, sizeof(message), "показал(а) статистику %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/showlicenses [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id, X, Y, Z);
	if((!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) || !IsPlayerStreamedIn(playerid, id)) && id != playerid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы слишком далеко от игрока которому хотите показать лицензии");

	ShowPlayerLicenses(playerid, id);

	new str[100];
	format(str, sizeof(str), "показал(а) лицензии %s", pInfo[id][pName]);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

CMD:lock(playerid)
{
	if(GetPVarInt(playerid, "LockCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не так быстро!");
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
		new Float:X, Float:Y, Float:Z, Float:Distance;
		GetPlayerPos(playerid, X, Y, Z);
		foreach(new i: Vehicle)
		{
			if(IsVehicleStreamedIn(i, playerid))
			{
				new Float:CheckDistance;
				CheckDistance = GetVehicleDistanceFromPoint(i, X, Y, Z);
				if(!Distance)
				{
					Distance = CheckDistance;
					vehicleid = i;
				}
				else if(Distance > CheckDistance)
				{
					Distance = CheckDistance;
					vehicleid = i;
				}
			}
		}
		if(Distance > 5.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть рядом с транспортом!");

	}
	if(IsABike(vInfo[vehicleid][vModel])) return 1;
	if(vInfo[vehicleid][vType] != VehicleTypePlayer) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это не личный транспорт!");
	if(pInfo[playerid][pVehicleID] != vehicleid && GetPVarInt(playerid, "CarKey") != vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет ключей от этого транспорта!");
	LockVehicle(vehicleid, playerid);
	SetPVarInt(playerid, "LockCD", gettime()+5);
	return 1;
}

CMD:tlock(playerid)
{
	if(GetPVarInt(playerid, "tLockCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не так быстро!");
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
		new Float:X, Float:Y, Float:Z, Float:Distance;
		GetPlayerPos(playerid, X, Y, Z);
		foreach(new i: Vehicle)
		{
			if(IsVehicleStreamedIn(i, playerid))
			{
				new Float:CheckDistance;
				CheckDistance = GetVehicleDistanceFromPoint(i, X, Y, Z);
				if(!Distance)
				{
					Distance = CheckDistance;
					vehicleid = i;
				}
				else if(Distance > CheckDistance)
				{
					Distance = CheckDistance;
					vehicleid = i;
				}
			}
		}
		if(Distance > 5.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть рядом с транспортом!");

	}
	if(IsABike(vInfo[vehicleid][vModel])) return 1;
	if(vInfo[vehicleid][vType] != VehicleTypeJob && vInfo[vehicleid][vType] != VehicleTypeBusiness && vInfo[vehicleid][vType] != VehicleTypeFraction) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Это не рабочий/арендный транспорт!");
	if((vInfo[vehicleid][vType] != VehicleTypeFraction && vInfo[vehicleid][vRenter] != playerid) || (vInfo[vehicleid][vType] == VehicleTypeFraction && vInfo[vehicleid][vOwner] != pInfo[playerid][pMembers])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет ключей от этого транспорта!");
	LockVehicle(vehicleid, playerid);
	SetPVarInt(playerid, "tLockCD", gettime()+5);
	return 1;
}

CMD:unrentcar(playerid)
{
	if(!GetPVarInt(playerid, "RentedCar")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет рабочего или арендованного транспорта!");
	new vehicleid = GetPVarInt(playerid, "RentedCar");

	if(vInfo[vehicleid][vType] == VehicleTypeJob)
	{
		ChangePlayerJob(playerid, pInfo[playerid][pJob]);
		ChangePlayerUnOfficialJob(playerid, Job_None);
	}
	if(vInfo[vehicleid][vType] == VehicleTypeBusiness) RemoveRentedCar(playerid);
	return 1;
}

CMD:light(playerid)
{
	if(GetPVarInt(playerid, "LightCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не так быстро!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid)
	if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return 1;
	ToggleLightVehicle(vehicleid, playerid);
	SetPVarInt(playerid, "LightCD", gettime()+5);
	return 1;
}

CMD:engine(playerid)
{
	if(GetPVarInt(playerid, "EngineCD") > gettime()) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не так быстро!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть в машине");
	if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return 1;
	EngineVehicle(vehicleid, playerid);
	SetPVarInt(playerid, "EngineCD", gettime()+5);
	return 1;
}
alias:engine("en");

CMD:lawyers(playerid)
{
	new str[2500];
	format(str, sizeof(str), Color_White"==========================================================\n");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pJob] == Job_Lawyer) format(str, sizeof(str), "%s"Color_White"%s[%d]\n", str, pInfo[i][pName], i);
	}
	format(str, sizeof(str), "%s==========================================================", str);

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Адвокаты онлайн", str, Color_White"Закрыть", "");
	return 1;
}

CMD:leaders(playerid)
{
	new str[2500];
	format(str, sizeof(str), Color_White"==========================================================\n");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] != Fraction_None && pInfo[i][pRank] >= FractionMaxRank) format(str, sizeof(str), "%s"Color_White"%s[%d] ["Main_Color"%s"Color_White"]\n", str, pInfo[i][pName], i, FractionName[pInfo[i][pMembers]]);
	}
	format(str, sizeof(str), "%s==========================================================", str);

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Лидеры онлайн", str, Color_White"Закрыть", "");
	return 1;
}

CMD:admins(playerid)
{
	new str[2500];
	format(str, sizeof(str), Color_White"==========================================================\n");
	foreach(new i: Admins)
	{
		if(pInfo[i][pAuth] && pInfo[i][pAdmin]) format(str, sizeof(str), "%s"Color_White"%s ["Main_Color"%s"Color_White"]\n", str, pInfo[i][pName], AdminNames[pInfo[i][pAdmin]]);
	}
	format(str, sizeof(str), "%s==========================================================", str);

	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Модераторы онлайн", str, Color_White"Закрыть", "");
	return 1;
}

CMD:report(playerid)
{
	if(GetPVarInt(playerid, "ReportLenght")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже отправляли репорт. Подождите пока на него ответят");
	ShowDialog(playerid, D_Report, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Связь с администрацией", Color_White"Четко опишите свою проблему чтобы администрация могла помочь вам.", Color_White"Далее", Color_White"Отмена");
	return 1;
}
CMD:donate(playerid)
{
	ShowDialog(playerid, D_Donate, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Донат магазин", Main_Color"- "Color_White"Смена ника - 100р\n\
	"Main_Color"- "Color_White"Смена пола - 100р\n\
	"Main_Color"- "Color_White"Повысить уровень\n\
	"Main_Color"- "Color_White"Снять предупреждение\n\
	"Main_Color"- "Color_White"Купить вирты\n\
	"Main_Color"- "Color_White"Сменить домашний авто", Color_White"Далее", Color_White"Отмена");
	return 1;
}
CMD:alogin(playerid)
{
	if(pInfo[playerid][pAdmin] < 1 || GetPVarInt(playerid, "AdmAuth")) return 1;
	if(!strcmp(pInfo[playerid][pAdminPass], "None"))
	{
		ShowDialog(playerid, D_ACreatePass, DIALOG_STYLE_INPUT, Main_Color Project_Name " || "Color_White"Создание пароля администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
		необходимо придумать пароль от админ панели.\n\
		Введите пароль в поле ниже и запомните его.\n\n\
		"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n\
		"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа", Color_White"Далее", Color_White"Отмена");
	}
	else
	{
		ShowDialog(playerid, D_Alogin, DIALOG_STYLE_PASSWORD, Main_Color Project_Name " || "Color_White"Вход в панель администратора", Color_White"Для того чтобы полочуть доступ к возможнлмтям администратора\n\
		введите ваш пароль от админ панели в поле ниже.", Color_White"Далее", Color_White"Отмена");
	}
	return 1;
}

CMD:ahelp(playerid)
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new str[300];

	for(new i = 1; i < sizeof(AdminNames); i++)
	{
		if(pInfo[playerid][pAdmin] >= i) format(str, sizeof(str), "%s\n"Main_Color"%s\n", str, AdminNames[i]);
		else break;
	}

	ShowDialog(playerid, D_AHelp, DIALOG_STYLE_LIST, Main_Color"Админ панель ||"Color_White" Команды администратора", str, Color_White"Закрыть", "");

	return 1;
}

CMD:reportlist(playerid)
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	ClearReportList(playerid);

	new str[2500];
	new listitem = 0;
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "ReportLenght") && !GetPVarInt(i, "ReportInWork"))
		{
			new SubStr[50];
			format(SubStr, sizeof(SubStr), "ReportList_%d", listitem);
			SetPVarInt(playerid, SubStr, i);

			format(str, sizeof(str), Color_White"%s%s[%d]\n", str, pInfo[i][pName], i);
			listitem++;
		}
	}
	if(!listitem) ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Админ панель ||"Color_White" Список репортов", Color_White"На данный момент репортов нет!", Color_White"Закрыть", "");
	else
	{
		SetPVarInt(playerid, "ReportList_Lenght", listitem);
		ShowDialog(playerid, D_Report_List, DIALOG_STYLE_LIST, Main_Color"Админ панель ||"Color_White" Список репортов", str, Color_White"Далее", Color_White"Отмена");
	}
	return 1;
}

CMD:apanel(playerid)
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(pInfo[playerid][pAdmin]+1 == sizeof(AdminNames))
	{
		ShowDialog(playerid, D_APanel, DIALOG_STYLE_LIST, Main_Color"Админ панель", Main_Color"- "Color_White"Команды администратора\n\
		"Main_Color"- "Color_White"Список репортов\n\
		"Main_Color"- "Color_White"Настройки античита\n\
		"Main_Color"- "Color_White"Запустить PayDay\n\
		"Main_Color"- "Color_White"Настройки GPS\n\
		"Main_Color"- "Color_White"Настройки фракций\n\
		"Main_Color"- "Color_White"Настройки иконок\n\
		"Main_Color"- "Color_White"Логи\n\
		"Main_Color"- "Color_White"Настройки ботов", Color_White"Далее", Color_White"Отмена");
	}
	else
	{
		ShowDialog(playerid, D_APanel, DIALOG_STYLE_LIST, Main_Color"Админ панель", Main_Color"- "Color_White"Команды администратора\n\
		"Main_Color"- "Color_White"Список репортов", Color_White"Далее", Color_White"Отмена");
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/a [Сообщение]");

	format(message, sizeof(message), "%s %s: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], message);
	SendAdminMessage(message);
	return 1;
}
alias:a("amsg", "amessage");

CMD:mute(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, time, message[145];
	if(sscanf(params, "dds[145]", id, time, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/mute [ID] [Время в минутах] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(time < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверное время");
	if(time > 300) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете дать мут более чем на 300 минут");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете дать мут самому себе");

	pInfo[id][pMute] = time*60;
	SavePlayerInt(id, "Mute", pInfo[id][pMute]);
	new str[400];
	format(str, sizeof(str), Color_Red"%s %s выдал мут игроку %s на %d минут, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], time, message);
	SendAllMessage(str);

	format(str, sizeof(str), Color_Red"%s %s "Color_White"выдал вам мут на "Color_Red"%d "Color_White"минут, по причине:\n\
	"Color_Red"%s\n\n\
	"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], time, message);
	ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Вы получили мут", str, Color_White"Закрыть", "");

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выдал мут игроку %s (IP: %s | RegIP: %s), на %d минут по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], time, message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:unmute(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/mute [ID] [Текст]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете снять мут самому себе");

	pInfo[id][pMute] = 0;
	SavePlayerInt(id, "Mute", pInfo[id][pMute]);
	new str[400];
	format(str, sizeof(str), Color_Red"%s %s снял мут с игрока %s, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], message);
	SendAllMessage(str);

	SendClientMessage(id, -1, Color_Yellow"Вам сняли мут, теперь вы снова можете пользоваться чатом");

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) снял мут игроку %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:jail(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, time, message[145];
	if(sscanf(params, "dds[145]", id, time, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/jail [ID] [Время в минутах] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(time < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверное время");
	if(time > 300) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете посадить игрока в деморган более чем на 300 минут");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете посадить в деморган самого себя");

	ChangePlayerJob(id, pInfo[id][pJob]);
	ChangePlayerUnOfficialJob(id, Job_None);

	SetPVarInt(id, "DemorganCD", 5);

	pInfo[id][pDemorgan] = time*60;
	SavePlayerInt(id, "Demorgan", pInfo[id][pDemorgan]);
	SpawnPlayer(id);

	new str[400];
	format(str, sizeof(str), Color_Red"%s %s посадил игрока %s в деморган на %d минут, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], time, message);
	SendAllMessage(str);

	format(str, sizeof(str), Color_Red"%s %s "Color_White"посадил вас в деморган на "Color_Red"%d "Color_White"минут, по причине:\n\
	"Color_Red"%s\n\n\
	"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], time, message);
	ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Вас посадили в деморган", str, Color_White"Закрыть", "");

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) посадил игрока %s (IP: %s | RegIP: %s) в деморган на %d минут, по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], time, message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:unjail(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unjail [ID] [Текст]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете выпустить из деморгана самого себя");
	if(pInfo[id][pDemorgan] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок не находится в деморгане!");

	pInfo[id][pDemorgan] = 0;
	SavePlayerInt(id, "Demorgan", pInfo[id][pDemorgan]);
	new str[400];
	format(str, sizeof(str), Color_Red"%s %s выпустил из деморгана игрока %s, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], message);
	SendAllMessage(str);

	SendClientMessage(id, -1, Color_Yellow"Вас выпустили из деморгана");
	SpawnPlayer(id);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выпустил игрока %s (IP: %s | RegIP: %s) из деморгана", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:warn(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/warn [ID] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете выдать предупреждение самому себе");

	pInfo[id][pWarn] += 1;
	SavePlayerInt(id, "Warn", pInfo[id][pWarn]);
	new str[400];
	format(str, sizeof(str), Color_Red"%s %s выдал предупреждение игроку %s [%d/3], по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], pInfo[id][pWarn], message);
	SendAllMessage(str);

	format(str, sizeof(str), Color_Red"%s %s "Color_White"выдал вам предупреждение, по причине:\n\
	"Color_Red"%s\n\n\
	"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], message);
	ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Вам выдали предупреждение", str, Color_White"Закрыть", "");

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выдал предупреждение игроку %s (IP: %s | RegIP: %s) [%d/3], по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], pInfo[id][pWarn], message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);

	if(pInfo[id][pWarn] >= 3)
	{
		new reason[200];
		new time = 30;
		format(reason, sizeof(reason), "Warn 3/3 (%s)", message);
		format(str, sizeof(str), Color_Red"%s %s забанил игрока %s, на %d дней по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], time, reason);
		SendAllMessage(str);

		pInfo[id][pWarn] = 0;
		SavePlayerInt(id, "Warn", pInfo[id][pWarn]);

		format(str, sizeof(str), Color_Red"%s %s "Color_White"забанил вас на %d дней, по причине:\n\
		"Color_Red"%s\n\n\
		"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], time, reason);
		ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Этот аккаунт заблокирован", str, Color_White"Закрыть", "");

		BanPlayer(id, reason, gettime()+(time*86400), playerid);

		str[0] = EOS;
		GetPlayerIp(playerid, str, 16);
		SubStr[0] = EOS;
		GetPlayerIp(id, SubStr, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) забанил игрока %s (IP: %s | RegIP: %s) на %d дней по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], time, reason);

		AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	}
	return 1;
}

CMD:unwarn(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unwarn [ID] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(pInfo[id][pWarn] <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У игрока нет предупреждений");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете снять предупреждение с самого себя");

	pInfo[id][pWarn] -= 1;
	SavePlayerInt(id, "Warn", pInfo[id][pWarn]);
	new str[400];
	format(str, sizeof(str), Color_Red"%s %s снял одно предупреждение игроку %s, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], message);
	SendAllMessage(str);

	SendClientMessage(id, -1, Color_Yellow"С вас было снято 1 предупреждение");

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) снял 1 предупреждение игроку %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:kick(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, message[145];
	if(sscanf(params, "ds[145]", id, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/kick [ID] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете кикнуть самого себя");

	new str[400];
	format(str, sizeof(str), Color_Red"%s %s кикнул игрока %s, по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], message);
	SendAllMessage(str);

	format(str, sizeof(str), Color_Red"%s %s "Color_White"кикнул вас, по причине:\n\
	"Color_Red"%s\n\n\
	"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], message);
	ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Вас кикнули с сервера", str, Color_White"Закрыть", "");

	KickPlayer(id);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) кикнул игрока %s (IP: %s | RegIP: %s) по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:ban(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id, time, message[145];
	if(sscanf(params, "dds[145]", id, time, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/ban [ID] [Количество дней] [Причина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(time <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверное количество дней");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете забанить самого себя");

	new str[400];
	format(str, sizeof(str), Color_Red"%s %s забанил игрока %s, на %d дней по причине: %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[id][pName], time, message);
	SendAllMessage(str);

	format(str, sizeof(str), Color_Red"%s %s "Color_White"забанил вас на %d дней, по причине:\n\
	"Color_Red"%s\n\n\
	"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], time, message);
	ShowDialog(id, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Этот аккаунт заблокирован", str, Color_White"Закрыть", "");

	BanPlayer(id, message, gettime()+(time*86400), playerid);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) забанил игрока %s (IP: %s | RegIP: %s), на %d дней по причине: %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], time, message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:offban(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new Name[MAX_PLAYER_NAME+1], time, message[145];
	if(sscanf(params, "s[25]ds[145]", Name, time, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/offban [Ник] [Количество дней] [Причина]");
	if(time <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверное количество дней");


	new query[80];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `Name` = '%s'", Name);
	mysql_tquery(DB, query, "OffBanCheck", "sdd", message, playerid, time);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new Name[MAX_PLAYER_NAME+1];
	if(sscanf(params, "s[25]", Name)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/baninfo [Ник]");


	new query[80];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `Name` = '%s'", Name);
	mysql_tquery(DB, query, "BanInfoCheck", "d", playerid);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new Name[MAX_PLAYER_NAME+1], message[145];
	if(sscanf(params, "s[25]s[145]", Name, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unban [Имя игрока] [Причина]");
	if(!strcmp(pInfo[playerid][pName], Name)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ник");

	new query[80];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `bans` WHERE `Name` = '%s'", Name);
	mysql_tquery(DB, query, "UnBanCheck", "sd", message, playerid);
	return 1;
}

CMD:banip(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new IP[17], message[145];
	if(sscanf(params, "s[17]s[145]", IP, message))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/banip [IP] [Причина]");
		return SendClientMessage(playerid, -1, Color_Grey"Чтобы узнать IP игрока вы можете использовать команду /getip");
	}
	new PlayerIP[17];
	GetPlayerIp(playerid, PlayerIP, 17);
	if(!strcmp(IP, PlayerIP)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой IP");

	new str[300];
	format(str, sizeof(str), Color_Red"%s %s забанил IP %s по причине %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], IP, message);
	SendAdminMessage(str);

	BanIP(IP, playerid, message);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) забанил IP %s по причине %s", str, pInfo[playerid][pRegIp], IP, message);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:getip(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/getip [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	new IP[17];
	GetPlayerIp(id, IP, 17);

	new str[300];
	format(str, sizeof(str), Color_Yellow"%s[%d]: RegIP %s || Текущий IP %s", pInfo[id][pName], id, pInfo[id][pRegIp], IP);
	SendClientMessage(playerid, -1, str);

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new IP[17], message[145];
	if(sscanf(params, "s[17]s[145]", IP, message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/unbanip [IP] [Причина]");
	new PlayerIP[17];
	GetPlayerIp(playerid, PlayerIP, 17);
	if(!strcmp(IP, PlayerIP)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой IP");

	new query[80];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `ipbans` WHERE `IP` = '%s'", IP);
	mysql_tquery(DB, query, "UnBanIPCheck", "sd", message, playerid);
	return 1;
}

CMD:spec(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/spec [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");
	if(GetPVarInt(id, "Spec_Mode")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок находится в режиме слежки");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	SetPVarFloat(playerid, "Spec_X", X);
	SetPVarFloat(playerid, "Spec_Y", Y);
	SetPVarFloat(playerid, "Spec_Z", Z);
	SetPVarFloat(playerid, "Spec_A", A);
	SetPVarInt(playerid, "Spec_VW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(playerid, "Spec_INT", GetPlayerInterior(playerid));

	SetPVarInt(playerid, "Spec_ID", id);
	SetPVarInt(id, "Spec_Admin_ID", playerid+1);
	SetPVarInt(playerid, "Spec_Mode", 1);


	TogglePlayerSpectating(playerid, true);
	SpectatePlayer(playerid, id);

	return 1;
}

CMD:specoff(playerid)
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(!GetPVarInt(playerid, "Spec_Mode")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не в режиме слежки");
	StopSpectate(playerid);
	SendClientMessage(playerid, -1, Color_Yellow"Вы прекратили следить за игроком.");
	return 1;
}

CMD:gm(playerid, params[])
{
    if(pInfo[playerid][pAdmin] < 1 || !GetPVarInt(playerid, "AdmAuth")) return 1;
    new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/gm [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	new vehicleid = GetPlayerVehicleID(id);

	if(vehicleid)
	{
		new Float:X, Float:Y, Float:Z;
		new Float:Health;
		GetVehiclePos(vehicleid, X, Y, Z);
		AntiCheatGetVehicleHealth(vehicleid, Health);
		CreateExplosion(X, Y , Z+7.5, 5, 0.5);
		SetTimerEx("GMCheck", 1000, false, "dddf", id, playerid, vehicleid, Health);
	}
	else
	{
		new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(id, X, Y, Z);
	    AntiCheatGetHealth(id, pInfo[id][pHealth]);
	    CreateExplosion(X, Y , Z+7.5, 5, 0.5);
		SetTimerEx("GMCheck", 1000, false, "dddf", id, playerid, -1, pInfo[id][pHealth]);
	}
    return 1;
}

forward GMCheck(playerid, AdminID, vehicleid, Float:LastHp);
public GMCheck(playerid, AdminID, vehicleid, Float:LastHp)
{
	new Float:Health = 0.0;
	if(vehicleid != -1)
	{
		AntiCheatGetVehicleHealth(vehicleid, Health);
		if(LastHp - Health <= 0)
		{
			new str[200];
			format(str, sizeof(str), Color_White"Хп машины игрока "Color_Yellow"%s[%d] "Color_White"не изменилось либо прибавилось. Возможно у игрока GM", pInfo[playerid][pName], playerid);
			SendClientMessage(AdminID, -1, str);
		}
		else
		{
			new str[200];
			format(str, sizeof(str), Color_White"Хп машины игрока "Color_Yellow"%s[%d] "Color_White"убавилось. У игрока нет GM", pInfo[playerid][pName], playerid);
			SendClientMessage(AdminID, -1, str);
			SetVehicleHealth(vehicleid, LastHp);
		}
	}
	else
	{
		AntiCheatGetHealth(playerid,Health);
		if(LastHp - Health <= 0)
		{
			new str[200];
			format(str, sizeof(str), Color_White"Хп игрока "Color_Yellow"%s[%d] "Color_White"не изменилось либо прибавилось. Возможно у игрока GM", pInfo[playerid][pName], playerid);
			SendClientMessage(AdminID, -1, str);
		}
		else
		{
			new str[200];
			format(str, sizeof(str), Color_White"Хп игрока "Color_Yellow"%s[%d] "Color_White"убавилось. У игрока нет GM", pInfo[playerid][pName], playerid);
			SendClientMessage(AdminID, -1, str);
			SetPlayerHealth(playerid, LastHp);
		}
	}

	return 1;
}

CMD:makeleader(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 3 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/makeleader [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	new str[500];
	strcat(str, Color_White"Снять с должности лидера\n");
	for(new i = 1; i < MAX_FRACTION; i++) format(str, sizeof(str), "%s"Color_White"%s\n", str, FractionName[i]);
	SetPVarInt(playerid, "MakeLeaderID", id);
	ShowDialog(playerid, D_MakeLeader, DIALOG_STYLE_LIST, Main_Color"Назначение на пост лидера", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/givemoney [ID] [Деньги]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	GivePlayerMoneyEx(id, money);
	new str[400];
	format(str, sizeof(str), Color_Yellow"%s %s выдал вам "Color_Green"%d$", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], money);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы выдали %s "Color_Green"%d$", pInfo[id][pName], money);
	SendClientMessage(playerid, -1, str);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выдал %d$ игроку %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], money, pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);

	return 1;
}

CMD:givedonatemoney(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id, money;
	if(sscanf(params, "dd", id, money)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/givedonatemoney [ID] [Рубли]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	new str[400];
	format(str, sizeof(str), Color_Yellow"%s %s выдал вам "Color_Green"%d донат рублей", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], money);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы выдали %s "Color_Green"%d донат рублей", pInfo[id][pName], money);
	SendClientMessage(playerid, -1, str);

	pInfo[id][pDonateMoney] += money;
	SavePlayerInt(id, "DonateMoney", pInfo[id][pDonateMoney]);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выдал %d донат рублей игроку %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], money, pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:giveskin(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id, skin;
	if(sscanf(params, "dd", id, skin)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/giveskin [ID] [ID скина]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(skin < 0 || skin > 311) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID скина");

	new str[400];
	format(str, sizeof(str), Color_Yellow"%s %s выдал вам скин №%d", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], skin);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы выдали %s скин №%d", pInfo[id][pName], skin);
	SendClientMessage(playerid, -1, str);

	AddPlayerSkins(id, skin);

	str[0] = EOS;
	GetPlayerIp(playerid, str, 16);
	new SubStr[20];
	GetPlayerIp(id, SubStr, 16);
	format(str, sizeof(str), "(IP: %s | RegIP: %s) выдал скин %d игроку %s (IP: %s | RegIP: %s)", str, pInfo[playerid][pRegIp], skin, pInfo[id][pName], SubStr, pInfo[id][pRegIp]);

	AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	return 1;
}

CMD:slap(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/slap [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	AntiCheatGetHealth(id, pInfo[id][pHealth]);
	pInfo[id][pHealth] -= 5.0;
	SetPlayerHealth(id, pInfo[id][pHealth]);
    new Float:X, Float:Y, Float:Z, Float:A;
    GetPlayerPos(id, X, Y, Z);
    GetPlayerFacingAngle(id, A);
    SetPlayerPosition(id, X, Y, Z + 5.0, A, GetPlayerVirtualWorld(id), GetPlayerInterior(id));
    PlayerPlaySound(id, 1130, X, Y, Z + 5);

    new str[200];
	format(str, sizeof(str), Color_Yellow"%s %s подкинул вас", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы подкинули %s", pInfo[id][pName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:aad(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new message[145];
	if(sscanf(params, "s[145]", message)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/aad [Текст]");
	format(message, sizeof(message), Color_Yellow"[%s %s]"Color_White": %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], message);
	SendAllMessage(message);
	return 1;
}

CMD:spall(playerid)
{
	if(pInfo[playerid][pAdmin] < 3 || !GetPVarInt(playerid, "AdmAuth")) return 1;

	if(GetSVarInt("SpAllToggle")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Респавн всего транспорта уже запущен, ожидайте");

	SetTimer("RespawnAllCar", 60000, false);
	SetSVarInt("SpAllToggle", 1);

	new str[100];
	format(str, sizeof(str), Color_Yellow"%s %s Запустил респавн транспорта", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendAllMessage(str);

	SendAllMessage(Color_Yellow"Через минуту произойдет респавн всего не занятого транспорта на сервере!");
	return 1;
}

CMD:cc(playerid)
{
	if(pInfo[playerid][pAdmin] < 3 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	for(new i = 0; i < 100; i++) SendAllMessage(" ");

	new str[100];
	format(str, sizeof(str), Color_Yellow"%s %s Очистил чат", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendAllMessage(str);
	return 1;
}

CMD:sethp(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id, health;
	if(sscanf(params, "dd", id, health)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/sethp [ID] [Уровень здоровья]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(health < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный уровень здоровья");

	pInfo[id][pHealth] = float(health);
	SetPlayerHealth(id, pInfo[id][pHealth]);
	SavePlayerFloat(id, "Health", pInfo[id][pHealth]);

	if(pInfo[id][pHealth] > 25.0 && GetPVarInt(id, "PlayerKnockoutStatus") == Player_In_Knockout)
	{
		ClearAnimations(id, true);
		TogglePlayerControllable(id, true);
		SetPVarInt(id, "PlayerKnockoutStatus", Player_No_Knockout);
		DeletePVar(id, "DisableTextAnim");
	}

    new str[200];
	format(str, sizeof(str), Color_Yellow"%s %s установил вам уровень здоровья на %d", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], health);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы установили уровень здоровья %s на %d", pInfo[id][pName], health);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:tp(playerid)
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	ShowPlayerTPMenu(playerid);
	return 1;
}

CMD:spawn(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/spawn [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");

	SpawnPlayer(id);

	new str[200];
	format(str, sizeof(str), Color_Yellow"%s %s зареспавнил вас", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы зареспавнили %s", pInfo[id][pName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:goto(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/goto [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	TpPlayerToPlayer(id, playerid);

    new str[200];
	format(str, sizeof(str), Color_Yellow"%s %s телепортировался к вам", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы телепортировались к %s", pInfo[id][pName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:gethere(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/gethere [ID]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	TpPlayerToPlayer(playerid, id);

    new str[200];
	format(str, sizeof(str), Color_Yellow"%s %s телепортировал вас к себе", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendClientMessage(id, -1, str);
	str[0] = EOS;
	format(str, sizeof(str), Color_Yellow"Вы телепортировали к себе %s", pInfo[id][pName]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:dveh(playerid)
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPVarInt(playerid, "AdminCar"))
	{
		ClearVehicle(GetPVarInt(playerid, "AdminCar"));
		DeletePVar(playerid, "AdminCar");
		SendClientMessage(playerid, -1, Color_Yellow"Вы удалили админ транспорт созданый вами");
	}
	else SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не создавали админ транспорт");
	return 1;
}

CMD:veh(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 2 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new model, color1, color2;
	if(sscanf(params, "ddd", model, color1, color2)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/veh [Модель] [Цвет 1] [Цвет 2]");
	if(color1 > 255 || color1 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 1 может быть от 0 до 255");
	if(color2 > 255 || color2 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 2 может быть от 0 до 255");
	if(model < 400 || model > 611) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Модель может быть от 400 и до 611");

	if(GetPVarInt(playerid, "AdminCar"))
	{
		ClearVehicle(GetPVarInt(playerid, "AdminCar"));
		DeletePVar(playerid, "AdminCar");
	}

	new indx = GetFreeVehicleID();
	vInfo[indx][vFuel] = 100.0;
	vInfo[indx][vModel] = model;
	vInfo[indx][vColor1] = color1;
	vInfo[indx][vColor2] = color2;
	vInfo[indx][vType] = VehicleTypeServer;

	GetPlayerPos(playerid, vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ]);
	GetPlayerFacingAngle(playerid, vInfo[indx][vA]);

	vInfo[indx][vServerID] = CreateVehicle(vInfo[indx][vModel], vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ], vInfo[indx][vA], vInfo[indx][vColor1], vInfo[indx][vColor2], -1);
	SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, false, false, false, false);
	new virtualworld = GetPlayerVirtualWorld(playerid);
	new int = GetPlayerInterior(playerid);

	SetVehicleVirtualWorld(vInfo[indx][vServerID], virtualworld);
	LinkVehicleToInterior(vInfo[indx][vServerID], int);

	PutPlayerInVehicle(playerid, vInfo[indx][vServerID], 0);
	SetPVarInt(playerid, "AdminCar", vInfo[indx][vServerID]);
	return 1;
}

CMD:fractionsettings(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new str[500];
	for(new i = 1; i < MAX_FRACTION; i++) format(str, sizeof(str), "%s"Color_White"%s\n", str, FractionName[i]);
	ShowDialog(playerid, D_Edit_Fraction, DIALOG_STYLE_LIST, Main_Color"Редактирование фракций", str, Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:gpssettings(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	ShowDialog(playerid, D_GPS_Settings, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Настройки GPS", Main_Color"- "Color_White"Добавить новый заголовок\n\
	"Main_Color"- "Color_White"Удалить заголовок\n\
	"Main_Color"- "Color_White"Добавить пункт\n\
	"Main_Color"- "Color_White"Удалить пункт", Color_White"Далее", Color_White"Отмена");
	return 1;
}

CMD:iconsettings(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	SetPVarInt(playerid, "Icons_List", 1);
	ShowMapIconList(playerid);
	return 1;
}

CMD:logs(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	ShowDialog(playerid, D_Log_Type, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Логи", Main_Color"1"Color_White". Деньги\n\
	"Main_Color"2"Color_White". Действия администраторов/модераторов\n\
	"Main_Color"3"Color_White". Действия с аккаунтом\n\
	"Main_Color"4"Color_White". Логи фракций", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:bots(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(BotStatus)
	{
		ShowDialog(playerid, D_Bots_Settings, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Боты", Main_Color"1"Color_White". Ники ботов\n\
		"Main_Color"2"Color_White". Почасовой онлайн\n\
		"Main_Color"3"Color_White". Отключить всех ботов\n\
		"Main_Color"4"Color_Green". Включить всех ботов", Color_White"Далее", Color_White"Закрыть");
	}
	else
	{
		ShowDialog(playerid, D_Bots_Settings, DIALOG_STYLE_LIST, Main_Color"Админ панель || "Color_White"Боты", Main_Color"1"Color_White". Ники ботов\n\
		"Main_Color"2"Color_White". Почасовой онлайн\n\
		"Main_Color"3"Color_Green". Отключить всех ботов\n\
		"Main_Color"4"Color_White". Включить всех ботов", Color_White"Далее", Color_White"Закрыть");
	}
	return 1;
}

CMD:createicon(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new model, Color, Comment[100];
	if(sscanf(params, "dds[100]", model, Color, Comment)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/createicon [Номер иконки] [Цвет иконки в формате(RGBA) 0xFFFFFFFF] [Комментарий к иконке]");
	if(model < 0 || model > 63) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Номер иконки от 0 до 63");
	if(strlen(Comment) > 50) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Комментарий должен быть не длинее 50 символов");
	if(GetIconCount() >= sizeof(Icons))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество иконок.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}
	new Float:X, Float:Y, Float:Z, VW, Int;
	GetPlayerPos(playerid, X, Y, Z);
	Int = GetPlayerInterior(playerid);
	VW = GetPlayerVirtualWorld(playerid);

	new query[300];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `mapicon` (`IconModel`, `IconColor`, `VW`, `Int`, `X`, `Y`, `Z`, `Comment`) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%s')", model, Color, VW, Int, X, Y, Z, Comment);
	mysql_tquery(DB, query, "ReloadMapIcon");
	SendClientMessage(playerid, -1, Color_White"Иконка создана");
	return 1;
}

CMD:payday(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new str[145];
	format(str, sizeof(str), Color_Yellow"%s %s запустил PayDay", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName]);
	SendAllMessage(str);
	PayDay();
	return 1;
}

CMD:makeadmin(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new id, AdmLevel;
	if(sscanf(params, "dd", id, AdmLevel)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/makeadmin [ID] [Уровень(0 - Чтобы снять)]");
	if(id < 0 || id > MAX_PLAYERS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный ID игрока");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не подключен");
	if(!pInfo[id][pAuth]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с данным ID не авторизировался");
	if(playerid == id) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы ввели свой ID");

	if(AdmLevel < 0 || AdmLevel > sizeof(AdminNames)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Уровень от 1 до 4");

	if(!AdmLevel)
	{
		if(!pInfo[id][pAdmin]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Игрок не является администратором, вы не можете снять его!");
		new str[400];
		format(str, sizeof(str), Color_Yellow"%s %s снял вас с должности %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], AdminNames[pInfo[id][pAdmin]]);
		SendClientMessage(id, -1, str);
		str[0] = EOS;
		format(str, sizeof(str), Color_Yellow"%s %s снял с должности %s игрока %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], AdminNames[pInfo[id][pAdmin]], pInfo[id][pName]);
		SendAdminMessage(str);

		str[0] = EOS;
		GetPlayerIp(playerid, str, 16);
		new SubStr[20];
		GetPlayerIp(id, SubStr, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) снял игрока %s (IP: %s | RegIP: %s) с должности %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], AdminNames[pInfo[id][pAdmin]]);

		AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	}
	else
	{
		new str[400];
		format(str, sizeof(str), Color_Yellow"%s %s назначил вас на должность %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], AdminNames[AdmLevel]);
		SendClientMessage(id, -1, str);
		SendClientMessage(id, -1, Color_Yellow"Используйте /alogin чтобы авторизироваться в админ панели");
		str[0] = EOS;
		format(str, sizeof(str), Color_Yellow"%s %s назначил на должность %s игрока %s", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], AdminNames[AdmLevel], pInfo[id][pName]);
		SendAdminMessage(str);

		str[0] = EOS;
		GetPlayerIp(playerid, str, 16);
		new SubStr[20];
		GetPlayerIp(id, SubStr, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) назначил игрока %s (IP: %s | RegIP: %s) на должность %s", str, pInfo[playerid][pRegIp], pInfo[id][pName], SubStr, pInfo[id][pRegIp], AdminNames[AdmLevel]);

		AddLog(LogTypeAdmin, pInfo[playerid][pID], str);
	}

	pInfo[id][pAdmin] = AdmLevel;
	SavePlayerInt(id, "Admin", pInfo[id][pAdmin]);
	mysql_tquery(DB, "SELECT * FROM `account` WHERE `Admin` > 0 ORDER BY `Admin` DESC", "FillAdminBoard");
	return 1;
}

CMD:settime(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new time;
	if(sscanf(params, "d", time)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/settime [Время]");
	if(time < 0 || time > 23) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Время от 0 до 23");
	SetWorldTime(time);
	return 1;
}

CMD:setweather(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new weatherid;
	if(sscanf(params, "d", weatherid)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/setweather [id погоды]");
	if(weatherid < 0 || weatherid > 22) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"ID погоды от 0 до 22");
	SetWeather(weatherid);
	return 1;
}

CMD:deletetent(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");

	new indx = -1;
	new VW = GetPlayerVirtualWorld(playerid);
	new Int = GetPlayerInterior(playerid);
	for(new i = 0; i < sizeof(Tent); i++)
	{
		if(Tent[i][TentID] && IsPlayerInDynamicArea(playerid, Tent[i][TentArea]) && Tent[i][TentInt] == Int && Tent[i][TentVW] == VW)
		{
			indx = i;
			break;
		}
	}
	if(indx == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Встаньте рядом с палаткой которую хотите удалить");

	new query[300];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `tent` WHERE `ID` = '%d'", Tent[indx][TentID]);
	mysql_tquery(DB, query);

	for(new i = 0; i < sizeof(Tent); i++)
	{
		if(Tent[i][TentID])
		{
			if(Tent[i][TentPlayer] != -1) UnrentTent(Tent[i][TentPlayer]);
			ClearTent(i);
		}
	}
	mysql_tquery(DB, "SELECT * FROM `tent`", "LoadTent");
	SendClientMessage(playerid, -1, Color_Yellow"Палатка удалена");
	return 1;
}

CMD:createtent(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new Type, Slots, Price;
	if(sscanf(params, "ddd", Type, Slots, Price))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/createtent [Тип палатки] [Количество слотов в палатке] [Стоимость за час]");
		SendClientMessage(playerid, -1, Color_Grey"Тип от 1 до 5(Влияет только на внешний вид)");
		return 1;
	}
	if(Type < 1 || Type > 5) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Тип от 1 до 5");
	if(Slots < 1 || Slots > MAX_TENT_ITEMS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество слотов в палатке не может быть меньше 1 и больше "#MAX_TENT_ITEMS);
	if(Price <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не верная стоимость");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");
	if(GetPVarInt(playerid, "EditTent")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже редактируете стол");
	new indx = -1;
	for(new i = 0; i < sizeof(Tent); i++)
	{
		if(!Tent[i][TentID])
		{
			indx = i;
			break;
		}
	}
	if(indx == -1)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество столов для казино.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	X += (3.0 * floatsin(-A, degrees));
    Y += (3.0 * floatcos(-A, degrees));

    new model = 0;
	switch(Type)
	{
		case 1: model = 1570;
		case 2: model = 3862;
		case 3: model = 3861;
		case 4: model = 3860;
		case 5: model = 3863;
		default: model = 1570;
	}

    new objid = CreateDynamicObject(model, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    EditDynamicObject(playerid, objid);

    SendClientMessage(playerid, -1, Color_Yellow"Вы начали редактирование палатки для торговой площадки.");
    SendClientMessage(playerid, -1, Color_Yellow"Вы можете поворачивать камеру зажав [SPACE]");
    SetPVarInt(playerid, "EditTent", objid);
    SetPVarInt(playerid, "EditTentType", Type);
    SetPVarInt(playerid, "EditTentSlot", Slots);
    SetPVarInt(playerid, "EditTentPrice", Price);
	return 1;
}

CMD:deletetable(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");

	new indx = -1;
	new VW = GetPlayerVirtualWorld(playerid);
	new Int = GetPlayerInterior(playerid);
	for(new i = 0; i < sizeof(CasinoTable); i++)
	{
		if(CasinoTable[i][CasTabID] && IsPlayerInDynamicArea(playerid, CasinoTable[i][CasTabArea]) && CasinoTable[i][CasTabInt] == Int && CasinoTable[i][CasTabVW] == VW)
		{
			indx = i;
			break;
		}
	}
	if(indx == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Встаньте рядом со столом который хотите удалить");

	new query[300];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `casino_table` WHERE `ID` = '%d'", CasinoTable[indx][CasTabID]);
	mysql_tquery(DB, query);

	for(new i = 0; i < sizeof(CasinoTable); i++)
	{
		if(CasinoTable[i][CasTabID])
		{
			if(GetPlayerTableCount(i)) EndTableGame(i);
			ClearCasinoTable(i);
		}
	}
	mysql_tquery(DB, "SELECT * FROM `casino_table`", "LoadTable");
	SendClientMessage(playerid, -1, Color_Yellow"Стол удален");
	return 1;
}

CMD:createtable(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new TableType, MaxPlayer, Bet;
	if(sscanf(params, "ddd", TableType, MaxPlayer, Bet))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/createtable [Тип стола] [Количество игроков для игры за столом] [Ставка]");
		SendClientMessage(playerid, -1, Color_Grey"Тип 1 - Кости");
		SendClientMessage(playerid, -1, Color_Grey"Тип 2 - 21 очко");
		SendClientMessage(playerid, -1, Color_Grey"Тип 3 - Рулетка");
		return 1;
	}
	if(TableType < 1 || TableType > 3) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не верный тип");
	if(MaxPlayer < 2 || MaxPlayer > MAX_PLAYER_CASINOTABLE) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Количество игроков за столом не может быть меньше 2х и больше "#MAX_PLAYER_CASINOTABLE);
	if(Bet <= 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Не верная сумма ставки");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");
	if(GetPVarInt(playerid, "EditCasinoTable")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже редактируете стол");
	new indx = -1;
	for(new i = 0; i < sizeof(CasinoTable); i++)
	{
		if(!CasinoTable[i][CasTabID])
		{
			indx = i;
			break;
		}
	}
	if(indx == -1)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество столов для казино.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	X += (3.0 * floatsin(-A, degrees));
    Y += (3.0 * floatcos(-A, degrees));

    new objid = CreateDynamicObject(19474, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    EditDynamicObject(playerid, objid);

    SendClientMessage(playerid, -1, Color_Yellow"Вы начали редактирование стола для казино.");
    SendClientMessage(playerid, -1, Color_Yellow"Вы можете поворачивать камеру зажав [SPACE]");
    SetPVarInt(playerid, "EditCasinoTable", objid);
    SetPVarInt(playerid, "EditCasinoTableType", TableType);
    SetPVarInt(playerid, "EditCasinoTablePlayers", MaxPlayer);
    SetPVarInt(playerid, "EditCasinoTableBet", Bet);
	return 1;
}

CMD:deletesprunk(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid != PLAYER_STATE_ONFOOT)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");

	new indx = -1;
	new VW = GetPlayerVirtualWorld(playerid);
	new Int = GetPlayerInterior(playerid);
	for(new i = 0; i < sizeof(Vending); i++)
	{
		if(Vending[i][VendID] && IsPlayerInDynamicArea(playerid, Vending[i][VendArea]) && Vending[i][VendInt] == Int && Vending[i][VendVW] == VW)
		{
			indx = i;
			break;
		}
	}
	if(indx == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Встаньте рядом с автоматом Sprunk который хотите удалить");

	new query[300];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `vending` WHERE `ID` = '%d'", Vending[indx][VendID]);
	mysql_tquery(DB, query);

	for(new i = 0; i < sizeof(Vending); i++)
	{
		if(Vending[i][VendID]) ClearVending(i);
	}
	mysql_tquery(DB, "SELECT * FROM `vending`", "LoadVending");
	SendClientMessage(playerid, -1, Color_Yellow"Автомат Sprunk удален");
	return 1;
}

CMD:createsprunk(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid != PLAYER_STATE_ONFOOT)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на ногах");
	if(GetPVarInt(playerid, "EditSprunkMachine")) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы уже редактируете автомат со Sprunk");
	new indx = -1;
	for(new i = 0; i < sizeof(Vending); i++)
	{
		if(!Vending[i][VendID])
		{
			indx = i;
			break;
		}
	}
	if(indx == -1)
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"На данный момент создано максимальное количество автоматов Sprunk.");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Обратитесь к тех.администрации");
	}
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	X += (3.0 * floatsin(-A, degrees));
    Y += (3.0 * floatcos(-A, degrees));

    new objid = CreateDynamicObject(1775, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    EditDynamicObject(playerid, objid);

    SendClientMessage(playerid, -1, Color_Yellow"Вы начали редактирование автомата Sprunk.");
    SendClientMessage(playerid, -1, Color_Yellow"Вы можете поворачивать камеру зажав [SPACE]");
    SetPVarInt(playerid, "EditSprunkMachine", objid);
	return 1;
}

CMD:createbusiness(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться на ногах");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
	new BusinessTypes;
	if(sscanf(params, "d", BusinessTypes)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/createbusiness [Тип 1 - Главные офисы | Тип 2 - Отделения, точки]");
	if(BusinessTypes < 1 || BusinessTypes > 2) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Тип 1 - Главные офисы | Тип 2 - Отделения, точки");
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	SetPVarFloat(playerid, "BusinessX", X);
	SetPVarFloat(playerid, "BusinessY", Y);
	SetPVarFloat(playerid, "BusinessZ", Z);
	SetPVarFloat(playerid, "BusinessA", A);

	new str[1500];
	if(BusinessTypes == 1)
	{
		for(new i = 1; i < sizeof(BusinessType); i++) if(BusinessType[i][IsCompany]) format(str, sizeof(str), "%s"Main_Color"- "Color_White"%s\n", str, BusinessType[i][bName]);
		ShowDialog(playerid, D_CreateBusiness_Type_Company, DIALOG_STYLE_LIST, Main_Color"Выбор типа бизнеса", str, Color_White"Далее", Color_White"Закрыть");
	}
	else if(BusinessTypes == 2)
	{
		for(new i = 1; i < sizeof(BusinessType); i++) if(!BusinessType[i][IsCompany]) format(str, sizeof(str), "%s"Main_Color"- "Color_White"%s\n", str, BusinessType[i][bName]);
		ShowDialog(playerid, D_CreateBusiness_Type_Shop, DIALOG_STYLE_LIST, Main_Color"Выбор типа бизнеса", str, Color_White"Далее", Color_White"Закрыть");
	}
	return 1;
}

CMD:editbusiness(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new BusinessID;
	if(sscanf(params, "d", BusinessID)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/editbusiness [Номер бизнеса]");
	if(BusinessID <= 0 || BusinessID >= sizeof(bInfo)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный номер бизнеса");
	if(!bInfo[BusinessID][bID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Такой бизнес не существует");

	SetPVarInt(playerid, "Business", BusinessID);

	new str[100];
	format(str, sizeof(str), Color_White"Редактирование"Main_Color" бизнеса №"Color_White"%d", bInfo[BusinessID][bID]);
	ShowDialog(playerid, D_EditBusiness, DIALOG_STYLE_LIST, str, Main_Color"- "Color_White"Местоположение\n\
	"Main_Color"- "Color_White"Тип\n\
	"Main_Color"- "Color_White"Валюта\n\
	"Main_Color"- "Color_White"Цена\n\
	"Main_Color"- "Color_White"Минимальный уровень для покупки\n\
	"Main_Color"- "Color_White"Место обслуживания на машине(Заправки/KFC)\n\
	"Main_Color"- "Color_White"Удалить место обслуживания на машине", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:deletebusiness(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new BusinessID;
	if(sscanf(params, "d", BusinessID)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/deletebusiness [Номер бизнеса]");
	if(BusinessID <= 0 || BusinessID >= sizeof(bInfo)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный номер бизнеса");
	if(!bInfo[BusinessID][bID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Такой бизнес не существует");

	new query[100];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `business` WHERE `ID` = '%d'", bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);

	if(bInfo[BusinessID][bType] == BusinessRentCar || bInfo[BusinessID][bType] == BusinessRentBoat || bInfo[BusinessID][bType] == BusinessRentMoto || bInfo[BusinessID][bType] == BusinessRentPlane)
	{
		foreach(new i : Vehicle)
		{
			if(vInfo[i][vType] == VehicleTypeBusiness && vInfo[i][vOwner] == bInfo[BusinessID][bID])
			{
				if(vInfo[i][vRenter] != -1)
				{
					if(GetPlayerVehicleID(vInfo[i][vRenter]) == i) ClearAnimations(vInfo[i][vRenter]);
					SendClientMessage(vInfo[i][vRenter], -1, Color_Yellow"Администрация запустила перезагрузку бизнесов. Арендованный транспорт был удален");
					DeletePVar(vInfo[i][vRenter], "RentedCar");
				}
				DeleteCar(-1, vInfo[i][vID]);
				ClearVehicle(i);
			}
		}
	}

	new ID = bInfo[BusinessID][bID];
	for(new i = 1; i < sizeof(bInfo); i++)
	{
		if(bInfo[i][bID])
		{
			foreach(new j: Player)
			{
				if(pInfo[j][pAuth] && GetPVarInt(j, "InBusiness") == bInfo[i][bID])
				{
					DeletePVar(j, "InBusiness");
					SetPlayerPosition(j, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ], bInfo[i][bA], 0, 0);
					SendClientMessage(j, -1, Color_Yellow"Администрация запустила перезагрузку бизнесов. Пожалуйста подождите");
				}
			}

			if(bInfo[i][bID] > ID)
			{
				new NewID = ID;
				ID = bInfo[i][bID];
				SaveBusinessInt(i, "ID", NewID);
			}
			ClearBusiness(i);
		}
	}
	mysql_tquery(DB, "SELECT * FROM `business`", "ReloadBusiness");
	SendClientMessage(playerid, -1, Color_Yellow"Бизнес удален!");
	return 1;
}

CMD:createhouse(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находиться на ногах");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны быть на улице");
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	SetPVarFloat(playerid, "HouseX", X);
	SetPVarFloat(playerid, "HouseY", Y);
	SetPVarFloat(playerid, "HouseZ", Z);
	SetPVarFloat(playerid, "HouseA", A);

	SetPVarInt(playerid, "Interior_List", 1);
	ShowHouseInteriorList(playerid, 1);
	return 1;
}

CMD:edithouse(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new HouseID;
	if(sscanf(params, "d", HouseID)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/edithouse [Номер дома]");
	if(HouseID <= 0 || HouseID >= sizeof(hInfo)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный номер дома");
	if(!hInfo[HouseID][hID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Такой дом не существует");

	SetPVarInt(playerid, "House", HouseID);

	new str[100];
	format(str, sizeof(str), Color_White"Редактирование"Main_Color" дома №"Color_White"%d", hInfo[HouseID][hID]);
	ShowDialog(playerid, D_EditHouse, DIALOG_STYLE_LIST, str, Main_Color"- "Color_White"Местоположение\n\
	"Main_Color"- "Color_White"Интерьер\n\
	"Main_Color"- "Color_White"Валюта\n\
	"Main_Color"- "Color_White"Цена\n\
	"Main_Color"- "Color_White"Место спавна транспорта\n\
	"Main_Color"- "Color_White"Минимальный уровень для покупки", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

CMD:deletehouse(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new HouseID;
	if(sscanf(params, "d", HouseID)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/deletehouse [Номер дома]");
	if(HouseID <= 0 || HouseID >= sizeof(hInfo)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный номер дома");
	if(!hInfo[HouseID][hID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Такой дом не существует");

	new query[100];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `house` WHERE `ID` = '%d'", hInfo[HouseID][hID]);
	mysql_tquery(DB, query);

	new ID = hInfo[HouseID][hID];
	for(new i = 1; i < sizeof(hInfo); i++)
	{
		if(hInfo[i][hID])
		{
			foreach(new j: Player)
			{
				if(pInfo[j][pAuth] && GetPVarInt(j, "InHouse") == hInfo[i][hID])
				{
					DeletePVar(j, "InHouse");
					SetPlayerPosition(j, hInfo[i][hX], hInfo[i][hY], hInfo[i][hZ], hInfo[i][hA], 0, 0);
					SendClientMessage(j, -1, Color_Yellow"Администрация запустила перезагрузку домов. Пожалуйста подождите");
				}
			}

			if(hInfo[i][hID] > ID)
			{
				new NewID = ID;
				ID = hInfo[i][hID];
				SaveHouseInt(i, "ID", NewID);
			}
			ClearHouse(i);
		}
	}
	mysql_tquery(DB, "SELECT * FROM `house`", "ReloadHouse");
	SendClientMessage(playerid, -1, Color_Yellow"Дом удален!");
	return 1;
}

CMD:createvehicle(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new model, color1, color2, type;
	if(sscanf(params, "dddd", model, type, color1, color2))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/createvehicle [Модель] [Тип] [Цвет 1] [Цвет 2]");
		SendClientMessage(playerid, -1, Color_Grey"Тип 1 - Машина доступна всем");
		SendClientMessage(playerid, -1, Color_Grey"Тип 2 - Машина доступна определенной фракции");
		SendClientMessage(playerid, -1, Color_Grey"Тип 3 - Машина доступна на определенной работе");
		SendClientMessage(playerid, -1, Color_Grey"Тип 4 - Машина доступна в определенном бизнесе(аренда)");
		return 1;
	}
	switch(type)
	{
		case 1: type = VehicleTypeServer;
		case 2: type = VehicleTypeFraction;
		case 3: type = VehicleTypeJob;
		case 4: type = VehicleTypeBusiness;
		default: return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный тип");
	}
	if(color1 > 255 || color1 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 1 может быть от 0 до 255");
	if(color2 > 255 || color2 < 0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 2 может быть от 0 до 255");
	if(model < 400 || model > 611) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Модель может быть от 400 и до 611");

	new indx = GetFreeVehicleID();
	vInfo[indx][vFuel] = 100.0;
	vInfo[indx][vModel] = model;
	vInfo[indx][vColor1] = color1;
	vInfo[indx][vColor2] = color2;
	vInfo[indx][vType] = type;
	vInfo[indx][vEdit] = true;

	GetPlayerPos(playerid, vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ]);
	GetPlayerFacingAngle(playerid, vInfo[indx][vA]);

	vInfo[indx][vServerID] = CreateVehicle(vInfo[indx][vModel], vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ], vInfo[indx][vA], vInfo[indx][vColor1], vInfo[indx][vColor2], -1);
	SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, false, false, false, false);

	PutPlayerInVehicle(playerid, vInfo[indx][vServerID], 0);

	SendClientMessage(playerid, -1, Color_Yellow"Машина создана!");
	SendClientMessage(playerid, -1, Color_White"Поставьте её в то место где хотите чтобы она спавнилась и напишите /saveveh");
	SendClientMessage(playerid, -1, Color_White"Если вы не хотите сохранять данную машину введите /cancelveh");
	return 1;
}

CMD:saveveh(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
	if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

	switch(vInfo[vehicleid][vType])
	{
		case VehicleTypeServer: SaveCar(playerid, vehicleid);
		case VehicleTypeFraction:
		{
			new str[500];
			for(new i = 1; i < MAX_FRACTION; i++) format(str, sizeof(str), "%s"Color_White"%s\n", str, FractionName[i]);
			ShowDialog(playerid, D_CreateCar_Type_Fraction, DIALOG_STYLE_LIST, Main_Color"Фракционная машина", str, Color_White"Далее", Color_White"Закрыть");
		}
		case VehicleTypeJob:
		{
			new str[400];
			for(new i = 1; i < sizeof(Jobs); i++)
			{
				format(str, sizeof(str), "%s"Main_Color"%d"Color_White". %s\n", str, i, Jobs[i][JobNames]);
			}
			ShowDialog(playerid, D_CreateCar_Type_Job, DIALOG_STYLE_LIST, Main_Color"Рабочая машина", str, Color_White"Далее", Color_White"Закрыть");
		}
		case VehicleTypePlayer: SaveCar(playerid, vehicleid);
		case VehicleTypeBusiness:
		{
			SetPVarInt(playerid, "Business_List", 1);
			ShowBusinessList(playerid, 2);
		}
	}
	return 1;
}

stock DeleteCar(playerid, VehMysqlID)
{
	if(!VehMysqlID) return 1;
	new query[100];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `vehicle` WHERE `ID` = '%d'", VehMysqlID);
	mysql_tquery(DB, query);

	if(playerid != -1) SendClientMessage(playerid, -1, Color_Yellow"Машина удалена!");
	return 1;
}

stock SaveCar(playerid, vehicleid, bool:msg = true, slot = 0)
{
	GetVehiclePos(vehicleid, vInfo[vehicleid][vX], vInfo[vehicleid][vY], vInfo[vehicleid][vZ]);
	GetVehicleZAngle(vehicleid, vInfo[vehicleid][vA]);

	new query[700];
	if(!vInfo[vehicleid][vID])
	{
		mysql_format(DB, query, sizeof(query), "INSERT INTO `vehicle` (`Model`, `Owner`, `Rank`, `Type`, `Color1`, `Color2`, `X`, `Y`, `Z`, `A`, `Price`, `GarageSlot`) VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d')",
		vInfo[vehicleid][vModel],
		vInfo[vehicleid][vOwner],
		vInfo[vehicleid][vRank],
		vInfo[vehicleid][vType],
		vInfo[vehicleid][vColor1],
		vInfo[vehicleid][vColor2],
		vInfo[vehicleid][vX],
		vInfo[vehicleid][vY],
		vInfo[vehicleid][vZ],
		vInfo[vehicleid][vA],
		vInfo[vehicleid][vPrice],
		slot);
		if(vInfo[vehicleid][vType] != VehicleTypePlayer) mysql_tquery(DB, query, "GetCreateVehID", "dd", vehicleid, -1);
		else mysql_tquery(DB, query, "GetCreateVehID", "dd", vehicleid, playerid);
		if(msg) SendClientMessage(playerid, -1, Color_Yellow"Машина сохранена! Редактирование окончено");
	}
	else
	{
		mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `Model` = '%d', `Owner` = '%d', `Rank` = '%d', `Type` = '%d', `Color1` = '%d', `Color2` = '%d', `X` = '%f', `Y` = '%f', `Z` = '%f', `A` = '%f', `Price` = '%d' WHERE `ID` = '%d'",
		vInfo[vehicleid][vModel],
		vInfo[vehicleid][vOwner],
		vInfo[vehicleid][vRank],
		vInfo[vehicleid][vType],
		vInfo[vehicleid][vColor1],
		vInfo[vehicleid][vColor2],
		vInfo[vehicleid][vX],
		vInfo[vehicleid][vY],
		vInfo[vehicleid][vZ],
		vInfo[vehicleid][vA],
		vInfo[vehicleid][vPrice],
		vInfo[vehicleid][vID]);

		DestroyVehicle(vInfo[vehicleid][vServerID]);
		new respawn_delay = 0;
		if(vInfo[vehicleid][vType] == VehicleTypePlayer) respawn_delay = -1;
		else respawn_delay = 600;
		vInfo[vehicleid][vServerID] = CreateVehicle(vInfo[vehicleid][vModel], vInfo[vehicleid][vX], vInfo[vehicleid][vY], vInfo[vehicleid][vZ], vInfo[vehicleid][vA], vInfo[vehicleid][vColor1], vInfo[vehicleid][vColor2], respawn_delay);
		SetVehicleParamsEx(vInfo[vehicleid][vServerID], false, false, false, false, false, false, false);

		vInfo[vehicleid][vEdit] = false;
		mysql_tquery(DB, query);

		UpdateVehicle(vehicleid, playerid);

		if(msg) SendClientMessage(playerid, -1, Color_Yellow"Машина сохранена! Редактирование окончено");
	}
	return 1;
}

CMD:cancelveh(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которая редактируется");
	if(!vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина не редактировалась");

	if(!vInfo[vehicleid][vID])
	{
		ClearVehicle(vInfo[vehicleid][vServerID]);
		SendClientMessage(playerid, -1, Color_Yellow"Машина удалена! Редактирование окончено");
	}
	else
	{
		vInfo[vehicleid][vEdit] = false;
		SetVehicleToRespawn(vInfo[vehicleid][vServerID]);
		SendClientMessage(playerid, -1, Color_Yellow"Редактирование окончено");
	}

	return 1;
}

CMD:editvehicle(playerid, params[])
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new model, color1, color2, type;
	if(sscanf(params, "dddd", model, type, color1, color2))
	{
		SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"/editvehicle [Модель] [Тип] [Цвет 1] [Цвет 2]");
		SendClientMessage(playerid, -1, Color_Grey"Если вы не хотите менять какие-то из параметров вы можете указать их как -1");
		SendClientMessage(playerid, -1, Color_Grey"Тип 1 - Машина доступна всем");
		SendClientMessage(playerid, -1, Color_Grey"Тип 2 - Машина доступна определенной фракции");
		SendClientMessage(playerid, -1, Color_Grey"Тип 3 - Машина доступна на определенной работе");
		SendClientMessage(playerid, -1, Color_Grey"Тип 4 - Машина доступна в определенном бизнесе(аренда)");
		return 1;
	}

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которую хотите отредактировать");
	if(vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина уже редактируется");

	if(type != -1)
	{
		switch(type)
		{
			case 1: type = VehicleTypeServer;
			case 2: type = VehicleTypeFraction;
			case 3: type = VehicleTypeJob;
			case 4: type = VehicleTypeBusiness;
			default: return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Неверный тип");
		}
	}

	if(color1 != -1 && (color1 > 255 || color1 < 0)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 1 может быть от 0 до 255");
	if(color2 != -1 && (color2 > 255 || color2 < 0)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Цвет 2 может быть от 0 до 255");
	if(model != -1 && (model < 400 || model > 611)) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Модель может быть от 400 и до 611");

	if(type != -1) vInfo[vehicleid][vType] = type;
	if(model != -1) vInfo[vehicleid][vModel] = model;
	if(color1 != -1) vInfo[vehicleid][vColor1] = color1;
	if(color2 != -1) vInfo[vehicleid][vColor2] = color2;

	vInfo[vehicleid][vEdit] = true;

	SendClientMessage(playerid, -1, Color_Yellow"Вы начали редактирование машины!");
	SendClientMessage(playerid, -1, Color_White"Поставьте её в то место где хотите чтобы она спавнилась и напишите /saveveh");
	SendClientMessage(playerid, -1, Color_White"Если вы не хотите редактировать данную машину введите /cancelveh");
	return 1;
}

CMD:deletevehicle(playerid)
{
	if(pInfo[playerid][pAdmin] < 4 || !GetPVarInt(playerid, "AdmAuth")) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы должны находится в машине которую хотите удалить");
	if(vInfo[vehicleid][vEdit]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина редактируется");
	if(!vInfo[vehicleid][vID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Эта машина временная!");

	DeleteCar(playerid, vInfo[vehicleid][vID]);
	ClearVehicle(vehicleid);
	return 1;
}
///////////////////////////////////////////////////////////////////////////////

stock KickPlayer(playerid) {SetTimerEx("KickEx", 500, false, "d", playerid);}

stock SetPlayerTaxiMarker(playerid, Float:X, Float:Y, Float:Z)
{
	new id = GetPVarInt(playerid, "TaxiPoint")-1;
	DeletePVar(playerid, "TaxiPoint");

	new price = GetPVarInt(id, "TaxiFare");
	new Float:Distance = GetVehicleDistanceFromPoint(GetPVarInt(id, "TaxiVehicle"), Float:X, Float:Y, Float:Z);

	if(pInfo[playerid][pMoney] < floatround(price * Distance) && pInfo[playerid][pLevel])
	{
		RemovePlayerFromVehicle(playerid);
		SendClientMessage(id, -1, Color_Grey"У клиента недостаточно средств чтобы оплатить такси");
		return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств чтобы оплатить такси");
	}

	pInfo[id][pGPSType] = GPS_Type_Job;
	SetPlayerRaceCheckpoint(id, 2, X, Y, Z, 0.0, 0.0, 0.0, 10.0);
	SendClientMessage(id, -1, Main_Color"[GPS] "Color_White"Навигатор включен");
	SendClientMessage(playerid, -1, Color_White"Вы указали место назначения таксисту");

	new str[150];
	new money = floatround(float(price) * (Distance/1000.0));
	format(str, sizeof(str), Color_White"Расстояние до пункта назначения %.2f. Тариф: "Color_Green"%d$"Color_White"/км. Стоимость: "Color_Green"%d$", Distance, price, money);
	SendClientMessage(id, -1, str);
	SendClientMessage(playerid, -1, str);

	if(pInfo[playerid][pLevel]) GivePlayerMoneyEx(playerid, -money);

	SetPVarInt(playerid, "TaxiPrice", money);
	SetPVarInt(playerid, "TaxiDriver", id+1);

	SetPVarInt(id, "TaxiPassenger", playerid+1);
	SetPVarFloat(id, "TaxiX", X);
	SetPVarFloat(id, "TaxiY", Y);
	SetPVarFloat(id, "TaxiZ", Z);
	SetPVarFloat(id, "TaxiDistance", Distance);
	return 1;
}

stock ActivateBusinessActors(playerid, BusinessID)
{
	for(new i = 0; i < 4; i++)
	{
		if(IsPlayerInDynamicArea(playerid, bInfo[BusinessID][bSellArea][i]))
		{
			ApplyDynamicActorAnimation(bInfo[BusinessID][bActor][i], "CASINO", "ROULETTE_BET", 4.1, false, false, false, false, 0);
			SetTimerEx("ClearActorAnim", 1400, false, "d", bInfo[BusinessID][bActor][i]);
			break;
		}
	}
	return 1;
}

stock SetPlayerFacingPos(playerid, Float:X, Float:Y, bool:revers=false)
{
	// by Daniel_Cortez \\ pro-pawn.ru
    new Float:aX, Float:aY, Float:aZ;
    if(GetPlayerPos(playerid, aX, aY, aZ) == 0) return 0;
    if(!revers) SetPlayerFacingAngle(playerid, atan2(Y-aY, X-aX)-90.00);
    else SetPlayerFacingAngle(playerid, atan2(Y-aY, X-aX)-90.00+180.0);
    return 1;
}

stock WatchComponent(playerid, vehicleid, componenttype)
{
	if(componenttype == CARMODTYPE_PAINTJOB) ChangeVehiclePaintjob(vehicleid, GetPVarInt(playerid, "ComponentID"));
	else AddVehicleComponent(vehicleid, GetPVarInt(playerid, "ComponentID"));
	if(componenttype == CARMODTYPE_REAR_BUMPER || componenttype == CARMODTYPE_SPOILER || componenttype == CARMODTYPE_EXHAUST)
	{
		InterpolateCameraPos(playerid, 610.5888,-120.7139,999.1053, 618.4079,-120.3549,999.9202, 1000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 615.5032,-124.1655,997.7191, 615.0212,-127.0801,997.9922, 1000, CAMERA_MOVE);
		SetPVarInt(playerid, "WatchRear", 1);
	}
	else SetPlayerCameraPos(playerid, 610.5888,-120.7139,999.1053);
	SetTimerEx("UnWatchComponent", 2000, false, "ddd", playerid, vehicleid, componenttype);
}

forward UnWatchComponent(playerid, vehicleid, componenttype);
public UnWatchComponent(playerid, vehicleid, componenttype)
{
	if(componenttype == CARMODTYPE_PAINTJOB) ChangeVehiclePaintjob(vehicleid, vInfo[vehicleid][vPaintJob]);
	else RemoveVehicleComponent(vehicleid, GetPVarInt(playerid, "ComponentID"));
	if(GetPVarInt(playerid, "WatchRear"))
	{
		DeletePVar(playerid, "WatchRear");
		InterpolateCameraPos(playerid, 618.4079,-120.3549,999.9202, 610.5888,-120.7139,999.1053, 1000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 615.0212,-127.0801,997.9922, 615.5032,-124.1655,997.7191, 1000, CAMERA_MOVE);
	}
	else
	{
		SetPlayerCameraPos(playerid, 610.5888,-120.7139,999.1053);
		SetPlayerCameraLookAt(playerid, 615.5032,-124.1655,997.7191);
	}
	ShowDialog(playerid, D_Tuning_Component_Select, DIALOG_STYLE_LIST, Main_Color"House Tuning Cars", Color_White"Осмотреть\n"Color_White"Установить", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowTuningDialog(playerid, vehicleid)
{
	new str[500];
	new ComponentTypes[ZVEH_MAX_COMPONENT_TYPES];
	new size = 0;
	GetVehicleCompatibleTypes(vInfo[vehicleid][vModel], ComponentTypes, size);

	for(new i = 0; i < size; i++)
	{
		new ComponentTypeName[50];
		GetVehicleComponentTypeName(ComponentTypes[i], ComponentTypeName);
		format(str, sizeof(str), "%s"Color_White"%s\n", str, ComponentTypeName);
	}
	if(GetVehiclePaintJobCount(vInfo[vehicleid][vModel])) format(str, sizeof(str), "%s"Color_White"Покрасочные работы", str);
	ShowDialog(playerid, D_Tuning, DIALOG_STYLE_LIST, Main_Color"House Tuning Cars", str, Color_White"Далее", Color_White"Выйти");
	return 1;
}

stock ShowTuningComponentDialog(playerid, vehicleid, componenttype)
{
	new str[500];
	if(componenttype == CARMODTYPE_PAINTJOB)
	{
		new count = GetVehiclePaintJobCount(vInfo[vehicleid][vModel]);
		for(new i = 0; i < count; i++)
		{
			format(str, sizeof(str), "%s"Color_White"Покрасочная работа №%d\n", str, i+1);
		}
		format(str, sizeof(str), "%s"Color_White"Убрать покрасочные работы", str);
	}
	else
	{
		new Component[ZVEH_MAX_COMPONENTS];
		new size = 0;
		GetVehicleCompatibleUpgrades(vInfo[vehicleid][vModel], Component, size);
		for(new i = 0; i < size; i++)
		{
			if(GetVehicleComponentType(Component[i]) == componenttype)
			{
				new ComponentName[70];
				GetVehicleComponentName(Component[i], ComponentName);
				format(str, sizeof(str), "%s"Color_White"%s - "Color_Green"%d$\n", str, ComponentName, GetPriceComponent(componenttype, Component[i]));
			}
		}
	}
	ShowDialog(playerid, D_Tuning_Component, DIALOG_STYLE_LIST, Main_Color"House Tuning Cars", str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock PutVehicleInTuning(playerid, vehicleid)
{
	SetPlayerInterior(playerid, 3);
	LinkVehicleToInterior(vehicleid, 3);
	SetPlayerVirtualWorld(playerid, playerid+1000);
	SetVehicleVirtualWorld(vehicleid, playerid+1000);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	SetVehiclePos(vehicleid, 615.5032,-124.1655,997.7191);
	SetVehicleZAngle(vehicleid, 89.9420);

	SetPlayerCameraPos(playerid, 610.5888,-120.7139,999.1053);
	SetPlayerCameraLookAt(playerid, 615.5032,-124.1655,997.7191);
	ShowTuningDialog(playerid, vehicleid);
	TogglePlayerControllable(playerid, false);
	return 1;
}

stock ExitVehicleInTuning(playerid, vehicleid)
{
	new BusinessID = GetPVarInt(playerid, "InBusiness");
	DeletePVar(playerid, "InBusiness");

	SetPlayerInterior(playerid, 0);
	LinkVehicleToInterior(vehicleid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	SetVehiclePos(vehicleid, bInfo[BusinessID][bCarX], bInfo[BusinessID][bCarY], bInfo[BusinessID][bCarZ]);
	SetVehicleZAngle(vehicleid, bInfo[BusinessID][bCarA]);

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	return 1;
}

stock ShowPlayerBankMenu(playerid)
{
	if(!pInfo[playerid][pCard]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет банковской карты");
	new str[100];
	format(str, sizeof(str), Main_Color"Банк || На счету: "Color_Green"%d$", pInfo[playerid][pBankMoney]);
	ShowDialog(playerid, D_Bank_Menu, DIALOG_STYLE_LIST, str, Main_Color"1"Color_White". Положить деньги на счёт\n\
	"Main_Color"2"Color_White". Снять деньги со счёта\n\
	"Main_Color"3"Color_White". Перевод средств\n\
	"Main_Color"4"Color_White". Оплата налогов", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

stock ShowPlayerMainMenu(playerid)
{
	ShowDialog(playerid, D_Main_Menu, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"КПК", Main_Color"1. "Color_White"Персонаж\n\
	"Main_Color"2. "Color_White"Навигация\n\
	"Main_Color"3. "Color_White"Игроки онлайн\n\
	"Main_Color"4. "Color_White"Команды сервера\n\
	"Main_Color"5. "Color_White"Настройки", Color_White"Далее", Color_White"Закрыть");
	return 1;
}

stock ShowPlayerMenu(playerid)
{
	ShowDialog(playerid, D_Main_Menu_Player, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Персонаж", Main_Color"1. "Color_White"Статистика\n\
	"Main_Color"2. "Color_White"Инвентарь\n\
	"Main_Color"3. "Color_White"Навыки\n\
	"Main_Color"4. "Color_White"Лицензии\n\
	"Main_Color"5. "Color_White"Информация о доме\n\
	"Main_Color"6. "Color_White"Информация о бизнесе", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerGPSMenu(playerid)
{
	new str[500], count;
	for(new i = 1; i < sizeof(GPSTitle); i++)
	{
		if(GPSTitle[i][GpsTitleID])
		{
			format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, i, GPSTitle[i][GpsTitleName]);
			count++;
		}
	}
	SetPVarInt(playerid, "FindHouse", count);
	strcat(str, Main_Color"- "Color_White"Поиск дома по ID\n");
	strcat(str, Main_Color"- "Color_White"Бизнесы");

	ShowDialog(playerid, D_Main_Menu_GPS, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Навигация", str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerGPSSubMenu(playerid, TitleID)
{
	if(!GetGpsCount(TitleID)) return SendClientMessage(playerid, -1, Color_Grey"На данный момент GPS в этот раздел не добавлены администрацией.");
	new str[500];
	new TitleName[100];
	format(TitleName, sizeof(TitleName), Main_Color"Навигация || "Color_White"%s", GPSTitle[TitleID][GpsTitleName]);
	new count = 1;
	for(new i = 0; i < sizeof(GPS[]); i++)
	{
		if(GPS[TitleID][i][GpsID])
		{
			format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, count, GPS[TitleID][i][GpsName]);
			count++;
		}
	}

	ShowDialog(playerid, D_GPS, DIALOG_STYLE_LIST, TitleName, str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerOnlineMenu(playerid)
{
	ShowDialog(playerid, D_Main_Menu_PlayerOnline, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Игроки онлайн", Main_Color"1. "Color_White"Лидеры онлайн\n\
	"Main_Color"2. "Color_White"Адвокаты онлайн\n\
	"Main_Color"3. "Color_White"Участники онлайн\n\
	"Main_Color"4. "Color_White"Модераторы онлайн", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerCommandMenu(playerid)
{
	ShowDialog(playerid, D_Main_Menu_Commands, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Команды сервера", Main_Color"1. "Color_White"Основное\n\
	"Main_Color"2. "Color_White"Чаты\n\
	"Main_Color"3. "Color_White"Анимации\n\
	"Main_Color"4. "Color_White"Дом\n\
	"Main_Color"5. "Color_White"Транспорт\n\
	"Main_Color"6. "Color_White"Организации", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowFractionCommand(playerid)
{
	if(pInfo[playerid][pMembers] == Fraction_None) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не являетесь членом какой-либо организации");
	switch(pInfo[playerid][pMembers])
	{
		case Fraction_Police:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/arrest [ID] "Color_White"- Арестовать преступника\n\
			"Main_Color"/ticket [ID] "Color_White"- Выписать штраф\n\
			"Main_Color"/su [ID] "Color_White"- Объявить игрока в розыск\n\
			"Main_Color"/clear [ID] "Color_White"- Убрать игрока из списка разыскиваемых\n\
			"Main_Color"/wanted "Color_White"- Список разыскиваемых игроков\n\
			"Main_Color"/cuff [ID] "Color_White"- Одеть наручники\n\
			"Main_Color"/uncuff [ID] "Color_White"- Снять наручники\n\
			"Main_Color"/putcop [ID] "Color_White"- Затащить в машину\n\
			"Main_Color"/putout [ID] "Color_White"- Вытащить из машины\n\
			"Main_Color"/follow [ID] "Color_White"- Тащить за собой\n\
			"Main_Color"/unfollow "Color_White"- Прекратить тащить за собой\n\
			"Main_Color"/frisk [ID] "Color_White"- Обыскать\n\
			"Main_Color"/tm [ID] "Color_White"- Конфисковать материалы\n\
			"Main_Color"/td [ID] "Color_White"- Конфисковать наркотики\n\
			"Main_Color"/tw [ID] "Color_White"- Конфисковать оружие\n\
			"Main_Color"/take [ID] [drive/gun/moto/plane/boat] "Color_White"- Конфисковать лицензии\n\
			"Main_Color"/checklic  [ID]"Color_White"- Проверить лицензии\n\
			"Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/m "Color_White"- Мегафон(в машине)\n\
			"Main_Color"/d "Color_White"- Рация гос.структур\n\
			"Main_Color"/gov "Color_White"- Гос.волна\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника\n\
			"Main_Color"/tazer "Color_White"- Оглушить всех вокруг себя\n\
			"Main_Color"/shisp "Color_White"- Выбросить шипы на землю", Color_White"Закрыть", "");
		}
		case Fraction_Army:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/arrest [ID] "Color_White"- Арестовать преступника\n\
			"Main_Color"/ticket [ID] "Color_White"- Выписать штраф\n\
			"Main_Color"/su [ID] "Color_White"- Объявить игрока в розыск\n\
			"Main_Color"/clear [ID] "Color_White"- Убрать игрока из списка разыскиваемых\n\
			"Main_Color"/wanted "Color_White"- Список разыскиваемых игроков\n\
			"Main_Color"/cuff [ID] "Color_White"- Одеть наручники\n\
			"Main_Color"/uncuff [ID] "Color_White"- Снять наручники\n\
			"Main_Color"/putcop [ID] "Color_White"- Затащить в машину\n\
			"Main_Color"/putout [ID] "Color_White"- Вытащить из машины\n\
			"Main_Color"/follow [ID] "Color_White"- Тащить за собой\n\
			"Main_Color"/unfollow "Color_White"- Прекратить тащить за собой\n\
			"Main_Color"/frisk [ID] "Color_White"- Обыскать\n\
			"Main_Color"/tm [ID] "Color_White"- Конфисковать материалы\n\
			"Main_Color"/td [ID] "Color_White"- Конфисковать наркотики\n\
			"Main_Color"/tw [ID] "Color_White"- Конфисковать оружие\n\
			"Main_Color"/take [ID] [drive/gun/moto/plane/boat] "Color_White"- Конфисковать лицензии\n\
			"Main_Color"/checklic  [ID]"Color_White"- Проверить лицензии\n\
			"Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/m "Color_White"- Мегафон(в машине)\n\
			"Main_Color"/d "Color_White"- Рация гос.структур\n\
			"Main_Color"/gov "Color_White"- Гос.волна\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника\n\
			"Main_Color"/giveguard "Color_White"- Выдать военный билет\n\
			"Main_Color"/load "Color_White"- Начать загрузку/разгрузку материалов", Color_White"Закрыть", "");
		}
		case Fraction_FBI:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/arrest [ID] "Color_White"- Арестовать преступника\n\
			"Main_Color"/ticket [ID] "Color_White"- Выписать штраф\n\
			"Main_Color"/su [ID] "Color_White"- Объявить игрока в розыск\n\
			"Main_Color"/clear [ID] "Color_White"- Убрать игрока из списка разыскиваемых\n\
			"Main_Color"/wanted "Color_White"- Список разыскиваемых игроков\n\
			"Main_Color"/cuff [ID] "Color_White"- Одеть наручники\n\
			"Main_Color"/uncuff [ID] "Color_White"- Снять наручники\n\
			"Main_Color"/putcop [ID] "Color_White"- Затащить в машину\n\
			"Main_Color"/putout [ID] "Color_White"- Вытащить из машины\n\
			"Main_Color"/follow [ID] "Color_White"- Тащить за собой\n\
			"Main_Color"/unfollow "Color_White"- Прекратить тащить за собой\n\
			"Main_Color"/frisk [ID] "Color_White"- Обыскать\n\
			"Main_Color"/tm [ID] "Color_White"- Конфисковать материалы\n\
			"Main_Color"/td [ID] "Color_White"- Конфисковать наркотики\n\
			"Main_Color"/tw [ID] "Color_White"- Конфисковать оружие\n\
			"Main_Color"/take [ID] [drive/gun/moto/plane/boat] "Color_White"- Конфисковать лицензии\n\
			"Main_Color"/checklic  [ID]"Color_White"- Проверить лицензии\n\
			"Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/m "Color_White"- Мегафон(в машине)\n\
			"Main_Color"/d "Color_White"- Рация гос.структур\n\
			"Main_Color"/gov "Color_White"- Гос.волна\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника\n\
			"Main_Color"/find [ID] "Color_White"- Отследить преступника\n\
			"Main_Color"/findoff "Color_White"- Убрать метку с преступника\n\
			"Main_Color"/mask "Color_White"- Надеть маску\n\
			"Main_Color"/maskoff "Color_White"- Снять маску\n\
			"Main_Color"/barrier "Color_White"- Установить барьер\n\
			"Main_Color"/barrieroff "Color_White"- Убрать барьер", Color_White"Закрыть", "");
		}
		case Fraction_Hospital:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/duty "Color_White"- Выйти на дежурство\n\
			"Main_Color"/heal [ID] "Color_White"- Вылечить игрока\n\
			"Main_Color"/psih [ID] "Color_White"- Отправить игрока в псих. лечебницу\n\
			"Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/gov "Color_White"- Гос.волна\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника\n\
			"Main_Color"/startblood "Color_White"- Начать прием крови\n\
			"Main_Color"/fsd "Color_White"- Вколоть препарат игроку\n\
			"Main_Color"/accept medic "Color_White"- Принять вызов", Color_White"Закрыть", "");
		}
		case Fraction_Taxi:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/fare "Color_White"- Выйти на дежурство\n\
			"Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/gov "Color_White"- Гос.волна\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника\n\
			"Main_Color"/accept taxi "Color_White"- Принять вызов", Color_White"Закрыть", "");
		}
		case Fraction_SanNews:
		{
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color Project_Name " || "Color_White"Организации", Main_Color"/members "Color_White"- Сотрудники онлайн\n\
			"Main_Color"/r "Color_White"- Рация организации\n\
			"Main_Color"/news "Color_White"- Новости\n\
			"Main_Color"/live "Color_White"- Начать/Завершить эфир\n\
			"Main_Color"/aopen "Color_White"- Открыть ангар\n\
			"Main_Color"/aclose "Color_White"- Закрыть ангар\n\
			"Main_Color"/akick "Color_White"- Выгнать из ангара\n\
			"Main_Color"/astart "Color_White"- 5 секундный таймер для всех игроков в ангаре\n\
			"Main_Color"/invite [ID] "Color_White"- Пригласить в организацию\n\
			"Main_Color"/uninvite [ID] "Color_White"- Выгнать из организации\n\
			"Main_Color"/giverank [ID] "Color_White"- Изменить должность сотрудника", Color_White"Закрыть", "");
		}
	}
	return 1;
}

stock ShowSettingMenu(playerid)
{
	ShowDialog(playerid, D_Main_Menu_Setting, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Настройки", Main_Color"1. "Color_White"Управление чатом\n\
	"Main_Color"2. "Color_White"Смена пароля\n\
	"Main_Color"3. "Color_White"Защита аккаунта", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowChatMenu(playerid)
{
	new str[200];
	format(str, sizeof(str), Color_White"Личные сообщения \t\t%s\n", (pInfo[playerid][pTogglePM]) ? (Color_Green"Включены"):(Color_Red"Выключены"));
	format(str, sizeof(str), "%s"Color_White"Общий чат \t\t\t%s\n", str, (pInfo[playerid][pToggleOOC]) ? (Color_Green"Включен"):(Color_Red"Выключен"));
	format(str, sizeof(str), "%s"Color_White"Чат объявлений \t\t%s\n", str, (pInfo[playerid][pToggleAD]) ? (Color_Green"Включен"):(Color_Red"Выключен"));
	ShowDialog(playerid, D_Chat_Settings, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Управление чатом", str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowSafeMenu(playerid)
{
	ShowDialog(playerid, D_Account_Safe, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Защита аккаунта", Main_Color"1. "Color_White"Смена почты\n\
	"Main_Color"2. "Color_White"Установить пин-код", Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerInventory(playerid, Type=1)//Type == 1 - Обычный инвентарь || Type == 2 - Выставление на продажу в палатке
{
	new str[1500];
	if(GetFreeSlotInventory(playerid) == sizeof(pInventory[])) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Инвентарь пуст");
	strcat(str, Main_Color"Название\t"Main_Color"Количество\n");
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID]) format(str, sizeof(str), "%s"Main_Color"%s\t"Color_White"%dшт.\n", str, Items[pInventory[playerid][i][ItemID]][ItemName], pInventory[playerid][i][ItemCount]);
	}
	if(Type == 1) ShowDialog(playerid, D_Inventory, DIALOG_STYLE_TABLIST_HEADERS,  Main_Color"Инвентарь", str, Color_White"Выбрать", Color_White"Назад");
	else if(Type == 2) ShowDialog(playerid, D_Tent_Menu_Sell, DIALOG_STYLE_TABLIST_HEADERS,  Main_Color"Инвентарь", str, Color_White"Выбрать", Color_White"Закрыть");
	return 1;
}

stock ShowHouseInfo(playerid)
{
	if(!pInfo[playerid][pHouseID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет дома");
	new HouseID = pInfo[playerid][pHouseID];
	new str[500];
	format(str, sizeof(str), Main_Color"Дом №"Color_White"%d\n\
	"Main_Color"Класс"Color_White": %s\n\
	"Main_Color"Гос.цена"Color_White": "Color_Green"%d%s\n\
	"Main_Color"Требуемый уровень"Color_White": %d\n\
	"Main_Color"Оплачен до"Color_White": %s",
	hInfo[HouseID][hID],
	HouseClassName[HouseInterior[hInfo[HouseID][hInterior]][hIntClass]],
	hInfo[HouseID][hPrice],
	(hInfo[HouseID][hIsDonate]) ? (" донат рублей"):("$"),
	hInfo[HouseID][hNeedLevel],
	date(hInfo[HouseID][hTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Информация о доме", str, Color_White"Закрыть", "");
	return 1;
}

stock ShowBusinessInfo(playerid)
{
	if(!pInfo[playerid][pBusinessID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет бизнеса");
	new BusinessID = pInfo[playerid][pBusinessID];
	new str[500];
	format(str, sizeof(str), Main_Color"%s\n\
	"Main_Color"Бизнес №"Color_White"%d\n\
	"Main_Color"Гос.цена"Color_White": "Color_Green"%d%s\n\
	"Main_Color"Требуемый уровень"Color_White": %d\n\
	"Main_Color"Оплачен до"Color_White": %s",
	BusinessType[bInfo[BusinessID][bType]][bName],
	bInfo[BusinessID][bID],
	bInfo[BusinessID][bPrice],
	(bInfo[BusinessID][bIsDonate]) ? (" донат рублей"):("$"),
	bInfo[BusinessID][bNeedLevel],
	date(bInfo[BusinessID][bTax], 3, "%dd.%mm.%yyyy %hh:%ii"));
	ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Main_Color"Информация о бизнесе", str, Color_White"Закрыть", "");
	return 1;
}

stock ShowPlayerLicenses(playerid, ShowID = -1)
{
	new str[300];
	format(str, sizeof(str), Color_White"Лицензия на автомобиль: %s\n\
	"Color_White"Лицензия на мототранспорт: %s\n\
	"Color_White"Лицензия пилота: %s\n\
	"Color_White"Лицензия на водный транспорт: %s\n\
	"Color_White"Лицензия оружие: %s",
	pInfo[playerid][pLicAuto] ? (Color_Green"Есть"):(Color_Red"Отсутствует"),
	pInfo[playerid][pLicMoto] ? (Color_Green"Есть"):(Color_Red"Отсутствует"),
	pInfo[playerid][pLicPlane] ? (Color_Green"Есть"):(Color_Red"Отсутствует"),
	pInfo[playerid][pLicBoat] ? (Color_Green"Есть"):(Color_Red"Отсутствует"),
	pInfo[playerid][pLicGun] ? (Color_Green"Есть"):(Color_Red"Отсутствует"));

	new SubStr[100];
	format(SubStr, sizeof(SubStr), Main_Color"Лицензии персонажа "Color_White"%s", pInfo[playerid][pName]);

	if(ShowID == -1) ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
	else ShowDialog(ShowID, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
	return 1;
}

stock ShowPlayerStat(playerid, ShowID = -1)
{
	new status[100] = "Игрок";
	if(pInfo[playerid][pAdmin])
	{
		status[0] = EOS;
		strcat(status, AdminNames[pInfo[playerid][pAdmin]]);
	}

	new str[2500];
	format(str, sizeof(str), Main_Color"Имя"Color_White": %s\n", pInfo[playerid][pName]);
	format(str, sizeof(str), "%s"Main_Color"Почта"Color_White": %s\n", str, pInfo[playerid][pMail]);
	format(str, sizeof(str), "%s"Main_Color"Уровень"Color_White": %d\n", str, pInfo[playerid][pLevel]);
	format(str, sizeof(str), "%s"Main_Color"Exp"Color_White": %d/%d\n", str, pInfo[playerid][pExp], (pInfo[playerid][pLevel]+1)*4);
	format(str, sizeof(str), "%s"Main_Color"Работа"Color_White": %s\n", str, Jobs[pInfo[playerid][pJob]][JobNames]);
	if(pInfo[playerid][pMembers] == Fraction_None) format(str, sizeof(str), "%s"Main_Color"Фракция"Color_White": Нет\n", str);
	else format(str, sizeof(str), "%s"Main_Color"Фракция"Color_White": %s\n", str, FractionName[pInfo[playerid][pMembers]]);
	if(pInfo[playerid][pMembers] == Fraction_None || pInfo[playerid][pRank] <= 0) format(str, sizeof(str), "%s"Main_Color"Ранг"Color_White": -\n", str);
	else format(str, sizeof(str), "%s"Main_Color"Ранг"Color_White": %s\n", str, FractionRankName[pInfo[playerid][pMembers]][pInfo[playerid][pRank]]);
	format(str, sizeof(str), "%s"Main_Color"Военный билет"Color_White": %s\n", str, (pInfo[playerid][pArmyTicket]) ? Color_Green"V" : Color_Red"X");
	format(str, sizeof(str), "%s"Main_Color"Мед.карта"Color_White": %s\n", str, (pInfo[playerid][pMedCard] == 1) ? Color_Green"V" : Color_Red"X");
	format(str, sizeof(str), "%s"Main_Color"Деньги в банке"Color_Green": %d$\n", str, pInfo[playerid][pBankMoney]);
	format(str, sizeof(str), "%s"Main_Color"Деньги"Color_Green": %d$\n", str, pInfo[playerid][pMoney]);
	format(str, sizeof(str), "%s"Main_Color"Донат"Color_White": %dр\n", str, pInfo[playerid][pDonateMoney]);
	format(str, sizeof(str), "%s"Main_Color"Предупреждения"Color_White": %d/3\n", str, pInfo[playerid][pWarn]);
	format(str, sizeof(str), "%s"Main_Color"Пол"Color_White": %s\n", str, (pInfo[playerid][pGender]) ? ("Женщина"):("Мужчина"));
	format(str, sizeof(str), "%s"Main_Color"Дата регистрации"Color_White": %s\n", str, date(pInfo[playerid][pRegDate], 3, "%dd.%mm.%yyyy %hh:%ii"));
	if(pInfo[playerid][pHouseID]) format(str, sizeof(str), "%s"Main_Color"Дом №"Color_White": %d\n", str, pInfo[playerid][pHouseID]);
	else format(str, sizeof(str), "%s"Main_Color"Дом"Color_White": Нет\n", str);
	if(pInfo[playerid][pBusinessID]) format(str, sizeof(str), "%s"Main_Color"Бизнес №"Color_White": %d\n", str, pInfo[playerid][pBusinessID]);
	else format(str, sizeof(str), "%s"Main_Color"Бизнес"Color_White": Нет\n", str);
	if(pInfo[playerid][pVehicleID]) format(str, sizeof(str), "%s"Main_Color"Машина"Color_White": %s\n", str, CarName[vInfo[pInfo[playerid][pVehicleID]][vModel]-400]);
	else format(str, sizeof(str), "%s"Main_Color"Машина"Color_White": Нет\n", str);
	format(str, sizeof(str), "%s"Main_Color"Статус"Color_White": %s\n", str, status);

	new SubStr[100];
	format(SubStr, sizeof(SubStr), Main_Color"Статистика персонажа "Color_White"%s", pInfo[playerid][pName]);

	if(ShowID == -1) ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
	else ShowDialog(ShowID, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
	return 1;
}

stock ShowPlayerTPMenu(playerid)
{
	new str[500], count;
	for(new i = 1; i < sizeof(GPSTitle); i++)
	{
		if(GPSTitle[i][GpsTitleID])
		{
			format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, i, GPSTitle[i][GpsTitleName]);
			count++;
		}
	}
	SetPVarInt(playerid, "FindHouse", count);
	strcat(str, Main_Color"- "Color_White"Дома\n");
	strcat(str, Main_Color"- "Color_White"Бизнесы");

	ShowDialog(playerid, D_Main_Menu_TP, DIALOG_STYLE_LIST, Main_Color Project_Name " || "Color_White"Телепорт", str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ShowPlayerTPSubMenu(playerid, TitleID)
{
	if(!GetGpsCount(TitleID)) return SendClientMessage(playerid, -1, Color_Grey"На данный момент телепорты в этот раздел не добавлены администрацией.");
	new str[500];
	new TitleName[100];
	format(TitleName, sizeof(TitleName), Main_Color"Телепорт || "Color_White"%s", GPSTitle[TitleID][GpsTitleName]);
	new count = 1;
	for(new i = 0; i < sizeof(GPS[]); i++)
	{
		if(GPS[TitleID][i][GpsID])
		{
			format(str, sizeof(str), "%s"Main_Color"%d. "Color_White"%s\n", str, count, GPS[TitleID][i][GpsName]);
			count++;
		}
	}

	ShowDialog(playerid, D_TP, DIALOG_STYLE_LIST, TitleName, str, Color_White"Далее", Color_White"Назад");
	return 1;
}

stock ToggleLightVehicle(vehicleid, playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel])) return 1;
	new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
	GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, (lights) ? (false):(true), alarm, doors, bonnet, boot, objective);

	new message[145];
	format(message, sizeof(message), "%s фары", (lights) ? ("выключил(а)"):("включил(а)"));
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);
	return 1;
}

stock EngineVehicle(vehicleid, playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(vInfo[vehicleid][vType] == VehicleTypePlayer && pInfo[playerid][pVehicleID] != vehicleid && GetPVarInt(playerid, "CarKey") != vehicleid) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет ключей от этого транспорта!");
	new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
	GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);

	if(IsABike(vInfo[vehicleid][vModel]) || IsAPlane(vInfo[vehicleid][vModel]) || IsABoat(vInfo[vehicleid][vModel]))
	{
		if(!engine) SetVehicleParamsEx(vInfo[vehicleid][vServerID], (engine) ? (false):(true), lights, alarm, doors, bonnet, boot, objective);
	}
	else
	{
		if(!engine)
		{
			if(vInfo[vehicleid][vFuel] <= 0.0) return SendClientMessage(playerid, -1, Color_Grey"В транспорте закончилось топливо.");

			new Float:Health;
			AntiCheatGetVehicleHealth(vInfo[vehicleid][vServerID], Health);
			if(Health < 400.0) return SendClientMessage(playerid, -1, Color_Grey"Транспорт неисправен. Вызовите механика (/service mechanic).");
		}

		SetVehicleParamsEx(vInfo[vehicleid][vServerID], (engine) ? (false):(true), lights, alarm, doors, bonnet, boot, objective);
		new message[145];
		format(message, sizeof(message), "%s двигатель", (engine) ? ("заглушил(а)"):("завел(а)"));
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);

		if(vInfo[vehicleid][vType] == VehicleTypeFraction)
		{
			if((vInfo[vehicleid][vOwner] == Fraction_Army && vInfo[vehicleid][vModel] == 433) || (IsABand(vInfo[vehicleid][vOwner]) && vInfo[vehicleid][vModel] == 482))
			{
				if(vInfo[vehicleid][vPickup] && IsValidDynamicPickup(vInfo[vehicleid][vPickup]))
				{
					DestroyDynamicPickup(vInfo[vehicleid][vPickup]);
					vInfo[vehicleid][vPickup] = 0;
				}

				if(vInfo[vehicleid][vArea] && IsValidDynamicArea(vInfo[vehicleid][vArea]))
				{
					DestroyDynamicArea(vInfo[vehicleid][vArea]);
					vInfo[vehicleid][vArea] = 0;
				}
			}
		}
	}
	return 1;
}

stock LockVehicle(vehicleid, playerid)
{
	new bool:engine, bool:lights, bool:alarm, bool:bonnet, bool:boot, bool:objective;
	GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, vInfo[vehicleid][vLock], bonnet, boot, objective);

	if(IsABike(vInfo[vehicleid][vModel])) return 1;
	else
	{
		vInfo[vehicleid][vLock] = (vInfo[vehicleid][vLock]) ? (false):(true);
		SetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, vInfo[vehicleid][vLock], bonnet, boot, objective);
		new message[145];
		format(message, sizeof(message), "%s двери транспорта", (vInfo[vehicleid][vLock]) ? ("закрыл(а)"):("открыл(а)"));
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, message);

		if(vInfo[vehicleid][vLock]) GameTextForPlayer(playerid, "~r~Close", 1000, 1);
		else GameTextForPlayer(playerid, "~g~Open", 1000, 1);

		PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);

		if(vInfo[vehicleid][vType] == VehicleTypePlayer) SaveCarBool(vehicleid, "Lock", vInfo[vehicleid][vLock]);
	}
	return 1;
}

stock IsABike(model)
{
	if(model == 509 || model == 481 || model == 510) return true;
	return false;
}

stock IsAMoped(model)
{
	if(model == 462) return true;
	return false;
}

stock IsAMoto(model)
{
	if(model == 448 || model == 461 || model == 463 || model == 468 || model == 471 || model == 521 || model == 522 || model == 523 || model == 581 || model == 586 || model == 571)
	{
		return true;
	}
	return false;
}

stock IsAPlane(model)
{
	if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593
	|| model == 520 || model == 553 || model == 476 || model == 519 || model == 460
	|| model == 513 || model == 548 || model == 425 || model == 417 || model == 487
	|| model == 488 || model == 497 || model == 563 || model == 447 || model == 469) return true;
	return false;
}

stock IsABoat(model)
{
	if(model == 430 || model == 446  || model == 452  || model == 453  || model == 454  || model == 472  || model == 473  || model == 484  || model == 493  || model == 539  || model == 595) return true;
	return false;
}

forward GetCreateBusinessID(BusinessID, playerid);
public GetCreateBusinessID(BusinessID, playerid)
{
	bInfo[BusinessID][bID] = cache_insert_id();
	UpdateBusiness(BusinessID);

	SendClientMessage(playerid, -1, Main_Color"Бизнес создан. Для редактирования используйте /editbusiness");
	return 1;
}

forward GetCreateHouseID(HouseID, playerid);
public GetCreateHouseID(HouseID, playerid)
{
	hInfo[HouseID][hID] = cache_insert_id();
	UpdateHouse(HouseID);

	SendClientMessage(playerid, -1, Main_Color"Дом создан. Для редактирования используйте /edithouse");
	return 1;
}

forward GetCreateVehID(vehicleid, playerid);
public GetCreateVehID(vehicleid, playerid)
{
	vInfo[vehicleid][vID] = cache_insert_id();

	vInfo[vehicleid][vFuel] = 100.0;

	if(vInfo[vehicleid][vServerID] && IsValidVehicle(vInfo[vehicleid][vServerID]))
	{
		DestroyVehicle(vInfo[vehicleid][vServerID]);
		vInfo[vehicleid][vServerID] = 0;
	}
	new respawn_delay = 0;
	if(vInfo[vehicleid][vType] == VehicleTypePlayer) respawn_delay = -1;
	else respawn_delay = 600;
	vInfo[vehicleid][vServerID] = CreateVehicle(vInfo[vehicleid][vModel], vInfo[vehicleid][vX], vInfo[vehicleid][vY], vInfo[vehicleid][vZ], vInfo[vehicleid][vA], vInfo[vehicleid][vColor1], vInfo[vehicleid][vColor2], respawn_delay);
	SetVehicleParamsEx(vInfo[vehicleid][vServerID], false, false, false, false, false, false, false);

	vInfo[vehicleid][vEdit] = false;
	vInfo[vehicleid][vRenter] = -1;

	UpdateVehicle(vehicleid, playerid);
	return 1;
}

stock UpdateVehicle(vehicleid, playerid)
{
	if(vInfo[vehicleid][vType] == VehicleTypeFraction)
	{
		if(vInfo[vehicleid][vOwner] == Fraction_Taxi)
		{
			switch(vInfo[vehicleid][vModel])
			{
				case 560:
				{
					new objid = CreateDynamicObject(19308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
					AddVehicleAttachObj(objid, vInfo[vehicleid][vServerID], 0.000000, -0.25, 0.919999, 0.000000, 0.000000, 0.000000);
				}
				case 579:
				{
					new objid = CreateDynamicObject(19308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0);
					AddVehicleAttachObj(objid, vInfo[vehicleid][vServerID], 0.000000, -1.049999, 1.329998, 0.000000, 0.000000, 0.000000);
				}
			}
		}
		else if(vInfo[vehicleid][vOwner] == Fraction_StreetRacers || vInfo[vehicleid][vOwner] == Fraction_Bikers) SetStandartVehicleTuning(vehicleid);
	}
	else if(vInfo[vehicleid][vType] == VehicleTypePlayer && playerid != -1)
	{
		UnloadHouseVehicle(playerid);
		pInfo[playerid][pVehicleID] = vInfo[vehicleid][vServerID];
		ResecelctHouseVehicle(playerid, vInfo[vehicleid][vID]);
	}
	return 1;
}

forward RespawnAllCar();
public RespawnAllCar()
{
	foreach(new i: Vehicle)
	{
		new bool:Finded = false;
		foreach(new j: Player)
		{
			if(GetPlayerVehicleID(j) == i)
			{
				Finded = true;
				break;
			}
			if(Finded) continue;
			else SetVehicleToRespawn(i);
		}
	}
	DeleteSVar("SpAllToggle");
	SendAllMessage(Color_Yellow"Весь незанятый транспорт был зареспавнен!");
}

stock ClearReportList(playerid)
{
	new size = GetPVarInt(playerid, "ReportList_Lenght");
	DeletePVar(playerid, "ReportList_Lenght");
	if(size)
	{
		for(new i = 0; i < size; i++)
		{
			new SubStr[50];
			format(SubStr, sizeof(SubStr), "ReportList_%d", i);
			DeletePVar(playerid, SubStr);
		}
	}
	return 1;
}

stock ActivateAntiCheat(playerid)
{
	for(new i = 0; i < 53; i++) EnableAntiCheatForPlayer(playerid, i, IsAntiCheatEnabled(i));
	for(new i = 0; i < 12; i++) EnableAntiNOPForPlayer(playerid, i, IsAntiNOPEnabled(i));
}

stock DeactivateAntiCheat(playerid)
{
	for(new i = 0; i < 53; i++) EnableAntiCheatForPlayer(playerid, i, 0);
	for(new i = 0; i < 12; i++) EnableAntiNOPForPlayer(playerid, i, 0);
}

stock UpdatePlayerMoney(playerid)
{
	if(GetPlayerMoney(playerid) != pInfo[playerid][pMoney])
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, pInfo[playerid][pMoney]);
	}
	return 1;
}

stock GivePlayerMoneyEx(playerid, money)
{
	pInfo[playerid][pMoney] += money;
	GivePlayerMoney(playerid, money);
	SavePlayerInt(playerid, "Money", pInfo[playerid][pMoney]);

	UpdatePlayerMoney(playerid);

	if(money != 0)
	{
		if(money > 0)
		{
			new str[100];
			format(str, sizeof(str), "~g~+%d$", money);
			GameTextForPlayer(playerid, str, 3000, 1);
		}
		else
		{
			new str[100];
			format(str, sizeof(str), "~r~%d$", money);
			GameTextForPlayer(playerid, str, 3000, 1);
		}
	}
}

stock GivePlayerMoneyInPayDay(playerid, money)
{
	new str[200];
	pInfo[playerid][pPayDayMoney] += money;
	SavePlayerInt(playerid, "PayDayMoney", pInfo[playerid][pPayDayMoney]);

	format(str, sizeof(str), Color_White"Общая сумма зарплаты"Color_Green" %d$", pInfo[playerid][pPayDayMoney]);
	SendClientMessage(playerid, -1, str);

	PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
}

stock ClearBan(const Name[])
{
	new query[80];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `bans` WHERE `Name` = '%s'", Name);
	mysql_tquery(DB, query);
	return 1;
}

stock ClearBanIP(const IP[])
{
	new query[80];
	mysql_format(DB, query, sizeof(query), "DELETE FROM `ipbans` WHERE `IP` = '%s'", IP);
	mysql_tquery(DB, query);
	return 1;
}

stock BanPlayer(playerid, const reason[], day, AdminID)
{
	new query[400];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `bans` (`Name`, `BanTime`, `AdminName`, `Reason`) VALUES ('%e', '%d', '%e', '%e')", pInfo[playerid][pName], day, pInfo[AdminID][pName], reason);
	mysql_tquery(DB, query);

	KickPlayer(playerid);
	return 1;
}

stock BanPlayerOffline(Name[], const reason[], day, AdminID)
{
	new query[400];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `bans` (`Name`, `BanTime`, `AdminName`, `Reason`) VALUES ('%e', '%d', '%e', '%e')", Name, day, pInfo[AdminID][pName], reason);
	mysql_tquery(DB, query);
	return 1;
}

stock BanIP(const IP[], AdminID, const reason[])
{

	new query[300];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `ipbans` (`IP`, `AdminName`, `Reason`) VALUES ('%e', '%e', '%e')", IP, pInfo[AdminID][pName], reason);
	mysql_tquery(DB, query);

	foreach(new i : Player)
	{
		query[0] = EOS;
		GetPlayerIp(i, query, 17);
		if(!strcmp(IP, query))
		{
			query[0] = EOS;
			format(query, sizeof(query), Color_Red"%s %s "Color_White"забанил ваш IP, по причине:\n\
			"Color_Red"%s\n\n\
			"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminNames[pInfo[AdminID][pAdmin]], pInfo[AdminID][pName], reason);
			ShowDialog(i, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Этот IP заблокирован", query, Color_White"Закрыть", "");
			KickPlayer(i);
		}
	}
	return 1;
}

forward BanInfoCheck(AdminID);
public BanInfoCheck(AdminID)
{
	new row = cache_num_rows();
	if(row)
	{
		new Name[MAX_PLAYER_NAME+1], AdminName[MAX_PLAYER_NAME+1], Reason[145], BanTime;

		cache_get_value_name(0, "Name", Name);
		cache_get_value_name_int(0, "BanTime", BanTime);
		cache_get_value_name(0, "AdminName", AdminName);
		cache_get_value_name(0, "Reason", Reason);

		new str[300], SubStr[100];
		format(SubStr, sizeof(SubStr), Color_White"Информация о блокировке "Color_Red"%s", Name);

		format(str, sizeof(str), Color_Red"Забанил"Color_White": %s\n\
		"Color_Red"Бан до"Color_White": %s\n\
		"Color_Red"Причина"Color_White": %s", AdminName, date(BanTime, 3, "%dd.%mm.%yyyy %hh:%ii"), Reason);
		ShowDialog(AdminID, D_None, DIALOG_STYLE_MSGBOX, SubStr, str, Color_White"Закрыть", "");
	}
	else return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с таким ником не найден");
	return 1;
}

forward OffBanCheck(const reason[], AdminID, time);
public OffBanCheck(const reason[], AdminID, time)
{
	new row = cache_num_rows();
	if(row)
	{
		new Name[MAX_PLAYER_NAME+1];
		cache_get_value_name(0, "Name", Name);

		new query[80];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `bans` WHERE `Name` = '%s'", Name);
		mysql_tquery(DB, query, "OffBanCheckAlreadyBanned", "sdds", reason, AdminID, time, Name);
	}
	else return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с таким ником не найден");
	return 1;
}

forward OffBanCheckAlreadyBanned(const reason[], AdminID, time, Name[]);
public OffBanCheckAlreadyBanned(const reason[], AdminID, time, Name[])
{
	new row = cache_num_rows();
	if(row) return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с таким ником уже забанен");
	else
	{
		foreach(new i: Player)
		{
			if(!strcmp(pInfo[i][pName], Name)) return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с таким ником сейчас онлайн");
		}

		new str[400];
		format(str, sizeof(str), Color_Red"%s %s забанил игрока %s, на %d дней по причине: %s", AdminNames[pInfo[AdminID][pAdmin]], pInfo[AdminID][pName], Name, time, reason);
		SendAllMessage(str);
		BanPlayerOffline(Name, reason, gettime()+(time*86400), AdminID);

		str[0] = EOS;
		GetPlayerIp(AdminID, str, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) забанил игрока %s (offline), на %d дней по причине: %s", str, pInfo[AdminID][pRegIp], Name, time, reason);

		AddLog(LogTypeAdmin, pInfo[AdminID][pID], str);
	}
	return 1;
}

forward UnBanCheck(const reason[], AdminID);
public UnBanCheck(const reason[], AdminID)
{
	new row = cache_num_rows();
	if(row)
	{
		new Name[MAX_PLAYER_NAME+1];
		cache_get_value_name(0, "Name", Name);
		ClearBan(Name);

		new str[400];
		format(str, sizeof(str), Color_Red"%s %s разбанил игрока %s, по причине: %s", AdminNames[pInfo[AdminID][pAdmin]], pInfo[AdminID][pName], Name, reason);
		SendAllMessage(str);

		str[0] = EOS;
		GetPlayerIp(AdminID, str, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) разбанил игрока %s, по причине: %s", str, pInfo[AdminID][pRegIp], Name, reason);

		AddLog(LogTypeAdmin, pInfo[AdminID][pID], str);
	}
	else return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Игрок с таким ником не забанен");
	return 1;
}

forward UnBanIPCheck(const reason, AdminID);
public UnBanIPCheck(const reason, AdminID)
{
	new row = cache_num_rows();
	if(row)
	{
		new IP[17];
		cache_get_value_name(0, "IP", IP);
		ClearBanIP(IP);

		new str[300];
		format(str, sizeof(str), Color_Red"%s %s разбанил IP %s по причине %s", AdminNames[pInfo[AdminID][pAdmin]], pInfo[AdminID][pName], IP, reason);
		SendAdminMessage(str);

		str[0] = EOS;
		GetPlayerIp(AdminID, str, 16);
		format(str, sizeof(str), "(IP: %s | RegIP: %s) разбанил IP %s по причине %s", str, pInfo[AdminID][pRegIp], IP, reason);

		AddLog(LogTypeAdmin, pInfo[AdminID][pID], str);
	}
	else return SendClientMessage(AdminID, -1, Color_Red"[Ошибка] "Color_Grey"Этот IP на находится в бане");
	return 1;
}

forward KickEx(playerid);
public KickEx(playerid)
{
	Kick(playerid);
	return 1;
}

stock ProxDetector(playerid, Float:max_range, color, const string[], bool:AddingName=true)
{
    new Float:pos_x, Float:pos_y, Float:pos_z, Float:range;

    if(!GetPlayerPos(playerid, pos_x, pos_y, pos_z)) return 0;

    new FormatedMessage[200];
    if(AddingName)
    {
    	if(color == BitColor_Me)
    	{
		    if(pInfo[playerid][pMask])
			{
				if(pInfo[playerid][pGender]) format(FormatedMessage, sizeof(FormatedMessage), "Неизвестная[%d] %s", playerid, string);
				else format(FormatedMessage, sizeof(FormatedMessage), "Неизвестный[%d] %s", playerid, string);
			}
		    else format(FormatedMessage, sizeof(FormatedMessage), "%s[%d] %s", pInfo[playerid][pName], playerid, string);
		}
		else
		{
			if(pInfo[playerid][pMask])
			{
				if(pInfo[playerid][pGender]) format(FormatedMessage, sizeof(FormatedMessage), "Неизвестная[%d]: %s", playerid, string);
				else format(FormatedMessage, sizeof(FormatedMessage), "Неизвестный[%d]: %s", playerid, string);
				color = BitColor_White;
			}
		    else format(FormatedMessage, sizeof(FormatedMessage), "%s[%d]"Color_White": %s", pInfo[playerid][pName], playerid, string);
		}
	}
	else format(FormatedMessage, sizeof(FormatedMessage), "%s", string);

    foreach (new i : Player)
    {
        if (!IsPlayerStreamedIn(playerid, i)) continue;

        range = GetPlayerDistanceFromPoint(i, pos_x, pos_y, pos_z);
        if (range > max_range) continue;

        SendClientMessage(i, color, FormatedMessage);
    }

    if(GetPVarInt(playerid, "Spec_Admin_ID")) SendClientMessage(GetPVarInt(playerid, "Spec_Admin_ID")-1, color, FormatedMessage);
    SendClientMessage(playerid, color, FormatedMessage);
    if(AddingName)
    {
    	if(color == BitColor_Me) SetPlayerChatBubble(playerid, string, color, max_range, 5000);
    	else SetPlayerChatBubble(playerid, string, BitColor_White, max_range, 5000);
    }
    return 1;
}

forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.0, false, false, false, false, 0, true);
	return 1;
}

forward AnimSpurnkTake(playerid);
public AnimSpurnkTake(playerid)
{
	ApplyAnimation(playerid, "VENDING", "VEND_USE_PT2", 1.5, false, false, false, false, 0, true);
	SetTimerEx("Drink", 500, false, "dfs", playerid, 5.0, "Sprunk");

	GivePlayerMoneyEx(playerid, -15);
	GiveCompanyPay(playerid, BusinessSprunk, 15);
	return 1;
}

forward Drink(playerid, Float:Heal, const ItemsName[]);
public Drink(playerid, Float:Heal, const ItemsName[])
{
	ApplyAnimation(playerid, "VENDING", "VEND_DRINK2_P", 4.1, false, false, false, false, 0, true);
	SetTimerEx("ClearAnim", 1400, false, "d", playerid);

	AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
	pInfo[playerid][pHealth] += Heal;
	if(pInfo[playerid][pHealth] > 100.0) pInfo[playerid][pHealth] = 100.0;
	SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
	new str[100];
	format(str, sizeof(str), "выпил(а) %s", ItemsName);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

forward Eat(playerid, Float:Heal, const ItemsName[]);
public Eat(playerid, Float:Heal, const ItemsName[])
{
	ApplyAnimation(playerid, "VENDING", "VEND_EAT1_P", 4.1, false, false, false, false, 0, true);
	SetTimerEx("ClearAnim", 1400, false, "d", playerid);

	AntiCheatGetHealth(playerid, pInfo[playerid][pHealth]);
	pInfo[playerid][pHealth] += Heal;
	if(pInfo[playerid][pHealth] > 100.0) pInfo[playerid][pHealth] = 100.0;
	SetPlayerHealth(playerid, pInfo[playerid][pHealth]);
	SavePlayerFloat(playerid, "Health", pInfo[playerid][pHealth]);
	new str[100];
	format(str, sizeof(str), "съел(а) %s", ItemsName);
	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	return 1;
}

forward ClearActorAnim(actorid);
public ClearActorAnim(actorid)
{
	ApplyDynamicActorAnimation(actorid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	return 1;
}

forward LoginCameraNext(playerid);
public LoginCameraNext(playerid)
{
	SetPVarInt(playerid, "LoginCamera", GetPVarInt(playerid, "LoginCamera")+1);

	switch(GetPVarInt(playerid, "LoginCamera"))
	{
		case 1:
		{
			InterpolateCameraPos(playerid, -781.461669, -2002.682006, 17.469572, -722.892517, -1897.252929, 17.153352, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, -780.947753, -1997.714721, 17.219676, -717.906066, -1896.885375, 17.149446, 20000, CAMERA_MOVE);
			SetPVarInt(playerid, "LoginCameraTimer", SetTimerEx("LoginCameraNext", 20000, false, "d", playerid));
		}
		case 2:
		{
			InterpolateCameraPos(playerid, -722.892517, -1897.252929, 17.153352, -516.446411, -1893.624145, 17.021556, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, -717.906066, -1896.885375, 17.149446, -511.456909, -1893.830200, 16.771661, 20000, CAMERA_MOVE);
			SetPVarInt(playerid, "LoginCameraTimer", SetTimerEx("LoginCameraNext", 20000, false, "d", playerid));
		}
		case 3:
		{
			InterpolateCameraPos(playerid, -516.446411, -1893.624145, 17.021556, -478.915283, -1893.009643, 15.662969, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, -511.456909, -1893.830200, 16.771661, -474.257476, -1891.208984, 15.413073, 20000, CAMERA_MOVE);
			SetPVarInt(playerid, "LoginCameraTimer", SetTimerEx("LoginCameraNext", 20000, false, "d", playerid));
		}
		case 4:
		{
			InterpolateCameraPos(playerid, -478.915283, -1893.009643, 15.662969, -378.451416, -1842.717773, 11.199451, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, -474.257476, -1891.208984, 15.413073, -373.665344, -1844.132202, 10.894952, 20000, CAMERA_MOVE);
			SetPVarInt(playerid, "LoginCameraTimer", SetTimerEx("LoginCameraNext", 20000, false, "d", playerid));
		}
		case 5:
		{
			InterpolateCameraPos(playerid, -378.451416, -1842.717773, 11.199451, -256.288299, -1880.697387, 9.918804, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, -373.665344, -1844.132202, 10.894952, -251.329696, -1881.339355, 9.914897, 20000, CAMERA_MOVE);
			DeletePVar(playerid, "LoginCameraTimer");
		}
	}
}

forward CheckReg(playerid);
public CheckReg(playerid)
{
	InterpolateCameraPos(playerid, -752.389892, -2102.738525, 38.198013, -781.461669, -2002.682006, 17.469572, 20000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, -752.583007, -2097.801513, 37.431518, -780.947753, -1997.714721, 17.219676, 20000, CAMERA_MOVE);
	SetPVarInt(playerid, "LoginCameraTimer", SetTimerEx("LoginCameraNext", 20000, false, "d", playerid));


	new row = cache_num_rows();

	PlayerStartMusic(playerid, 1187);
	if (!row)
	{
		ShowDialog(playerid, D_Reg_Pass, DIALOG_STYLE_INPUT,  Main_Color Project_Name " ||"Color_White" Регистрация",
		Color_White"Для продолжения игры на данном сервере необходимо пройти регистрацию\n\nПридумайте и введите пароль для своего аккаунта:\n"Main_Color"- "Color_White"Пароль должен быть не больше 32 символов\n"Main_Color"- "Color_White"Пароль можеть содержать только латиницу и числа\n",
		Color_White"Далее", Color_White"Отмена");
	}
	else
	{
		cache_get_value_name(0, "Password", pInfo[playerid][pPassword], 33);
		cache_get_value_name_int(0, "PinCode", pInfo[playerid][pPinCode]);
		new query[80];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `bans` WHERE `Name` = '%s'", pInfo[playerid][pName]);
		mysql_tquery(DB, query, "CheckAccountBan", "d", playerid);
	}

}

forward CheckAccountIPBan(playerid);
public CheckAccountIPBan(playerid)
{
	new row = cache_num_rows();
	if (!row)
	{
		new query[100];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `account` WHERE `Name`='%s' LIMIT 1", pInfo[playerid][pName]);
		mysql_tquery(DB, query, "CheckReg", "d", playerid);
	}
	else
	{
		new AdminName[MAX_PLAYER_NAME+1], Reason[145];
		cache_get_value_name(0, "AdminName", AdminName);
		cache_get_value_name(0, "Reason", Reason);

		new str[300];
		format(str, sizeof(str), Color_Red"%s "Color_White"забанил ваш IP, по причине:\n\
		"Color_Red"%s\n\n\
		"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminName, Reason);
		ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Этот IP заблокирован", str, Color_White"Закрыть", "");

		KickPlayer(playerid);
	}
}

forward CheckAccountBan(playerid);
public CheckAccountBan(playerid)
{
	new row = cache_num_rows();
	if (!row)
	{
		ShowDialog(playerid, D_Auth, DIALOG_STYLE_PASSWORD, Main_Color Project_Name " ||"Color_White" Авторизация", Color_White"Ваш аккаунт уже зарегестрирован в базе данных сервера\nДля продолжения введите пароль от вашего аккаунта", Color_White"Далее", Color_White"Отмена");
		SetPVarInt(playerid, "AuthTry", 3);
	}
	else
	{
		new BanTime;
		cache_get_value_name_int(0, "BanTime", BanTime);
		if(BanTime < gettime())
		{
			ClearBan(pInfo[playerid][pName]);
			ShowDialog(playerid, D_Auth, DIALOG_STYLE_PASSWORD, Main_Color Project_Name " ||"Color_White" Авторизация", Color_White"Ваш аккаунт уже зарегестрирован в базе данных сервера\nДля продолжения введите пароль от вашего аккаунта", Color_White"Далее", Color_White"Отмена");
			SetPVarInt(playerid, "AuthTry", 3);

			SendClientMessage(playerid, -1, Color_Yellow"Ваш аккаунт был разбанен по истечению срока блокировки. Впредь не нарушайте правила!");
		}
		else
		{
			new AdminName[MAX_PLAYER_NAME+1], Reason[145];
			cache_get_value_name(0, "AdminName", AdminName);
			cache_get_value_name(0, "Reason", Reason);

			new str[300];
			format(str, sizeof(str), Color_Red"%s "Color_White"забанил вас до %s, по причине:\n\
			"Color_Red"%s\n\n\
			"Color_White"Если вы не согласны с полученым наказанием оспорить вы его можете на форуме ogrm-project.ru", AdminName, date(BanTime, 3, "%dd.%mm.%yyyy %hh:%ii"), Reason);
			ShowDialog(playerid, D_None, DIALOG_STYLE_MSGBOX, Color_Red"Этот аккаунт заблокирован", str, Color_White"Закрыть", "");

			KickPlayer(playerid);
		}
	}
	return 1;
}

forward GetRegID(playerid);
public GetRegID(playerid)
{
	pInfo[playerid][pID] = cache_insert_id();
	SavePlayerSkins(playerid);
}

forward LoadAccount(playerid);
public LoadAccount(playerid)
{
	new TempVar = 0;

	cache_get_value_name_int(0, "ID", pInfo[playerid][pID]);
	cache_get_value_name_int(0, "Money", pInfo[playerid][pMoney]);
	cache_get_value_name_int(0, "BankMoney", pInfo[playerid][pBankMoney]);
	cache_get_value_name_int(0, "DonateMoney", pInfo[playerid][pDonateMoney]);
	cache_get_value_name_int(0, "Level", pInfo[playerid][pLevel]);
	cache_get_value_name_int(0, "Exp", pInfo[playerid][pExp]);
	cache_get_value_name_int(0, "Gender", pInfo[playerid][pGender]);
	cache_get_value_name_int(0, "Wanted", pInfo[playerid][pWanted]);
	cache_get_value_name_int(0, "Skin", pInfo[playerid][pSkin]);
	cache_get_value_name_int(0, "RegDate", pInfo[playerid][pRegDate]);
	cache_get_value_name_int(0, "Admin", pInfo[playerid][pAdmin]);
	cache_get_value_name_int(0, "Mute", pInfo[playerid][pMute]);
	cache_get_value_name_int(0, "Demorgan", pInfo[playerid][pDemorgan]);
	cache_get_value_name_int(0, "Jail", pInfo[playerid][pJail]);
	cache_get_value_name_int(0, "JailedFraction", pInfo[playerid][pJailedFraction]);
	cache_get_value_name_int(0, "Warn", pInfo[playerid][pWarn]);
	cache_get_value_name_int(0, "Members", pInfo[playerid][pMembers]);
	cache_get_value_name_int(0, "Rank", pInfo[playerid][pRank]);
	cache_get_value_name_int(0, "MedCard", pInfo[playerid][pMedCard]);
	cache_get_value_name_int(0, "LawyerLic", TempVar);
	if(TempVar) SetPVarInt(playerid, "LawyerLic", TempVar);
	cache_get_value_name_int(0, "Clist", pInfo[playerid][pClist]);
	cache_get_value_name_int(0, "WalkStyle", pInfo[playerid][pWalkStyle]);
	cache_get_value_name_int(0, "UpgradePoint", pInfo[playerid][pUpgradePoint]);
	cache_get_value_name_int(0, "Job", pInfo[playerid][pJob]);
	cache_get_value_name_int(0, "PayDayMoney", pInfo[playerid][pPayDayMoney]);
	cache_get_value_name_int(0, "PlayedTime", pInfo[playerid][pPlayedTime]);
	cache_get_value_name_int(0, "SpawnChange", pInfo[playerid][pSpawnChange]);
	cache_get_value_name_int(0, "TentCD", TempVar);
	if(TempVar) SetPVarInt(playerid, "TentCD", TempVar);
	cache_get_value_name_int(0, "SpermCD", TempVar);
	if(TempVar) SetPVarInt(playerid, "SpermCD", TempVar);
	cache_get_value_name_int(0, "BloodCD", TempVar);
	if(TempVar) SetPVarInt(playerid, "BloodCD", TempVar);
	cache_get_value_name_int(0, "StashDrugs", pInfo[playerid][pStashDrugs]);
	cache_get_value_name_int(0, "StashMaterials", pInfo[playerid][pStashMaterials]);

	cache_get_value_name(0, "Mail", pInfo[playerid][pMail], 321);
	cache_get_value_name(0, "RegIP", pInfo[playerid][pRegIp], 17);
	cache_get_value_name(0, "AdminPass", pInfo[playerid][pAdminPass], 33);
	new str[100];
	cache_get_value_name(0, "SkillExp", str);
	if(strlen(str)) sscanf(str, "p<,>a<i>[*]", Max_Job, pInfo[playerid][pSkillExp]);

	str[0] = EOS;
	cache_get_value_name(0, "Skill", str);
	if(strlen(str)) sscanf(str, "p<,>a<i>[*]", Max_Job, pInfo[playerid][pSkill]);

	str[0] = EOS;
	cache_get_value_name(0, "Weapon", str);
	if(strlen(str)) sscanf(str, "p<,>a<i>[13]", pInfo[playerid][pWeapon]);

	str[0] = EOS;
	cache_get_value_name(0, "Ammo", str);
	if(strlen(str)) sscanf(str, "p<,>a<i>[13]", pInfo[playerid][pAmmo]);

	str[0] = EOS;
	cache_get_value_name(0, "Skins", str);
	if(strlen(str)) sscanf(str, "p<,>a<i>[10]", pInfo[playerid][pSkins]);

	if(!pInfo[playerid][pGender])
	{
		if(!pInfo[playerid][pSkins][pInfo[playerid][pSkin]])
		{
			pInfo[playerid][pSkins][0] = 289;
			pInfo[playerid][pSkin] = 0;
			SavePlayerSkins(playerid);
		}
	}
	else
	{
		if(!pInfo[playerid][pSkins][pInfo[playerid][pSkin]])
		{
			pInfo[playerid][pSkins][0] = 90;
			pInfo[playerid][pSkin] = 0;
			SavePlayerSkins(playerid);
		}
	}

	cache_get_value_name_bool(0, "TogglePM", pInfo[playerid][pTogglePM]);
	cache_get_value_name_bool(0, "ToggleOOC", pInfo[playerid][pToggleOOC]);
	cache_get_value_name_bool(0, "ToggleAD", pInfo[playerid][pToggleAD]);
	cache_get_value_name_bool(0, "JailNoFree", pInfo[playerid][pJailNoFree]);
	cache_get_value_name_bool(0, "Card", pInfo[playerid][pCard]);
	cache_get_value_name_bool(0, "LicAuto", pInfo[playerid][pLicAuto]);
	cache_get_value_name_bool(0, "LicMoto", pInfo[playerid][pLicMoto]);
	cache_get_value_name_bool(0, "LicPlane", pInfo[playerid][pLicPlane]);
	cache_get_value_name_bool(0, "LicBoat", pInfo[playerid][pLicBoat]);
	cache_get_value_name_bool(0, "LicGun", pInfo[playerid][pLicGun]);
	cache_get_value_name_bool(0, "ArmyTicket", pInfo[playerid][pArmyTicket]);

	cache_get_value_name_float(0, "Health", pInfo[playerid][pHealth]);
	cache_get_value_name_float(0, "Armor", pInfo[playerid][pArmor]);

	if(!pInfo[playerid][pJail])
	{
		if(pInfo[playerid][pJailNoFree])
		{
			pInfo[playerid][pJailNoFree] = false;
			SavePlayerBool(playerid, "JailNoFree", pInfo[playerid][pJailNoFree]);
		}
		if(pInfo[playerid][pJailedFraction] != Fraction_None)
		{
			pInfo[playerid][pJailedFraction] = Fraction_None;
			SavePlayerInt(playerid, "JailedFraction", pInfo[playerid][pJailedFraction]);
		}
	}

	if(pInfo[playerid][pMembers] == Fraction_None && pInfo[playerid][pSpawnChange] == SpawnChange_Fraction)
	{
		pInfo[playerid][pSpawnChange] = SpawnChange_Standart;
		SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
	}

	str[0] = EOS;
	mysql_format(DB, str, sizeof(str), "SELECT * FROM `house` WHERE `OwnerID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, str, "CheckAccountHouse", "d", playerid);

	str[0] = EOS;
	mysql_format(DB, str, sizeof(str), "SELECT * FROM `business` WHERE `OwnerID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, str, "CheckAccountBusiness", "d", playerid);

	str[0] = EOS;
	mysql_format(DB, str, sizeof(str), "SELECT * FROM `offline_message` WHERE `ID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, str, "LoadOfflineMessage", "d", playerid);

	str[0] = EOS;
	mysql_format(DB, str, sizeof(str), "SELECT * FROM `inventory` WHERE `ID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, str, "LoadInventory", "d", playerid);

	pInfo[playerid][pAuth] = true;

	if(pInfo[playerid][pMembers] != Fraction_None && pInfo[playerid][pRank] >= FractionMaxRank) FillLeaderBoard();

	SendClientMessage(playerid, -1, Color_White"Приветствуем на "Main_Color Project_Name Color_White". Приятной игры!");

	if(pInfo[playerid][pAdmin]) SendClientMessage(playerid, -1, Color_Yellow"Вы являетесь администратором. Используйте /alogin чтобы авторизироваться в админ панели");

	if(GetPVarInt(playerid, "LoginCameraTimer"))
	{
		KillTimer(GetPVarInt(playerid, "LoginCameraTimer"));
		DeletePVar(playerid, "LoginCameraTimer");
	}
	if(GetPVarInt(playerid, "LoginCamera")) DeletePVar(playerid, "LoginCamera");

	SetPVarInt(playerid, "FirstSpawn", 10);
	TogglePlayerSpectating(playerid, false);
}

stock AddLog(Type, MysqlID, const Info[])
{
	new query[400];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `log` (`Type`, `ID`, `Info`, `Time`) VALUES ('%d', '%d', '%s', '%d')", Type, MysqlID, Info, gettime());
	mysql_tquery(DB, query);
	return 1;
}

stock AddOfflineMessage(MysqlID, const Message[])
{
	new query[300];
	mysql_format(DB, query, sizeof(query), "INSERT INTO `offline_message` (`ID`, `Message`) VALUES ('%d', '%s')", MysqlID, Message);
	mysql_tquery(DB, query);
	return 1;
}

forward LoadOfflineMessage(playerid);
public LoadOfflineMessage(playerid)
{
	new row = cache_num_rows();
 	if(row)
 	{
 		new Message[200];
 		for(new i = 0; i < row; i++)
 		{
 			Message[0] = EOS;
 			cache_get_value_name(i, "Message", Message);
 			SendClientMessage(playerid, -1, Message);
 		}
 		Message[0] = EOS;
 		mysql_format(DB, Message, sizeof(Message), "DELETE FROM `offline_message` WHERE `ID` = '%d' LIMIT 1", pInfo[playerid][pID]);
		mysql_tquery(DB, Message);
 	}
 	return 1;
}

forward CheckAccountBusiness(playerid);
public CheckAccountBusiness(playerid)
{
	new row = cache_num_rows();
	if(row) cache_get_value_name_int(0, "ID", pInfo[playerid][pBusinessID]);
	else pInfo[playerid][pBusinessID] = 0;
	return 1;
}

forward CheckAccountHouse(playerid);
public CheckAccountHouse(playerid)
{
	new row = cache_num_rows();
	if(row)
	{
		cache_get_value_name_int(0, "ID", pInfo[playerid][pHouseID]);

		new query[150];
		mysql_format(DB, query, sizeof(query), "SELECT * FROM `vehicle` WHERE `Type` = '%d' AND `Owner` = '%d' AND `Selected` = '1'", VehicleTypePlayer, pInfo[playerid][pID]);
		mysql_tquery(DB, query, "LoadVehicle", "d", playerid);
	}
	else
	{
		pInfo[playerid][pHouseID] = 0;
		ClearHouseVehicle(pInfo[playerid][pID], playerid);
		if(pInfo[playerid][pSpawnChange] == SpawnChange_House)
		{
			pInfo[playerid][pSpawnChange] = SpawnChange_Standart;
			SavePlayerInt(playerid, "SpawnChange", pInfo[playerid][pSpawnChange]);
		}
	}
	return 1;
}

forward LoadInventory(playerid);
public LoadInventory(playerid)
{
	new row = cache_num_rows();
	if(row)
	{
		for(new i = 0; i < row; i++)
		{
			cache_get_value_name_int(i, "ItemID", pInventory[playerid][i][ItemID]);
			cache_get_value_name_int(i, "ItemCount", pInventory[playerid][i][ItemCount]);
		}
	}
	return 1;
}

stock TpPlayerToPlayer(playerid, toid)
{
	new Float:X, Float:Y, Float:Z, Float:A;
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(toid, A);
    SetPlayerPosition(toid, X, Y, Z, A, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

    if(GetPVarInt(playerid, "InBusiness")) SetPVarInt(toid, "InBusiness", GetPVarInt(playerid, "InBusiness"));
    if(GetPVarInt(playerid, "InHouse")) SetPVarInt(toid, "InHouse", GetPVarInt(playerid, "InHouse"));
    if(GetPVarInt(playerid, "InPickup")) SetPVarInt(toid, "InPickup", GetPVarInt(playerid, "InPickup"));
	return 1;
}

stock SetPlayerPosition(playerid, Float:x, Float:y, Float:z, Float:a=0.0, virtualworld=0, interiorid=0, bool:UnFreeze=true)
{
	TogglePlayerControllable(playerid, false);

	SetPlayerPos(playerid, x, y, z);

	if(a != 0.0) SetPlayerFacingAngle(playerid, a);

	SetPlayerVirtualWorld(playerid, virtualworld);
	SetPlayerInterior(playerid, interiorid);

	if(!interiorid && !virtualworld)
	{
		DeletePVar(playerid, "InHouse");
		DeletePVar(playerid, "InBusiness");
		DeletePVar(playerid, "InPickup");
	}

	if(GetPVarInt(playerid, "UnFreezePlayerTimer"))
	{
		KillTimer(GetPVarInt(playerid, "UnFreezePlayerTimer"));
		DeletePVar(playerid, "UnFreezePlayerTimer");
	}

	if(UnFreeze) SetPVarInt(playerid, "UnFreezePlayerTimer", SetTimerEx("UnFreezePlayer", 1000+(GetPlayerPing(playerid)*20), false, "d", playerid));
	return 1;
}

stock SetSkin(playerid, Skin, bool:IgnoredFractionSkin = false)
{
	if(pInfo[playerid][pDemorgan]) return SetPlayerSkin(playerid, 264);

	if(pInfo[playerid][pMembers] != Fraction_None && pInfo[playerid][pRank])
	{
		if(!IgnoredFractionSkin)
		{
			if(pInfo[playerid][pGender]) return SetPlayerSkin(playerid, FractionSkinFemale[pInfo[playerid][pMembers]][pInfo[playerid][pRank]]);
			else return SetPlayerSkin(playerid, FractionSkinMale[pInfo[playerid][pMembers]][pInfo[playerid][pRank]]);
		}
	}

	SetPlayerSkin(playerid, Skin);
	return 1;
}

forward UnFreezePlayer(playerid);
public UnFreezePlayer(playerid)
{
	DeletePVar(playerid, "UnFreezePlayerTimer");

	if(GetPVarInt(playerid, "Spec_Admin_ID"))
	{
		SpectatePlayer(GetPVarInt(playerid, "Spec_Admin_ID")-1, playerid);
	}

	TogglePlayerControllable(playerid, true);

	if(GetPVarInt(playerid, "AmmoBox")) ApplyAnimation(playerid,"CARRY","crry_prtial", 4.0, true, false, false, true, 1, true);
	return 1;
}

forward EndLottery();
public EndLottery()
{
	LotteryStarted = false;
	new num = random(81);

	new query[300];
	mysql_format(DB, query, sizeof(query), "SELECT * FROM `lottery` WHERE `Num` = '%d'", num);
	mysql_tquery(DB, query, "LotteryGivePrise", "d", num);
	return 1;
}

forward LotteryGivePrise(num);
public LotteryGivePrise(num)
{
	new str[200];
	format(str, sizeof(str), Color_Yellow"[Лотерея] По результатам лотереи выпало число "Color_Green"%d", num);
	SendAllMessage(str);
	new row = cache_num_rows();
	if(row)
	{
		for(new i = 0; i < row; i++)
		{
			new ID = 0;
			cache_get_value_name_int(i, "ID", ID);

			str[0] = EOS;
			mysql_format(DB, str, sizeof(str), "SELECT * FROM `account` WHERE `ID` = '%d'", ID);
			mysql_tquery(DB, str, "LotteryPriseAccounts", "d", LotteryMoney);
		}
		LotteryMoney = 0;
	}
	else
	{
		SendAllMessage(Color_Yellow"[Лотерея] Лотерея окончена, победителей нет. Текущая сумма лотереи сохранится и увеличится при следующем розыгрыше");
	}
	mysql_tquery(DB, "DELETE FROM `lottery` WHERE 1");
	return 1;
}

forward LotteryPriseAccounts(sum);
public LotteryPriseAccounts(sum)
{
	new row = cache_num_rows();
	if(row)
	{
		new str[200];
		new ID = 0;
		cache_get_value_name_int(0, "ID", ID);
		cache_get_value_name(0, "Name", str);

		format(str, sizeof(str), Color_Yellow"[Лотерея] %s выиграл в лотерее "Color_Green"%d$", str, sum);
		SendAllMessage(str);

		foreach(new i: Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pID] == ID)
			{
				GivePlayerMoneyEx(i, sum);
				return 1;
			}
		}

		AddOfflineMessage(ID, str);
		mysql_format(DB, str, sizeof(str), "UPDATE `account` SET `Money` = `Money`+'%d' WHERE `ID` = '%d'", sum, ID);
		mysql_tquery(DB, str);
	}
	return 1;
}

stock SetWeatherOfTime(time)
{
	new weatherid;

	if(time >= 0 && time <= 2) weatherid = 9;
	else if(time >= 4 && time <= 5) weatherid = 8;
	else if(time >= 10 && time <= 13)
	{
		switch(random(4))
		{
			case 0: weatherid = 12;
			case 1: weatherid = 20;
			case 2: weatherid = 15;
			case 3: weatherid = 16;
		}
	}
	else if(time >= 16 && time <= 19)
	{
		switch(random(2))
		{
			case 0: weatherid = 8;
			case 1: weatherid = 16;
		}
	}
	else
	{
		switch(random(13))
		{
			case 0: weatherid = 1;
			case 1: weatherid = 2;
			case 2: weatherid = 3;
			case 3: weatherid = 4;
			case 4: weatherid = 5;
			case 5: weatherid = 6;
			case 6: weatherid = 7;
			case 7: weatherid = 10;
			case 8: weatherid = 11;
			case 9: weatherid = 13;
			case 10: weatherid = 14;
			case 11: weatherid = 17;
			case 12: weatherid = 18;
		}
	}

	SetWeather(weatherid);
	return 1;
}

stock PayDay()
{
	PayDayCalled = true;

	foreach(new i : Player)
	{
		if(!pInfo[i][pAuth]) continue;
		PlayerStartMusic(i, 1068);
		SetTimerEx("StopMusic", 10000, false, "d", i);
		if(pInfo[i][pPlayedTime] < 1200)
		{
			SendClientMessage(i, -1, Color_Yellow"Вы не отыграли 20 минут поэтому не получили PayDay");
			continue;
		}
		new string[200];
		format(string, sizeof(string), Color_White"|---------- Банковский чек на имя "Color_Green"%s"Color_White" ----------|", pInfo[i][pName]);
		SendClientMessage(i, -1, string);
		new LenghtCheck = strlen(string);
		LenghtCheck -= 9; // Удаляем левей HEX цвет и нуль символ
		//////PayDay Start

		string[0] = EOS;
		format(string, sizeof(string), Color_White"Зарплата: "Color_Green"%d$", pInfo[i][pPayDayMoney]);
		SendClientMessage(i, -1, string);
		GivePlayerMoneyEx(i, pInfo[i][pPayDayMoney]);
		pInfo[i][pPayDayMoney] = 0;
		SavePlayerInt(i, "PayDayMoney", pInfo[i][pPayDayMoney]);

		if(pInfo[i][pWanted])
		{
			pInfo[i][pWanted]--;
			SetPlayerWantedLevel(i, pInfo[i][pWanted]);
			SavePlayerInt(i, "Wanted", pInfo[i][pWanted]);
		}

		if(pInfo[i][pCard])
		{
			new Float:BankMoneyPercent = pInfo[i][pBankMoney]*0.05;
			pInfo[i][pBankMoney] += floatround(BankMoneyPercent);
			SavePlayerInt(i, "BankMoney", pInfo[i][pBankMoney]);

			string[0] = EOS;
			format(string, sizeof(string), Color_White"На счету в банке: "Color_Green"%d$", pInfo[i][pBankMoney]);
			SendClientMessage(i, -1, string);

			string[0] = EOS;
			format(string, sizeof(string), Color_White"Капитализация по счету (5%%): "Color_Green"%d$", floatround(BankMoneyPercent));
			SendClientMessage(i, -1, string);
		}

		pInfo[i][pPlayedTime] = 0;
		SavePlayerInt(i, "PlayedTime", pInfo[i][pPlayedTime]);

		if(pInfo[i][pLevel] < 50)
		{
			if(pInfo[i][pExp] < (pInfo[i][pLevel]+1)*4)
			{
				pInfo[i][pExp] += 1;
				SavePlayerInt(i, "Exp", pInfo[i][pExp]);
			}
		}
		PlayerLevelUpdate(i);

		//////PayDay End
		string[0] = EOS;
		strcat(string, Color_White);
		strcat(string, "|");
		for(new j = 0; j < LenghtCheck-2; j++) strcat(string, "-");
		strcat(string, "|");
		SendClientMessage(i, -1, string);
	}
	return 1;
}

stock PropertyTax()
{
	for(new i = 1; i < sizeof(hInfo); i++)
	{
		if(hInfo[i][hOwnerID] && hInfo[i][hTax] < gettime())
		{
			new bool:Finded = false;
			foreach(new j: Player)
			{
				if(pInfo[j][pAuth] && pInfo[j][pID] == hInfo[i][hOwnerID])
				{
					SendClientMessage(j, -1, Color_White"Ваш "Main_Color"дом "Color_White"был продан государству из-за неуплаты налогов");
					pInfo[j][pHouseID] = 0;
					if(pInfo[j][pSpawnChange] == SpawnChange_House)
					{
						pInfo[j][pSpawnChange] = SpawnChange_Standart;
						SavePlayerInt(j, "SpawnChange", pInfo[j][pSpawnChange]);
					}
					Finded = true;
					ClearHouseVehicle(pInfo[i][pID], i);
					break;
				}
			}
			if(!Finded)
			{
				ClearHouseVehicle(hInfo[i][hOwnerID]);
				AddOfflineMessage(hInfo[i][hOwnerID], Color_White"Ваш "Main_Color"дом "Color_White"был продан государству из-за неуплаты налогов");
				new query[150];
				mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `SpawnChange` = '%d' WHERE `ID` = '%d' AND `SpawnChange` = '%d'", SpawnChange_Standart, hInfo[i][hOwnerID], SpawnChange_House);
				mysql_tquery(DB, query);
			}

			hInfo[i][hOwnerID] = 0;
			SaveHouseNull(hInfo[i][hID], "OwnerID");
			hInfo[i][hTax] = 0;
			SaveHouseInt(hInfo[i][hID], "Tax", hInfo[i][hTax]);
			UpdateHouse(i);
		}
	}

	for(new i = 1; i < sizeof(bInfo); i++)
	{
		if(bInfo[i][bOwnerID] && bInfo[i][bTax] < gettime())
		{
			new bool:Finded = false;
			foreach(new j: Player)
			{
				if(pInfo[j][pAuth] && pInfo[j][pID] == bInfo[i][bOwnerID])
				{
					SendClientMessage(j, -1, Color_White"Ваш "Main_Color"бизнес "Color_White"был продан государству из-за неуплаты налогов");
					pInfo[j][pBusinessID] = 0;
					Finded = true;
					break;
				}
			}
			if(!Finded) AddOfflineMessage(bInfo[i][bOwnerID], Color_White"Ваш "Main_Color"бизнес "Color_White"был продан государству из-за неуплаты налогов");

			bInfo[i][bOwnerID] = 0;
			SaveBusinessNull(bInfo[i][bID], "OwnerID");
			bInfo[i][bTax] = 0;
			SaveBusinessInt(bInfo[i][bID], "Tax", bInfo[i][bTax]);
			UpdateBusiness(i);
		}
	}
	return 1;
}

stock ConvertedSeconds(time, str[], len = sizeof(str))
{
	if(time < 60)
	{
		format(str, len, "%02d секунд", time);
	}
	else if(time >= 60)
	{
		new minute = time/60;

		if(minute >= 60)
		{
			new hour = minute/60;
			format(str, len, "%02d:%02d:%02d", hour, minute%60, time%60);
		}
		else format(str, len, "%02d минут и %02d секунд", minute, time%60);
	}
}

stock ConvertedSecondsWithoutText(time, str[], len = sizeof(str))
{
	if(time < 60)
	{
		format(str, len, "00:%02d", time);
	}
	else if(time >= 60)
	{
		new minute = time/60;

		if(minute >= 60)
		{
			new hour = minute/60;
			format(str, len, "%02d:%02d:%02d", hour, minute%60, time%60);
		}
		else format(str, len, "%02d:%02d", minute, time%60);
	}
}

forward SecondTimer();
public SecondTimer()
{
	new hour,minute;
	gettime(hour,minute);

	if(!minute && !PayDayCalled)
	{
		SetWorldTime(hour);
		SetWeatherOfTime(hour);

		PayDay();
		PropertyTax();

		if(!LotteryStarted)
		{
			LotteryStarted = true;
			LotteryMoney += LotteryStartMoney;
			new str[200];
			format(str, sizeof(str), Color_Yellow"[Лотерея] Через 2 минуты пройдет лотерея на сумму "Color_Green"%d$", LotteryMoney);
			SendAllMessage(str);
			SendAllMessage(Color_Yellow"[Лотерея] Для участия используйте /lotto");
			SetTimer("EndLottery", 120000, false);
		}

		mysql_tquery(DB, "SELECT * FROM `account` ORDER BY `Money` DESC, `Level` DESC LIMIT 5", "FillPlayerBoard");
	}
	else if(minute && PayDayCalled) PayDayCalled = false;

	{
		new string[20];
		format(string,sizeof(string),"~w~%02d~y~:~w~%02d",hour,minute);
		TextDrawSetString(GlobalTimeTD, string);
	}

	for(new i = 0; i < MAX_FRACTION; i++)
	{
		if(GangWarTimer[i])
		{
			GangWarTimer[i]--;
			if(!GangWarTimer[i])
			{
				if(GangWarStatus[i] == Gang_Status_Wait_Accept)
				{
					SendRMessageEx(i, "Ваша банда не приняла предложение о войне в течении 5 минут. Предложение автоматически отклонено");
					ClearGangWar(i);
				}
				else if(GangWarStatus[i] == Gang_Status_Wait_Accept_Request)
				{
					SendRMessageEx(i, "Банда соперника не приняла предложение о войне в течении 5 минут. Предложение автоматически отклонено");
					ClearGangWar(i);
				}
                else if(GangWarStatus[i] == Gang_Status_War)
                {
                    SendRMessageEx(i, "Время войны окончено. Война закончилась в ничью");
                    EndGangWar(i, 2);
                }
			}
		}
	}

	if(MaterialShipmentCD < gettime())
	{
		MaterialShipmentCD = gettime()+(86400*(6+random(7)));
		new query[100];
		mysql_format(DB, query, sizeof(query), "UPDATE `server_info` SET `MaterialShipmentCD` = '%d'", MaterialShipmentCD);
		mysql_tquery(DB, query);

		for(new i = 0; i < sizeof(ShipmentMaterials); i++)
		{
			if(ShipmentMaterials[i][ShipmentPickup] && IsValidDynamicPickup(ShipmentMaterials[i][ShipmentPickup])) DestroyDynamicPickup(ShipmentMaterials[i][ShipmentPickup]);
			if(ShipmentMaterials[i][ShipmentText] && IsValidDynamic3DTextLabel(ShipmentMaterials[i][ShipmentText])) DestroyDynamic3DTextLabel(ShipmentMaterials[i][ShipmentText]);
			if(ShipmentMaterials[i][ShipmentArea] && IsValidDynamicArea(ShipmentMaterials[i][ShipmentArea])) DestroyDynamicArea(ShipmentMaterials[i][ShipmentArea]);

			ShipmentMaterials[i][ShipmentPickup] = CreateDynamicPickup(19832, 1, ShipmentMaterials[i][ShipmentX], ShipmentMaterials[i][ShipmentY], ShipmentMaterials[i][ShipmentZ], 0, 0);
			ShipmentMaterials[i][ShipmentText] = CreateDynamic3DTextLabel(Main_Color"Осталось ящиков 20/20", -1, ShipmentMaterials[i][ShipmentX], ShipmentMaterials[i][ShipmentY], ShipmentMaterials[i][ShipmentZ]+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			ShipmentMaterials[i][ShipmentArea] = CreateDynamicSphere(ShipmentMaterials[i][ShipmentX], ShipmentMaterials[i][ShipmentY], ShipmentMaterials[i][ShipmentZ], 1.0, 0, 0);
			Streamer_SetIntData(STREAMER_TYPE_AREA, ShipmentMaterials[i][ShipmentArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Shipment);
			Streamer_SetIntData(STREAMER_TYPE_AREA, ShipmentMaterials[i][ShipmentArea],  E_STREAMER_INDX, i);
			ShipmentMaterials[i][ShipmentMaterialsCount] = 20;
		}
		SendRMessageEx(Fraction_Army, "Внимание! Груз с материалами прибыл на точку разгрузки!");
	}

	for(new i = 0; i < MAX_CASINOTABLE; i++)
	{
		if(CasinoTable[i][CasTabID])
		{
			if(!CasinoTable[i][CasTabStatus])
			{
				if(GetPlayerTableCount(i) >= CasinoTable[i][CasTabMaxPlayer])
				{
					if(!CasinoTable[i][CasTabTimer])
					{
						SendMessageTable(i, "За столом собралось достаточное количество игроков. Игра начнется через 5 секунд");
						CasinoTable[i][CasTabTimer] = 5;
						TableUpdateInfo(i);
					}
					else
					{
						CasinoTable[i][CasTabTimer]--;
						if(!CasinoTable[i][CasTabTimer])
						{
							CasinoTable[i][CasTabStatus] = true;
							if(CasinoTable[i][CasTabType] == CasinoTable_Points)
							{
								for(new j = 0; j < 10; j++)
								{
									if(CasinoTable[i][CasTabPlayers][j] != -1)
									{
										CasinoTable[i][CasTabPlayersScore][j] = 6+random(6);
										new str[200];
										format(str, sizeof(str), Main_Color"%s "Color_White"получил стартовые "Main_Color"%d "Color_White"очков", pInfo[CasinoTable[i][CasTabPlayers][j]][pName], CasinoTable[i][CasTabPlayersScore][j]);
										SendMessageTable(i, str);
									}
								}
							}
						}
						TableUpdateInfo(i);
					}
				}
				else if(GetPlayerTableCount(i) < CasinoTable[i][CasTabMaxPlayer] && CasinoTable[i][CasTabTimer])
				{
					SendMessageTable(i, "Кто-то покинул стол. Ожидание игроков");
					CasinoTable[i][CasTabTimer] = 0;
					TableUpdateInfo(i);
				}
			}
			else
			{
				if(CasinoTable[i][CasTabTimer])
				{
					CasinoTable[i][CasTabTimer]--;
					if(!CasinoTable[i][CasTabTimer])
					{
						for(new j = 0; j < 10; j++)
						{
							if(CasinoTable[i][CasTabPlayers][j] != -1 && CasinoTable[i][CasTabPlayersStatus][j] == CasinoPlayerWaitAction)
							{
								if(CasinoTable[i][CasTabType] == CasinoTable_Dice)
								{
									CasinoTable[i][CasTabPlayersStatus][j] = CasinoPlayerLose;
									CasinoTable[i][CasTabPlayersScore][j] = 0;
									new str[100];
									format(str, sizeof(str), Main_Color"%s "Color_White"не бросил кости, ему автоматически засчитано поражение", pInfo[CasinoTable[i][CasTabPlayers][j]][pName]);
									SendMessageTable(i, str);
								}
								else if(CasinoTable[i][CasTabType] == CasinoTable_Points)
								{
									CasinoTable[i][CasTabPlayersStatus][j] = CasinoPlayerPass;
									new str[100];
									format(str, sizeof(str), Main_Color"%s "Color_White"не взял карту и автоматически спасовал", pInfo[CasinoTable[i][CasTabPlayers][j]][pName]);
									SendMessageTable(i, str);
								}
								else if(CasinoTable[i][CasTabType] == CasinoTable_Roullete)
								{
									CasinoTable[i][CasTabPlayersStatus][j] = CasinoPlayerRolled;
									CasinoTable[i][CasTabPlayersScore][j] = 0;
									new str[100];
									format(str, sizeof(str), Main_Color"%s "Color_White"пропустил ставку", pInfo[CasinoTable[i][CasTabPlayers][j]][pName]);
									SendMessageTable(i, str);
								}
								break;
							}
						}
					}
					TableUpdateInfo(i);
				}
			}
		}
	}

	for(new i = 0; i < sizeof(LumberjackTree); i++)
	{
		if(LumberjackTree[i][TreeTimer])
		{
			new str[100];
			LumberjackTree[i][TreeTimer]--;
			format(str, sizeof(str), Main_Color"Дерево: Уже срублено\nВырастет через "Color_White"%d "Main_Color"секунд", LumberjackTree[i][TreeTimer]);
			if(LumberjackTree[i][TreeTimer] <= 0)
			{
				LumberjackTree[i][TreeTimer] = 0;
				LumberjackTree[i][TreeID] = CreateDynamicObject(687, LumberjackTree[i][TreeX], LumberjackTree[i][TreeY], LumberjackTree[i][TreeZ], 0.0, 0.0, 0.0, 0, 0);
				format(str, sizeof(str), Main_Color"Дерево: Можно срубить\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы срубить");
			}
			UpdateDynamic3DTextLabelText(LumberjackTree[i][TreeText], -1, str);
		}
	}

	for(new i = 0; i < sizeof(FarmPlant); i++)
	{
		if(FarmPlant[i][PlantTimer])
		{
			new str[100];
			FarmPlant[i][PlantTimer]--;
			format(str, sizeof(str), Main_Color"Урожай: Уже собрано\nВырастет через "Color_White"%d "Main_Color"секунд", FarmPlant[i][PlantTimer]);
			if(FarmPlant[i][PlantTimer] <= 0)
			{
				FarmPlant[i][PlantTimer] = 0;
				FarmPlant[i][PlantID] = CreateDynamicObject(804, FarmPlant[i][PlantX], FarmPlant[i][PlantY], FarmPlant[i][PlantZ], 0.0, 0.0, 0.0, 0, 0);
				format(str, sizeof(str), Main_Color"Урожай: Готово к сбору\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы собрать");
			}
			UpdateDynamic3DTextLabelText(FarmPlant[i][PlantText], -1, str);
		}
	}

	for(new i = 0; i < sizeof(MineMetall); i++)
	{
		if(MineMetall[i][MetallTimer])
		{
			new str[100];
			MineMetall[i][MetallTimer]--;
			format(str, sizeof(str), Main_Color"Руда: Уже добыто\nМожно копнуть глубже через "Color_White"%d "Main_Color"секунд", MineMetall[i][MetallTimer]);
			if(MineMetall[i][MetallTimer] <= 0)
			{
				MineMetall[i][MetallTimer] = 0;
				MineMetall[i][MetallID] = CreateDynamicObject(3929+random(3), MineMetall[i][MetallX], MineMetall[i][MetallY], MineMetall[i][MetallZ], MineMetall[i][MetallRX], MineMetall[i][MetallRY], MineMetall[i][MetallRZ], 2, 0);
				format(str, sizeof(str), Main_Color"Руда: Готово к добыче\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы добыть");
			}
			UpdateDynamic3DTextLabelText(MineMetall[i][MetallText], -1, str);
		}
	}

	for(new i = 0; i < sizeof(PrisonMineMetall); i++)
	{
		if(PrisonMineMetall[i][MetallTimer])
		{
			new str[100];
			PrisonMineMetall[i][MetallTimer]--;
			format(str, sizeof(str), Main_Color"Камень: Уже добыто\nМожно копнуть глубже через "Color_White"%d "Main_Color"секунд", PrisonMineMetall[i][MetallTimer]);
			if(PrisonMineMetall[i][MetallTimer] <= 0)
			{
				PrisonMineMetall[i][MetallTimer] = 0;
				PrisonMineMetall[i][MetallID] = CreateDynamicObject(3929+random(3), PrisonMineMetall[i][MetallX], PrisonMineMetall[i][MetallY], PrisonMineMetall[i][MetallZ], PrisonMineMetall[i][MetallRX], PrisonMineMetall[i][MetallRY], PrisonMineMetall[i][MetallRZ], 2, 0);
				format(str, sizeof(str), Main_Color"Руда: Готово к добыче\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы добыть");
			}
			UpdateDynamic3DTextLabelText(PrisonMineMetall[i][MetallText], -1, str);
		}
	}

	if(TruckerQueue[0] != -1)
	{
		if(!TruckerStatus)
		{
			TruckerStatus = 1;
			TruckerTimer = 20;
			SendClientMessage(TruckerQueue[0], -1, Color_Yellow"Подошла ваша очередь загружаться. Прицеп будет готов через 20 секунд");
		}
		else if(TruckerStatus == 1)
		{
			TruckerTimer--;
			if(TruckerTimer <= 0)
			{
				new model = 0;
				switch(random(4))
				{
					case 0: model = 435;
					case 1: model = 450;
					case 2: model = 584;
					case 3: model = 591;
				}
				new indx = GetFreeVehicleID();
				vInfo[indx][vFuel] = 100.0;
				vInfo[indx][vModel] = model;
				vInfo[indx][vColor1] = 1;
				vInfo[indx][vColor2] = 1;
				vInfo[indx][vOwner] = Job_Trucker;
				vInfo[indx][vType] = VehicleTypeTrailer;

				vInfo[indx][vX] = -119.0812;
				vInfo[indx][vY] = -330.1114;
				vInfo[indx][vZ] = 2.4446;
				vInfo[indx][vA] = 180.3305;
				vInfo[indx][vRenter] = TruckerQueue[0];

				vInfo[indx][vServerID] = CreateVehicle(vInfo[indx][vModel], vInfo[indx][vX], vInfo[indx][vY], vInfo[indx][vZ], vInfo[indx][vA], vInfo[indx][vColor1], vInfo[indx][vColor2], -1);
				SetVehicleParamsEx(vInfo[indx][vServerID], false, false, false, false, false, false, false);

				SetPVarInt(TruckerQueue[0], "TrailerID", vInfo[indx][vServerID]);

				TruckerStatus = 2;
				TruckerTimer = 30;
				SendClientMessage(TruckerQueue[0], -1, Color_Yellow"Ваш прицеп готов. Заберите его в течении 30 секунд и покиньте зону загрузки иначе он будет возвращен");
			}
		}
		else if(TruckerStatus == 2)
		{
			TruckerTimer--;
			if(TruckerTimer <= 0)
			{
				RemoveTrailer(TruckerQueue[0], true);
				TruckerStatus = 0;
				TruckerTimer = 0;
				RemoveTruckerQueue(TruckerQueue[0]);
			}
		}
	}

	foreach(new i: Player)
	{
		if(IsBot[i] && pInfo[i][pClist] == -1)
		{
			pInfo[i][pClist] = random(sizeof(PlayerColors));
			SetColor(i);
		}
		if(!pInfo[i][pAuth]) continue;

		pInfo[i][pPlayedTime]++;

		if(GetPVarInt(i, "FirstSpawn"))
		{
			SetPVarInt(i, "FirstSpawn", GetPVarInt(i, "FirstSpawn")-1);
			if(GetPVarInt(i, "FirstSpawn") <= 0) DeletePVar(i, "FirstSpawn");
		}

		pInfo[i][pAFK]++;

		if(pInfo[i][pAFK] > 2)
		{
			new str[100];
			ConvertedSeconds(pInfo[i][pAFK], str);
			format(str, sizeof(str), Color_White"АФК: ["Main_Color"%s"Color_White"]", str);

			if(pInfo[i][pAFKText] && IsValidDynamic3DTextLabel(pInfo[i][pAFKText]))
			{
				UpdateDynamic3DTextLabelText(pInfo[i][pAFKText], -1, str);
			}
			else pInfo[i][pAFKText] = CreateDynamic3DTextLabel(str, -1, 0.0, 0.0, 0.3, 10.0, i, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(i), GetPlayerInterior(i));
		}

        if(pInfo[i][pMembers] != Fraction_None && IsABand(pInfo[i][pMembers]) && GangWarStatus[pInfo[i][pMembers]] == Gang_Status_War)
        {
            new str[100];
            ConvertedSecondsWithoutText(GangWarTimer[pInfo[i][pMembers]], str);
            format(str, sizeof(str), "VS~n~~n~Time:_%s", str);
            PlayerTextDrawSetString(i, GangWarPTD[i][0], str);

            PlayerTextDrawShow(i, GangWarPTD[i][0]);
        }

		if(GetPVarInt(i, "BloodDonorTime"))
		{
			SetPVarInt(i, "BloodDonorTime", GetPVarInt(i, "BloodDonorTime")-1);

			new str[200];
			format(str, sizeof(str), "~w~%d", GetPVarInt(i, "BloodDonorTime"));
			GameTextForPlayer(i, str, 1000, 3);

			if(GetPVarInt(i, "BloodDonorTime") <= 0)
			{
				new vehicleid = GetPlayerVehicleID(i);

				if(vInfo[vehicleid][vType] == VehicleTypeFraction && vInfo[vehicleid][vOwner] == Fraction_Hospital && vInfo[vehicleid][vRenter] != -1)
				{
					if(GetPVarInt(vInfo[vehicleid][vRenter], "StartBloodVehicle") == vehicleid)
					{
						SetPVarInt(vInfo[vehicleid][vRenter], "BloodCount", GetPVarInt(vInfo[vehicleid][vRenter], "BloodCount")+1);
						str[0] = EOS;
						format(str, sizeof(str), "%s "Color_White"Сдал(а) вам "Main_Color"1л "Color_White"крови. Всего крови теперь: "Main_Color"%dл", pInfo[i][pName], GetPVarInt(vInfo[vehicleid][vRenter], "BloodCount"));
						SendClientMessage(vInfo[vehicleid][vRenter], BitColor_Main, str);

						if(GetPVarInt(vInfo[vehicleid][vRenter], "BloodCount") >= 20)
						{
							SendClientMessage(vInfo[vehicleid][vRenter], BitColor_Main, "Вы собрали 20 литров крови, вы можете доставить их в больницу чтобы получить вознаграждение");

							DeletePVar(vInfo[vehicleid][vRenter], "StartBloodVehicle");
							vInfo[vehicleid][vRenter] = -1;

							if(vInfo[vehicleid][vText] && IsValidDynamic3DTextLabel(vInfo[vehicleid][vText]))
							{
								DestroyDynamic3DTextLabel(vInfo[vehicleid][vText]);
								vInfo[vehicleid][vText] = Text3D:0;
							}
						}
					}
				}

				DeletePVar(i, "BloodDonorTime");
				TogglePlayerControllable(i, true);
				SendClientMessage(i, -1, Color_White"Вы закончили сдачу крови, вот ваше вознаграждение");
				GivePlayerMoneyEx(i, 10000);
				SetPVarInt(i, "BloodCD", 1800);
				SavePlayerInt(i, "BloodCD", GetPVarInt(i, "BloodCD"));
				RemovePlayerFromVehicle(i);
			}
		}

		if(GetPVarInt(i, "StreetRacersTime"))
		{
			PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
			SetPVarInt(i, "StreetRacersTime", GetPVarInt(i, "StreetRacersTime")-1);

			if(GetPVarInt(i, "StreetRacersTime") <= 0)
			{
				DeletePVar(i, "StreetRacersTime");
				GameTextForPlayer(i, "~w~GO", 1000, 3);
			}
			else
			{
				new str[20];
				format(str, sizeof(str), "~w~%d", GetPVarInt(i, "StreetRacersTime"));
				GameTextForPlayer(i, str, 1000, 3);
			}
		}

		if(GetPVarInt(i, "HangarTime"))
		{
			PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
			SetPVarInt(i, "HangarTime", GetPVarInt(i, "HangarTime")-1);

			if(GetPVarInt(i, "HangarTime") <= 0)
			{
				DeletePVar(i, "HangarTime");
				GameTextForPlayer(i, "~w~GO", 1000, 3);
			}
			else
			{
				new str[20];
				format(str, sizeof(str), "~w~%d", GetPVarInt(i, "HangarTime"));
				GameTextForPlayer(i, str, 1000, 3);
			}
		}

		if(GetPVarInt(i, "SpermDonorTime"))
		{
			SetPVarInt(i, "SpermDonorTime", GetPVarInt(i, "SpermDonorTime")-1);

			new str[20];
			format(str, sizeof(str), "~w~%d", GetPVarInt(i, "SpermDonorTime"));
			GameTextForPlayer(i, str, 1000, 3);

			if(GetPVarInt(i, "SpermDonorTime") <= 0)
			{
				DeletePVar(i, "SpermDonorTime");
				DeletePVar(i, "DisableTextAnim");
				TogglePlayerControllable(i, true);
				ClearAnimations(i, true);
				SendClientMessage(i, -1, Color_White"Вы закончили сдачу спермы, вот ваше вознаграждение");
				GivePlayerMoneyEx(i, 5000);
				FractionWare[Fraction_Hospital][FractionWareMoney] += 50000;
				SaveFractionWare(Fraction_Hospital);
				SetPVarInt(i, "SpermCD", 7200);
				SavePlayerInt(i, "SpermCD", GetPVarInt(i, "SpermCD"));
			}
		}

		if(PoliceSpike[i][SpikeObj])
		{
			if(PoliceSpike[i][SpikeTime]) PoliceSpike[i][SpikeTime]--;
			else if(PoliceSpike[i][SpikeTime] <= 0)
			{
				PoliceSpike[i][SpikeTime] = 0;

				if(PoliceSpike[i][SpikeObj] && IsValidDynamicObject(PoliceSpike[i][SpikeObj])) DestroyDynamicObject(PoliceSpike[i][SpikeObj]);
				PoliceSpike[i][SpikeObj] = 0;

				if(PoliceSpike[i][SpikeArea] && IsValidDynamicArea(PoliceSpike[i][SpikeArea])) DestroyDynamicArea(PoliceSpike[i][SpikeArea]);
				PoliceSpike[i][SpikeArea] = 0;
			}
		}

		if(FBIBarrier[i][BarrierObj])
		{
			if(FBIBarrier[i][BarrierTime]) FBIBarrier[i][BarrierTime]--;
			else if(FBIBarrier[i][BarrierTime] <= 0)
			{
				FBIBarrier[i][BarrierTime] = 0;

				if(FBIBarrier[i][BarrierObj] && IsValidDynamicObject(FBIBarrier[i][BarrierObj])) DestroyDynamicObject(FBIBarrier[i][BarrierObj]);
				FBIBarrier[i][BarrierObj] = 0;
			}
		}

		if(pInfo[i][pFollow] != -1)
		{
			if(AntiCheatGetSpecialAction(i) == SPECIAL_ACTION_CUFFED)
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(pInfo[i][pFollow], X, Y, Z);
				new Float:Distance = GetPlayerDistanceFromPoint(i, X, Y, Z);
				if(Distance > 20.0 || !IsPlayerStreamedIn(i, pInfo[i][pFollow]))
				{
					if(GetPVarInt(i, "FollowRun"))
					{
						ClearAnimations(i, true);
						DeletePVar(i, "FollowRun");
						TogglePlayerControllable(i, false);
					}
					TpPlayerToPlayer(pInfo[i][pFollow], i);
					SetPlayerFacingPos(i, X, Y);
				}
				else if(Distance > 2.0)
				{
					SetPlayerFacingPos(i, X, Y);
					ApplyAnimation(i, "ped", (Distance < 6.0) ? ("WALK_CIVI") : ("RUN_CIVI"), 4.1, true, true, true, false, 0, true);
					if(!GetPVarInt(i, "FollowRun")) TogglePlayerControllable(i, true);
					SetPVarInt(i, "FollowRun", 1);
				}
				else
				{
					if(GetPVarInt(i, "FollowRun"))
					{
						ClearAnimations(i, true);
						DeletePVar(i, "FollowRun");
						TogglePlayerControllable(i, false);
					}
				}
			}
			else pInfo[i][pFollow] = -1;
		}

		new indx = GetPVarInt(i, "TentRent");
		if(indx)
		{
			indx--;
			if(Tent[indx][TentTime] < gettime(i))
			{
				if(pInfo[i][pMoney] < Tent[indx][TentPrice])
				{
					SendClientMessage(i, -1, Color_Red"[Ошибка] "Color_Grey"Недостаточно средств для продления аренды за палатку");
					UnrentTent(i);
				}
				else
				{
					SetPVarInt(i, "TentRentTime", GetPVarInt(i, "TentRentTime")+1);
					if(GetPVarInt(i, "TentRentTime") >= 6)
					{
						SendClientMessage(i, -1, Color_Grey"Вы арендуете палатку 6 или более часов. Аренда окончена");
						UnrentTent(i);
					}
					else
					{
						GivePlayerMoneyEx(i, -Tent[indx][TentPrice]);
						GiveCompanyPay(i, BusinessMarketplace, Tent[indx][TentPrice]);

						Tent[indx][TentTime] = gettime()+3600;
						Tent[indx][TentPlayer] = i;
						SendClientMessage(i, -1, Color_Yellow"Аренда палатки продлена");
					}
				}
			}
		}

		if(GetPVarInt(i, "BloodCD"))
		{
			new blood = GetPVarInt(i, "BloodCD");
			blood--;
			SetPVarInt(i, "BloodCD", blood);
			if(blood <= 0)
			{
				DeletePVar(i, "BloodCD");
				SavePlayerInt(i, "BloodCD", 0);
			}
		}

		if(GetPVarInt(i, "SpermCD"))
		{
			new sperm = GetPVarInt(i, "SpermCD");
			sperm--;
			SetPVarInt(i, "SpermCD", sperm);
			if(sperm <= 0)
			{
				DeletePVar(i, "SpermCD");
				SavePlayerInt(i, "SpermCD", 0);
			}
		}

		if(GetPVarInt(i, "TentCD"))
		{
			new tent = GetPVarInt(i, "TentCD");
			tent--;
			SetPVarInt(i, "TentCD", tent);
			if(tent <= 0)
			{
				DeletePVar(i, "TentCD");
				SavePlayerInt(i, "TentCD", 0);
			}
		}

		if(GetPVarInt(i, "TruckerCD"))
		{
			new trucker = GetPVarInt(i, "TruckerCD");
			trucker--;
			SetPVarInt(i, "TruckerCD", trucker);
			if(trucker <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете отвезти груз");
				DeletePVar(i, "TruckerCD");
			}
			else if(trucker%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете отвезти груз через %d минут", trucker/60);
				SendClientMessage(i, -1, str);
			}
		}
		if(GetPVarInt(i, "CarThiefCD"))
		{
			new thief = GetPVarInt(i, "CarThiefCD");
			thief--;
			SetPVarInt(i, "CarThiefCD", thief);
			if(thief <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете угнать машину");
				DeletePVar(i, "CarThiefCD");
			}
			else if(thief%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете угнать машину через %d минут", thief/60);
				SendClientMessage(i, -1, str);
			}
		}
		if(GetPVarInt(i, "PilotCD"))
		{
			new pilot = GetPVarInt(i, "PilotCD");
			pilot--;
			SetPVarInt(i, "PilotCD", pilot);
			if(pilot <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете выйти в рейс");
				DeletePVar(i, "PilotCD");
			}
			else if(pilot%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете выйти в рейс через %d минут", pilot/60);
				SendClientMessage(i, -1, str);
			}
		}
		if(GetPVarInt(i, "BusCD"))
		{
			new bus = GetPVarInt(i, "BusCD");
			bus--;
			SetPVarInt(i, "BusCD", bus);
			if(bus <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете выйти на маршрут");
				DeletePVar(i, "BusCD");
			}
			else if(bus%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете выйти на маршрут через %d минут", bus/60);
				SendClientMessage(i, -1, str);
			}
		}
		if(GetPVarInt(i, "FisherCD"))
		{
			new fisher = GetPVarInt(i, "FisherCD");
			fisher--;
			SetPVarInt(i, "FisherCD", fisher);
			if(fisher <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете начать рыбалку");
				DeletePVar(i, "FisherCD");
			}
			else if(fisher%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете начать рыбалку через %d минут", fisher/60);
				SendClientMessage(i, -1, str);
			}
		}
		if(GetPVarInt(i, "LawyerCD"))
		{
			new lawyer = GetPVarInt(i, "LawyerCD");
			lawyer--;
			SetPVarInt(i, "LawyerCD", lawyer);
			if(lawyer <= 0)
			{
				SendClientMessage(i, -1, Color_White"Вы снова можете освободить игрока");
				DeletePVar(i, "LawyerCD");
			}
			else if(lawyer%60 == 0)
			{
				new str[100];
				format(str, sizeof(str), Color_White"Вы снова сможете освободить игрока через %d минут", lawyer/60);
				SendClientMessage(i, -1, str);
			}
		}

		if(pInfo[i][pJob] == Job_CarThief && GetPVarInt(i, "ThiefCar"))
		{
			if(GetPVarInt(i, "CarJackMiniGameStatus") == 1)
			{
				SetPVarInt(i, "CarJackMiniGame", GetPVarInt(i, "CarJackMiniGame")-1);
				if(GetPVarInt(i, "CarJackMiniGame") <= 0)
				{
					if(GetPVarInt(i, "CarJackMiniGameWinCount") >= 5)
					{
						TogglePlayerControllable(i, true);
						ClearAnim(i);
						new vehicleid = GetPVarInt(i, "ThiefCar");
						new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
						GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, false, bonnet, boot, objective);
						SendClientMessage(i, -1, Color_Yellow"Взлом удался, двери машины открыты.");
						SendClientMessage(i, -1, Color_Yellow"Отвезите машину на красный маркер чтобы сдать её.");
						pInfo[i][pGPSType] = GPS_Type_Job;
						SetPlayerCheckpoint(i, 2518.5730,-1464.0786,23.9838, 10.0);
						DeletePVar(i, "CarJackMiniGameWinCount");
						DeletePVar(i, "CarJackMiniGame");
						DeletePVar(i, "CarJackMiniGameStatus");
						DeletePVar(i, "CarJackMiniGameKeys");
					}
					else
					{
						switch(random(8))
						{
							case 0:
							{
								GameTextForPlayer(i, "~w~~k~~PED_DUCK~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_CROUCH);
							}
							case 1:
							{
								GameTextForPlayer(i, "~w~~k~~PED_SPRINT~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_SPRINT);
							}
							case 2:
							{
								GameTextForPlayer(i, "~w~~k~~VEHICLE_ENTER_EXIT~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_SECONDARY_ATTACK);
							}
							case 3:
							{
								GameTextForPlayer(i, "~w~~k~~PED_JUMPING~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_JUMP);
							}
							case 4:
							{
								GameTextForPlayer(i, "~w~~k~~SNEAK_ABOUT~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_WALK);
							}
							case 5:
							{
								GameTextForPlayer(i, "~w~~k~~CONVERSATION_YES~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_YES);
							}
							case 6:
							{
								GameTextForPlayer(i, "~w~~k~~CONVERSATION_NO~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_NO);
							}
							case 7:
							{
								GameTextForPlayer(i, "~w~~k~~GROUP_CONTROL_BWD~", 3000, 3);
								SetPVarInt(i, "CarJackMiniGameKeys", KEY_CTRL_BACK);
							}
						}
						SetPVarInt(i, "CarJackMiniGameStatus", 2);
						SetPVarInt(i, "CarJackMiniGame", 3);
					}
				}
			}
			else if(GetPVarInt(i, "CarJackMiniGameStatus") == 2)
			{
				SetPVarInt(i, "CarJackMiniGame", GetPVarInt(i, "CarJackMiniGame")-1);
				if(GetPVarInt(i, "CarJackMiniGame") <= 0)
				{
					TogglePlayerControllable(i, true);
					ClearAnim(i);
					new vehicleid = GetPVarInt(i, "ThiefCar");
					new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
					GetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vInfo[vehicleid][vServerID], engine, lights, true, doors, bonnet, boot, objective);
					SendClientMessage(i, -1, Color_Yellow"Взлом не удался, у машины сработала сигнализация, она отправила сигнал SOS в полицию.");
					DeletePVar(i, "CarJackMiniGameWinCount");
					DeletePVar(i, "CarJackMiniGame");
					DeletePVar(i, "CarJackMiniGameStatus");
					DeletePVar(i, "CarJackMiniGameKeys");
				}
			}
		}
		else if(GetPVarInt(i, "UnOfficialJob") == Job_FarmDeliver && GetPVarInt(i, "FarmDeliverUnloadTimer"))
		{
			new vehicleid = GetPVarInt(i, "RentedCar");
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_FarmDeliver && vInfo[vehicleid][vModel] != 530 && GetPVarInt(i, "FarmDeliverStage") == 3)
			{
				new time = GetPVarInt(i, "FarmDeliverUnloadTimer");
				time--;
				SetPVarInt(i, "FarmDeliverUnloadTimer", time);
				if(time <= 0)
				{
					DeletePVar(i, "FarmDeliverUnloadTimer");

					SendClientMessage(i, -1, Color_White"За разгрузку вы получили"Color_Green" 10.000$");
					GivePlayerMoneyEx(i, 10000);

					for(new j = 0; j < MaxAttachedObjOnVehicle; j++) RemoveVehicleAttachObj(vehicleid, j);

					DeletePVar(i, "FarmDeliverType");
					DeletePVar(i, "FarmDeliverStage");

					SetFarmDeliverMarker(i);
				}
				else if(time)
				{
					new str[100];
					format(str, sizeof(str), "~w~UNLOAD: %d Sec", time);
					GameTextForPlayer(i, str, 1000, 3);
				}
			}
		}
		else if(pInfo[i][pJob] == Job_TrashCollector && GetPVarInt(i, "TrashUnloadTimer"))
		{
			new vehicleid = GetPVarInt(i, "RentedCar");
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_TrashCollector)
			{
				new time = GetPVarInt(i, "TrashUnloadTimer");
				time--;
				SetPVarInt(i, "TrashUnloadTimer", time);
				if(time <= 0)
				{
					DeletePVar(i, "TrashUnloadTimer");
					new str[100];
					new money;

					UpdatePlayerSkill(i, vInfo[vehicleid][vItemInVehicle]);

					switch(pInfo[i][pSkill][Job_TrashCollector])
					{
						case 1: money = 150;
						case 2: money = 250;
						case 3: money = 350;
						case 4: money = 400;
						case 5: money = 500;
					}

					money *= vInfo[vehicleid][vItemInVehicle];

					format(str, sizeof(str), Color_White"Вы доставили мусор, к вашей зарплате прибавлено"Color_Green" %d$", money);
					SendClientMessage(i, -1, str);

					GivePlayerMoneyInPayDay(i, money);

					vInfo[vehicleid][vItemInVehicle] = 0;
					UpdateDynamic3DTextLabelText(vInfo[vehicleid][vText], -1, Main_Color"Мусорных мешков загружено: 0");
					SetPVarInt(i, "TrashBinCount", 3);
					SetTrashCollectorMarker(i);
				}
				else if(time)
				{
					new str[100];
					format(str, sizeof(str), "~w~UNLOAD: %d Sec", time);
					GameTextForPlayer(i, str, 1000, 3);
				}
			}
		}
		else if(pInfo[i][pJob] == Job_Fisher && GetPVarInt(i, "FishUnloadTimer"))
		{
			new vehicleid = GetPVarInt(i, "RentedCar");
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher)
			{
				new time = GetPVarInt(i, "FishUnloadTimer");
				time--;
				SetPVarInt(i, "FishUnloadTimer", time);
				if(time <= 0)
				{
					DeletePVar(i, "FishUnloadTimer");
					new str[100];

					UpdatePlayerSkill(i, vInfo[vehicleid][vItemInVehicle]);

					new money = 200+(100*pInfo[i][pSkill][Job_Fisher]);
					money *= vInfo[vehicleid][vItemInVehicle];

					format(str, sizeof(str), Color_White"Вы доставили рыбу, к вашей зарплате прибавлено"Color_Green" %d$", money);
					SendClientMessage(i, -1, str);

					GivePlayerMoneyInPayDay(i, money);

					RemoveRentedCar(i);
					switch(pInfo[i][pSkill][Job_Fisher])
					{
						case 1:
						{
							SetPVarInt(i, "FisherCD", 1200);
							SendClientMessage(i, -1, Color_Yellow"Вы можете начать следующую рыбалку через 20 минут");
						}
						case 2:
						{
							SetPVarInt(i, "FisherCD", 1080);
							SendClientMessage(i, -1, Color_Yellow"Вы можете начать следующую рыбалку через 18 минут");
						}
						case 3:
						{
							SetPVarInt(i, "FisherCD", 960);
							SendClientMessage(i, -1, Color_Yellow"Вы можете начать следующую рыбалку через 16 минут");
						}
						case 4:
						{
							SetPVarInt(i, "FisherCD", 900);
							SendClientMessage(i, -1, Color_Yellow"Вы можете начать следующую рыбалку через 15 минут");
						}
						case 5:
						{
							SetPVarInt(i, "FisherCD", 600);
							SendClientMessage(i, -1, Color_Yellow"Вы можете начать следующую рыбалку через 10 минут");
						}
					}
					SetPlayerPosition(i, 2102.4199, -104.1432, 2.2846, 305.3293, 0, 0);
				}
				else if(time)
				{
					new str[100];
					format(str, sizeof(str), "~w~UNLOAD: %d Sec", time);
					GameTextForPlayer(i, str, 1000, 3);
				}
			}
		}
		else if(pInfo[i][pJob] == Job_Fisher && GetPVarInt(i, "FishingTime"))
		{
			new vehicleid = GetPVarInt(i, "RentedCar");
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Fisher)
			{
				new time = GetPVarInt(i, "FishingTime");
				time--;
				new str[100];
				format(str, sizeof(str), "Fishing_%d_Sec", time);
				PlayerTextDrawSetString(i, FisherPTD[i], str);
				PlayerTextDrawShow(i, FisherPTD[i]);
				SetPVarInt(i, "FishingTime", time);
				if(time <= 0)
				{
					DeletePVar(i, "FishingTime");
					SendClientMessage(i, -1, Color_Yellow"Вы не успели поймать всю рыбу из косяка");
					HideFisherPanel(i);
					SetFisherMarker(i);
				}
			}
		}
		else if(pInfo[i][pJob] == Job_Bus && GetPVarInt(i, "BusTime"))
		{
			new vehicleid = GetPVarInt(i, "RentedCar");
			if(vInfo[vehicleid][vType] == VehicleTypeJob && vInfo[vehicleid][vOwner] == Job_Bus)
			{
				new time = GetPVarInt(i, "BusTime");
				time--;
				SetPVarInt(i, "BusTime", time);
				if(time <= 0)
				{
					DeletePVar(i, "BusTime");
					if(GetPVarInt(i, "BusRouteStage") == 4)
					{
						TogglePlayerControllable(i, true);
						SetPlayerRaceCheckpoint(i, 2, -1591.2411,-2735.4919,48.5391, 0.0, 0.0, 0.0, 10.0);
						pInfo[i][pGPSType] = GPS_Type_Job;
						SendClientMessage(i, -1, Color_Yellow"Маршрут завершен, отправляйтесь к стоянке автобусов");
					}
					else
					{
						TogglePlayerControllable(i, true);
						SetBusMarker(i);
					}

				}
				else if(time)
				{
					new str[100];
					format(str, sizeof(str), "~w~WAIT: %d Sec", time);
					GameTextForPlayer(i, str, 1000, 3);
				}
			}
		}

		if(pInfo[i][pMute])
		{
			pInfo[i][pMute]--;
			if(pInfo[i][pMute] <= 0)
			{
				pInfo[i][pMute] = 0;
				SavePlayerInt(i, "Mute", pInfo[i][pMute]);
				SendClientMessage(i, -1, Color_Yellow"Ваш мут закончился, вы снова можете пользоваться чатом. Впредь не нарушайте правила!");
			}
		}
		if(pInfo[i][pDemorgan])
		{
			pInfo[i][pDemorgan]--;

			if(GetPVarInt(i, "DemorganCD"))
			{
				SetPVarInt(i, "DemorganCD", GetPVarInt(i, "DemorganCD")-1);
				if(GetPVarInt(i, "DemorganCD") <= 0) DeletePVar(i, "DemorganCD");
			}

			if(pInfo[i][pDemorgan] <= 0)
			{
				pInfo[i][pDemorgan] = 0;
				SavePlayerInt(i, "Demorgan", pInfo[i][pDemorgan]);
				SendClientMessage(i, -1, Color_Yellow"Ваше время заключения в деморгане закончилось. Впредь не нарушайте правила!");
				SpawnPlayer(i);
			}
			else
			{
				if(!IsPlayerInDynamicArea(i, Areas[DemorganArea]) && !GetPVarInt(i, "DemorganCD") && !GetPVarInt(i, "FirstSpawn"))
				{
					new str[80];
					format(str, sizeof(str), "%s[%d] пытался покинуть деморган", pInfo[i][pName], i);
					SendAdminMessage(str);
					new rand = random(sizeof(RandomDemorganPos));
					SetPlayerPosition(i, RandomDemorganPos[rand][0], RandomDemorganPos[rand][1], RandomDemorganPos[rand][2], RandomDemorganPos[rand][3], 2, 0);
					SetSkin(i, 264, true);
				}
			}
		}
		else if(!pInfo[i][pDemorgan] && pInfo[i][pJail])
		{
			if(GetPVarInt(i, "JailCD"))
			{
				SetPVarInt(i, "JailCD", GetPVarInt(i, "JailCD")-1);
				if(GetPVarInt(i, "JailCD") <= 0) DeletePVar(i, "JailCD");
			}

			new PickupID = GetPVarInt(i, "InPickup");
			if(PickupID && PickupID-1 == PrisonEnter)
			{
				if(!IsPlayerInDynamicArea(i, Areas[JailMineArea]) && !GetPVarInt(i, "JailCD") && !GetPVarInt(i, "FirstSpawn"))
				{
					new str[80];
					format(str, sizeof(str), "%s[%d] пытался покинуть шахту тюрьмы", pInfo[i][pName], i);
					SendAdminMessage(str);

					if(IsPlayerAttachedObjectSlotUsed(i, AttachSlotJob))
					{
						if(GetPVarInt(i, "MetallCount")) RemoveCarriedObj(i, false);
						else RemovePlayerAttachedObject(i, AttachSlotJob);
					}

					SetPlayerPosition(i, 234.3806, 1957.0878, 18.3294, 89.9933, 0, 0);
				}
			}
			else
			{
				if(!IsPlayerInDynamicArea(i, Areas[JailArea]) && !GetPVarInt(i, "JailCD") && !GetPVarInt(i, "FirstSpawn"))
				{
					new str[80];
					format(str, sizeof(str), "%s[%d] пытался покинуть тюрьму", pInfo[i][pName], i);
					SendAdminMessage(str);

					SetPlayerPosition(i, 234.3806, 1957.0878, 18.3294, 89.9933, 0, 0);
				}
			}
		}
	}

	if(BotStatus)
	{
		if(Iter_Count(Player) < BotTime[hour]) mysql_tquery(DB, "SELECT * FROM `bot_name`", "ConnectBots", "");
		else if(BotCount && Iter_Count(Player) > BotTime[hour])
		{
			foreach(new i: Player)
			{
				if(BotTime[hour] >= Iter_Count(Player) || !BotCount) break;
				if(IsBot[i])
				{
					Kick(i);
					break;
				}
			}
		}
	}

}

stock RemoveRentedCar(playerid)
{
	if(GetPVarInt(playerid, "RentedCar"))
	{
		new vehicleid = GetPVarInt(playerid, "RentedCar");
		SetVehicleToRespawn(vInfo[vehicleid][vServerID]);

		if(vInfo[vehicleid][vType] == VehicleTypeJob)
		{
			if(vInfo[vehicleid][vOwner] == Job_Trucker)
			{
				if(TruckerQueue[0] == playerid)
				{
					TruckerStatus = 0;
					TruckerTimer = 0;
				}
				RemoveTruckerQueue(playerid);
			}
		}
	}
	return 1;
}

forward RemoveTrailer(playerid, bool:msg);
public RemoveTrailer(playerid, bool:msg)
{
	if(GetPVarInt(playerid, "TrailerID"))
	{
		ClearVehicle(GetPVarInt(playerid, "TrailerID"));
		if(msg) SendClientMessage(playerid, -1,  Color_Yellow"Ваш прицеп был возвращен.");
		DeletePVar(playerid, "TrailerID");
		if(GetPVarInt(playerid, "TrailerTimer"))
		{
			KillTimer(GetPVarInt(playerid, "TrailerTimer"));
			DeletePVar(playerid, "TrailerTimer");
		}
		if(pInfo[playerid][pGPSType] == GPS_Type_Job)
		{
			DisablePlayerRaceCheckpoint(playerid);
			pInfo[playerid][pGPSType] = GPS_Type_None;
		}
	}
	return 1;
}

stock RemoveLoader(playerid)
{
	new vehicleid = GetPVarInt(playerid, "LoaderID");
	if(vehicleid)
	{
		DeletePVar(playerid, "LoaderID");
		SetVehicleToRespawn(vInfo[vehicleid][vServerID]);
	}
	return 1;
}

stock AuthAdmin(playerid)
{
    if(Iter_Count(Admins) >= MAX_ADMINS) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Авторизировано максимальное количество администраторов. Обратитесь в технический раздел");
    Iter_Add(Admins, playerid);
	SetPVarInt(playerid, "AdmAuth", 1);
	new str[200];
	GetPlayerIp(playerid, str, 16);
	format(str, sizeof(str), "%s %s авторизировался в админ панели (RegIP: %s | IP: %s)", AdminNames[pInfo[playerid][pAdmin]], pInfo[playerid][pName], pInfo[playerid][pRegIp], str);
	SendAdminMessage(str);
	DeactivateAntiCheat(playerid);
	RemovePlayerOnCheaterPanel(playerid);
	ShowCheaterPanelTD(playerid);
    return 1;
}

stock IsSecurityAgency(FractionID)
{
	switch(FractionID)
	{
		case Fraction_Police: return true;
		case Fraction_Army: return true;
		case Fraction_FBI: return true;
	}
	return false;
}

stock IsGovFraction(FractionID)
{
	switch(FractionID)
	{
		case Fraction_Police: return true;
		case Fraction_Army: return true;
		case Fraction_FBI: return true;
	}
	return false;
}

stock IsABand(FractionID)
{
	if(FractionID == Fraction_Vagos || FractionID == Fraction_Ballas || FractionID == Fraction_Aztecas || FractionID == Fraction_Grove || FractionID == Fraction_Rifa
	|| FractionID == Fraction_StreetRacers || FractionID == Fraction_Bikers || FractionID == Fraction_FarmOfTruth) return true;
	else return false;
}

stock CanUseRChat(FractionID)
{
	if(IsGovFraction(FractionID) || FractionID == Fraction_Hospital || FractionID == Fraction_Taxi || FractionID == Fraction_SanNews) return true;
	else return false;
}

stock CanUseFChat(FractionID)
{
	if(IsABand(FractionID)) return true;
	else return false;
}

stock SendRMessage(playerid, const message[])
{
	if(pInfo[playerid][pMembers] == Fraction_None || pInfo[playerid][pRank] <= 0) return 1;
	if(CanUseRChat(pInfo[playerid][pMembers]))
	{
		foreach(new i: Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == pInfo[playerid][pMembers]) SendClientMessage(i, BitColor_R, message);
		}
	}
	else if(CanUseFChat(pInfo[playerid][pMembers]))
	{
		foreach(new i: Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == pInfo[playerid][pMembers]) SendClientMessage(i, BitColor_F, message);
		}
	}
	return 1;
}

stock SendRMessageEx(members, const message[])
{
	if(members == Fraction_None) return 1;
	if(CanUseRChat(members))
	{
		foreach(new i: Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == members) SendClientMessage(i, BitColor_R, message);
		}
	}
	else if(CanUseFChat(members))
	{
		foreach(new i: Player)
		{
			if(pInfo[i][pAuth] && pInfo[i][pMembers] == members) SendClientMessage(i, BitColor_F, message);
		}
	}
	return 1;
}

stock SendDMessage(playerid, const message[])
{
	if(pInfo[playerid][pMembers] == Fraction_None || pInfo[playerid][pRank] <= 0) return 1;
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] != Fraction_None && IsGovFraction(pInfo[i][pMembers])) SendClientMessage(i, BitColor_D, message);
	}
	return 1;
}

stock SendGovMessage(playerid, const message[])
{
	if(pInfo[playerid][pMembers] == Fraction_None || pInfo[playerid][pRank] <= 0) return 1;
	new FormatedMessage[200];
	format(FormatedMessage, sizeof(FormatedMessage), "%s[%d]: %s", pInfo[playerid][pName], playerid, message);
	new TitleMessage[145];
	new EndTitleMessage[145];
	switch(pInfo[playerid][pMembers])
	{
		case Fraction_Police: strcat(TitleMessage, "|_____________________________________________Полицейские новости штата_____________________________________________|");
		case Fraction_Army: strcat(TitleMessage, "|_____________________________________________Новости армии штата_____________________________________________|");
		case Fraction_FBI: strcat(TitleMessage, "|_____________________________________________Федеральные новости штата_____________________________________________|");
		case Fraction_Hospital: strcat(TitleMessage, "|_____________________________________________Медицинские новости штата_____________________________________________|");
		case Fraction_Taxi: strcat(TitleMessage, "|_____________________________________________Новости таксопарка штата_____________________________________________|");
		default: return 1;
	}
	new TitleLength = strlen(TitleMessage)-2;
	strcat(EndTitleMessage, "|");
	for(new i = 0; i <= TitleLength; i++)
	{
		strcat(EndTitleMessage, "_");
	}
	strcat(EndTitleMessage, "|");
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth])
		{
			SendClientMessage(i, BitColor_White, TitleMessage);
			SendClientMessage(i, BitColor_GOV, FormatedMessage);
			SendClientMessage(i, BitColor_White, EndTitleMessage);
		}
	}
	return 1;
}

stock SendAdminMessage(const message[])
{
	new FormatedMessage[145];
	format(FormatedMessage, sizeof(FormatedMessage), Main_Color"[A]"Color_Blue" %s", message);
	foreach(new i: Admins)
	{
		if(pInfo[i][pAuth] && pInfo[i][pAdmin] && GetPVarInt(i, "AdmAuth")) SendClientMessage(i, -1, FormatedMessage);
	}
	return 1;
}

stock SendAllMessage(const message[])
{
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth])
		{
			SendClientMessage(i, -1, message);
		}
	}
	return 1;
}

stock SendOOCMessage(const message[])
{
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pToggleOOC])
		{
			SendClientMessage(i, -1, message);
		}
	}
	return 1;
}

stock SendADMessage(const message[])
{
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pToggleAD])
		{
			SendClientMessage(i, -1, message);
		}
	}
	return 1;
}

stock PlayerStartMusic(playerid, MusicID)
{
	PlayerPlaySound(playerid, MusicID, 0.0, 0.0, 0.0);
	SetPVarInt(playerid, "MusicID", MusicID);
	/*switch(random(7))
	{
		case 0:
		{
			PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1062);
		}
		case 1:
		{
			PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1068);
		}
		case 2:
		{
			PlayerPlaySound(playerid, 1076, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1076);
		}
		case 3:
		{
			PlayerPlaySound(playerid, 1097, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1097);
		}
		case 4:
		{
			PlayerPlaySound(playerid, 1183, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1183);
		}
		case 5:
		{
			PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1185);
		}
		case 6:
		{
			PlayerPlaySound(playerid, 1187, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "MusicID", 1187);
		}
	}*/
}

forward StopMusic(playerid);
public StopMusic(playerid)
{
	if(GetPVarInt(playerid, "MusicID"))
	{
		PlayerPlaySound(playerid, GetPVarInt(playerid, "MusicID")+1, 0.0, 0.0, 0.0);
		DeletePVar(playerid, "MusicID");
	}
	return 1;
}

stock DistancePointToPoint(Float: x, Float: y, Float: z, Float: fx, Float:fy, Float: fz) return floatround(floatsqroot(floatpower(fx - x, 2) + floatpower(fy - y, 2) + floatpower(fz - z, 2)));

stock SavePlayerInt(playerid, const ColumnName[], Value)
{
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, Value, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
}

stock SavePlayerFloat(playerid, const ColumnName[], Float:Value)
{
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `%s` = '%f' WHERE `ID` = '%d'", ColumnName, Value, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
}

stock SavePlayerStr(playerid, const ColumnName[], const Value[])
{
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `%s` = '%e' WHERE `ID` = '%d'", ColumnName, Value, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
}

stock SavePlayerBool(playerid, const ColumnName[], bool:Value)
{
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, _:Value, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
}

stock AddPlayerSkins(playerid, SkinID)
{
	for(new i = 0; i < MAX_PLAYER_SKINS; i++)
	{
		if(!pInfo[playerid][pSkins][i])
		{

			if(GetPVarInt(playerid, "SkinSelect"))
			{
				new indx = GetPVarInt(playerid, "SkinIndx");
				if(pInfo[playerid][pGender])
				{
					if(pInfo[playerid][pMoney] < SkinFemale[indx][1])
					{
						DeletePVar(playerid, "SkinChanged");
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
					}
					GivePlayerMoneyEx(playerid, -SkinFemale[indx][1]);

					pInfo[playerid][pSkins][i] = SkinID;
					pInfo[playerid][pSkin] = i;
					SavePlayerSkins(playerid);

					HideSkinSelect(playerid);
					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);

					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += SkinFemale[indx][1];
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
				else
				{
					if(pInfo[playerid][pMoney] < SkinMale[indx][1])
					{
						DeletePVar(playerid, "SkinChanged");
						return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно средств");
					}
					GivePlayerMoneyEx(playerid, -SkinMale[indx][1]);

					pInfo[playerid][pSkins][i] = SkinID;
					pInfo[playerid][pSkin] = i;
					SavePlayerSkins(playerid);

					HideSkinSelect(playerid);
					new BusinessID = GetPVarInt(playerid, "InBusiness");
					ActivateBusinessActors(playerid, BusinessID);

					if(bInfo[BusinessID][bOwnerID])
					{
						bInfo[BusinessID][bMoney] += SkinMale[indx][1];
						SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
					}
				}
			}
			else
			{
				pInfo[playerid][pSkins][i] = SkinID;
				pInfo[playerid][pSkin] = i;
				SavePlayerSkins(playerid);
				SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
			}
			return 1;
		}
	}
	SetPVarInt(playerid, "SkinChanged", SkinID+1);
	SendClientMessage(playerid, -1, Color_White"У вас нет свободного места в гардеробе, выберите на что вы хотите заменить новый скин");
	ShowPlayerSkinList(playerid);
	return 1;
}

stock SavePlayerSkins(playerid)
{
	new query[300];
	for(new i = 0; i < MAX_PLAYER_SKINS; i++)
	{
		if(!strlen(query)) format(query, sizeof(query), "%d", pInfo[playerid][pSkins][i]);
		else format(query, sizeof(query), "%s,%d", query, pInfo[playerid][pSkins][i]);
	}
	SavePlayerInt(playerid, "Skin", pInfo[playerid][pSkin]);
	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `Skins` = '%s' WHERE `ID` = '%d'", query, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
}

stock SavePlayerWeapon(playerid)
{
	new query[300];
	new strAmmo[100];
	for(new i = 0; i < 13; i++)
	{
		AntiCheatGetWeaponData(playerid, i, pInfo[playerid][pWeapon][i], pInfo[playerid][pAmmo][i]);
		if(pInfo[playerid][pWeapon][i] && pInfo[playerid][pAmmo][i])
		{
			if(!strlen(query)) format(query, sizeof(query), "%d", pInfo[playerid][pWeapon][i]);
			else format(query, sizeof(query), "%s,%d", query, pInfo[playerid][pWeapon][i]);

			if(!strlen(strAmmo)) format(strAmmo, sizeof(strAmmo), "%d", pInfo[playerid][pAmmo][i]);
			else format(strAmmo, sizeof(strAmmo), "%s,%d", strAmmo, pInfo[playerid][pAmmo][i]);
		}
		else
		{
			pInfo[playerid][pWeapon][i] = 0;
			pInfo[playerid][pAmmo][i] = 0;

			if(!strlen(query)) format(query, sizeof(query), "0");
			else format(query, sizeof(query), "%s,0", query);

			if(!strlen(strAmmo)) format(strAmmo, sizeof(strAmmo), "0");
			else format(strAmmo, sizeof(strAmmo), "%s,0", strAmmo);
		}
	}
	mysql_format(DB, query, sizeof(query), "UPDATE `account` SET `Weapon` = '%s', `Ammo` = '%s' WHERE `ID` = '%d'", query, strAmmo, pInfo[playerid][pID]);
	mysql_tquery(DB, query);
	return 1;
}

stock GiveAllGun(playerid)
{
	for(new i = 0; i < 13; i++)
	{
		if(pInfo[playerid][pWeapon][i])
		{
			if(pInfo[playerid][pAmmo][i]) GivePlayerGun(playerid, pInfo[playerid][pWeapon][i], pInfo[playerid][pAmmo][i]);
			else
			{
				pInfo[playerid][pWeapon][i] = 0;
				pInfo[playerid][pAmmo][i] = 0;
			}
		}
	}
	return 1;
}

stock GetWeaponSlot(weaponid)
{
    switch(weaponid)
    {
        case 1: return 0;
        case 2..9: return 1;
        case 22..24: return 2;
        case 25..27: return 3;
        case 28, 29, 32: return 4;
        case 30, 31: return 5;
        case 33, 34: return 6;
        case 35..38: return 7;
        case 16..18, 39: return 8;
        case 41..43: return 9;
        case 10..15: return 10;
        case 44..46: return 11;
        case 40: return 12;
    }
    return -1;
}

stock GivePlayerGun(playerid, weaponid, ammo)
{
	new slot = GetWeaponSlot(weaponid);
	if(slot == -1 || pInfo[playerid][pDemorgan] || pInfo[playerid][pJail]) return -1;

	pInfo[playerid][pWeapon][slot] = AntiCheatGetWeaponInSlot(playerid, slot);
	pInfo[playerid][pAmmo][slot] = AntiCheatGetAmmoInSlot(playerid, slot);

	if(pInfo[playerid][pWeapon][slot] == weaponid && pInfo[playerid][pAmmo][slot])
	{
		pInfo[playerid][pAmmo][slot] += ammo;
		GivePlayerWeapon(playerid, pInfo[playerid][pWeapon][slot], ammo);
	}
	else
	{
		pInfo[playerid][pWeapon][slot] = weaponid;
		pInfo[playerid][pAmmo][slot] = ammo;
		GivePlayerWeapon(playerid, pInfo[playerid][pWeapon][slot], pInfo[playerid][pAmmo][slot]);
	}
	return 1;
}

stock UpdatePlayerWeapon(playerid)
{
	for(new i = 0; i < 13; i++) AntiCheatGetWeaponData(playerid, i, pInfo[playerid][pWeapon][i], pInfo[playerid][pAmmo][i]);
	return 1;
}

stock TakePlayerGun(playerid, weaponid, ammo=0)
{
	new slot = GetWeaponSlot(weaponid);
	if(slot == -1) return 1;

	if(pInfo[playerid][pWeapon][slot] != weaponid) return 1;

	if(!ammo)
	{
		pInfo[playerid][pWeapon][slot] = 0;
		pInfo[playerid][pAmmo][slot] = 0;
	}
	else
	{
		if(pInfo[playerid][pAmmo][slot] > ammo)
		{
			pInfo[playerid][pAmmo][slot] -= ammo;
		}
		else
		{
			pInfo[playerid][pWeapon][slot] = 0;
			pInfo[playerid][pAmmo][slot] = 0;
		}
	}

	ResetPlayerWeapons(playerid);
	GiveAllGun(playerid);
	return 1;
}

stock SavePlayerInventory(playerid)
{
	new query[300];

	mysql_format(DB, query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", pInfo[playerid][pID]);
	mysql_tquery(DB, query);

	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID] && pInventory[playerid][i][ItemCount])
		{
			query[0] = EOS;
			mysql_format(DB, query, sizeof(query), "INSERT INTO `inventory`(`ID`, `ItemID`, `ItemCount`) VALUES ('%d', '%d', '%d')", pInfo[playerid][pID], pInventory[playerid][i][ItemID], pInventory[playerid][i][ItemCount]);
			mysql_tquery(DB, query);
		}
	}
}

stock GetFreeSlotInventory(playerid)
{
	new count = 0;
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(!pInventory[playerid][i][ItemID]) count++;
	}
	return count;
}

stock AddPlayerInventory(playerid, ItemsID, Count = 1)
{
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID] == ItemsID)
		{

			if(Items[pInventory[playerid][i][ItemID]][StackLimit] <= pInventory[playerid][i][ItemCount]+Count || Items[pInventory[playerid][i][ItemID]][StackLimit] == -1)
			{
				pInventory[playerid][i][ItemCount] += Count;
				SavePlayerInventory(playerid);
				return true;
			}
			else
			{
				new FreeCount = Items[pInventory[playerid][i][ItemID]][StackLimit]-pInventory[playerid][i][ItemCount];

				new NeedFreeSlot = (Count-FreeCount)/Items[pInventory[playerid][i][ItemID]][StackLimit];
				if((Count-FreeCount)%Items[pInventory[playerid][i][ItemID]][StackLimit]) NeedFreeSlot++;

				if(NeedFreeSlot > GetFreeSlotInventory(playerid)) return false;

				pInventory[playerid][i][ItemCount] += FreeCount;
				Count -= FreeCount;
				SavePlayerInventory(playerid);
				if(!Count) return true;
			}
		}
		else if(pInventory[playerid][i][ItemID] == ItemNone)
		{
			if(Items[pInventory[playerid][i][ItemID]][StackLimit] == -1)
			{
				pInventory[playerid][i][ItemID] = ItemsID;
				pInventory[playerid][i][ItemCount] += Count;
				SavePlayerInventory(playerid);
				return true;
			}
			else
			{
				new FreeCount = 0;
				if(Count > Items[pInventory[playerid][i][ItemID]][StackLimit]) FreeCount = Items[pInventory[playerid][i][ItemID]][StackLimit];
				else FreeCount = Count;

				new NeedFreeSlot = (Count-FreeCount)/Items[pInventory[playerid][i][ItemID]][StackLimit];
				if((Count-FreeCount)%Items[pInventory[playerid][i][ItemID]][StackLimit]) NeedFreeSlot++;

				if(NeedFreeSlot > GetFreeSlotInventory(playerid)) return false;

				pInventory[playerid][i][ItemID] = ItemsID;
				pInventory[playerid][i][ItemCount] += FreeCount;
				Count -= FreeCount;
				SavePlayerInventory(playerid);
				if(!Count) return true;
			}
		}
	}
	return false;
}

stock GetItemCountInInventory(playerid, ItemsID)
{
	new count = 0;
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID] == ItemsID) count += pInventory[playerid][i][ItemCount];
	}
	return count;
}

stock ResortItemInventory(playerid)
{
	new FreeSlot = -1;
	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID] == ItemNone && FreeSlot == -1) FreeSlot = i;
		else
		{
			if(FreeSlot != -1)
			{
				pInventory[playerid][FreeSlot][ItemID] = pInventory[playerid][i][ItemID];
				pInventory[playerid][FreeSlot][ItemCount] = pInventory[playerid][i][ItemCount];
				pInventory[playerid][i][ItemID] = ItemNone;
				pInventory[playerid][i][ItemCount] = 0;
				FreeSlot = i;
			}
		}
	}
	return true;
}

stock RemovePlayerInventory(playerid, ItemsID, Count = 1)
{
	if(GetItemCountInInventory(playerid, ItemsID) < Count) return false;

	for(new i = 0; i < sizeof(pInventory[]); i++)
	{
		if(pInventory[playerid][i][ItemID] == ItemsID)
		{
			if(pInventory[playerid][i][ItemCount] >= Count)
			{
				pInventory[playerid][i][ItemCount] -= Count;
				Count = 0;
			}
			else
			{
				Count -= pInventory[playerid][i][ItemCount];
				pInventory[playerid][i][ItemCount] = 0;
			}

			if(!pInventory[playerid][i][ItemCount])
			{
				pInventory[playerid][i][ItemID] = ItemNone;
			}

			ResortItemInventory(playerid);
			SavePlayerInventory(playerid);
			if(!Count) return true;
		}
	}

	return false;
}

stock GetFreeDropedSlot()
{
	new indx = -1;
	for(new i = 0; i < MAX_DROPED; i++)
	{
		if(DropedItems[i][DropItemID] == ItemNone || DropedItems[i][DropItemTime] < gettime())
		{
			ClearDrop(i);
			indx = i;
		}
	}
	return indx;
}

stock DropPlayerInventory(playerid, ItemsID, Count = 1)
{
	if(GetItemCountInInventory(playerid, ItemsID) < Count) return false;
	if(!Items[ItemsID][ItemID]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Этот предмет нельзя выкинуть на землю");
	new indx = GetFreeDropedSlot();
	if(indx != -1)
	{
		new Float:X, Float:Y, Float:Z, virtualworld, interiorid;
		virtualworld = GetPlayerVirtualWorld(playerid);
		interiorid = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, X, Y, Z);
		RemovePlayerInventory(playerid, ItemsID, Count);
		if(!virtualworld && !interiorid) MapAndreas_FindZ_For2DCoord(X, Y, Z);
		else Z -= 0.5;
		DropedItems[indx][DropItemID] = ItemsID;
		DropedItems[indx][DropItemCount] = Count;
		DropedItems[indx][DropItemObjID] = CreateDynamicObject(Items[ItemsID][ItemID], X, Y, Z+0.1, 0.0, 0.0, 0.0, virtualworld, interiorid);
		DropedItems[indx][DropItemArea] = CreateDynamicSphere( X, Y, Z+0.1, 2.0, virtualworld, interiorid);
		DropedItems[indx][DropItemTime] = gettime()+300;

		ApplyAnimation(playerid, "BOMBER","BOM_PLANT", 2.0, false, false, false, false, 0, true);
		new str[100];
		format(str, sizeof(str), "выбросил(а) %s на землю", Items[ItemsID][ItemName]);
		ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
	}
	return true;
}

stock UsePlayerInventory(playerid, ItemsID, Count = 1)
{
	if(GetItemCountInInventory(playerid, ItemsID) < Count) return false;
	switch(ItemsID)
	{
		case ItemWatch: pc_cmd_time(playerid);
		case ItemRoller: pc_cmd_roll(playerid);
		case ItemFrenchFries:
		{
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");
			Eat(playerid, 5.0, Items[ItemsID][ItemName]);
			RemovePlayerInventory(playerid, ItemsID);
		}
		case ItemNuggets, ItemWing:
		{
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");
			Eat(playerid, 15.0, Items[ItemsID][ItemName]);
			RemovePlayerInventory(playerid, ItemsID);
		}
		case ItemBurger:
		{
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");
			Eat(playerid, 35.0, Items[ItemsID][ItemName]);
			RemovePlayerInventory(playerid, ItemsID);
		}
		case ItemBigBurger:
		{
			if(pInfo[playerid][pHealth] >= 100.0) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы здоровы");
			Eat(playerid, 50.0, Items[ItemsID][ItemName]);
			RemovePlayerInventory(playerid, ItemsID);
		}
		case ItemDrugs: pc_cmd_usedrugs(playerid, "1");
		default:
		{
			if(Items[ItemsID][WeaponsID])
			{
				if(GivePlayerGun(playerid, Items[ItemsID][WeaponsID], Items[ItemsID][AmmoCount]) == -1) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"Вы не можете сейчас достать оружие");
				RemovePlayerInventory(playerid, ItemsID);
				new str[100];
				format(str, sizeof(str), "достал(а) %s", Items[ItemsID][ItemName]);
				ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, str);
			}
		}
	}
	return true;
}

stock UpdatePlayerSkill(playerid, ExpCount = 1)
{
	if(pInfo[playerid][pJob] != Job_None)
	{
		new JobID = pInfo[playerid][pJob];
		if(pInfo[playerid][pSkill][JobID]+1 <= Jobs[JobID][MaxSkillLevel])
		{
			pInfo[playerid][pSkillExp][JobID] += ExpCount;
			if(pInfo[playerid][pSkillExp][JobID] >= Jobs[JobID][JobLeveling][pInfo[playerid][pSkill][JobID]])
			{
				new str[200];
				pInfo[playerid][pSkill][JobID]++;
				pInfo[playerid][pSkillExp][JobID] = 0;

				format(str, sizeof(str), Color_White"Ваш уровень"Main_Color" %sа "Color_White"повышен!", Jobs[JobID][JobNames]);
				SendClientMessage(playerid, -1, str);
			}
			SavePlayerSkill(playerid);
		}
	}
}

stock UpdatePlayerSkillEx(playerid, JobID, ExpCount = 1)
{
	if(pInfo[playerid][pSkill][JobID]+1 <= Jobs[JobID][MaxSkillLevel])
	{
		pInfo[playerid][pSkillExp][JobID] += ExpCount;
		if(pInfo[playerid][pSkillExp][JobID] >= Jobs[JobID][JobLeveling][pInfo[playerid][pSkill][JobID]])
		{
			new str[200];
			pInfo[playerid][pSkill][JobID]++;
			pInfo[playerid][pSkillExp][JobID] = 0;

			format(str, sizeof(str), Color_White"Ваш уровень"Main_Color" %sа "Color_White"повышен!", Jobs[JobID][JobNames]);
			SendClientMessage(playerid, -1, str);
		}
		SavePlayerSkill(playerid);
	}
}

stock SavePlayerSkill(playerid)
{
	new SkillStr[300];
	new ExpSkillStr[300];
	for(new i = 0; i < sizeof(Jobs); i++)
	{
		format(SkillStr, sizeof(SkillStr), "%s%s%d", SkillStr, (i) ? (","):(""), pInfo[playerid][pSkill][i]);
		format(ExpSkillStr, sizeof(ExpSkillStr), "%s%s%d", ExpSkillStr, (i) ? (","):(""), pInfo[playerid][pSkillExp][i]);
	}
	SavePlayerStr(playerid, "Skill", SkillStr);
	SavePlayerStr(playerid, "SkillExp", ExpSkillStr);
	return 1;
}

stock ChangePlayerJob(playerid, Job)
{
	RemoveJobPickup(playerid);
	RemoveRentedCar(playerid);
	RemoveThiefCar(playerid, true);
	pInfo[playerid][pJob] = Job;
	SavePlayerInt(playerid, "Job", pInfo[playerid][pJob]);
	RemoveCarriedObj(playerid, true);
	if(pInfo[playerid][pGPSType] == GPS_Type_Job)
	{
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		pInfo[playerid][pGPSType] = GPS_Type_None;
	}
	return 1;
}

stock ChangePlayerUnOfficialJob(playerid, Job)
{
	RemoveJobPickup(playerid);
	RemoveLoader(playerid);
	RemoveRentedCar(playerid);
	RemoveCarriedObj(playerid, true);
	ClearAnimations(playerid);

	if(Job == Job_Lumberjack) SetPlayerAttachedObject(playerid, AttachSlotJob, 341, 6);
	else if(Job == Job_Farm) SetPlayerAttachedObject(playerid, AttachSlotJob, 18890, 14, 0.3410, 0.0999, -0.0109, -72.9999, 0.0000, -174.4999, 1.0000, 1.0000, 0.5319, 0, 0);
	else if(Job == Job_Mine) SetPlayerAttachedObject(playerid, AttachSlotJob, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);

	if(Job == Job_None)
	{
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		pInfo[playerid][pGPSType] = GPS_Type_None;
		DeletePVar(playerid, "UnOfficialJob");

		DeletePVar(playerid, "ChopOnWare");
		DeletePVar(playerid, "TreeCutCount");

		DeletePVar(playerid, "CollectPlant");

		DeletePVar(playerid, "CollectOre");

		DeletePVar(playerid, "FarmDeliverType");
		DeletePVar(playerid, "FarmDeliverStage");
	}
	else SetPVarInt(playerid, "UnOfficialJob", Job);
}

stock SaveCarInt(vehicleid, const ColumnName[], Value)
{
	if(!vInfo[vehicleid][vID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, Value, vInfo[vehicleid][vID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveCarFloat(vehicleid, const ColumnName[], Float:Value)
{
	if(!vInfo[vehicleid][vID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `%s` = '%f' WHERE `ID` = '%d'", ColumnName, Value, vInfo[vehicleid][vID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveCarStr(vehicleid, const ColumnName[], const Value[])
{
	if(!vInfo[vehicleid][vID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `%s` = '%e' WHERE `ID` = '%d'", ColumnName, Value, vInfo[vehicleid][vID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveCarBool(vehicleid, const ColumnName[], bool:Value)
{
	if(!vInfo[vehicleid][vID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `vehicle` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, _:Value, vInfo[vehicleid][vID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveHouseInt(HouseID, const ColumnName[], Value)
{
	if(!hInfo[HouseID][hID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `house` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, Value, hInfo[HouseID][hID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveHouseFloat(HouseID, const ColumnName[], Float:Value)
{
	if(!hInfo[HouseID][hID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `house` SET `%s` = '%f' WHERE `ID` = '%d'", ColumnName, Value, hInfo[HouseID][hID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveHouseStr(HouseID, const ColumnName[], const Value[])
{
	if(!hInfo[HouseID][hID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `house` SET `%s` = '%e' WHERE `ID` = '%d'", ColumnName, Value, hInfo[HouseID][hID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveHouseBool(HouseID, const ColumnName[], bool:Value)
{
	if(!hInfo[HouseID][hID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `house` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, _:Value, hInfo[HouseID][hID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveHouseNull(HouseID, const ColumnName[])
{
	if(!hInfo[HouseID][hID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `house` SET `%s` = NULL WHERE `ID` = '%d'", ColumnName, hInfo[HouseID][hID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveBusinessInt(BusinessID, const ColumnName[], Value)
{
	if(!bInfo[BusinessID][bID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `business` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, Value, bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveBusinessFloat(BusinessID, const ColumnName[], Float:Value)
{
	if(!bInfo[BusinessID][bID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `business` SET `%s` = '%f' WHERE `ID` = '%d'", ColumnName, Value, bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveBusinessStr(BusinessID, const ColumnName[], const Value[])
{
	if(!bInfo[BusinessID][bID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `business` SET `%s` = '%e' WHERE `ID` = '%d'", ColumnName, Value, bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveBusinessBool(BusinessID, const ColumnName[], bool:Value)
{
	if(!bInfo[BusinessID][bID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `business` SET `%s` = '%d' WHERE `ID` = '%d'", ColumnName, _:Value, bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);
	return 1;
}

stock SaveBusinessNull(BusinessID, const ColumnName[])
{
	if(!bInfo[BusinessID][bID]) return 1;
	new query[300];

	mysql_format(DB, query, sizeof(query), "UPDATE `business` SET `%s` = NULL WHERE `ID` = '%d'", ColumnName, bInfo[BusinessID][bID]);
	mysql_tquery(DB, query);
	return 1;
}

stock GiveCompanyPay(playerid, BusinessTypes, money)
{
	new Float:dist, BusinessID = 0;
	for(new i = 1; i < sizeof(bInfo); i++)
	{
		if(bInfo[i][bType] == BusinessTypes && bInfo[i][bOwnerID])
		{
			if(!BusinessID)
			{
				if(GetPVarInt(playerid, "InBusiness"))
				{
					new indx = GetPVarInt(playerid, "InBusiness");
					dist = DistancePointToPoint(bInfo[indx][bX], bInfo[indx][bY], bInfo[indx][bZ], bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else if(GetPVarInt(playerid, "InHouse"))
				{
					new indx = GetPVarInt(playerid, "InHouse");
					dist = DistancePointToPoint(hInfo[indx][hX], hInfo[indx][hY], hInfo[indx][hZ], bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else if(GetPVarInt(playerid, "InPickup"))
				{
					new indx = GetPVarInt(playerid, "InPickup")-1;
					new Float:X, Float:Y, Float:Z;
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_X, X);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Y, Y);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Z, Z);
					dist = DistancePointToPoint(X, Y, Z, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else dist = GetPlayerDistanceFromPoint(playerid, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				BusinessID = i;
			}
			else
			{
				new Float:SubDist = 0.0;
				if(GetPVarInt(playerid, "InBusiness"))
				{
					new indx = GetPVarInt(playerid, "InBusiness");
					SubDist = DistancePointToPoint(bInfo[indx][bX], bInfo[indx][bY], bInfo[indx][bZ], bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else if(GetPVarInt(playerid, "InHouse"))
				{
					new indx = GetPVarInt(playerid, "InHouse");
					SubDist = DistancePointToPoint(hInfo[indx][hX], hInfo[indx][hY], hInfo[indx][hZ], bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else if(GetPVarInt(playerid, "InPickup"))
				{
					new indx = GetPVarInt(playerid, "InPickup")-1;
					new Float:X, Float:Y, Float:Z;
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_X, X);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Y, Y);
					Streamer_GetFloatData(STREAMER_TYPE_PICKUP, Pickups[indx][PickID], E_STREAMER_Z, Z);
					SubDist = DistancePointToPoint(X, Y, Z, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				}
				else SubDist = GetPlayerDistanceFromPoint(playerid, bInfo[i][bX], bInfo[i][bY], bInfo[i][bZ]);
				if(SubDist < dist)
				{
					dist = SubDist;
					BusinessID = i;
				}
			}
		}
	}
	if(BusinessID && bInfo[BusinessID][bOwnerID])
	{
		bInfo[BusinessID][bMoney] += money;
		SaveBusinessInt(bInfo[BusinessID][bID], "Money", bInfo[BusinessID][bMoney]);
	}
	return 1;
}

stock DestroyServerTextDraw()
{
	TextDrawDestroy(GlobalTimeTD);
	TextDrawDestroy(SiteTD);
	for(new i = 0; i < sizeof(SpecPanelTD); i++) TextDrawDestroy(SpecPanelTD[i]);
	for(new i = 0; i < sizeof(CheaterPanelTD); i++) TextDrawDestroy(CheaterPanelTD[i]);
	for(new i = 0; i < sizeof(FisherTD); i++) TextDrawDestroy(FisherTD[i]);
	TextDrawDestroy(GarageTD);
	TextDrawDestroy(CarUpgradeTD);
	for(new i = 0; i < sizeof(SkinSelectTD); i++) TextDrawDestroy(SkinSelectTD[i]);
}

stock CreateServerTextDraw()
{
	//Черный экран
	Background = TextDrawCreate(-2000.000, -2000.000, "Box"); // пусто
	TextDrawLetterSize(Background, 0.0000, 2000.0000);
	TextDrawTextSize(Background, 2000.0000, 0.0000);
	TextDrawAlignment(Background, 1);
	TextDrawColor(Background, -1);
	TextDrawUseBox(Background, 1);
	TextDrawBoxColor(Background, 255);
	TextDrawBackgroundColor(Background, 255);
	TextDrawFont(Background, 1);
	TextDrawSetProportional(Background, 1);
	TextDrawSetShadow(Background, 0);
	//Время
	GlobalTimeTD = TextDrawCreate(551.918029, 24.499992,"_");
	TextDrawAlignment(GlobalTimeTD,1);
	TextDrawBackgroundColor(GlobalTimeTD,0x000000ff);
	TextDrawFont(GlobalTimeTD,3);
	TextDrawLetterSize(GlobalTimeTD,0.547902, 1.679999);
	TextDrawColor(GlobalTimeTD,0xffffffff);
	TextDrawSetOutline(GlobalTimeTD,1);
	TextDrawSetProportional(GlobalTimeTD,1);
	TextDrawSetShadow(GlobalTimeTD,1);
	//Сайт
	SiteTD = TextDrawCreate(85.666683, 422.866577,"~w~WWW~y~.~w~OGRM-PROJECT~y~.~w~RU");
	TextDrawAlignment(SiteTD,2);
	TextDrawFont(SiteTD,1);
	TextDrawColor(SiteTD,0xFFFFFFff);
	TextDrawBackgroundColor(SiteTD,0x000000ff);
	TextDrawLetterSize(SiteTD,0.270328, 1.189329);
	TextDrawSetOutline(SiteTD,1);
	TextDrawSetProportional(SiteTD,2);
	TextDrawSetShadow(SiteTD,1);
	//Spectator Panel
	SpecPanelTD[0] = TextDrawCreate(107.625000, 171.833251, "usebox");
	TextDrawLetterSize(SpecPanelTD[0], 0.000000, 12.268980);
	TextDrawTextSize(SpecPanelTD[0], -0.750000, 0.000000);
	TextDrawAlignment(SpecPanelTD[0], 1);
	TextDrawColor(SpecPanelTD[0], 0);
	TextDrawUseBox(SpecPanelTD[0], true);
	TextDrawBoxColor(SpecPanelTD[0], BitColor_Main);
	TextDrawSetShadow(SpecPanelTD[0], 0);
	TextDrawSetOutline(SpecPanelTD[0], 0);
	TextDrawFont(SpecPanelTD[0], 0);

	SpecPanelTD[1] = TextDrawCreate(106.375000, 173.583343, "usebox");
	TextDrawLetterSize(SpecPanelTD[1], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[1], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[1], 1);
	TextDrawColor(SpecPanelTD[1], 0);
	TextDrawUseBox(SpecPanelTD[1], true);
	TextDrawBoxColor(SpecPanelTD[1], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[1], 0);
	TextDrawSetOutline(SpecPanelTD[1], 0);
	TextDrawFont(SpecPanelTD[1], 0);

	SpecPanelTD[2] = TextDrawCreate(106.750000, 187.416656, "usebox");
	TextDrawLetterSize(SpecPanelTD[2], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[2], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[2], 1);
	TextDrawColor(SpecPanelTD[2], 0);
	TextDrawUseBox(SpecPanelTD[2], true);
	TextDrawBoxColor(SpecPanelTD[2], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[2], 0);
	TextDrawSetOutline(SpecPanelTD[2], 0);
	TextDrawFont(SpecPanelTD[2], 0);

	SpecPanelTD[3] = TextDrawCreate(106.500000, 201.833251, "usebox");
	TextDrawLetterSize(SpecPanelTD[3], 0.000000, 0.852312);
	TextDrawTextSize(SpecPanelTD[3], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[3], 1);
	TextDrawColor(SpecPanelTD[3], 0);
	TextDrawUseBox(SpecPanelTD[3], true);
	TextDrawBoxColor(SpecPanelTD[3], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[3], 0);
	TextDrawSetOutline(SpecPanelTD[3], 0);
	TextDrawFont(SpecPanelTD[3], 0);

	SpecPanelTD[4] = TextDrawCreate(106.875000, 215.666534, "usebox");
	TextDrawLetterSize(SpecPanelTD[4], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[4], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[4], 1);
	TextDrawColor(SpecPanelTD[4], 0);
	TextDrawUseBox(SpecPanelTD[4], true);
	TextDrawBoxColor(SpecPanelTD[4], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[4], 0);
	TextDrawSetOutline(SpecPanelTD[4], 0);
	TextDrawFont(SpecPanelTD[4], 0);

	SpecPanelTD[5] = TextDrawCreate(106.625000, 229.499862, "usebox");
	TextDrawLetterSize(SpecPanelTD[5], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[5], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[5], 1);
	TextDrawColor(SpecPanelTD[5], 0);
	TextDrawUseBox(SpecPanelTD[5], true);
	TextDrawBoxColor(SpecPanelTD[5], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[5], 0);
	TextDrawSetOutline(SpecPanelTD[5], 0);
	TextDrawFont(SpecPanelTD[5], 0);

	SpecPanelTD[6] = TextDrawCreate(106.375000, 243.333190, "usebox");
	TextDrawLetterSize(SpecPanelTD[6], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[6], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[6], 1);
	TextDrawColor(SpecPanelTD[6], 0);
	TextDrawUseBox(SpecPanelTD[6], true);
	TextDrawBoxColor(SpecPanelTD[6], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[6], 0);
	TextDrawSetOutline(SpecPanelTD[6], 0);
	TextDrawFont(SpecPanelTD[6], 0);

	SpecPanelTD[7] = TextDrawCreate(106.750000, 257.749877, "usebox");
	TextDrawLetterSize(SpecPanelTD[7], 0.000000, 0.977312);
	TextDrawTextSize(SpecPanelTD[7], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[7], 1);
	TextDrawColor(SpecPanelTD[7], 0);
	TextDrawUseBox(SpecPanelTD[7], true);
	TextDrawBoxColor(SpecPanelTD[7], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[7], 0);
	TextDrawSetOutline(SpecPanelTD[7], 0);
	TextDrawFont(SpecPanelTD[7], 0);

	SpecPanelTD[8] = TextDrawCreate(106.500000, 272.166687, "usebox");
	TextDrawLetterSize(SpecPanelTD[8], 0.000000, 0.914812);
	TextDrawTextSize(SpecPanelTD[8], 0.500000, 0.000000);
	TextDrawAlignment(SpecPanelTD[8], 1);
	TextDrawColor(SpecPanelTD[8], 0);
	TextDrawUseBox(SpecPanelTD[8], true);
	TextDrawBoxColor(SpecPanelTD[8], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[8], 0);
	TextDrawSetOutline(SpecPanelTD[8], 0);
	TextDrawFont(SpecPanelTD[8], 0);

	SpecPanelTD[9] = TextDrawCreate(26.875000, 171.500000, "Refresh");
	TextDrawLetterSize(SpecPanelTD[9], 0.299373, 1.144997);
	TextDrawTextSize(SpecPanelTD[9], 83.0, 10.0);
	TextDrawAlignment(SpecPanelTD[9], 1);
	TextDrawColor(SpecPanelTD[9], -1);
	TextDrawSetShadow(SpecPanelTD[9], 0);
	TextDrawSetOutline(SpecPanelTD[9], 1);
	TextDrawBackgroundColor(SpecPanelTD[9], 51);
	TextDrawFont(SpecPanelTD[9], 2);
	TextDrawSetProportional(SpecPanelTD[9], 1);
	TextDrawSetSelectable(SpecPanelTD[9], true);

	SpecPanelTD[10] = TextDrawCreate(35.375000, 185.916687, "Next");
	TextDrawLetterSize(SpecPanelTD[10], 0.328123, 1.156664);
	TextDrawTextSize(SpecPanelTD[10], 71.0, 10.0);
	TextDrawAlignment(SpecPanelTD[10], 1);
	TextDrawColor(SpecPanelTD[10], -1);
	TextDrawSetShadow(SpecPanelTD[10], 0);
	TextDrawSetOutline(SpecPanelTD[10], 1);
	TextDrawBackgroundColor(SpecPanelTD[10], 51);
	TextDrawFont(SpecPanelTD[10], 2);
	TextDrawSetProportional(SpecPanelTD[10], 1);
	TextDrawSetSelectable(SpecPanelTD[10], true);

	SpecPanelTD[11] = TextDrawCreate(30.750000, 200.333358, "Stats");
	TextDrawLetterSize(SpecPanelTD[11], 0.314998, 1.115831);
	TextDrawTextSize(SpecPanelTD[11], 76.0, 10.0);
	TextDrawAlignment(SpecPanelTD[11], 1);
	TextDrawColor(SpecPanelTD[11], -1);
	TextDrawSetShadow(SpecPanelTD[11], 0);
	TextDrawSetOutline(SpecPanelTD[11], 1);
	TextDrawBackgroundColor(SpecPanelTD[11], 51);
	TextDrawFont(SpecPanelTD[11], 2);
	TextDrawSetProportional(SpecPanelTD[11], 1);
	TextDrawSetSelectable(SpecPanelTD[11], true);

	SpecPanelTD[12] = TextDrawCreate(43.000000, 213.583419, "GM");
	TextDrawLetterSize(SpecPanelTD[12], 0.327497, 1.156664);
	TextDrawTextSize(SpecPanelTD[12], 63.0, 10.0);
	TextDrawAlignment(SpecPanelTD[12], 1);
	TextDrawColor(SpecPanelTD[12], -1);
	TextDrawSetShadow(SpecPanelTD[12], 0);
	TextDrawSetOutline(SpecPanelTD[12], 1);
	TextDrawBackgroundColor(SpecPanelTD[12], 51);
	TextDrawFont(SpecPanelTD[12], 2);
	TextDrawSetProportional(SpecPanelTD[12], 1);
	TextDrawSetSelectable(SpecPanelTD[12], true);

	SpecPanelTD[13] = TextDrawCreate(39.000000, 227.416732, "Jail");
	TextDrawLetterSize(SpecPanelTD[13], 0.322497, 1.232499);
	TextDrawTextSize(SpecPanelTD[13], 66.0, 10.0);
	TextDrawAlignment(SpecPanelTD[13], 1);
	TextDrawColor(SpecPanelTD[13], -1);
	TextDrawSetShadow(SpecPanelTD[13], 0);
	TextDrawSetOutline(SpecPanelTD[13], 1);
	TextDrawBackgroundColor(SpecPanelTD[13], 51);
	TextDrawFont(SpecPanelTD[13], 2);
	TextDrawSetProportional(SpecPanelTD[13], 1);
	TextDrawSetSelectable(SpecPanelTD[13], true);

	SpecPanelTD[14] = TextDrawCreate(33.125000, 241.833328, "Warn");
	TextDrawLetterSize(SpecPanelTD[14], 0.305622, 1.191665);
	TextDrawTextSize(SpecPanelTD[14], 69.0, 10.0);
	TextDrawAlignment(SpecPanelTD[14], 1);
	TextDrawColor(SpecPanelTD[14], -1);
	TextDrawSetShadow(SpecPanelTD[14], 0);
	TextDrawSetOutline(SpecPanelTD[14], 1);
	TextDrawBackgroundColor(SpecPanelTD[14], 51);
	TextDrawFont(SpecPanelTD[14], 2);
	TextDrawSetProportional(SpecPanelTD[14], 1);
	TextDrawSetSelectable(SpecPanelTD[14], true);

	SpecPanelTD[15] = TextDrawCreate(39.125000, 256.250000, "Ban");
	TextDrawLetterSize(SpecPanelTD[15], 0.325623, 1.185829);
	TextDrawTextSize(SpecPanelTD[15], 65.0, 10.0);
	TextDrawAlignment(SpecPanelTD[15], 1);
	TextDrawColor(SpecPanelTD[15], -1);
	TextDrawSetShadow(SpecPanelTD[15], 0);
	TextDrawSetOutline(SpecPanelTD[15], 1);
	TextDrawBackgroundColor(SpecPanelTD[15], 51);
	TextDrawFont(SpecPanelTD[15], 2);
	TextDrawSetProportional(SpecPanelTD[15], 1);
	TextDrawSetSelectable(SpecPanelTD[15], true);

	SpecPanelTD[16] = TextDrawCreate(31.875000, 271.250000, "Close");
	TextDrawLetterSize(SpecPanelTD[16], 0.319999, 1.127498);
	TextDrawTextSize(SpecPanelTD[16], 73.0, 10.0);
	TextDrawAlignment(SpecPanelTD[16], 1);
	TextDrawColor(SpecPanelTD[16], -1);
	TextDrawSetShadow(SpecPanelTD[16], 0);
	TextDrawSetOutline(SpecPanelTD[16], 1);
	TextDrawBackgroundColor(SpecPanelTD[16], 51);
	TextDrawFont(SpecPanelTD[16], 2);
	TextDrawSetProportional(SpecPanelTD[16], 1);
	TextDrawSetSelectable(SpecPanelTD[16], true);

	SpecPanelTD[17] = TextDrawCreate(637.375000, 166.416473, "usebox");
	TextDrawLetterSize(SpecPanelTD[17], 0.000000, 13.018980);
	TextDrawTextSize(SpecPanelTD[17], 533.000000, 0.000000);
	TextDrawAlignment(SpecPanelTD[17], 1);
	TextDrawColor(SpecPanelTD[17], 0);
	TextDrawUseBox(SpecPanelTD[17], true);
	TextDrawBoxColor(SpecPanelTD[17], BitColor_Main);
	TextDrawSetShadow(SpecPanelTD[17], 0);
	TextDrawSetOutline(SpecPanelTD[17], 0);
	TextDrawFont(SpecPanelTD[17], 0);

	SpecPanelTD[18] = TextDrawCreate(635.125000, 167.750000, "usebox");
	TextDrawLetterSize(SpecPanelTD[18], 0.000000, 12.646299);
	TextDrawTextSize(SpecPanelTD[18], 534.250000, 0.000000);
	TextDrawAlignment(SpecPanelTD[18], 1);
	TextDrawColor(SpecPanelTD[18], 0);
	TextDrawUseBox(SpecPanelTD[18], true);
	TextDrawBoxColor(SpecPanelTD[18], 0xb34830FF);
	TextDrawSetShadow(SpecPanelTD[18], 0);
	TextDrawSetOutline(SpecPanelTD[18], 0);
	TextDrawFont(SpecPanelTD[18], 0);

	//Панель читеров
	CheaterPanelTD[0] = TextDrawCreate(578.250000, 435.249969, "usebox");
	TextDrawLetterSize(CheaterPanelTD[0], 0.000000, 1.241201);
	TextDrawTextSize(CheaterPanelTD[0], 66.125000, 0.000000);
	TextDrawAlignment(CheaterPanelTD[0], 1);
	TextDrawColor(CheaterPanelTD[0], 0);
	TextDrawUseBox(CheaterPanelTD[0], true);
	TextDrawBoxColor(CheaterPanelTD[0], BitColor_Main);
	TextDrawSetShadow(CheaterPanelTD[0], 0);
	TextDrawSetOutline(CheaterPanelTD[0], 0);
	TextDrawFont(CheaterPanelTD[0], 0);

	CheaterPanelTD[1] = TextDrawCreate(576.375000, 436.416656, "usebox");
	TextDrawLetterSize(CheaterPanelTD[1], 0.000000, 0.988888);
	TextDrawTextSize(CheaterPanelTD[1], 145.500000, 0.000000);
	TextDrawAlignment(CheaterPanelTD[1], 1);
	TextDrawColor(CheaterPanelTD[1], 0);
	TextDrawUseBox(CheaterPanelTD[1], true);
	TextDrawBoxColor(CheaterPanelTD[1], 224);
	TextDrawSetShadow(CheaterPanelTD[1], 0);
	TextDrawSetOutline(CheaterPanelTD[1], 0);
	TextDrawFont(CheaterPanelTD[1], 0);

	CheaterPanelTD[2] = TextDrawCreate(78.125000, 434.333312, "Cheat");
	TextDrawLetterSize(CheaterPanelTD[2], 0.409372, 1.366665);
	TextDrawAlignment(CheaterPanelTD[2], 1);
	TextDrawColor(CheaterPanelTD[2], -1);
	TextDrawSetShadow(CheaterPanelTD[2], 0);
	TextDrawSetOutline(CheaterPanelTD[2], 1);
	TextDrawBackgroundColor(CheaterPanelTD[2], 51);
	TextDrawFont(CheaterPanelTD[2], 2);
	TextDrawSetProportional(CheaterPanelTD[2], 1);

	CheaterPanelTD[3] = TextDrawCreate(148.500000, 434.333312, "999/999/999/999/999/999/999/999/999/999");
	TextDrawLetterSize(CheaterPanelTD[3], 0.403124, 1.220831);
	TextDrawAlignment(CheaterPanelTD[3], 1);
	TextDrawColor(CheaterPanelTD[3], -1);
	TextDrawSetShadow(CheaterPanelTD[3], 0);
	TextDrawSetOutline(CheaterPanelTD[3], 1);
	TextDrawBackgroundColor(CheaterPanelTD[3], 51);
	TextDrawFont(CheaterPanelTD[3], 2);
	TextDrawSetProportional(CheaterPanelTD[3], 1);
	//Fisher Panel
	FisherTD[0] = TextDrawCreate(200.0000, 100.0000, "LD_SPAC:white"); // пусто
	TextDrawTextSize(FisherTD[0], 270.0000, 270.0000);
	TextDrawAlignment(FisherTD[0], 1);
	TextDrawColor(FisherTD[0], 255);
	TextDrawBackgroundColor(FisherTD[0], 255);
	TextDrawFont(FisherTD[0], 4);
	TextDrawSetProportional(FisherTD[0], 0);
	TextDrawSetShadow(FisherTD[0], 0);

	FisherTD[1] = TextDrawCreate(202.0000, 103.0000, "LD_SPAC:white"); // пусто
	TextDrawTextSize(FisherTD[1], 266.0000, 264.0000);
	TextDrawAlignment(FisherTD[1], 1);
	TextDrawColor(FisherTD[1], 1995371775);
	TextDrawBackgroundColor(FisherTD[1], 255);
	TextDrawFont(FisherTD[1], 4);
	TextDrawSetProportional(FisherTD[1], 0);
	TextDrawSetShadow(FisherTD[1], 0);

	FisherTD[2] = TextDrawCreate(432.0000, 116.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[2], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[2], 1);
	TextDrawColor(FisherTD[2], 1244989);
	TextDrawBackgroundColor(FisherTD[2], 255);
	TextDrawFont(FisherTD[2], 4);
	TextDrawSetProportional(FisherTD[2], 0);
	TextDrawSetShadow(FisherTD[2], 0);

	FisherTD[3] = TextDrawCreate(440.0000, 120.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[3], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[3], 1);
	TextDrawColor(FisherTD[3], -148);
	TextDrawBackgroundColor(FisherTD[3], 255);
	TextDrawFont(FisherTD[3], 4);
	TextDrawSetProportional(FisherTD[3], 0);
	TextDrawSetShadow(FisherTD[3], 0);

	FisherTD[4] = TextDrawCreate(265.0000, 155.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[4], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[4], 1);
	TextDrawColor(FisherTD[4], 1244989);
	TextDrawBackgroundColor(FisherTD[4], 255);
	TextDrawFont(FisherTD[4], 4);
	TextDrawSetProportional(FisherTD[4], 0);
	TextDrawSetShadow(FisherTD[4], 0);

	FisherTD[5] = TextDrawCreate(273.0000, 159.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[5], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[5], 1);
	TextDrawColor(FisherTD[5], -148);
	TextDrawBackgroundColor(FisherTD[5], 255);
	TextDrawFont(FisherTD[5], 4);
	TextDrawSetProportional(FisherTD[5], 0);
	TextDrawSetShadow(FisherTD[5], 0);

	FisherTD[6] = TextDrawCreate(214.0000, 128.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[6], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[6], 1);
	TextDrawColor(FisherTD[6], 1244989);
	TextDrawBackgroundColor(FisherTD[6], 255);
	TextDrawFont(FisherTD[6], 4);
	TextDrawSetProportional(FisherTD[6], 0);
	TextDrawSetShadow(FisherTD[6], 0);

	FisherTD[7] = TextDrawCreate(222.0000, 132.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[7], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[7], 1);
	TextDrawColor(FisherTD[7], -148);
	TextDrawBackgroundColor(FisherTD[7], 255);
	TextDrawFont(FisherTD[7], 4);
	TextDrawSetProportional(FisherTD[7], 0);
	TextDrawSetShadow(FisherTD[7], 0);

	FisherTD[8] = TextDrawCreate(222.0000, 221.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[8], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[8], 1);
	TextDrawColor(FisherTD[8], 1244989);
	TextDrawBackgroundColor(FisherTD[8], 255);
	TextDrawFont(FisherTD[8], 4);
	TextDrawSetProportional(FisherTD[8], 0);
	TextDrawSetShadow(FisherTD[8], 0);

	FisherTD[9] = TextDrawCreate(230.0000, 225.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[9], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[9], 1);
	TextDrawColor(FisherTD[9], -148);
	TextDrawBackgroundColor(FisherTD[9], 255);
	TextDrawFont(FisherTD[9], 4);
	TextDrawSetProportional(FisherTD[9], 0);
	TextDrawSetShadow(FisherTD[9], 0);

	FisherTD[10] = TextDrawCreate(409.0000, 299.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[10], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[10], 1);
	TextDrawColor(FisherTD[10], 1244989);
	TextDrawBackgroundColor(FisherTD[10], 255);
	TextDrawFont(FisherTD[10], 4);
	TextDrawSetProportional(FisherTD[10], 0);
	TextDrawSetShadow(FisherTD[10], 0);

	FisherTD[11] = TextDrawCreate(417.0000, 303.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[11], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[11], 1);
	TextDrawColor(FisherTD[11], -148);
	TextDrawBackgroundColor(FisherTD[11], 255);
	TextDrawFont(FisherTD[11], 4);
	TextDrawSetProportional(FisherTD[11], 0);
	TextDrawSetShadow(FisherTD[11], 0);

	FisherTD[12] = TextDrawCreate(305.0000, 324.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[12], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[12], 1);
	TextDrawColor(FisherTD[12], 1244989);
	TextDrawBackgroundColor(FisherTD[12], 255);
	TextDrawFont(FisherTD[12], 4);
	TextDrawSetProportional(FisherTD[12], 0);
	TextDrawSetShadow(FisherTD[12], 0);

	FisherTD[13] = TextDrawCreate(313.0000, 328.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[13], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[13], 1);
	TextDrawColor(FisherTD[13], -148);
	TextDrawBackgroundColor(FisherTD[13], 255);
	TextDrawFont(FisherTD[13], 4);
	TextDrawSetProportional(FisherTD[13], 0);
	TextDrawSetShadow(FisherTD[13], 0);

	FisherTD[14] = TextDrawCreate(333.0000, 235.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[14], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[14], 1);
	TextDrawColor(FisherTD[14], 1244989);
	TextDrawBackgroundColor(FisherTD[14], 255);
	TextDrawFont(FisherTD[14], 4);
	TextDrawSetProportional(FisherTD[14], 0);
	TextDrawSetShadow(FisherTD[14], 0);

	FisherTD[15] = TextDrawCreate(341.0000, 239.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[15], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[15], 1);
	TextDrawColor(FisherTD[15], -148);
	TextDrawBackgroundColor(FisherTD[15], 255);
	TextDrawFont(FisherTD[15], 4);
	TextDrawSetProportional(FisherTD[15], 0);
	TextDrawSetShadow(FisherTD[15], 0);

	FisherTD[16] = TextDrawCreate(423.0000, 176.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[16], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[16], 1);
	TextDrawColor(FisherTD[16], 1244989);
	TextDrawBackgroundColor(FisherTD[16], 255);
	TextDrawFont(FisherTD[16], 4);
	TextDrawSetProportional(FisherTD[16], 0);
	TextDrawSetShadow(FisherTD[16], 0);

	FisherTD[17] = TextDrawCreate(431.0000, 180.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[17], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[17], 1);
	TextDrawColor(FisherTD[17], -148);
	TextDrawBackgroundColor(FisherTD[17], 255);
	TextDrawFont(FisherTD[17], 4);
	TextDrawSetProportional(FisherTD[17], 0);
	TextDrawSetShadow(FisherTD[17], 0);

	FisherTD[18] = TextDrawCreate(357.0000, 128.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[18], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[18], 1);
	TextDrawColor(FisherTD[18], 1244989);
	TextDrawBackgroundColor(FisherTD[18], 255);
	TextDrawFont(FisherTD[18], 4);
	TextDrawSetProportional(FisherTD[18], 0);
	TextDrawSetShadow(FisherTD[18], 0);

	FisherTD[19] = TextDrawCreate(365.0000, 132.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[19], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[19], 1);
	TextDrawColor(FisherTD[19], -148);
	TextDrawBackgroundColor(FisherTD[19], 255);
	TextDrawFont(FisherTD[19], 4);
	TextDrawSetProportional(FisherTD[19], 0);
	TextDrawSetShadow(FisherTD[19], 0);

	FisherTD[20] = TextDrawCreate(224.0000, 343.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[20], 15.0000, 15.0000);
	TextDrawAlignment(FisherTD[20], 1);
	TextDrawColor(FisherTD[20], 1244989);
	TextDrawBackgroundColor(FisherTD[20], 255);
	TextDrawFont(FisherTD[20], 4);
	TextDrawSetProportional(FisherTD[20], 0);
	TextDrawSetShadow(FisherTD[20], 0);

	FisherTD[21] = TextDrawCreate(232.0000, 347.0000, "LD_BEAT:chit");
	TextDrawTextSize(FisherTD[21], 3.0000, 7.0000);
	TextDrawAlignment(FisherTD[21], 1);
	TextDrawColor(FisherTD[21], -148);
	TextDrawBackgroundColor(FisherTD[21], 255);
	TextDrawFont(FisherTD[21], 4);
	TextDrawSetProportional(FisherTD[21], 0);
	TextDrawSetShadow(FisherTD[21], 0);
	//Garage
	GarageTD = TextDrawCreate(200.0000, 300.0000, "Box"); // пусто
	TextDrawLetterSize(GarageTD, 0.0000, 9.0183);
	TextDrawTextSize(GarageTD, 413.5795, 0.0000);
	TextDrawAlignment(GarageTD, 1);
	TextDrawColor(GarageTD, -1);
	TextDrawUseBox(GarageTD, 1);
	TextDrawBoxColor(GarageTD, 99);
	TextDrawBackgroundColor(GarageTD, 255);
	TextDrawFont(GarageTD, 1);
	TextDrawSetProportional(GarageTD, 1);
	TextDrawSetShadow(GarageTD, 0);
	//CarUpgrade
	CarUpgradeTD = TextDrawCreate(200.0000, 131.0000, "Box"); // пусто
	TextDrawLetterSize(CarUpgradeTD, 0.0000, 26.8845);
	TextDrawTextSize(CarUpgradeTD, 439.0000, 0.0000);
	TextDrawAlignment(CarUpgradeTD, 1);
	TextDrawColor(CarUpgradeTD, -1);
	TextDrawUseBox(CarUpgradeTD, 1);
	TextDrawBoxColor(CarUpgradeTD, 99);
	TextDrawBackgroundColor(CarUpgradeTD, 255);
	TextDrawFont(CarUpgradeTD, 1);
	TextDrawSetProportional(CarUpgradeTD, 1);
	TextDrawSetShadow(CarUpgradeTD, 0);
	//Выбор скина
	SkinSelectTD[0] = TextDrawCreate(400.0000, 360.0000, "LD_BEAT:right"); // пусто
	TextDrawTextSize(SkinSelectTD[0], 30.0000, 30.0000);
	TextDrawAlignment(SkinSelectTD[0], 1);
	TextDrawColor(SkinSelectTD[0], -1);
	TextDrawBackgroundColor(SkinSelectTD[0], 255);
	TextDrawFont(SkinSelectTD[0], 4);
	TextDrawSetProportional(SkinSelectTD[0], 0);
	TextDrawSetShadow(SkinSelectTD[0], 0);
	TextDrawSetSelectable(SkinSelectTD[0], true);

	SkinSelectTD[1] = TextDrawCreate(200.0000, 360.0000, "LD_BEAT:left"); // пусто
	TextDrawTextSize(SkinSelectTD[1], 30.0000, 30.0000);
	TextDrawAlignment(SkinSelectTD[1], 1);
	TextDrawColor(SkinSelectTD[1], -1);
	TextDrawBackgroundColor(SkinSelectTD[1], 255);
	TextDrawFont(SkinSelectTD[1], 4);
	TextDrawSetProportional(SkinSelectTD[1], 0);
	TextDrawSetShadow(SkinSelectTD[1], 0);
	TextDrawSetSelectable(SkinSelectTD[1], true);

	SkinSelectTD[2] = TextDrawCreate(315.0000, 365.0000, "SELECT"); // пусто
	TextDrawLetterSize(SkinSelectTD[2], 0.4000, 1.6000);
	TextDrawTextSize(SkinSelectTD[2], 10.0000, 39.0000);
	TextDrawAlignment(SkinSelectTD[2], 2);
	TextDrawColor(SkinSelectTD[2], -1);
	TextDrawUseBox(SkinSelectTD[2], 1);
	TextDrawBoxColor(SkinSelectTD[2], 0);
	TextDrawBackgroundColor(SkinSelectTD[2], 255);
	TextDrawFont(SkinSelectTD[2], 1);
	TextDrawSetProportional(SkinSelectTD[2], 1);
	TextDrawSetShadow(SkinSelectTD[2], 0);
	TextDrawSetSelectable(SkinSelectTD[2], true);
	return 1;
}

stock ShowSkinSelect(playerid)
{
	if(pInfo[playerid][pGender])
	{
		SetSkin(playerid, SkinFemale[0][0], true);
		new str[100];
		format(str, sizeof(str), "%d$", SkinFemale[0][1]);
		PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
	}
	else
	{
		SetSkin(playerid, SkinMale[0][0], true);
		new str[100];
		format(str, sizeof(str), "%d$", SkinMale[0][1]);
		PlayerTextDrawSetString(playerid, SkinSelectPTD[playerid], str);
	}
	for(new i = 0; i < sizeof(SkinSelectTD); i++) TextDrawShowForPlayer(playerid, SkinSelectTD[i]);
	PlayerTextDrawShow(playerid, SkinSelectPTD[playerid]);
	SelectTextDraw(playerid, BitColor_Main);
	SetPVarInt(playerid, "SkinSelect", 1);
	SetPVarInt(playerid, "SkinIndx", 0);
	return 1;
}

stock HideSkinSelect(playerid)
{
	if(GetPVarInt(playerid, "SkinSelect"))
	{
		for(new i = 0; i < sizeof(SkinSelectTD); i++) TextDrawHideForPlayer(playerid, SkinSelectTD[i]);
		PlayerTextDrawHide(playerid, SkinSelectPTD[playerid]);
		CancelSelectTextDraw(playerid);
		DeletePVar(playerid, "SkinSelect");
		DeletePVar(playerid, "SkinIndx");

		new Float:X = GetPVarFloat(playerid, "SkinSelectX");
		new Float:Y = GetPVarFloat(playerid, "SkinSelectY");
		new Float:Z = GetPVarFloat(playerid, "SkinSelectZ");
		new Float:A = GetPVarFloat(playerid, "SkinSelectA");
		if(X && Y && Z)
		{
			DeletePVar(playerid, "SkinSelectX");
			DeletePVar(playerid, "SkinSelectY");
			DeletePVar(playerid, "SkinSelectZ");
			DeletePVar(playerid, "SkinSelectA");
			new BusinessID = GetPVarInt(playerid, "InBusiness");
			SetPlayerPosition(playerid, X, Y, Z, A, Business_World+bInfo[BusinessID][bID], BusinessType[bInfo[BusinessID][bType]][bInt]);
		}
		SetSkin(playerid, pInfo[playerid][pSkins][pInfo[playerid][pSkin]]);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

stock ShowCarUpgrade(playerid, Type) //Type == 1 - Обычный || Type == 2 - Донат
{
	CloseCarUpgrade(playerid);
	if(Type == 1 || Type == 2)
	{
		for(new i = 0; i < 9; i++)
		{
			CarUpgradePTD[playerid][i] = CreatePlayerTextDraw(playerid, 201.0000+(80.0*(i%3)), 132.0000+(81.0*(i/3)), ""); // пусто
			PlayerTextDrawTextSize(playerid, CarUpgradePTD[playerid][i], 77.0000, 77.0000);
			PlayerTextDrawAlignment(playerid, CarUpgradePTD[playerid][i], 1);
			PlayerTextDrawColor(playerid, CarUpgradePTD[playerid][i], -1);
			PlayerTextDrawBackgroundColor(playerid, CarUpgradePTD[playerid][i], 0x00a583FF);
			PlayerTextDrawFont(playerid, CarUpgradePTD[playerid][i], 5);
			PlayerTextDrawSetProportional(playerid, CarUpgradePTD[playerid][i], 0);
			PlayerTextDrawSetShadow(playerid, CarUpgradePTD[playerid][i], 0);
			PlayerTextDrawSetSelectable(playerid, CarUpgradePTD[playerid][i], true);
			PlayerTextDrawSetPreviewModel(playerid, CarUpgradePTD[playerid][i], 0);
			PlayerTextDrawSetPreviewRot(playerid, CarUpgradePTD[playerid][i], 0.0000, 0.0000, 315.0000, 1.0000);
			PlayerTextDrawSetPreviewVehCol(playerid, CarUpgradePTD[playerid][i], random(256), random(256));

			new TextIndx = i*4;
			CarUpgradePTDText[playerid][TextIndx] = CreatePlayerTextDraw(playerid, 203.0000+(80.0*(i%3)), 194.0000+(81.0*(i/3)), ""); // пусто
			PlayerTextDrawLetterSize(playerid, CarUpgradePTDText[playerid][TextIndx], 0.2526, 1.2059);
			PlayerTextDrawAlignment(playerid, CarUpgradePTDText[playerid][TextIndx], 1);
			PlayerTextDrawColor(playerid, CarUpgradePTDText[playerid][TextIndx], 0xf6ff00FF);
			PlayerTextDrawBackgroundColor(playerid, CarUpgradePTDText[playerid][TextIndx], 255);
			PlayerTextDrawFont(playerid, CarUpgradePTDText[playerid][TextIndx], 1);
			PlayerTextDrawSetProportional(playerid, CarUpgradePTDText[playerid][TextIndx], 1);
			PlayerTextDrawSetShadow(playerid, CarUpgradePTDText[playerid][TextIndx], 0);

			CarUpgradePTDText[playerid][TextIndx+1] = CreatePlayerTextDraw(playerid, 255.0000+(80.0*(i%3)), 186.0000+(81.0*(i/3)), "Price"); // пусто
			PlayerTextDrawLetterSize(playerid, CarUpgradePTDText[playerid][TextIndx+1], 0.2526, 1.2059);
			PlayerTextDrawAlignment(playerid, CarUpgradePTDText[playerid][TextIndx+1], 1);
			PlayerTextDrawColor(playerid, CarUpgradePTDText[playerid][TextIndx+1], 0x000000FF);
			PlayerTextDrawBackgroundColor(playerid, CarUpgradePTDText[playerid][TextIndx+1], 255);
			PlayerTextDrawFont(playerid, CarUpgradePTDText[playerid][TextIndx+1], 1);
			PlayerTextDrawSetProportional(playerid, CarUpgradePTDText[playerid][TextIndx+1], 1);
			PlayerTextDrawSetShadow(playerid, CarUpgradePTDText[playerid][TextIndx+1], 0);

			CarUpgradePTDText[playerid][TextIndx+2] = CreatePlayerTextDraw(playerid, 276.0002+(80.0*(i%3)), 196.0000+(81.0*(i/3)), ""); // пусто
			PlayerTextDrawLetterSize(playerid, CarUpgradePTDText[playerid][TextIndx+2], 0.1363, 0.9362);
			PlayerTextDrawAlignment(playerid, CarUpgradePTDText[playerid][TextIndx+2], 3);
			PlayerTextDrawColor(playerid, CarUpgradePTDText[playerid][TextIndx+2], 0x000000FF);
			PlayerTextDrawBackgroundColor(playerid, CarUpgradePTDText[playerid][TextIndx+2], 255);
			PlayerTextDrawFont(playerid, CarUpgradePTDText[playerid][TextIndx+2], 1);
			PlayerTextDrawSetProportional(playerid, CarUpgradePTDText[playerid][TextIndx+2], 1);
			PlayerTextDrawSetShadow(playerid, CarUpgradePTDText[playerid][TextIndx+2], 0);

			CarUpgradePTDText[playerid][TextIndx+3] = CreatePlayerTextDraw(playerid, 238.9999+(80.0*(i%3)), 132.9036+(81.0*(i/3)), ""); // пусто
			PlayerTextDrawLetterSize(playerid, CarUpgradePTDText[playerid][TextIndx+3], 0.2526, 1.2058);
			PlayerTextDrawAlignment(playerid, CarUpgradePTDText[playerid][TextIndx+3], 2);
			PlayerTextDrawColor(playerid, CarUpgradePTDText[playerid][TextIndx+3], -1);
			PlayerTextDrawBackgroundColor(playerid, CarUpgradePTDText[playerid][TextIndx+3], 255);
			PlayerTextDrawFont(playerid, CarUpgradePTDText[playerid][TextIndx+3], 1);
			PlayerTextDrawSetProportional(playerid, CarUpgradePTDText[playerid][TextIndx+3], 1);
			PlayerTextDrawSetShadow(playerid, CarUpgradePTDText[playerid][TextIndx+3], 0);
		}

		CarUpgradePTD[playerid][9] = CreatePlayerTextDraw(playerid, 199.0000, 374.0000, "LD_BEAT:left"); // пусто
		PlayerTextDrawTextSize(playerid, CarUpgradePTD[playerid][9], 32.0000, 32.0000);
		PlayerTextDrawAlignment(playerid, CarUpgradePTD[playerid][9], 1);
		PlayerTextDrawColor(playerid, CarUpgradePTD[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, CarUpgradePTD[playerid][9], 255);
		PlayerTextDrawFont(playerid, CarUpgradePTD[playerid][9], 4);
		PlayerTextDrawSetProportional(playerid, CarUpgradePTD[playerid][9], 0);
		PlayerTextDrawSetShadow(playerid, CarUpgradePTD[playerid][9], 0);
		PlayerTextDrawSetSelectable(playerid, CarUpgradePTD[playerid][9], true);

		CarUpgradePTD[playerid][10] = CreatePlayerTextDraw(playerid, 410.0000, 374.0000, "LD_BEAT:right"); // пусто
		PlayerTextDrawTextSize(playerid, CarUpgradePTD[playerid][10], 32.0000, 32.0000);
		PlayerTextDrawAlignment(playerid, CarUpgradePTD[playerid][10], 1);
		PlayerTextDrawColor(playerid, CarUpgradePTD[playerid][10], -1);
		PlayerTextDrawBackgroundColor(playerid, CarUpgradePTD[playerid][10], 255);
		PlayerTextDrawFont(playerid, CarUpgradePTD[playerid][10], 4);
		PlayerTextDrawSetProportional(playerid, CarUpgradePTD[playerid][10], 0);
		PlayerTextDrawSetShadow(playerid, CarUpgradePTD[playerid][10], 0);
		PlayerTextDrawSetSelectable(playerid, CarUpgradePTD[playerid][10], true);
		PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][10]);

		TextDrawShowForPlayer(playerid, CarUpgradeTD);
		SetPVarInt(playerid, "CarUpgradeList", 1);
		SetPVarInt(playerid, "CarUpgrade", Type);
		UpdateCarUpgrade(playerid);
		SelectTextDraw(playerid, BitColor_Main);
	}
	return 1;
}

stock UpdateCarUpgrade(playerid)
{
	if(GetPVarInt(playerid, "CarUpgrade") == 1)
	{
		for(new i = 0; i < sizeof(CarUpgradePTD[]); i++) PlayerTextDrawHide(playerid, CarUpgradePTD[playerid][i]);
		for(new i = 0; i < sizeof(CarUpgradePTDText[]); i++) PlayerTextDrawHide(playerid, CarUpgradePTDText[playerid][i]);

		new List = GetPVarInt(playerid, "CarUpgradeList");
		new indx = (List-1)*9;
		for(new i = 0; i < 9; i++)
		{
			if(indx+i > sizeof(CarUpgrade)) break;
			PlayerTextDrawSetPreviewModel(playerid, CarUpgradePTD[playerid][i], CarUpgrade[indx+i][cuCarModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, CarUpgradePTD[playerid][i], random(256), random(256));
			PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][i]);

			new str[50];
			new TextIndx = i*4;
			if(CarUpgrade[indx+i][cuCarType] == CarUpgradeTypeRegular) str[0] = EOS;
			else if(CarUpgrade[indx+i][cuCarType] == CarUpgradeTypeVIP1) strcat(str, "1 VIP");
			else if(CarUpgrade[indx+i][cuCarType] == CarUpgradeTypeVIP2) strcat(str, "2 VIP");
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx]);

			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+1]);

			str[0] = EOS;
			format(str, sizeof(str), "%d$", CarUpgrade[indx+i][cuCarPrice]);
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx+2], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+2]);

			str[0] = EOS;
			strcat(str, CarName[CarUpgrade[indx+i][cuCarModel]-400]);
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx+3], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+3]);
		}
		if(List > 1) PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][9]);
		if(List*9 < sizeof(CarUpgrade)) PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][10]);
	}
	else if(GetPVarInt(playerid, "CarUpgrade") == 2)
	{
		for(new i = 0; i < sizeof(CarUpgradePTD[]); i++) PlayerTextDrawHide(playerid, CarUpgradePTD[playerid][i]);
		for(new i = 0; i < sizeof(CarUpgradePTDText[]); i++) PlayerTextDrawHide(playerid, CarUpgradePTDText[playerid][i]);

		new List = GetPVarInt(playerid, "CarUpgradeList");
		new indx = (List-1)*9;
		for(new i = 0; i < 9; i++)
		{
			if(indx+i > sizeof(CarUpgradeDonate)) break;
			PlayerTextDrawSetPreviewModel(playerid, CarUpgradePTD[playerid][i], CarUpgradeDonate[indx+i][cuCarModel]);
			PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][i]);

			new str[50];
			new TextIndx = i*4;
			strcat(str, "/donate");
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx]);

			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+1]);

			str[0] = EOS;
			format(str, sizeof(str), "%d$", CarUpgradeDonate[indx+i][cuCarPrice]);
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx+2], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+2]);

			str[0] = EOS;
			strcat(str, CarName[CarUpgradeDonate[indx+i][cuCarModel]-400]);
			PlayerTextDrawSetString(playerid, CarUpgradePTDText[playerid][TextIndx+3], str);
			PlayerTextDrawShow(playerid, CarUpgradePTDText[playerid][TextIndx+3]);
		}
		if(List > 1) PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][9]);
		if(List*9 < sizeof(CarUpgradeDonate)) PlayerTextDrawShow(playerid, CarUpgradePTD[playerid][10]);
	}
	return 1;
}

stock CloseCarUpgrade(playerid)
{
	if(GetPVarInt(playerid, "CarUpgrade"))
	{
		for(new i = 0; i < sizeof(CarUpgradePTD[]); i++)
		{
			if(CarUpgradePTD[playerid][i])
			{
				PlayerTextDrawHide(playerid, CarUpgradePTD[playerid][i]);
				PlayerTextDrawDestroy(playerid, CarUpgradePTD[playerid][i]);
				CarUpgradePTD[playerid][i] = PlayerText:0;
			}
		}
		for(new i = 0; i < sizeof(CarUpgradePTDText[]); i++)
		{
			if(CarUpgradePTDText[playerid][i])
			{
				PlayerTextDrawHide(playerid, CarUpgradePTDText[playerid][i]);
				PlayerTextDrawDestroy(playerid, CarUpgradePTDText[playerid][i]);
				CarUpgradePTDText[playerid][i] = PlayerText:0;
			}
		}
		TextDrawHideForPlayer(playerid, CarUpgradeTD);
		DeletePVar(playerid, "CarUpgrade");
		DeletePVar(playerid, "CarUpgradeList");
		DeletePVar(playerid, "CarUpgradeIndx");
		DeletePVar(playerid, "CarUpgradeSlot");
		CancelSelectTextDraw(playerid);
		CloseGarage(playerid);
	}
	return 1;
}

forward ShowGarage(playerid);
public ShowGarage(playerid)
{
	new row = cache_num_rows();
	if(row || GetPVarInt(playerid, "CarUpgrade"))
	{
		new VehID[3] = {0, ...};
		new VehModel[3] = {0, ...};
		new bool:VehSelected[3] = {false, ...};
		new VehColor1[3] = {0, ...};
		new VehColor2[3] = {0, ...};

		for(new i = 0; i < row; i++)
		{
			if(i >= 3) break;
			new VehSlot = 0;
			cache_get_value_name_int(i, "GarageSlot", VehSlot);
			new indx = VehSlot-1;
			if(indx >= 3) continue;
			cache_get_value_name_int(i, "ID", VehID[indx]);
			cache_get_value_name_int(i, "Model", VehModel[indx]);
			cache_get_value_name_bool(i, "Selected", VehSelected[indx]);
			cache_get_value_name_int(i, "Color1", VehColor1[indx]);
			cache_get_value_name_int(i, "Color2", VehColor2[indx]);
		}
		TextDrawShowForPlayer(playerid, GarageTD);
		for(new i = 0; i < sizeof(GaragePTD[]); i++)
		{
			if(!VehModel[i])
			{
				PlayerTextDrawSetPreviewModel(playerid, GaragePTD[playerid][i], 18631);
				PlayerTextDrawSetPreviewVehCol(playerid, GaragePTD[playerid][i], 1, 1);
			}
			else
			{
				if(VehSelected[i])
				{
					PlayerTextDrawBackgroundColor(playerid, GaragePTD[playerid][i], 0x00FA9AFF);

				}
				else PlayerTextDrawBackgroundColor(playerid, GaragePTD[playerid][i], -1061109505);
				PlayerTextDrawSetPreviewModel(playerid, GaragePTD[playerid][i], VehModel[i]);
				PlayerTextDrawSetPreviewVehCol(playerid, GaragePTD[playerid][i], VehColor1[i], VehColor2[i]);
			}
			new str[30];
			format(str, sizeof(str), "GarageID_%d", i+1);
			SetPVarInt(playerid, str, VehID[i]);
			PlayerTextDrawShow(playerid, GaragePTD[playerid][i]);
		}
		SetPVarInt(playerid, "OpenGarage", 1);
		SelectTextDraw(playerid, BitColor_Main);
	}
	else return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас нет машин");
	return 1;
}

stock CloseGarage(playerid)
{
	TextDrawHideForPlayer(playerid, GarageTD);
	for(new i = 0; i < sizeof(GaragePTD[]); i++)
	{
		new str[30];
		format(str, sizeof(str), "GarageID_%d", i+1);
		DeletePVar(playerid, str);
		PlayerTextDrawHide(playerid, GaragePTD[playerid][i]);
	}
	DeletePVar(playerid, "OpenGarage");
	CancelSelectTextDraw(playerid);
	return 1;
}

stock Float:frandom(Float:max)
{
	return floatdiv(float(random(0)), floatdiv(float(cellmax), max));
}

stock Float:mathfrandom(Float:min, Float:max)
{
	return floatadd(frandom(floatsub(max, min)), min);
}

stock ShowFisherPanel(playerid, FishCount)
{
	HideFisherPanel(playerid);
	for(new i = 0; i < sizeof(FisherTD); i++) TextDrawShowForPlayer(playerid, FisherTD[i]);
	new str[100];
	format(str, sizeof(str), "Fishing_%d_Sec", GetPVarInt(playerid, "FishingTime"));
	PlayerTextDrawSetString(playerid, FisherPTD[playerid], str);
	PlayerTextDrawShow(playerid, FisherPTD[playerid]);

	SetPVarInt(playerid, "FishCount", FishCount);
	for(new i = 0; i < FishCount; i++)
	{
		new PlayerText:FishPTD = CreatePlayerTextDraw(playerid, mathfrandom(202.3, 436.6) , mathfrandom(103.5, 336.6) , ""); // пусто
		PlayerTextDrawTextSize(playerid, FishPTD, 30.0000, 30.0000);
		PlayerTextDrawAlignment(playerid, FishPTD, 1);
		PlayerTextDrawColor(playerid, FishPTD, -1);
		PlayerTextDrawFont(playerid, FishPTD, 5);
		PlayerTextDrawSetProportional(playerid, FishPTD, 0);
		PlayerTextDrawSetShadow(playerid, FishPTD, 0);
		PlayerTextDrawSetSelectable(playerid, FishPTD, true);
		switch(random(4))
		{
			case 0:
			{
				PlayerTextDrawSetPreviewModel(playerid, FishPTD, 19630);
				PlayerTextDrawSetPreviewRot(playerid, FishPTD, 0.0000, 0.0000, 0.0000, 0.6500);
			}
			case 1:
			{
				PlayerTextDrawSetPreviewModel(playerid, FishPTD, 1599);
				PlayerTextDrawSetPreviewRot(playerid, FishPTD, 0.0000, 0.0000, 90.0000, 0.7500);
			}
			case 2:
			{
				PlayerTextDrawSetPreviewModel(playerid, FishPTD, 1604);
				PlayerTextDrawSetPreviewRot(playerid, FishPTD, 0.0000, 0.0000, 90.0000, 0.7500);
			}
			case 3:
			{
				PlayerTextDrawSetPreviewModel(playerid, FishPTD, 1600);
				PlayerTextDrawSetPreviewRot(playerid, FishPTD, 0.0000, 0.0000, 90.0000, 0.8500);
			}
		}
		PlayerTextDrawBackgroundColor(playerid, FishPTD, 0x00000000);
		PlayerTextDrawShow(playerid, FishPTD);

		str[0] = EOS;
		format(str, sizeof(str), "FishPTD_%d", i);
		SetPVarInt(playerid, str, _:FishPTD);
	}
	SelectTextDraw(playerid, BitColor_Main);
	return 1;
}

stock HideFisherPanel(playerid)
{
	for(new i = 0; i < sizeof(FisherTD); i++) TextDrawHideForPlayer(playerid, FisherTD[i]);
	PlayerTextDrawHide(playerid, FisherPTD[playerid]);

	new FishCount = GetPVarInt(playerid, "FishCount");
	if(FishCount)
	{
		DeletePVar(playerid, "FishCount");
		for(new i = 0; i < FishCount; i++)
		{
			new str[50];
			format(str, sizeof(str), "FishPTD_%d", i);

			new PlayerText:FishPTD = PlayerText:GetPVarInt(playerid, str);
			if(FishPTD)
			{
				PlayerTextDrawHide(playerid, FishPTD);
				PlayerTextDrawDestroy(playerid, FishPTD);
			}

			DeletePVar(playerid, str);
		}
	}
	CancelSelectTextDraw(playerid);
	return 1;
}

stock Float:GetVehicleSpeed(vehicleid)
{
	new Float:v_x;
	new Float:v_y;
	new Float:v_z;
	GetVehicleVelocity(vehicleid, v_x, v_y, v_z);
	return (floatsqroot((v_x * v_x) + (v_y * v_y) + (v_z * v_z)) * 100.0);
}

stock SetSpecPanelInfo(playerid, targetid)
{
	new str[100];
	format(str, sizeof(str), "Level:__%d", pInfo[targetid][pLevel]);
	PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][0], str);

	format(str, sizeof(str), "Warns:_%d/3", pInfo[targetid][pWarn]);
	PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][1], str);

	format(str, sizeof(str), "Ping:_%d", GetPlayerPing(targetid));
	PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][2], str);

	AntiCheatGetHealth(targetid, pInfo[targetid][pHealth]);

	format(str, sizeof(str), "HP:_%.0f", pInfo[targetid][pHealth]);
	PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][3], str);

	new vehicleid = GetPlayerVehicleID(targetid);
	if(vehicleid)
	{
		format(str, sizeof(str), "Speed:_%.0f km/h", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][4], str);

		new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine) PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][5], "Engine:_~g~V");
		else PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][5], "Engine:_~r~X");

		new Float:health;
		AntiCheatGetVehicleHealth(vehicleid, health);
		format(str, sizeof(str), "CarHP:_%.2f", health);
		PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][6], str);
	}
	else
	{
		PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][4], "Speed:_No_Car");
		PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][5], "Engine:_No_Car");
		PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][6], "CarHP:_No_Car");
	}

	format(str, sizeof(str), "%s", pInfo[targetid][pName]);
	PlayerTextDrawSetString(playerid, SpecPanelPTD[playerid][7], str);

	ShowSpecPanelTD(playerid);
	return 1;
}

stock ShowCheaterPanelTD(playerid)
{
	for(new i = 0; i < sizeof(CheaterPanelTD); i++) TextDrawShowForPlayer(playerid, CheaterPanelTD[i]);
	UpdateCheaterPanelTD();
}

stock UpdateCheaterPanelTD()
{
	new str[50];
	format(str, sizeof(str), "%03d/%03d/%03d/%03d/%03d/%03d/%03d/%03d/%03d/%03d", CheaterPanelID[0], CheaterPanelID[1], CheaterPanelID[2], CheaterPanelID[3], CheaterPanelID[4], CheaterPanelID[5], CheaterPanelID[6],
	CheaterPanelID[7],
	CheaterPanelID[8],
	CheaterPanelID[9]);
	TextDrawSetString(CheaterPanelTD[3], str);
	return 1;
}

stock HideCheaterPanelTD(playerid)
{
	for(new i = 0; i < sizeof(CheaterPanelTD); i++) TextDrawHideForPlayer(playerid, CheaterPanelTD[i]);
}

stock IsPlayerOnCheaterPanel(playerid)
{
	for(new i = 0; i < sizeof(CheaterPanelID); i++)
	{
		if(CheaterPanelID[i] == playerid) return true;
	}
	return false;
}

stock AddPlayerOnCheaterPanel(playerid)
{
	if(IsPlayerOnCheaterPanel(playerid)) return 1;

	for(new i = 0; i < sizeof(CheaterPanelID); i++)
	{
		if(CheaterPanelID[i] == -1)
		{
			CheaterPanelID[i] = playerid;
			return UpdateCheaterPanelTD();
		}
	}

	for(new i = sizeof(CheaterPanelID)-1; i >= 0 ; i--)
	{
		if(i == 0) CheaterPanelID[i] = playerid;
		else CheaterPanelID[i] = CheaterPanelID[i-1];
	}
	return UpdateCheaterPanelTD();
}

stock RemovePlayerOnCheaterPanel(playerid)
{
	if(!IsPlayerOnCheaterPanel(playerid)) return 1;

	for(new i = 0; i < sizeof(CheaterPanelID); i++)
	{
		if(CheaterPanelID[i] == playerid)
		{
			CheaterPanelID[i] = -1;
			break;
		}
	}

	return UpdateCheaterPanelTD();
}

stock ShowSpecPanelTD(playerid)
{
	for(new i = 0; i < sizeof(SpecPanelTD); i++) TextDrawShowForPlayer(playerid, SpecPanelTD[i]);
	for(new i = 0; i < sizeof(SpecPanelPTD[]); i++) PlayerTextDrawShow(playerid, SpecPanelPTD[playerid][i]);
	SelectTextDraw(playerid, BitColor_Main);
	return 1;
}

stock HideSpecPanelTD(playerid)
{
	for(new i = 0; i < sizeof(SpecPanelTD); i++) TextDrawHideForPlayer(playerid, SpecPanelTD[i]);
	for(new i = 0; i < sizeof(SpecPanelPTD[]); i++) PlayerTextDrawHide(playerid, SpecPanelPTD[playerid][i]);
	return 1;
}

stock SpectatePlayer(playerid, targetid)
{
	new vehicleid = GetPlayerVehicleID(targetid);

	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
	SetPlayerInterior(playerid, GetPlayerInterior(targetid));

	if(vehicleid) PlayerSpectateVehicle(playerid, vehicleid);
	else PlayerSpectatePlayer(playerid, targetid);

	SetSpecPanelInfo(playerid, targetid);
	return 1;
}

stock StopSpectate(playerid)
{
	TogglePlayerSpectating(playerid, false);
	HideSpecPanelTD(playerid);
	CancelSelectTextDraw(playerid);
	return 1;
}

stock RemovePlayerObject(playerid)
{
	//Ворота К.А.С.С ЛВ
	RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
	////////////////////
	//Spawn
	RemoveBuildingForPlayer(playerid, 18520, -2224.7109, -2288.4375, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18521, -2213.9688, -2295.9609, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18522, -2201.9609, -2302.9219, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, -2218.3906, -2271.3047, 29.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 18234, -2224.7109, -2288.4375, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18235, -2213.9688, -2295.9609, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18236, -2201.9609, -2302.9219, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, -2183.9063, -2299.0391, 29.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 18214, -2160.0625, -2308.6250, 41.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2210.8125, -2257.0469, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2211.0469, -2252.9766, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2207.9141, -2248.8672, 30.8281, 0.25);
	////////////////////
	//Лесопилка
	RemoveBuildingForPlayer(playerid, 785, -1622.8438, -2211.5938, 21.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -1629.0781, -2269.7188, 27.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -1585.3984, -2211.6406, 8.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -1629.0781, -2269.7188, 27.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -1585.3984, -2211.6406, 8.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -1622.8438, -2211.5938, 21.8750, 0.25);
	///////////////////
	//Мэрия
	RemoveBuildingForPlayer(playerid, 705, -2684.7188, 399.3203, 3.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 705, -2727.8672, 398.9219, 3.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 705, -2729.9844, 353.9453, 3.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 705, -2684.1484, 352.6797, 3.7734, 0.25);
	//////////////////
	//Шахта
	RemoveBuildingForPlayer(playerid, 11476, -825.7891, 1564.1641, 30.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 11428, -730.7109, 1544.4922, 43.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 11434, -743.9688, 1592.1172, 30.8594, 0.25);
	//////////////////
	//Vending Machines
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);
	//////////////////
	//Prison
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16619, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 16294, 15.1797, 1719.3906, 21.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 15.6172, 1719.1641, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 15.6016, 1719.1719, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 237.6953, 1696.8750, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 237.6797, 1696.8828, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16293, 238.0703, 1697.5547, 21.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 113.3828, 1814.4531, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 220.3828, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 228.7969, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 236.9922, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 103.8906, 1901.1016, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 16323, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 233.4297, 1934.8438, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 2887, 213.0821, 1875.7795, 17.6406, 200.25);
	RemoveBuildingForPlayer(playerid, 2888, 213.0821, 1875.7795, 17.6406, 200.25);
	RemoveBuildingForPlayer(playerid, 2889, 213.0821, 1875.7795, 17.6406, 200.25);
	//////////////////
	//Hospital
	RemoveBuildingForPlayer(playerid, 669, -332.4063, 1072.2422, 18.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -342.0781, 1078.4609, 18.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -334.4531, 1085.9922, 19.0156, 0.25);
	//////////////////
	//Army
	RemoveBuildingForPlayer(playerid, 16615, -389.7656, 1515.1641, 74.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 16137, -389.7656, 1515.1641, 74.5547, 0.25);
	//////////////////
	//Казино для новичков
	RemoveBuildingForPlayer(playerid, 1895, 1117.2813, -1.6484, 1002.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1125.1406, -3.4141, 1000.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1127.0781, -1.6797, 1000.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1125.1484, -0.0313, 1000.5781, 0.25);
	//////////////////
	//Казино Калигула
	RemoveBuildingForPlayer(playerid, 1978, 2230.5703, 1589.1875, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2242.3672, 1589.1875, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2230.5703, 1594.7578, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2242.3672, 1594.7578, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2230.3750, 1602.7500, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2241.3125, 1602.7500, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2243.1250, 1604.4375, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2232.1875, 1604.4375, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2239.4297, 1604.4531, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2228.4922, 1604.4531, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2241.3125, 1606.2734, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 2230.3750, 1606.2734, 1006.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2230.5703, 1614.5938, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2241.4453, 1614.5547, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2230.5703, 1619.6563, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 2241.4453, 1619.6094, 1006.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1895, 2252.0313, 1584.4219, 1007.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1895, 2261.6328, 1584.4297, 1007.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1895, 2271.7266, 1584.4219, 1007.1094, 0.25);
	//////////////////
	//Казино 4 Дракона
	RemoveBuildingForPlayer(playerid, 1895, 1938.0469, 986.6250, 992.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1895, 1940.6875, 989.1719, 992.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1895, 1943.2188, 986.5234, 992.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1959.3984, 1010.1172, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1960.3672, 1015.6641, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1960.3672, 1020.1719, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1962.3438, 1015.6641, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1962.3438, 1020.1797, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1963.7109, 1010.1172, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 14561, 1964.2109, 1017.8047, 998.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1959.3984, 1025.6953, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1963.7109, 1025.6953, 992.5078, 0.25);
	return 1;
}

stock ShowPlayerSpeedometr(playerid, vehicleid)
{
	if(GetPVarInt(playerid, "SpeedometrID")) HidePlayerSpeedometr(playerid);

	new string[100];
	if(!IsAPlane(vInfo[vehicleid][vModel]) && !IsABoat(vInfo[vehicleid][vModel]))
	{
		if(vInfo[vehicleid][vFuel] <= 10.0)
		{
	   		format(string, sizeof(string), "~w~Fuel:~r~%.1f", vInfo[vehicleid][vFuel]);
	   	}
		else if(vInfo[vehicleid][vFuel] <= 30.0)
		{
			format(string, sizeof(string), "~w~Fuel:~y~%.1f", vInfo[vehicleid][vFuel]);
		}
		else
		{
			format(string, sizeof(string), "~w~Fuel:~g~%.1f", vInfo[vehicleid][vFuel]);
		}
		PlayerTextDrawSetString(playerid, FuelPTD[playerid], string);
		PlayerTextDrawShow(playerid, FuelPTD[playerid]);
	}

	string[0] = EOS;
	format(string, sizeof(string), "%.0f km/h", GetVehicleSpeed(vInfo[vehicleid][vServerID]));
	PlayerTextDrawSetString(playerid, SpeedPTD[playerid], string);
	PlayerTextDrawShow(playerid, SpeedPTD[playerid]);

	SetPVarInt(playerid, "SpeedometrID", SetTimerEx("Speedometr", 500, true, "dd", playerid, vehicleid));
	return 1;
}

stock HidePlayerSpeedometr(playerid)
{
	PlayerTextDrawHide(playerid, SpeedPTD[playerid]);
	PlayerTextDrawHide(playerid, FuelPTD[playerid]);

	if(GetPVarInt(playerid, "SpeedometrID"))
	{
		KillTimer(GetPVarInt(playerid, "SpeedometrID"));
		DeletePVar(playerid, "SpeedometrID");
	}
	return 1;
}

forward VehicleProcessor();
public VehicleProcessor()
{
	foreach(new i : Vehicle)
	{
		if(IsABike(vInfo[i][vModel]) || IsAPlane(vInfo[i][vModel]) || IsABoat(vInfo[i][vModel])) continue;

		new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
		GetVehicleParamsEx(vInfo[i][vServerID], engine, lights, alarm, doors, bonnet, boot, objective);

		new Float:Health;
		AntiCheatGetVehicleHealth(vInfo[i][vServerID], Health);

		if(engine)
		{
			if(vInfo[i][vFuel] > 0.0)
			{
				if(vInfo[i][vType] == VehicleTypeFraction && vInfo[i][vOwner] == Fraction_Taxi)
				{

				}
				else
				{
					vInfo[i][vFuel] -= 0.02;
					if(vInfo[i][vFuel] <= 0.0)
					{
						vInfo[i][vFuel] = 0.0;
						SetVehicleParamsEx(vInfo[i][vServerID], false, lights, alarm, doors, bonnet, boot, objective);
						foreach(new j: Player)
						{
							if(GetPlayerVehicleID(j) == vInfo[i][vServerID] && GetPlayerState(j) == PLAYER_STATE_DRIVER)
							{
								SendClientMessage(j, -1, Color_Grey"Двигатель заглох. В транспорте закончилось топливо.");
								break;
							}
						}
					}
				}
			}
			if(Health < 400.0)
			{
				SetVehicleParamsEx(vInfo[i][vServerID], false, lights, alarm, doors, bonnet, boot, objective);
				foreach(new j: Player)
				{
					if(GetPlayerVehicleID(j) == vInfo[i][vServerID] && GetPlayerState(j) == PLAYER_STATE_DRIVER)
					{
						SendClientMessage(j, -1, Color_Grey"Двигатель заглох. Вызовите механика (/service mechanic).");
						break;
					}
				}
			}
		}
	}
	return 1;
}

forward Speedometr(playerid, vehicleid);
public Speedometr(playerid, vehicleid)
{
	new string[100];
	if(!IsAPlane(vInfo[vehicleid][vModel]) && !IsABoat(vInfo[vehicleid][vModel]))
	{
		if(vInfo[vehicleid][vFuel] <= 10.0)
		{
	   		format(string, sizeof(string), "~w~Fuel:~r~%.1f", vInfo[vehicleid][vFuel]);
	   	}
		else if(vInfo[vehicleid][vFuel] <= 30.0)
		{
			format(string, sizeof(string), "~w~Fuel:~y~%.1f", vInfo[vehicleid][vFuel]);
		}
		else
		{
			format(string, sizeof(string), "~w~Fuel:~g~%.1f", vInfo[vehicleid][vFuel]);
		}

		PlayerTextDrawSetString(playerid, FuelPTD[playerid], string);
		PlayerTextDrawShow(playerid, FuelPTD[playerid]);
	}

	string[0] = EOS;
	format(string, sizeof(string), "%.0f km/h", GetVehicleSpeed(vInfo[vehicleid][vServerID]));
	PlayerTextDrawSetString(playerid, SpeedPTD[playerid], string);
	PlayerTextDrawShow(playerid, SpeedPTD[playerid]);
	return 1;
}

stock DestroyPlayerTextDraw(playerid)
{
	PlayerTextDrawDestroy(playerid, FuelPTD[playerid]);
	PlayerTextDrawDestroy(playerid, SpeedPTD[playerid]);
	PlayerTextDrawDestroy(playerid, LevelPTD[playerid]);
	for(new i = 0; i < sizeof(SpecPanelPTD[]); i++) PlayerTextDrawDestroy(playerid, SpecPanelPTD[playerid][i]);
	HideFisherPanel(playerid);
	PlayerTextDrawDestroy(playerid, FisherPTD[playerid]);
	for(new i = 0; i < sizeof(GaragePTD[]); i++) PlayerTextDrawDestroy(playerid, GaragePTD[playerid][i]);
	CloseCarUpgrade(playerid);
	PlayerTextDrawDestroy(playerid, SkinSelectPTD[playerid]);
	for(new i = 0; i < sizeof(CasinoPTD[]); i++) PlayerTextDrawDestroy(playerid, CasinoPTD[playerid][i]);
    for(new i = 0; i < sizeof(GangWarPTD[]); i++) PlayerTextDrawDestroy(playerid, GangWarPTD[playerid][i]);
	return 1;
}

stock LoadPlayerTextDraw(playerid)
{
	//Бензин (Над радаром)
	FuelPTD[playerid] = CreatePlayerTextDraw(playerid, 26.0000, 299.0000, "-");
	PlayerTextDrawFont(playerid, FuelPTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FuelPTD[playerid], 0.4500, 1.3000);
	PlayerTextDrawSetOutline(playerid, FuelPTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FuelPTD[playerid], 0);
	//Скорость (Над радаром)
	SpeedPTD[playerid] = CreatePlayerTextDraw(playerid, 26.0000, 313.0000, "-");
	PlayerTextDrawFont(playerid, SpeedPTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, SpeedPTD[playerid], 0.4500, 1.3000);
	PlayerTextDrawSetOutline(playerid, SpeedPTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpeedPTD[playerid], 0);
	//Уровень
	LevelPTD[playerid] = CreatePlayerTextDraw(playerid,500.912231, 5.250006,"_");
	PlayerTextDrawAlignment(playerid,LevelPTD[playerid],1);
	PlayerTextDrawBackgroundColor(playerid,LevelPTD[playerid],0x000000ff);
	PlayerTextDrawFont(playerid,LevelPTD[playerid],1);
	PlayerTextDrawLetterSize(playerid,LevelPTD[playerid],0.300203, 1.559999);
	PlayerTextDrawColor(playerid,LevelPTD[playerid],0xffffffff);
	PlayerTextDrawSetOutline(playerid,LevelPTD[playerid],1);
	PlayerTextDrawSetProportional(playerid,LevelPTD[playerid],1);
	PlayerTextDrawSetShadow(playerid,LevelPTD[playerid],1);
	//Spectator Panel
	SpecPanelPTD[playerid][0] = CreatePlayerTextDraw(playerid, 538.750000, 183.166519, "Level:__3");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][0], 0.243744, 0.987496);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][0], 1);

	SpecPanelPTD[playerid][1] = CreatePlayerTextDraw(playerid, 538.125000, 245.000000, "Warns:_0");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][1], 0.256249, 1.016666);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][1], 1);

	SpecPanelPTD[playerid][2] = CreatePlayerTextDraw(playerid, 538.500000, 195.249877, "Ping:_15");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][2], 0.243744, 0.987496);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][2], 1);

	SpecPanelPTD[playerid][3] = CreatePlayerTextDraw(playerid, 538.250000, 207.333221, "HP:_100");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][3], 0.243744, 0.987496);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][3], 1);

	SpecPanelPTD[playerid][4] = CreatePlayerTextDraw(playerid, 538.000000, 219.416595, "Speed:_120");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][4], 0.243744, 0.987496);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][4], 1);

	SpecPanelPTD[playerid][5] = CreatePlayerTextDraw(playerid, 538.375000, 232.083206, "Engine:_off");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][5], 0.243744, 0.987496);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][5], 1);

	SpecPanelPTD[playerid][6] = CreatePlayerTextDraw(playerid, 539.125000, 257.083190, "CarHP:_1000");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][6], 0.256249, 1.016666);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][6], 1);

	SpecPanelPTD[playerid][7] = CreatePlayerTextDraw(playerid, 553.125000, 167.416687, "Kolya_Beloff");
	PlayerTextDrawLetterSize(playerid, SpecPanelPTD[playerid][7], 0.215624, 1.016666);
	PlayerTextDrawAlignment(playerid, SpecPanelPTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, SpecPanelPTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, SpecPanelPTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanelPTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, SpecPanelPTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, SpecPanelPTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, SpecPanelPTD[playerid][7], 1);
	//Fisher PTD
	FisherPTD[playerid] = CreatePlayerTextDraw(playerid, 334.0000, 84.0000, "Fishing_5_Sec");
	PlayerTextDrawLetterSize(playerid, FisherPTD[playerid], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, FisherPTD[playerid], 2);
	PlayerTextDrawColor(playerid, FisherPTD[playerid], BitColor_Main);
	PlayerTextDrawBackgroundColor(playerid, FisherPTD[playerid], 255);
	PlayerTextDrawFont(playerid, FisherPTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FisherPTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, FisherPTD[playerid], 0);
	//GaragePTD
	GaragePTD[playerid][0] = CreatePlayerTextDraw(playerid, 200.0000, 300.0000, ""); // пусто
	PlayerTextDrawTextSize(playerid, GaragePTD[playerid][0], 69.5899, 81.0000);
	PlayerTextDrawAlignment(playerid, GaragePTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, GaragePTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, GaragePTD[playerid][0], -1061109505);
	PlayerTextDrawFont(playerid, GaragePTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, GaragePTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, GaragePTD[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, GaragePTD[playerid][0], true);
	PlayerTextDrawSetPreviewModel(playerid, GaragePTD[playerid][0], 18631);
	PlayerTextDrawSetPreviewRot(playerid, GaragePTD[playerid][0], 0.0000, 0.0000, 315.0000, 1.0000);
	PlayerTextDrawSetPreviewVehCol(playerid, GaragePTD[playerid][0], 1, 1);

	GaragePTD[playerid][1] = CreatePlayerTextDraw(playerid, 272.0000, 300.0000, ""); // пусто
	PlayerTextDrawTextSize(playerid, GaragePTD[playerid][1], 69.5899, 81.0000);
	PlayerTextDrawAlignment(playerid, GaragePTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, GaragePTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, GaragePTD[playerid][1], -1061109505);
	PlayerTextDrawFont(playerid, GaragePTD[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, GaragePTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, GaragePTD[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, GaragePTD[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, GaragePTD[playerid][1], 18631);
	PlayerTextDrawSetPreviewRot(playerid, GaragePTD[playerid][1], 0.0000, 0.0000, 315.0000, 1.0000);
	PlayerTextDrawSetPreviewVehCol(playerid, GaragePTD[playerid][1], 1, 1);

	GaragePTD[playerid][2] = CreatePlayerTextDraw(playerid, 344.0000, 300.0000, ""); // пусто
	PlayerTextDrawTextSize(playerid, GaragePTD[playerid][2], 69.5899, 81.0000);
	PlayerTextDrawAlignment(playerid, GaragePTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, GaragePTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, GaragePTD[playerid][2], -1061109505);
	PlayerTextDrawFont(playerid, GaragePTD[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, GaragePTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, GaragePTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, GaragePTD[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, GaragePTD[playerid][2], 18631);
	PlayerTextDrawSetPreviewRot(playerid, GaragePTD[playerid][2], 0.0000, 0.0000, 315.0000, 1.0000);
	PlayerTextDrawSetPreviewVehCol(playerid, GaragePTD[playerid][2], 1, 1);
	//Выбор скина
	SkinSelectPTD[playerid] = CreatePlayerTextDraw(playerid, 315.0000, 350.0000, "50000$"); // пусто
	PlayerTextDrawLetterSize(playerid, SkinSelectPTD[playerid], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SkinSelectPTD[playerid], 2);
	PlayerTextDrawColor(playerid, SkinSelectPTD[playerid], BitColor_Green);
	PlayerTextDrawBackgroundColor(playerid, SkinSelectPTD[playerid], 255);
	PlayerTextDrawFont(playerid, SkinSelectPTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SkinSelectPTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SkinSelectPTD[playerid], 0);
	//Казино
	CasinoPTD[playerid][0] = CreatePlayerTextDraw(playerid, 300.0000, 100.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][0], 0.0000, 18.5666);
	PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][0], 0.0000, 285.0000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, CasinoPTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, CasinoPTD[playerid][0], 80);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][0], 0);

	CasinoPTD[playerid][1] = CreatePlayerTextDraw(playerid, 315.0000, 100.0000, ""); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][1], 0.3726, 1.5336);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][1], 0);

	CasinoPTD[playerid][2] = CreatePlayerTextDraw(playerid, 158.0000, 100.0000, "CASINO____DICE"); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][2], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][2], 0);

	CasinoPTD[playerid][3] = CreatePlayerTextDraw(playerid, 209.0000, 98.0000, "hud:radar_mafiaCasino"); // пусто
	PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][3], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][3], 0);

	CasinoPTD[playerid][4] = CreatePlayerTextDraw(playerid, 237.0000, 179.0000, ""); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][4], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][4], 3);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][4], 0);

	CasinoPTD[playerid][5] = CreatePlayerTextDraw(playerid, 157.0000, 253.0000, "RED"); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][5], 0.4000, 1.6000);
	PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][5], 179.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, CasinoPTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, CasinoPTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, CasinoPTD[playerid][5], true);

	CasinoPTD[playerid][6] = CreatePlayerTextDraw(playerid, 192.0000, 253.0000, "GREEN"); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][6], 0.4000, 1.6000);
	PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][6], 232.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, CasinoPTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, CasinoPTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, CasinoPTD[playerid][6], true);

	CasinoPTD[playerid][7] = CreatePlayerTextDraw(playerid, 245.0000, 253.0000, "BLACK"); // пусто
	PlayerTextDrawLetterSize(playerid, CasinoPTD[playerid][7], 0.4000, 1.6000);
	PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][7], 285.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, CasinoPTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, CasinoPTD[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, CasinoPTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, CasinoPTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, CasinoPTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, CasinoPTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, CasinoPTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, CasinoPTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, CasinoPTD[playerid][7], true);

	//Gang War
    GangWarPTD[playerid][0] = CreatePlayerTextDraw(playerid, 549.0000, 126.0000, "VS~n~~n~Time:_10:00"); // пусто
    PlayerTextDrawLetterSize(playerid, GangWarPTD[playerid][0], 0.4000, 1.6000);
    PlayerTextDrawAlignment(playerid, GangWarPTD[playerid][0], 2);
    PlayerTextDrawColor(playerid, GangWarPTD[playerid][0], -1);
    PlayerTextDrawBackgroundColor(playerid, GangWarPTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, GangWarPTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, GangWarPTD[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, GangWarPTD[playerid][0], 0);

    GangWarPTD[playerid][1] = CreatePlayerTextDraw(playerid, 549.0000, 112.0000, "GROUP1"); // пусто
    PlayerTextDrawLetterSize(playerid, GangWarPTD[playerid][1], 0.4000, 1.6000);
    PlayerTextDrawAlignment(playerid, GangWarPTD[playerid][1], 2);
    PlayerTextDrawColor(playerid, GangWarPTD[playerid][1], -1);
    PlayerTextDrawBackgroundColor(playerid, GangWarPTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, GangWarPTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, GangWarPTD[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, GangWarPTD[playerid][1], 0);

    GangWarPTD[playerid][2] = CreatePlayerTextDraw(playerid, 549.0000, 141.0000, "GROUP2"); // пусто
    PlayerTextDrawLetterSize(playerid, GangWarPTD[playerid][2], 0.4000, 1.6000);
    PlayerTextDrawAlignment(playerid, GangWarPTD[playerid][2], 2);
    PlayerTextDrawColor(playerid, GangWarPTD[playerid][2], -1);
    PlayerTextDrawBackgroundColor(playerid, GangWarPTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, GangWarPTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, GangWarPTD[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, GangWarPTD[playerid][2], 0);
	/////////
	return 1;
}

stock PlayerSitTable(playerid, TableID)
{
	if(GetPVarInt(playerid, "CasinoTable")) return 1;
	if(GetItemCountInInventory(playerid, ItemCasinoCoin) < CasinoTable[TableID][CasTabBet]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"У вас недостаточно фишек чтобы сделать ставку");
	if(CasinoTable[TableID][CasTabStatus]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"За этим столом уже идет игра");
	if(GetPlayerTableCount(TableID) >= CasinoTable[TableID][CasTabMaxPlayer]) return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"За этим столом уже максимальное количество игроков");
	RemovePlayerInventory(playerid, ItemCasinoCoin, CasinoTable[TableID][CasTabBet]);
	CasinoTable[TableID][CasTabBank] += CasinoTable[TableID][CasTabBet];
	for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
	{
		if(CasinoTable[TableID][CasTabPlayers][i] == -1)
		{
			CasinoTable[TableID][CasTabPlayers][i] = playerid;
			CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
			CasinoTable[TableID][CasTabPlayersScore][i] = 0;
			TogglePlayerControllable(playerid, false);
			break;
		}
	}
	if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice)
	{
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][2], "CASINO____DICE");
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][5], "ROLL");
		PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][5], 189.0000, 10.0000);
		for(new i = 0; i < sizeof(CasinoPTD[]); i++) PlayerTextDrawShow(playerid, CasinoPTD[playerid][i]);
		PlayerTextDrawHide(playerid, CasinoPTD[playerid][6]);
		PlayerTextDrawHide(playerid, CasinoPTD[playerid][7]);
	}
	else if(CasinoTable[TableID][CasTabType] == CasinoTable_Points)
	{
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][2], "CASINO____21 POINTS");
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][5], "ROLL");
		PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][5], 189.0000, 10.0000);
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][6], "PASS");
		PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][6], 227.0000, 10.0000);
		for(new i = 0; i < sizeof(CasinoPTD[]); i++) PlayerTextDrawShow(playerid, CasinoPTD[playerid][i]);
		PlayerTextDrawHide(playerid, CasinoPTD[playerid][7]);
	}
	else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
	{
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][2], "CASINO____ROULLETE");
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][5], "RED");
		PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][5], 179.0000, 10.0000);
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][6], "GREEN");
		PlayerTextDrawTextSize(playerid, CasinoPTD[playerid][6], 232.0000, 10.0000);
		PlayerTextDrawSetString(playerid, CasinoPTD[playerid][7], "BLACK");
		for(new i = 0; i < sizeof(CasinoPTD[]); i++) PlayerTextDrawShow(playerid, CasinoPTD[playerid][i]);
	}
	SelectTextDraw(playerid, BitColor_Main);
	SetPVarInt(playerid, "CasinoTable", TableID+1);

	TableUpdateInfo(TableID);

	ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "сел(а) за стол");
	return 1;
}

stock PlayerExitTable(playerid)
{
	new TableID = GetPVarInt(playerid, "CasinoTable");
	if(TableID)
	{
		TableID--;
		if(CasinoTable[TableID][CasTabStatus])
		{
			SelectTextDraw(playerid, BitColor_Main);
			return SendClientMessage(playerid, -1, Color_Red"[Ошибка] "Color_Grey"За этим столом уже идет игра, вы не можете его покинуть");
		}
		DeletePVar(playerid, "CasinoTable");
		AddPlayerInventory(playerid, ItemCasinoCoin, CasinoTable[TableID][CasTabBet]);
		CasinoTable[TableID][CasTabBank] -= CasinoTable[TableID][CasTabBet];
		if(CasinoTable[TableID][CasTabBank] < 0) CasinoTable[TableID][CasTabBank] = 0;
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] == playerid)
			{
				CasinoTable[TableID][CasTabPlayers][i] = -1;
				CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
				CasinoTable[TableID][CasTabPlayersScore][i] = 0;
				TogglePlayerControllable(playerid, true);
				for(new j = 0; j < sizeof(CasinoPTD[]); j++) PlayerTextDrawHide(playerid, CasinoPTD[playerid][j]);
				CancelSelectTextDraw(playerid);

				TableUpdateInfo(TableID);

				break;
			}
		}
		if(pInfo[playerid][pGender]) ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "вышла из-за стола");
		else ProxDetector(playerid, MESSAGE_DIST, BitColor_Me, "вышел из-за стола");

		if(!GetPlayerTableCount(TableID)) EndTableGame(TableID);
	}
	return 1;
}

stock SendMessageTable(TableID, const Message[])
{
	for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
	{
		if(CasinoTable[TableID][CasTabPlayers][i] != -1) SendClientMessage(CasinoTable[TableID][CasTabPlayers][i], -1, Message);
	}
}

stock GetPlayerTableCount(TableID)
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
	{
		if(CasinoTable[TableID][CasTabPlayers][i] != -1) count++;
	}
	return count;
}

stock TableUpdateInfo(TableID)
{
	foreach(new j: Player)
	{
		new PlayerTable = GetPVarInt(j, "CasinoTable");
		if(!PlayerTable || PlayerTable-1 != TableID) continue;

		new str[500];
		if(!CasinoTable[TableID][CasTabStatus])
		{
			if(!CasinoTable[TableID][CasTabTimer])
			{
				PlayerTextDrawSetString(j, CasinoPTD[j][4], "Wait start...");
				PlayerTextDrawShow(j, CasinoPTD[j][4]);
			}
			else
			{
				str[0] = EOS;
				format(str, sizeof(str), "Start to %d", CasinoTable[TableID][CasTabTimer]);
				PlayerTextDrawSetString(j, CasinoPTD[j][4], str);
				PlayerTextDrawShow(j, CasinoPTD[j][4]);
			}
		}
		else
		{
			if(!CasinoTable[TableID][CasTabTimer])
			{
				for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
				{
					if(CasinoTable[TableID][CasTabPlayers][i] != -1 && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWait)
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points)
						{
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWaitAction;
							str[0] = EOS;
							format(str, sizeof(str), Color_White"Подошла очередь "Main_Color"%s "Color_White"тянуть карту", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 10;
						}
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice)
						{
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWaitAction;
							str[0] = EOS;
							format(str, sizeof(str), Color_White"Подошла очередь "Main_Color"%s "Color_White"бросать кости", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 5;
						}
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
						{
							CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWaitAction;
							str[0] = EOS;
							format(str, sizeof(str), Color_White"Подошла очередь "Main_Color"%s "Color_White"делать ставку", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName]);
							SendMessageTable(TableID, str);
							CasinoTable[TableID][CasTabTimer] = 5;
						}
						break;
					}
					else if(i == 9) TableCheckWinner(TableID);
				}
			}
			else
			{
				for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
				{
					if(CasinoTable[TableID][CasTabPlayers][i] != -1 && CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerWaitAction)
					{
						str[0] = EOS;
						format(str, sizeof(str), "Wait %s %d", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName], CasinoTable[TableID][CasTabTimer]);
						PlayerTextDrawSetString(j, CasinoPTD[j][4], str);
						PlayerTextDrawShow(j, CasinoPTD[j][4]);
						break;
					}
				}
			}
		}
		str[0] = EOS;
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1)
			{
				new SubStr[20];
				switch(CasinoTable[TableID][CasTabPlayersStatus][i])
				{
					case CasinoPlayerWait:
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points) format(SubStr, sizeof(SubStr), " ~y~%d", CasinoTable[TableID][CasTabPlayersScore][i]);
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice) SubStr[0] = EOS;
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete) SubStr[0] = EOS;
					}
					case CasinoPlayerWaitAction:
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points) format(SubStr, sizeof(SubStr), " ~y~%d", CasinoTable[TableID][CasTabPlayersScore][i]);
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice) format(SubStr, sizeof(SubStr), " ~y~Wait");
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete) format(SubStr, sizeof(SubStr), " ~y~Wait");
					}
					case CasinoPlayerPass:
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points) format(SubStr, sizeof(SubStr), " ~y~%d Pass", CasinoTable[TableID][CasTabPlayersScore][i]);
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice) SubStr[0] = EOS;
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete) SubStr[0] = EOS;
					}
					case CasinoPlayerRolled:
					{
						if(CasinoTable[TableID][CasTabType] == CasinoTable_Points) format(SubStr, sizeof(SubStr), " ~y~%d", CasinoTable[TableID][CasTabPlayersScore][i]);
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice) format(SubStr, sizeof(SubStr), " ~y~Roll %d", CasinoTable[TableID][CasTabPlayersScore][i]);
						else if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
						{
							switch(CasinoTable[TableID][CasTabPlayersScore][i])
							{
								case 0: format(SubStr, sizeof(SubStr), " ~y~-");
								case 1: format(SubStr, sizeof(SubStr), " ~r~RED");
								case 2: format(SubStr, sizeof(SubStr), " ~g~GREEN");
								case 3: format(SubStr, sizeof(SubStr), " ~l~BLACK");
							}
						}
					}
					case CasinoPlayerLose: format(SubStr, sizeof(SubStr), " ~r~Lose");
					case CasinoPlayerWin: format(SubStr, sizeof(SubStr), " ~g~Win");
				}
				format(str, sizeof(str), "%s~w~%s%s~n~", str, pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName], SubStr);
			}
		}
		PlayerTextDrawSetString(j, CasinoPTD[j][1], str);
		PlayerTextDrawShow(j, CasinoPTD[j][1]);
	}
	return 1;
}

stock TableCheckWinner(TableID)
{
	new BiggestScore = 0;
	new PlayerWithBiggestScore = 0;

	if(CasinoTable[TableID][CasTabType] == CasinoTable_Roullete)
	{
		new str[200];
		BiggestScore = 1+random(3);
		switch(BiggestScore)
		{
			case 1: format(str, sizeof(str), Main_Color"красное");
			case 2: format(str, sizeof(str), Main_Color"зеленое");
			case 3: format(str, sizeof(str), Main_Color"черное");
		}
		format(str, sizeof(str), Color_White"Выпало %s", str);
		SendMessageTable(TableID, str);

		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1)
			{
				if(CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerRolled)
				{
					if(CasinoTable[TableID][CasTabPlayersScore][i] == BiggestScore) PlayerWithBiggestScore++;
				}
			}
		}

		if(!PlayerWithBiggestScore)
		{
			for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
			{
				if(CasinoTable[TableID][CasTabPlayers][i] != -1)
				{
					if(CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerRolled)
					{
						BiggestScore = CasinoTable[TableID][CasTabPlayersScore][i];
						PlayerWithBiggestScore++;
					}
				}
			}
		}

	}
	else if(CasinoTable[TableID][CasTabType] == CasinoTable_Points)
	{
		new bool:Passed = false;
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1)
			{
				if(CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerPass || CasinoTable[TableID][CasTabPlayersScore][i] > 21 || CasinoTable[TableID][CasTabPlayersScore][i] == 21)
				{
					Passed = true;
					break;
				}
			}
		}

		if(!Passed)
		{
			for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
			{
				if(CasinoTable[TableID][CasTabPlayers][i] != -1) CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
			}
			TableUpdateInfo(TableID);
			return 1;
		}

		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1)
			{
				if(CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerRolled || CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerPass)
				{
					if((BiggestScore > 21 && CasinoTable[TableID][CasTabPlayersScore][i] <= 21) || (CasinoTable[TableID][CasTabPlayersScore][i] > BiggestScore && CasinoTable[TableID][CasTabPlayersScore][i] <= 21))
					{
						BiggestScore = CasinoTable[TableID][CasTabPlayersScore][i];
						PlayerWithBiggestScore = 1;
					}
					else if((!BiggestScore || BiggestScore > 21) && CasinoTable[TableID][CasTabPlayersScore][i] > 21)
					{
						BiggestScore = CasinoTable[TableID][CasTabPlayersScore][i];
						PlayerWithBiggestScore++;
					}
					else if(CasinoTable[TableID][CasTabPlayersScore][i] == BiggestScore) PlayerWithBiggestScore++;
				}
			}
		}
	}
	else if(CasinoTable[TableID][CasTabType] == CasinoTable_Dice)
	{
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1 && (CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerRolled || CasinoTable[TableID][CasTabPlayersStatus][i] == CasinoPlayerLose))
			{
				if(CasinoTable[TableID][CasTabPlayersScore][i] > BiggestScore)
				{
					BiggestScore = CasinoTable[TableID][CasTabPlayersScore][i];
					PlayerWithBiggestScore = 1;
				}
				else if(CasinoTable[TableID][CasTabPlayersScore][i] == BiggestScore) PlayerWithBiggestScore++;
			}
		}
	}

	if(PlayerWithBiggestScore == 1)
	{
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1 && CasinoTable[TableID][CasTabPlayersScore][i] == BiggestScore)
			{
				new str[200];
				format(str, sizeof(str), Main_Color"%s "Color_White"выиграл и забрал банк в %d фишек", pInfo[CasinoTable[TableID][CasTabPlayers][i]][pName], CasinoTable[TableID][CasTabBank]);
				SendMessageTable(TableID, str);
				AddPlayerInventory(CasinoTable[TableID][CasTabPlayers][i], ItemCasinoCoin, CasinoTable[TableID][CasTabBank]);
				break;
			}
		}
	}
	else if(PlayerWithBiggestScore == CasinoTable[TableID][CasTabMaxPlayer])
	{
		SendMessageTable(TableID, "Игра окончена в ничью, ставки возвращены");
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1) AddPlayerInventory(CasinoTable[TableID][CasTabPlayers][i], ItemCasinoCoin, CasinoTable[TableID][CasTabBet]);
		}
	}
	else
	{
		new count = CasinoTable[TableID][CasTabBank]/PlayerWithBiggestScore;
		SendMessageTable(TableID, "Игра окончена в ничью, ставки вышедших/проигравших игроков поделены между оставшимися игроками");
		for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
		{
			if(CasinoTable[TableID][CasTabPlayers][i] != -1 && CasinoTable[TableID][CasTabPlayersScore][i] == BiggestScore) AddPlayerInventory(CasinoTable[TableID][CasTabPlayers][i], ItemCasinoCoin, count);
		}
	}
	return EndTableGame(TableID);
}

stock EndTableGame(TableID)
{
	for(new i = 0; i < MAX_PLAYER_CASINOTABLE; i++)
	{
		if(CasinoTable[TableID][CasTabPlayers][i] != -1)
		{
			DeletePVar(CasinoTable[TableID][CasTabPlayers][i], "CasinoTable");
			TogglePlayerControllable(CasinoTable[TableID][CasTabPlayers][i], true);
			for(new j = 0; j < sizeof(CasinoPTD[]); j++) PlayerTextDrawHide(CasinoTable[TableID][CasTabPlayers][i], CasinoPTD[CasinoTable[TableID][CasTabPlayers][i]][j]);
			CancelSelectTextDraw(CasinoTable[TableID][CasTabPlayers][i]);

			CasinoTable[TableID][CasTabPlayers][i] = -1;
			CasinoTable[TableID][CasTabPlayersStatus][i] = CasinoPlayerWait;
			CasinoTable[TableID][CasTabPlayersScore][i] = 0;
		}
	}

	CasinoTable[TableID][CasTabBank] = 0;
	CasinoTable[TableID][CasTabStatus] = false;
	CasinoTable[TableID][CasTabTimer] = 0;
	CasinoTable[TableID][CasTabPlayers] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
	CasinoTable[TableID][CasTabPlayersStatus] = {CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait, CasinoPlayerWait};
	CasinoTable[TableID][CasTabPlayersScore] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	return 1;
}

stock PlayerLevelUpdate(playerid)
{
	if((pInfo[playerid][pExp] >= (pInfo[playerid][pLevel]+1)*4) && pInfo[playerid][pLevel] < 50)
	{
		SendClientMessage(playerid, -1, Color_Yellow"У вас достаточно EXP чтобы перейти на следующий уровень!");
		SendClientMessage(playerid, -1, Color_Yellow"Используйте /buylevel");
	}

	if(pInfo[playerid][pLevel] > 50)
	{
		pInfo[playerid][pLevel] = 50;
		pInfo[playerid][pExp] = 0;
		SavePlayerInt(playerid, "Level", pInfo[playerid][pLevel]);
		SavePlayerInt(playerid, "Exp", pInfo[playerid][pExp]);
	}

	new string[100];
	format(string,sizeof(string),"LvL[~y~%d~w~] Exp[~y~%d~w~/~y~%d~w~]",pInfo[playerid][pLevel],pInfo[playerid][pExp],(pInfo[playerid][pLevel]+1)*4);
	PlayerTextDrawSetString(playerid, LevelPTD[playerid], string);
	PlayerTextDrawShow(playerid, LevelPTD[playerid]);
	return 1;
}

stock CreateMineMetall()
{
	for(new i = 0; i < sizeof(MineMetall); i++)
	{
		MineMetall[i][MetallID] = CreateDynamicObject(3929+random(3), MineMetall[i][MetallX], MineMetall[i][MetallY], MineMetall[i][MetallZ], MineMetall[i][MetallRX], MineMetall[i][MetallRY], MineMetall[i][MetallRZ], 2, 0);
		MineMetall[i][MetallText] = CreateDynamic3DTextLabel(Main_Color"Руда: Готово к добыче\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы добыть", -1, MineMetall[i][MetallX], MineMetall[i][MetallY], MineMetall[i][MetallZ]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 0);
		MineMetall[i][MetallArea] = CreateDynamicSphere(MineMetall[i][MetallX], MineMetall[i][MetallY], MineMetall[i][MetallZ], 2.0, 2, 0);
		MineMetall[i][MetallTimer] = 0;
	}

	for(new i = 0; i < sizeof(PrisonMineMetall); i++)
	{
		PrisonMineMetall[i][MetallID] = CreateDynamicObject(3929+random(3), PrisonMineMetall[i][MetallX], PrisonMineMetall[i][MetallY], PrisonMineMetall[i][MetallZ], PrisonMineMetall[i][MetallRX], PrisonMineMetall[i][MetallRY], PrisonMineMetall[i][MetallRZ], 100, 16);
		PrisonMineMetall[i][MetallText] = CreateDynamic3DTextLabel(Main_Color"Камень: Готово к добыче\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы добыть", -1, PrisonMineMetall[i][MetallX], PrisonMineMetall[i][MetallY], PrisonMineMetall[i][MetallZ]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 100, 16);
		PrisonMineMetall[i][MetallArea] = CreateDynamicSphere(PrisonMineMetall[i][MetallX], PrisonMineMetall[i][MetallY], PrisonMineMetall[i][MetallZ], 2.0, 100, 16);
		PrisonMineMetall[i][MetallTimer] = 0;
	}
	return 1;
}

stock CreateFarmPlant()
{
	for(new i = 0; i < sizeof(FarmPlant); i++)
	{
		FarmPlant[i][PlantID] = CreateDynamicObject(804, FarmPlant[i][PlantX], FarmPlant[i][PlantY], FarmPlant[i][PlantZ], 0.0, 0.0, 0.0, 0, 0);
		FarmPlant[i][PlantText] = CreateDynamic3DTextLabel(Main_Color"Урожай: Готово к сбору\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы собрать", -1, FarmPlant[i][PlantX], FarmPlant[i][PlantY], FarmPlant[i][PlantZ]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		FarmPlant[i][PlantArea] = CreateDynamicSphere(FarmPlant[i][PlantX], FarmPlant[i][PlantY], FarmPlant[i][PlantZ], 2.0, 0, 0);
		FarmPlant[i][PlantTimer] = 0;
	}
	return 1;
}

stock CreateLubberjackTree()
{
	for(new i = 0; i < sizeof(LumberjackTree); i++)
	{
		LumberjackTree[i][TreeID] = CreateDynamicObject(687, LumberjackTree[i][TreeX], LumberjackTree[i][TreeY], LumberjackTree[i][TreeZ], 0.0, 0.0, 0.0, 0, 0);
		LumberjackTree[i][TreeText] = CreateDynamic3DTextLabel(Main_Color"Дерево: Можно срубить\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы срубить", -1, LumberjackTree[i][TreeX], LumberjackTree[i][TreeY], LumberjackTree[i][TreeZ]+2.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		LumberjackTree[i][TreeArea] = CreateDynamicSphere(LumberjackTree[i][TreeX], LumberjackTree[i][TreeY], LumberjackTree[i][TreeZ], 2.0, 0, 0);
		LumberjackTree[i][TreeTimer] = 0;
	}
	return 1;
}

stock Create3DText()
{
	Texts3D[TruckerLoadText] = CreateDynamic3DTextLabel(Main_Color"Очередь на загрузку"Color_White": Пусто\n\n"Main_Color"Посигнальте чтобы встать в очередь", -1, -119.0812, -330.1114, 2.4446, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Texts3D[LiveText] = CreateDynamic3DTextLabel(Main_Color"Эфир\n"Color_White"Статус: "Color_Red"Оффлайн", -1, 172.6447,-117.1719,1076.5938, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 6);

	CreateDynamic3DTextLabel(Main_Color"Подплывите сюда чтобы разгрузить рыбу", -1, 2099.3953,-106.5395,1.0695, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	CreateDynamic3DTextLabel(Main_Color"Тайник\n["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]\nЧтобы открыть", -1, -240.2665,-1.2341,1046.3240, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 17);
	return 1;
}

stock CreateActors()
{
	return 1;
}

stock CreateAreas()
{
	Areas[DemorganArea] = CreateDynamicRectangle(40.9290, 897.1449, 1.2233, 942.8676, 2, 0);
	Areas[JailArea] = CreateDynamicRectangle(109.4103, 1814.4352, 243.9080, 1965.7610, 0, 0);
	Areas[JailMineArea] = CreateDynamicRectangle(885.1450,-2814.9128, 1126.8024,-2564.0798, 100, 16);
	Areas[TruckerLoadArea] = CreateDynamicRectangle(-123.9430, -351.1932, -106.1304, -305.8714, 0, 0);
	Areas[CarThiefArea] = CreateDynamicCircle(2518.5730, -1464.0786, 10.0, 0, 0);
	Areas[TrashUnloadArea] = CreateDynamicCircle(2185.6497,-1991.0955, 10.0, 0, 0);
	Areas[FishUnloadArea] = CreateDynamicCircle(2099.3953,-106.5395, 10.0, 0, 0);
	Areas[FarmDeliverUnloadArea] = CreateDynamicCircle(90.0994,-306.6081, 10.0, 0, 0);
	Areas[LiveArea] = CreateDynamicRectangle(170.1479,-119.9004, 175.4543,-113.9935, 6, 6);
	Areas[StashArea] = CreateDynamicSphere(-240.2665,-1.2341,1046.3240, 1.5, 1, 17);
	return 1;
}

stock CreateGates()
{
	Gate[GatePoliceFirst][GateFraction] = Fraction_Police;
	Gate[GatePoliceFirst][GateClose] = Float:{1544.68884, -1630.82727, 13.08090, 0.0, 90.0, 90.0};
	Gate[GatePoliceFirst][GateOpen] = Float:{1544.68884, -1630.82727, 13.08190, 0.0, 0.0, 90.0};
	Gate[GatePoliceFirst][GateSpeed] = 0.0005;
	Gate[GatePoliceFirst][GateID] = CreateDynamicObject(968, Gate[GatePoliceFirst][GateClose][0], Gate[GatePoliceFirst][GateClose][1], Gate[GatePoliceFirst][GateClose][2], Gate[GatePoliceFirst][GateClose][3], Gate[GatePoliceFirst][GateClose][4], Gate[GatePoliceFirst][GateClose][5], 0, 0);
	Gate[GatePoliceFirst][GateArea] = CreateDynamicSphere(Gate[GatePoliceFirst][GateClose][0], Gate[GatePoliceFirst][GateClose][1]+3.2, Gate[GatePoliceFirst][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GatePoliceFirst][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GatePoliceFirst][GateArea],  E_STREAMER_INDX, GatePoliceFirst);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GatePoliceFirst][GateClose][0], Gate[GatePoliceFirst][GateClose][1]+3.2, Gate[GatePoliceFirst][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GatePoliceFirst][GateStatus] = false;

	Gate[GatePoliceSecond][GateFraction] = Fraction_Police;
	Gate[GatePoliceSecond][GateClose] = Float:{1594.07629, -1637.87512, 14.68420, 0.0, 0.0, 0.0};
	Gate[GatePoliceSecond][GateOpen] = Float:{1594.07629, -1637.87512, 9.53820, 0.0, 0.0, 0.0};
	Gate[GatePoliceSecond][GateSpeed] = 1.5;
	Gate[GatePoliceSecond][GateID] = CreateDynamicObject(19912, Gate[GatePoliceSecond][GateClose][0], Gate[GatePoliceSecond][GateClose][1], Gate[GatePoliceSecond][GateClose][2], Gate[GatePoliceSecond][GateClose][3], Gate[GatePoliceSecond][GateClose][4], Gate[GatePoliceSecond][GateClose][5], 0, 0);
	Gate[GatePoliceSecond][GateArea] = CreateDynamicSphere(Gate[GatePoliceSecond][GateClose][0]-6.0, Gate[GatePoliceSecond][GateClose][1], Gate[GatePoliceSecond][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GatePoliceSecond][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GatePoliceSecond][GateArea],  E_STREAMER_INDX, GatePoliceSecond);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GatePoliceSecond][GateClose][0]-6.0, Gate[GatePoliceSecond][GateClose][1], Gate[GatePoliceSecond][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GatePoliceSecond][GateStatus] = false;

	Gate[GateArmyFirst][GateFraction] = Fraction_Army;
	Gate[GateArmyFirst][GateClose] = Float:{-298.8916, 1507.4198, 75.3979, 0.0, 0.0, 0.0};
	Gate[GateArmyFirst][GateOpen] = Float:{-293.4416, 1507.4198, 75.3979, 0.0, 0.0, 0.0};
	Gate[GateArmyFirst][GateSpeed] = 1.5;
	Gate[GateArmyFirst][GateID] = CreateDynamicObject(988, Gate[GateArmyFirst][GateClose][0], Gate[GateArmyFirst][GateClose][1], Gate[GateArmyFirst][GateClose][2], Gate[GateArmyFirst][GateClose][3], Gate[GateArmyFirst][GateClose][4], Gate[GateArmyFirst][GateClose][5], 0, 0);
	Gate[GateArmyFirst][GateArea] = CreateDynamicSphere(Gate[GateArmyFirst][GateClose][0], Gate[GateArmyFirst][GateClose][1], Gate[GateArmyFirst][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateArmyFirst][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateArmyFirst][GateArea],  E_STREAMER_INDX, GateArmyFirst);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateArmyFirst][GateClose][0], Gate[GateArmyFirst][GateClose][1], Gate[GateArmyFirst][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateArmyFirst][GateStatus] = false;

	Gate[GateArmySecond][GateFraction] = Fraction_Army;
	Gate[GateArmySecond][GateClose] = Float:{-305.3826, 1507.4198, 75.3979, 0.0, 0.0, 0.0};
	Gate[GateArmySecond][GateOpen] = Float:{-310.7946, 1507.4198, 75.3979, 0.0, 0.0, 0.0};
	Gate[GateArmySecond][GateSpeed] = 1.5;
	Gate[GateArmySecond][GateID] = CreateDynamicObject(988, Gate[GateArmySecond][GateClose][0], Gate[GateArmySecond][GateClose][1], Gate[GateArmySecond][GateClose][2], Gate[GateArmySecond][GateClose][3], Gate[GateArmySecond][GateClose][4], Gate[GateArmySecond][GateClose][5], 0, 0);
	Gate[GateArmySecond][GateArea] = CreateDynamicSphere(Gate[GateArmySecond][GateClose][0], Gate[GateArmySecond][GateClose][1], Gate[GateArmySecond][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateArmySecond][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateArmySecond][GateArea],  E_STREAMER_INDX, GateArmySecond);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateArmySecond][GateClose][0], Gate[GateArmySecond][GateClose][1], Gate[GateArmySecond][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateArmySecond][GateStatus] = false;

	Gate[GateFBIFirst][GateFraction] = Fraction_FBI;
	Gate[GateFBIFirst][GateClose] = Float:{-1572.1978, 658.7604, 6.8600, 0.0, 90.0, 90.0};
	Gate[GateFBIFirst][GateOpen] = Float:{-1572.1978, 658.7604, 6.8610, 0.0, 0.0, 90.0};
	Gate[GateFBIFirst][GateSpeed] = 0.0005;
	Gate[GateFBIFirst][GateID] = CreateDynamicObject(968, Gate[GateFBIFirst][GateClose][0], Gate[GateFBIFirst][GateClose][1], Gate[GateFBIFirst][GateClose][2], Gate[GateFBIFirst][GateClose][3], Gate[GateFBIFirst][GateClose][4], Gate[GateFBIFirst][GateClose][5], 0, 0);
	Gate[GateFBIFirst][GateArea] = CreateDynamicSphere(Gate[GateFBIFirst][GateClose][0], Gate[GateFBIFirst][GateClose][1]+3.2, Gate[GateFBIFirst][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBIFirst][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBIFirst][GateArea],  E_STREAMER_INDX, GateFBIFirst);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateFBIFirst][GateClose][0], Gate[GateFBIFirst][GateClose][1]+3.2, Gate[GateFBIFirst][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateFBIFirst][GateStatus] = false;

	Gate[GateFBISecond][GateFraction] = Fraction_FBI;
	Gate[GateFBISecond][GateClose] = Float:{-1642.1974, 688.1197, 9.0832, 0.0, 0.0, 180.0};
	Gate[GateFBISecond][GateOpen] = Float:{-1651.4384, 688.1197, 9.0832, 0.0, 0.0, 180.0};
	Gate[GateFBISecond][GateSpeed] = 1.5;
	Gate[GateFBISecond][GateID] = CreateDynamicObject(19912, Gate[GateFBISecond][GateClose][0], Gate[GateFBISecond][GateClose][1], Gate[GateFBISecond][GateClose][2], Gate[GateFBISecond][GateClose][3], Gate[GateFBISecond][GateClose][4], Gate[GateFBISecond][GateClose][5], 0, 0);
	Gate[GateFBISecond][GateCloseTwo] = Float:{-1619.1354, 688.1197, 9.0832, 0.0, 0.0, 0.0};
	Gate[GateFBISecond][GateOpenTwo] = Float:{-1607.8854, 688.1197, 9.0832, 0.0, 0.0, 0.0};
	Gate[GateFBISecond][GateIDTwo] = CreateDynamicObject(19912, Gate[GateFBISecond][GateCloseTwo][0], Gate[GateFBISecond][GateCloseTwo][1], Gate[GateFBISecond][GateCloseTwo][2], Gate[GateFBISecond][GateCloseTwo][3], Gate[GateFBISecond][GateCloseTwo][4], Gate[GateFBISecond][GateCloseTwo][5], 0, 0);
	Gate[GateFBISecond][GateArea] = CreateDynamicSphere(Gate[GateFBISecond][GateClose][0]+11.0, Gate[GateFBISecond][GateClose][1], Gate[GateFBISecond][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBISecond][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBISecond][GateArea],  E_STREAMER_INDX, GateFBISecond);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateFBISecond][GateClose][0]+11.0, Gate[GateFBISecond][GateClose][1], Gate[GateFBISecond][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateFBISecond][GateStatus] = false;

	Gate[GateFBIThird][GateFraction] = Fraction_FBI;
	Gate[GateFBIThird][GateClose] = Float:{-1701.4345, 687.6254, 24.5937, 0.0, -90.0, 90.0};
	Gate[GateFBIThird][GateOpen] = Float:{-1701.4345, 687.6254, 24.5947, 0.0, 0.0, 90.0};
	Gate[GateFBIThird][GateSpeed] = 0.0005;
	Gate[GateFBIThird][GateID] = CreateDynamicObject(968, Gate[GateFBIThird][GateClose][0], Gate[GateFBIThird][GateClose][1], Gate[GateFBIThird][GateClose][2], Gate[GateFBIThird][GateClose][3], Gate[GateFBIThird][GateClose][4], Gate[GateFBIThird][GateClose][5], 0, 0);
	Gate[GateFBIThird][GateArea] = CreateDynamicSphere(Gate[GateFBIThird][GateClose][0], Gate[GateFBIThird][GateClose][1]-3.2, Gate[GateFBIThird][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBIThird][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateFBIThird][GateArea],  E_STREAMER_INDX, GateFBIThird);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateFBIThird][GateClose][0], Gate[GateFBIThird][GateClose][1]-3.2, Gate[GateFBIThird][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateFBIThird][GateStatus] = false;

	Gate[GateHospitalOne][GateFraction] = Fraction_Hospital;
	Gate[GateHospitalOne][GateClose] = Float:{-321.204193, 1026.091309, 1027.034546, 0.000000, 0.000000, -270.000000};
	Gate[GateHospitalOne][GateOpen] = Float:{-321.204193, 1024.7473, 1027.034546, 0.000000, 0.000000, -270.000000};
	Gate[GateHospitalOne][GateSpeed] = 0.5;
	Gate[GateHospitalOne][GateID] = CreateDynamicObject(1495, Gate[GateHospitalOne][GateClose][0], Gate[GateHospitalOne][GateClose][1], Gate[GateHospitalOne][GateClose][2], Gate[GateHospitalOne][GateClose][3], Gate[GateHospitalOne][GateClose][4], Gate[GateHospitalOne][GateClose][5], 4, 5);
	SetDynamicObjectMaterial(Gate[GateHospitalOne][GateID], 2, 3440, "airportpillar", "metalic_64", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalOne][GateID], 1, 4830, "airport2", "sanairtex3", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalOne][GateID], 0, 3440, "airportpillar", "metalic_64", 0xFFD3D3D3);
	Gate[GateHospitalOne][GateArea] = CreateDynamicSphere(Gate[GateHospitalOne][GateClose][0], Gate[GateHospitalOne][GateClose][1]+0.7, Gate[GateHospitalOne][GateClose][2]+1.0, 1.0, 4, 5);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalOne][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalOne][GateArea],  E_STREAMER_INDX, GateHospitalOne);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, Gate[GateHospitalOne][GateClose][0], Gate[GateHospitalOne][GateClose][1]+0.7, Gate[GateHospitalOne][GateClose][2]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Gate[GateHospitalOne][GateStatus] = false;

	Gate[GateHospitalTwo][GateFraction] = Fraction_Hospital;
	Gate[GateHospitalTwo][GateClose] = Float:{-321.205200, 1030.802368, 1027.034546, 0.000000, 0.000000, -270.000000};
	Gate[GateHospitalTwo][GateOpen] = Float:{-321.205200, 1029.4584, 1027.034546, 0.000000, 0.000000, -270.000000};
	Gate[GateHospitalTwo][GateSpeed] = 0.5;
	Gate[GateHospitalTwo][GateID] = CreateDynamicObject(1495, Gate[GateHospitalTwo][GateClose][0], Gate[GateHospitalTwo][GateClose][1], Gate[GateHospitalTwo][GateClose][2], Gate[GateHospitalTwo][GateClose][3], Gate[GateHospitalTwo][GateClose][4], Gate[GateHospitalTwo][GateClose][5], 4, 5);
	SetDynamicObjectMaterial(Gate[GateHospitalTwo][GateID], 2, 3440, "airportpillar", "metalic_64", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalTwo][GateID], 1, 4830, "airport2", "sanairtex3", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalTwo][GateID], 0, 3440, "airportpillar", "metalic_64", 0xFFD3D3D3);
	Gate[GateHospitalTwo][GateArea] = CreateDynamicSphere(Gate[GateHospitalTwo][GateClose][0], Gate[GateHospitalTwo][GateClose][1]+0.7, Gate[GateHospitalTwo][GateClose][2]+1.0, 1.0, 4, 5);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalTwo][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalTwo][GateArea],  E_STREAMER_INDX, GateHospitalTwo);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, Gate[GateHospitalTwo][GateClose][0], Gate[GateHospitalTwo][GateClose][1]+0.7, Gate[GateHospitalTwo][GateClose][2]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Gate[GateHospitalTwo][GateStatus] = false;

	Gate[GateHospitalThree][GateFraction] = Fraction_Hospital;
	Gate[GateHospitalThree][GateClose] = Float:{-309.534088, 1049.329346, 1027.034546, 0.000000, 0.000000, -90.000000};
	Gate[GateHospitalThree][GateOpen] = Float:{-309.534088, 1050.6733, 1027.034546, 0.000000, 0.000000, -90.000000};
	Gate[GateHospitalThree][GateSpeed] = 0.5;
	Gate[GateHospitalThree][GateID] = CreateDynamicObject(1495, Gate[GateHospitalThree][GateClose][0], Gate[GateHospitalThree][GateClose][1], Gate[GateHospitalThree][GateClose][2], Gate[GateHospitalThree][GateClose][3], Gate[GateHospitalThree][GateClose][4], Gate[GateHospitalThree][GateClose][5], 4, 5);
	SetDynamicObjectMaterial(Gate[GateHospitalThree][GateID], 2, 3440, "airportpillar", "metalic_64", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalThree][GateID], 1, 4830, "airport2", "sanairtex3", 0);
	SetDynamicObjectMaterial(Gate[GateHospitalThree][GateID], 0, 3440, "airportpillar", "metalic_64", 0xFFD3D3D3);
	Gate[GateHospitalThree][GateArea] = CreateDynamicSphere(Gate[GateHospitalThree][GateClose][0], Gate[GateHospitalThree][GateClose][1]-0.7, Gate[GateHospitalThree][GateClose][2]+1.0, 1.0, 4, 5);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalThree][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalThree][GateArea],  E_STREAMER_INDX, GateHospitalThree);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, Gate[GateHospitalThree][GateClose][0], Gate[GateHospitalThree][GateClose][1]-0.7, Gate[GateHospitalThree][GateClose][2]+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Gate[GateHospitalThree][GateStatus] = false;

	Gate[GateHospitalFour][GateFraction] = Fraction_Hospital;
	Gate[GateHospitalFour][GateClose] = Float:{-292.8669, 1053.2475, 19.3683, 0.0, -90.0, 0.0};
	Gate[GateHospitalFour][GateOpen] = Float:{-292.8669, 1053.2475, 19.3693, 0.0, 0.0, 0.0};
	Gate[GateHospitalFour][GateSpeed] = 0.0005;
	Gate[GateHospitalFour][GateID] = CreateDynamicObject(968, Gate[GateHospitalFour][GateClose][0], Gate[GateHospitalFour][GateClose][1], Gate[GateHospitalFour][GateClose][2], Gate[GateHospitalFour][GateClose][3], Gate[GateHospitalFour][GateClose][4], Gate[GateHospitalFour][GateClose][5], 0, 0);
	Gate[GateHospitalFour][GateArea] = CreateDynamicSphere(Gate[GateHospitalFour][GateClose][0]-3.5, Gate[GateHospitalFour][GateClose][1], Gate[GateHospitalFour][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalFour][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalFour][GateArea],  E_STREAMER_INDX, GateHospitalFour);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateHospitalFour][GateClose][0]-3.5, Gate[GateHospitalFour][GateClose][1], Gate[GateHospitalFour][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateHospitalFour][GateStatus] = false;

	Gate[GateHospitalFive][GateFraction] = Fraction_Hospital;
	Gate[GateHospitalFive][GateClose] = Float:{-327.8199, 1067.6975, 19.3953, 0.0, 90.0, 90.0};
	Gate[GateHospitalFive][GateOpen] = Float:{-327.8199, 1067.6975, 19.3963, 0.0, 0.0, 90.0};
	Gate[GateHospitalFive][GateSpeed] = 0.0005;
	Gate[GateHospitalFive][GateID] = CreateDynamicObject(968, Gate[GateHospitalFive][GateClose][0], Gate[GateHospitalFive][GateClose][1], Gate[GateHospitalFive][GateClose][2], Gate[GateHospitalFive][GateClose][3], Gate[GateHospitalFive][GateClose][4], Gate[GateHospitalFive][GateClose][5], 0, 0);
	Gate[GateHospitalFive][GateArea] = CreateDynamicSphere(Gate[GateHospitalFive][GateClose][0], Gate[GateHospitalFive][GateClose][1]+3.5, Gate[GateHospitalFive][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalFive][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateHospitalFive][GateArea],  E_STREAMER_INDX, GateHospitalFive);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateHospitalFive][GateClose][0], Gate[GateHospitalFive][GateClose][1]+3.5, Gate[GateHospitalFive][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateHospitalFive][GateStatus] = false;

	Gate[GateTaxiFirst][GateFraction] = Fraction_Taxi;
	Gate[GateTaxiFirst][GateClose] = Float:{-500.8805, -562.6143, 27.2518, 0.0, 0.0, 180.0};
	Gate[GateTaxiFirst][GateOpen] = Float:{-508.8785, -562.6143, 27.2518, 0.0, 0.0, 180.0};
	Gate[GateTaxiFirst][GateSpeed] = 1.5;
	Gate[GateTaxiFirst][GateID] = CreateDynamicObject(19912, Gate[GateTaxiFirst][GateClose][0], Gate[GateTaxiFirst][GateClose][1], Gate[GateTaxiFirst][GateClose][2], Gate[GateTaxiFirst][GateClose][3], Gate[GateTaxiFirst][GateClose][4], Gate[GateTaxiFirst][GateClose][5], 0, 0);
	Gate[GateTaxiFirst][GateCloseTwo] = Float:{-477.8235, -562.6143, 27.2518, 0.0, 0.0, 0.0};
	Gate[GateTaxiFirst][GateOpenTwo] = Float:{-470.1355, -562.6143, 27.2518, 0.0, 0.0, 0.0};
	Gate[GateTaxiFirst][GateIDTwo] = CreateDynamicObject(19912, Gate[GateTaxiFirst][GateCloseTwo][0], Gate[GateTaxiFirst][GateCloseTwo][1], Gate[GateTaxiFirst][GateCloseTwo][2], Gate[GateTaxiFirst][GateCloseTwo][3], Gate[GateTaxiFirst][GateCloseTwo][4], Gate[GateTaxiFirst][GateCloseTwo][5], 0, 0);
	Gate[GateTaxiFirst][GateArea] = CreateDynamicSphere(Gate[GateTaxiFirst][GateClose][0]+11.5, Gate[GateTaxiFirst][GateClose][1], Gate[GateTaxiFirst][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateTaxiFirst][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateTaxiFirst][GateArea],  E_STREAMER_INDX, GateTaxiFirst);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateTaxiFirst][GateClose][0]+11.5, Gate[GateTaxiFirst][GateClose][1], Gate[GateTaxiFirst][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateTaxiFirst][GateStatus] = false;

    Gate[GateStreetRacers][GateFraction] = Fraction_StreetRacers;
	Gate[GateStreetRacers][GateClose] = Float:{-1770.6705, 991.2060, 25.2613, 0.0, 0.0, 90.0};
	Gate[GateStreetRacers][GateOpen] = Float:{-1770.6705, 1001.4020, 25.2613, 0.0, 0.0, 90.0};
	Gate[GateStreetRacers][GateSpeed] = 3;
	Gate[GateStreetRacers][GateID] = CreateDynamicObject(19912, Gate[GateStreetRacers][GateClose][0], Gate[GateStreetRacers][GateClose][1], Gate[GateStreetRacers][GateClose][2], Gate[GateStreetRacers][GateClose][3], Gate[GateStreetRacers][GateClose][4], Gate[GateStreetRacers][GateClose][5], 0, 0);
	Gate[GateStreetRacers][GateArea] = CreateDynamicSphere(Gate[GateStreetRacers][GateClose][0], Gate[GateStreetRacers][GateClose][1]-6.0, Gate[GateStreetRacers][GateClose][2], 5.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateStreetRacers][GateArea],  E_STREAMER_ARRAY_TYPE, Array_Type_Gate);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Gate[GateStreetRacers][GateArea],  E_STREAMER_INDX, GateStreetRacers);
	CreateDynamic3DTextLabel(Color_White"Чтобы открыть нажмите "Main_Color"["Color_White"H"Main_Color"]\n\
	"Color_White"или "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"] "Color_White"если вы не за рулем", -1, Gate[GateStreetRacers][GateClose][0], Gate[GateStreetRacers][GateClose][1]-6.0, Gate[GateStreetRacers][GateClose][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Gate[GateStreetRacers][GateStatus] = false;
}

forward CloseGate(GatesID);
public CloseGate(GatesID)
{
	MoveDynamicObject(Gate[GatesID][GateID], Gate[GatesID][GateClose][0], Gate[GatesID][GateClose][1], Gate[GatesID][GateClose][2], Gate[GatesID][GateSpeed], Gate[GatesID][GateClose][3], Gate[GatesID][GateClose][4], Gate[GatesID][GateClose][5]);
	if(Gate[GatesID][GateIDTwo] && IsValidDynamicObject(Gate[GatesID][GateIDTwo])) MoveDynamicObject(Gate[GatesID][GateIDTwo], Gate[GatesID][GateCloseTwo][0], Gate[GatesID][GateCloseTwo][1], Gate[GatesID][GateCloseTwo][2], Gate[GatesID][GateSpeed], Gate[GatesID][GateCloseTwo][3], Gate[GatesID][GateCloseTwo][4], Gate[GatesID][GateCloseTwo][5]);
	Gate[GatesID][GateStatus] = false;
	return 1;
}

stock CreatePickups()
{
	new str[100];

	Pickups[SpawnExit][PickJob] = Job_None;
	Pickups[SpawnExit][PickID] = CreateDynamicPickup(1318, 1, 2214.3848,-1150.4180,1025.7969, 1, 15);
	Pickups[SpawnExit][PickAreaID] = CreateDynamicSphere(2214.3848,-1150.4180,1025.7969, 2.0, 1, 15);
	Pickups[SpawnExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2214.3848,-1150.4180,1025.7969+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 15);
	Pickups[SpawnExit][PickAngle] = 280.1327;
	Pickups[SpawnExit][IsPickTP] = true;
	Pickups[SpawnExit][PickTpPickID] = SpawnEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SpawnExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SpawnExit][PickAreaID],  E_STREAMER_INDX, SpawnExit);

	Pickups[SpawnEnter][PickJob] = Job_None;
	Pickups[SpawnEnter][PickID] = CreateDynamicPickup(1318, 1, -2191.9792,-2255.1287,30.6955, 0, 0);
	Pickups[SpawnEnter][PickAreaID] = CreateDynamicSphere(-2191.9792,-2255.1287,30.6955, 2.0, 0, 0);
	Pickups[SpawnEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2191.9792,-2255.1287,30.6955+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[SpawnEnter][PickAngle] = 146.4427;
	Pickups[SpawnEnter][IsPickTP] = true;
	Pickups[SpawnEnter][PickTpPickID] = SpawnExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SpawnEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SpawnEnter][PickAreaID],  E_STREAMER_INDX, SpawnEnter);


	Pickups[TruckerJob][PickJob] = Job_Trucker;
	Pickups[TruckerJob][PickID] = CreateDynamicPickup(1239, 1, -49.9497,-269.3634,6.6332, 0, 0);
	Pickups[TruckerJob][PickAreaID] = CreateDynamicSphere(-49.9497,-269.3634,6.6332, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[TruckerJob][PickJob]][JobNames]);
	Pickups[TruckerJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, -49.9497,-269.3634,6.6332+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[TruckerJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TruckerJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TruckerJob][PickAreaID],  E_STREAMER_INDX, TruckerJob);

	CreateDynamicPickup(1271, 1, -119.0812, -330.1114, 2.4446, 0, 0); //Пикап на точке загрузки дальнобойщиков

	Pickups[ThiefJob][PickJob] = Job_CarThief;
	Pickups[ThiefJob][PickID] = CreateDynamicPickup(1239, 1, 2514.5969,-1474.6312,24.0093, 0, 0);
	Pickups[ThiefJob][PickAreaID] = CreateDynamicSphere(2514.5969,-1474.6312,24.0093, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[ThiefJob][PickJob]][JobNames]);
	Pickups[ThiefJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 2514.5969,-1474.6312,24.0093+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ThiefJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ThiefJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ThiefJob][PickAreaID],  E_STREAMER_INDX, ThiefJob);

	Pickups[TrashJob][PickJob] = Job_TrashCollector;
	Pickups[TrashJob][PickID] = CreateDynamicPickup(1239, 1, 2091.6646,-2077.6543,13.5469, 0, 0);
	Pickups[TrashJob][PickAreaID] = CreateDynamicSphere(2091.6646,-2077.6543,13.5469, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[TrashJob][PickJob]][JobNames]);
	Pickups[TrashJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 2091.6646,-2077.6543,13.5469+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[TrashJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TrashJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TrashJob][PickAreaID],  E_STREAMER_INDX, TrashJob);

	Pickups[MechanicJob][PickJob] = Job_Mechanic;
	Pickups[MechanicJob][PickID] = CreateDynamicPickup(1239, 1, 801.1220,-613.7476,16.3359, 0, 0);
	Pickups[MechanicJob][PickAreaID] = CreateDynamicSphere(801.1220,-613.7476,16.3359, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[MechanicJob][PickJob]][JobNames]);
	Pickups[MechanicJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 801.1220,-613.7476,16.3359+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[MechanicJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MechanicJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MechanicJob][PickAreaID],  E_STREAMER_INDX, MechanicJob);

	Pickups[PilotJob][PickJob] = Job_Pilot;
	Pickups[PilotJob][PickID] = CreateDynamicPickup(1239, 1, 1347.2354,1257.9703,10.8203, 0, 0);
	Pickups[PilotJob][PickAreaID] = CreateDynamicSphere(1347.2354,1257.9703,10.8203, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[PilotJob][PickJob]][JobNames]);
	Pickups[PilotJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 1347.2354,1257.9703,10.8203+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PilotJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PilotJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PilotJob][PickAreaID],  E_STREAMER_INDX, PilotJob);

	Pickups[FisherJob][PickJob] = Job_Fisher;
	Pickups[FisherJob][PickID] = CreateDynamicPickup(1239, 1, 2160.1873,-99.4170,2.7491, 0, 0);
	Pickups[FisherJob][PickAreaID] = CreateDynamicSphere(2160.1873,-99.4170,2.7491, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[FisherJob][PickJob]][JobNames]);
	Pickups[FisherJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 2160.1873,-99.4170,2.7491+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FisherJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FisherJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FisherJob][PickAreaID],  E_STREAMER_INDX, FisherJob);

	Pickups[DriverDeliveryJob][PickJob] = Job_DriverDelivery;
	Pickups[DriverDeliveryJob][PickID] = CreateDynamicPickup(1239, 1, 2755.1050,-2382.3076,13.6328, 0, 0);
	Pickups[DriverDeliveryJob][PickAreaID] = CreateDynamicSphere(2755.1050,-2382.3076,13.6328, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%s", Jobs[Pickups[DriverDeliveryJob][PickJob]][JobNames]);
	Pickups[DriverDeliveryJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 2755.1050,-2382.3076,13.6328+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[DriverDeliveryJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[DriverDeliveryJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[DriverDeliveryJob][PickAreaID],  E_STREAMER_INDX, DriverDeliveryJob);

	Pickups[CityHallExit][PickJob] = Job_None;
	Pickups[CityHallExit][PickID] = CreateDynamicPickup(1318, 1, 390.7688,173.8386,1008.3828, 1, 3);
	Pickups[CityHallExit][PickAreaID] = CreateDynamicSphere(390.7688,173.8386,1008.3828, 2.0, 1, 3);
	Pickups[CityHallExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 390.7688,173.8386,1008.3828+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[CityHallExit][PickAngle] = 92.0090;
	Pickups[CityHallExit][IsPickTP] = true;
	Pickups[CityHallExit][PickTpPickID] = CityHallEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CityHallExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CityHallExit][PickAreaID],  E_STREAMER_INDX, CityHallExit);

	Pickups[CityHallEnter][PickJob] = Job_None;
	Pickups[CityHallEnter][PickID] = CreateDynamicPickup(1318, 1, -2766.3103,375.6552,6.3347, 0, 0);
	Pickups[CityHallEnter][PickAreaID] = CreateDynamicSphere(-2766.3103,375.6552,6.3347, 2.0, 0, 0);
	Pickups[CityHallEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2766.3103,375.6552,6.3347+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[CityHallEnter][PickAngle] = 275.3803;
	Pickups[CityHallEnter][IsPickTP] = true;
	Pickups[CityHallEnter][PickTpPickID] = CityHallExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CityHallEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CityHallEnter][PickAreaID],  E_STREAMER_INDX, CityHallEnter);

	Pickups[LawyerJob][PickJob] = Job_Lawyer;
	Pickups[LawyerJob][PickID] = CreateDynamicPickup(1239, 1, 358.7569,169.6485,1008.3893, 1, 3);
	Pickups[LawyerJob][PickAreaID] = CreateDynamicSphere(358.7569,169.6485,1008.3893, 2.0, 1, 3);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%sа", Jobs[Pickups[LawyerJob][PickJob]][JobNames]);
	Pickups[LawyerJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 358.7569,169.6485,1008.3893+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[LawyerJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LawyerJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LawyerJob][PickAreaID],  E_STREAMER_INDX, LawyerJob);

	Pickups[LawyerLic][PickJob] = Job_None;
	Pickups[LawyerLic][PickID] = CreateDynamicPickup(1210, 1, 373.2599,183.7722,1008.3893, 1, 3);
	Pickups[LawyerLic][PickAreaID] = CreateDynamicSphere(373.2599,183.7722,1008.3893, 2.0, 1, 3);
	Pickups[LawyerLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензии на освобождение", -1, 373.2599,183.7722,1008.3893+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[LawyerLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LawyerLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LawyerLic][PickAreaID],  E_STREAMER_INDX, LawyerLic);

	Pickups[RemoveAllJob][PickJob] = Job_None;
	Pickups[RemoveAllJob][PickID] = CreateDynamicPickup(1239, 1, 358.7598,177.8212,1008.3828, 1, 3);
	Pickups[RemoveAllJob][PickAreaID] = CreateDynamicSphere(358.7598,177.8212,1008.3828, 2.0, 1, 3);
	Pickups[RemoveAllJob][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Увольнение с работы", -1, 358.7598,177.8212,1008.3828+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[RemoveAllJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RemoveAllJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RemoveAllJob][PickAreaID],  E_STREAMER_INDX, RemoveAllJob);

	Pickups[BusJob][PickJob] = Job_Bus;
	Pickups[BusJob][PickID] = CreateDynamicPickup(1239, 1, -1566.7834,-2730.2471,48.7435, 0, 0);
	Pickups[BusJob][PickAreaID] = CreateDynamicSphere(-1566.7834,-2730.2471,48.7435, 2.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%s", Jobs[Pickups[BusJob][PickJob]][JobNames]);
	Pickups[BusJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, -1566.7834,-2730.2471,48.7435+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[BusJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BusJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BusJob][PickAreaID],  E_STREAMER_INDX, BusJob);

	Pickups[LumberjackJob][PickJob] = Job_Lumberjack;
	Pickups[LumberjackJob][PickID] = CreateDynamicPickup(1274, 1, -1638.9918,-2240.9504,31.4766, 0, 0);
	Pickups[LumberjackJob][PickAreaID] = CreateDynamicSphere(-1638.9918,-2240.9504,31.4766, 1.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу  "Main_Color"%s", Jobs[Pickups[LumberjackJob][PickJob]][JobNames]);
	Pickups[LumberjackJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, -1638.9918,-2240.9504,31.4766+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[LumberjackJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LumberjackJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[LumberjackJob][PickAreaID],  E_STREAMER_INDX, LumberjackJob);

	Pickups[FarmJob][PickJob] = Job_Farm;
	Pickups[FarmJob][PickID] = CreateDynamicPickup(1274, 1, -382.7798,-1438.8774,26.2991, 0, 0);
	Pickups[FarmJob][PickAreaID] = CreateDynamicSphere(-382.7798,-1438.8774,26.2991, 1.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%s", Jobs[Pickups[FarmJob][PickJob]][JobNames]);
	Pickups[FarmJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, -382.7798,-1438.8774,26.2991+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FarmJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmJob][PickAreaID],  E_STREAMER_INDX, FarmJob);

	Pickups[MineEnter][PickJob] = Job_None;
	Pickups[MineEnter][PickID] = CreateDynamicPickup(1318, 1, -724.8881,1539.1771,40.4921, 0, 0);
	Pickups[MineEnter][PickAreaID] = CreateDynamicSphere(-724.8881,1539.1771,40.4921, 2.0, 0, 0);
	Pickups[MineEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -724.8881,1539.1771,40.4921+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[MineEnter][PickAngle] = 89.8860;
	Pickups[MineEnter][IsPickTP] = true;
	Pickups[MineEnter][PickTpPickID] = MineExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineEnter][PickAreaID],  E_STREAMER_INDX, MineEnter);

	Pickups[MineExit][PickJob] = Job_None;
	Pickups[MineExit][PickID] = CreateDynamicPickup(1318, 1, -690.5645,-1746.8440,801.0569, 2, 0);
	Pickups[MineExit][PickAreaID] = CreateDynamicSphere(-690.5645,-1746.8440,801.0569, 2.0, 2, 0);
	Pickups[MineExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -690.5645,-1746.8440,801.0569+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 0);
	Pickups[MineExit][PickAngle] = 269.2728;
	Pickups[MineExit][IsPickTP] = true;
	Pickups[MineExit][PickTpPickID] = MineEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineExit][PickAreaID],  E_STREAMER_INDX, MineExit);

	Pickups[MineJob][PickJob] = Job_Mine;
	Pickups[MineJob][PickID] = CreateDynamicPickup(1274, 1, -610.9808,-1771.0150,792.4759, 2, 0);
	Pickups[MineJob][PickAreaID] = CreateDynamicSphere(-610.9808,-1771.0150,792.4759, 1.0, 2, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%s", Jobs[Pickups[MineJob][PickJob]][JobNames]);
	Pickups[MineJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, -610.9808,-1771.0150,792.4759+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 0);
	Pickups[MineJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MineJob][PickAreaID],  E_STREAMER_INDX, MineJob);

	Pickups[FarmDeliverJob][PickJob] = Job_FarmDeliver;
	Pickups[FarmDeliverJob][PickID] = CreateDynamicPickup(1274, 1, 123.3160,-298.3702,1.5781, 0, 0);
	Pickups[FarmDeliverJob][PickAreaID] = CreateDynamicSphere(123.3160,-298.3702,1.5781, 1.0, 0, 0);
	format(str, sizeof(str), Color_Yellow"Трудоустройство на работу "Main_Color"%s", Jobs[Pickups[FarmDeliverJob][PickJob]][JobNames]);
	Pickups[FarmDeliverJob][PickTextID] = CreateDynamic3DTextLabel(str, -1, 123.3160,-298.3702,1.5781+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FarmDeliverJob][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmDeliverJob][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmDeliverJob][PickAreaID],  E_STREAMER_INDX, FarmDeliverJob);

	Pickups[BankPickCard][PickJob] = Job_None;
	Pickups[BankPickCard][PickID] = CreateDynamicPickup(1581, 1, 827.6592,-0.8106,1004.1797, -1, 3);
	Pickups[BankPickCard][PickAreaID] = CreateDynamicSphere(827.6592,-0.8106,1004.1797, 2.0, -1, 3);
	Pickups[BankPickCard][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Покупка банковской карты", -1, 827.6592,-0.8106,1004.1797+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 3);
	Pickups[BankPickCard][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BankPickCard][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BankPickCard][PickAreaID],  E_STREAMER_INDX, BankPickCard);

	Pickups[CasinoBeginnerDonate][PickJob] = Job_None;
	Pickups[CasinoBeginnerDonate][PickID] = CreateDynamicPickup(1274, 1, 1139.6228,-3.0747,1000.6719, -1, 12);
	Pickups[CasinoBeginnerDonate][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Быстрое пополнение игровой валюты - /donate", -1, 1139.6228,-3.0747,1000.6719+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 12);
	Pickups[CasinoBeginnerDonate][IsPickTP] = false;

	Pickups[CasinoCaligulaDonate][PickJob] = Job_None;
	Pickups[CasinoCaligulaDonate][PickID] = CreateDynamicPickup(1274, 1, 2198.8232,1606.5143,1005.0625, -1, 1);
	Pickups[CasinoCaligulaDonate][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Быстрое пополнение игровой валюты - /donate", -1, 2198.8232,1606.5143,1005.0625+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 1);
	Pickups[CasinoCaligulaDonate][IsPickTP] = false;

	Pickups[CasinoFourDragonsDonate][PickJob] = Job_None;
	Pickups[CasinoFourDragonsDonate][PickID] = CreateDynamicPickup(1274, 1, 1955.2534,1020.4211,992.4688, -1, 10);
	Pickups[CasinoFourDragonsDonate][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Быстрое пополнение игровой валюты - /donate", -1, 1955.2534,1020.4211,992.4688+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 10);
	Pickups[CasinoFourDragonsDonate][IsPickTP] = false;

	Pickups[CarLic][PickJob] = Job_None;
	Pickups[CarLic][PickID] = CreateDynamicPickup(1210, 1, 345.6860,162.2919,1025.7891, 1, 3);
	Pickups[CarLic][PickAreaID] = CreateDynamicSphere(345.6860,162.2919,1025.7891, 2.0, 1, 3);
	Pickups[CarLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензия на управление машинами", -1, 345.6860,162.2919,1025.7891+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[CarLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CarLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CarLic][PickAreaID],  E_STREAMER_INDX, CarLic);

	Pickups[BoatLic][PickJob] = Job_None;
	Pickups[BoatLic][PickID] = CreateDynamicPickup(1210, 1, 353.8761,170.0951,1025.7964, 1, 3);
	Pickups[BoatLic][PickAreaID] = CreateDynamicSphere(353.8761,170.0951,1025.7964, 2.0, 1, 3);
	Pickups[BoatLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензия на управление лодками", -1, 353.8761,170.0951,1025.7964+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[BoatLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BoatLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BoatLic][PickAreaID],  E_STREAMER_INDX, BoatLic);

	Pickups[GunLic][PickJob] = Job_None;
	Pickups[GunLic][PickID] = CreateDynamicPickup(1210, 1, 354.3712,154.1698,1025.7964, 1, 3);
	Pickups[GunLic][PickAreaID] = CreateDynamicSphere(354.3712,154.1698,1025.7964, 2.0, 1, 3);
	Pickups[GunLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензия на владение оружием", -1, 354.3712,154.1698,1025.7964+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[GunLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GunLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GunLic][PickAreaID],  E_STREAMER_INDX, GunLic);

	Pickups[MotoLic][PickJob] = Job_None;
	Pickups[MotoLic][PickID] = CreateDynamicPickup(1210, 1, 363.4956,170.0799,1025.7964, 1, 3);
	Pickups[MotoLic][PickAreaID] = CreateDynamicSphere(363.4956,170.0799,1025.7964, 2.0, 1, 3);
	Pickups[MotoLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензия на управление мототранспортом", -1, 363.4956,170.0799,1025.7964+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[MotoLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MotoLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MotoLic][PickAreaID],  E_STREAMER_INDX, MotoLic);

	Pickups[PlaneLic][PickJob] = Job_None;
	Pickups[PlaneLic][PickID] = CreateDynamicPickup(1210, 1, 363.5664,153.9986,1025.7964, 1, 3);
	Pickups[PlaneLic][PickAreaID] = CreateDynamicSphere(363.5664,153.9986,1025.7964, 2.0, 1, 3);
	Pickups[PlaneLic][PickTextID] = CreateDynamic3DTextLabel(Color_Yellow"Лицензия на управление воздушным транспортом", -1, 363.5664,153.9986,1025.7964+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 3);
	Pickups[PlaneLic][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PlaneLic][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PlaneLic][PickAreaID],  E_STREAMER_INDX, PlaneLic);

	Pickups[PoliceExit][PickJob] = Job_None;
	Pickups[PoliceExit][PickFraction] = Fraction_None;
	Pickups[PoliceExit][PickID] = CreateDynamicPickup(1318, 1, 246.8181,62.4736,1003.6406, 1, 6);
	Pickups[PoliceExit][PickAreaID] = CreateDynamicSphere(246.8181,62.4736,1003.6406, 2.0, 1, 6);
	Pickups[PoliceExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 246.8181,62.4736,1003.6406+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
	Pickups[PoliceExit][PickAngle] = 357.5265;
	Pickups[PoliceExit][IsPickTP] = true;
	Pickups[PoliceExit][PickTpPickID] = PoliceEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceExit][PickAreaID],  E_STREAMER_INDX, PoliceExit);

	Pickups[PoliceEnter][PickJob] = Job_None;
	Pickups[PoliceEnter][PickFraction] = Fraction_Police;
	Pickups[PoliceEnter][PickID] = CreateDynamicPickup(1318, 1, 1524.4840,-1677.8702,6.2188, 0, 0);
	Pickups[PoliceEnter][PickAreaID] = CreateDynamicSphere(1524.4840,-1677.8702,6.2188, 2.0, 0, 0);
	Pickups[PoliceEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 1524.4840,-1677.8702,6.2188+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PoliceEnter][PickAngle] = 266.6223;
	Pickups[PoliceEnter][IsPickTP] = true;
	Pickups[PoliceEnter][PickTpPickID] = PoliceExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceEnter][PickAreaID],  E_STREAMER_INDX, PoliceEnter);

	Pickups[ArmyExit][PickJob] = Job_None;
	Pickups[ArmyExit][PickFraction] = Fraction_None;
	Pickups[ArmyExit][PickID] = CreateDynamicPickup(1318, 1, 145.9330,1890.6322,2049.2261, 2, 1);
	Pickups[ArmyExit][PickAreaID] = CreateDynamicSphere(145.9330,1890.6322,2049.2261, 2.0, 2, 1);
	Pickups[ArmyExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 145.9330,1890.6322,2049.2261+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 1);
	Pickups[ArmyExit][PickAngle] = 260.4279;
	Pickups[ArmyExit][IsPickTP] = true;
	Pickups[ArmyExit][PickTpPickID] = ArmyEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyExit][PickAreaID],  E_STREAMER_INDX, ArmyExit);

	Pickups[ArmyEnter][PickJob] = Job_None;
	Pickups[ArmyEnter][PickFraction] = Fraction_Army;
	Pickups[ArmyEnter][PickID] = CreateDynamicPickup(1318, 1, -329.7326,1537.0398,76.6117, 0, 0);
	Pickups[ArmyEnter][PickAreaID] = CreateDynamicSphere(-329.7326,1537.0398,76.6117, 2.0, 0, 0);
	Pickups[ArmyEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -329.7326,1537.0398,76.6117+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArmyEnter][PickAngle] = 188.6739;
	Pickups[ArmyEnter][IsPickTP] = true;
	Pickups[ArmyEnter][PickTpPickID] = ArmyExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyEnter][PickAreaID],  E_STREAMER_INDX, ArmyEnter);

	Pickups[FBIExit][PickJob] = Job_None;
	Pickups[FBIExit][PickFraction] = Fraction_None;
	Pickups[FBIExit][PickID] = CreateDynamicPickup(1318, 1, 322.1500,302.2935,999.1484, 3, 5);
	Pickups[FBIExit][PickAreaID] = CreateDynamicSphere(322.1500,302.2935,999.1484, 2.0, 3, 5);
	Pickups[FBIExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 322.1500,302.2935,999.1484+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 5);
	Pickups[FBIExit][PickAngle] = 2.8410;
	Pickups[FBIExit][IsPickTP] = true;
	Pickups[FBIExit][PickTpPickID] = FBIEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIExit][PickAreaID],  E_STREAMER_INDX, FBIExit);

	Pickups[FBIEnter][PickJob] = Job_None;
	Pickups[FBIEnter][PickFraction] = Fraction_FBI;
	Pickups[FBIEnter][PickID] = CreateDynamicPickup(1318, 1, -1594.2108,716.2722,-4.9063, 0, 0);
	Pickups[FBIEnter][PickAreaID] = CreateDynamicSphere(-1594.2108,716.2722,-4.9063, 2.0, 0, 0);
	Pickups[FBIEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1594.2108,716.2722,-4.9063+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FBIEnter][PickAngle] = 268.5279;
	Pickups[FBIEnter][IsPickTP] = true;
	Pickups[FBIEnter][PickTpPickID] = FBIExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIEnter][PickAreaID],  E_STREAMER_INDX, FBIEnter);

	Pickups[PoliceHealth][PickJob] = Job_None;
	Pickups[PoliceHealth][PickFraction] = Fraction_Police;
	Pickups[PoliceHealth][PickID] = CreateDynamicPickup(1240, 1, 1560.2206,-1693.2554,5.8906, 0, 0);
	Pickups[PoliceHealth][PickAreaID] = CreateDynamicSphere(1560.2206,-1693.2554,5.8906, 1.0, 0, 0);
	Pickups[PoliceHealth][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Аптечки", -1, 1560.2206,-1693.2554,5.8906+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PoliceHealth][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceHealth][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceHealth][PickAreaID],  E_STREAMER_INDX, PoliceHealth);

	Pickups[PoliceArmor][PickJob] = Job_None;
	Pickups[PoliceArmor][PickFraction] = Fraction_Police;
	Pickups[PoliceArmor][PickID] = CreateDynamicPickup(1242, 1, 1562.1018,-1693.1837,5.8906, 0, 0);
	Pickups[PoliceArmor][PickAreaID] = CreateDynamicSphere(1562.1018,-1693.1837,5.8906, 1.0, 0, 0);
	Pickups[PoliceArmor][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Бронежилеты", -1, 1562.1018,-1693.1837,5.8906+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PoliceArmor][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceArmor][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceArmor][PickAreaID],  E_STREAMER_INDX, PoliceArmor);

	Pickups[PoliceWeapon][PickJob] = Job_None;
	Pickups[PoliceWeapon][PickFraction] = Fraction_Police;
	Pickups[PoliceWeapon][PickID] = CreateDynamicPickup(2061, 1, 1564.4597,-1693.3258,5.8906, 0, 0);
	Pickups[PoliceWeapon][PickAreaID] = CreateDynamicSphere(1564.4597,-1693.3258,5.8906, 1.0, 0, 0);
	Pickups[PoliceWeapon][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Оружие", -1, 1564.4597,-1693.3258,5.8906+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PoliceWeapon][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceWeapon][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceWeapon][PickAreaID],  E_STREAMER_INDX, PoliceWeapon);

	Pickups[PrisonExit][PickJob] = Job_None;
	Pickups[PrisonExit][PickFraction] = Fraction_None;
	Pickups[PrisonExit][PickID] = CreateDynamicPickup(1318, 1, 945.3094,-2744.8264,42.1289, 100, 16);
	Pickups[PrisonExit][PickAreaID] = CreateDynamicSphere(945.3094,-2744.8264,42.1289, 2.0, 100, 16);
	Pickups[PrisonExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 945.3094,-2744.8264,42.1289+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 100, 16);
	Pickups[PrisonExit][PickAngle] = 329.5774;
	Pickups[PrisonExit][IsPickTP] = true;
	Pickups[PrisonExit][PickTpPickID] = PrisonEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonExit][PickAreaID],  E_STREAMER_INDX, PrisonExit);

	Pickups[PrisonEnter][PickJob] = Job_None;
	Pickups[PrisonEnter][PickFraction] = Fraction_None;
	Pickups[PrisonEnter][PickID] = CreateDynamicPickup(1318, 1, 213.9141,1875.5636,13.1470, 0, 0);
	Pickups[PrisonEnter][PickAreaID] = CreateDynamicSphere(213.9141,1875.5636,13.1470, 2.0, 0, 0);
	Pickups[PrisonEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 213.9141,1875.5636,13.1470+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PrisonEnter][PickAngle] = 6.7915;
	Pickups[PrisonEnter][IsPickTP] = true;
	Pickups[PrisonEnter][PickTpPickID] = PrisonExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonEnter][PickAreaID],  E_STREAMER_INDX, PrisonEnter);

	Pickups[PrisonLawyerCall][PickJob] = Job_None;
	Pickups[PrisonLawyerCall][PickFraction] = Fraction_None;
	Pickups[PrisonLawyerCall][PickID] = CreateDynamicPickup(1210, 1, 149.0575,1921.0612,19.0255, 0, 0);
	Pickups[PrisonLawyerCall][PickAreaID] = CreateDynamicSphere(149.0575,1921.0612,19.0255, 1.0, 0, 0);
	Pickups[PrisonLawyerCall][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Вызвать адвоката", -1, 149.0575,1921.0612,19.0255+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PrisonLawyerCall][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonLawyerCall][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PrisonLawyerCall][PickAreaID],  E_STREAMER_INDX, PrisonLawyerCall);

	Pickups[ArmyHealth][PickJob] = Job_None;
	Pickups[ArmyHealth][PickFraction] = Fraction_Army;
	Pickups[ArmyHealth][PickID] = CreateDynamicPickup(1240, 1, -340.7132,1537.9485,75.5625, 0, 0);
	Pickups[ArmyHealth][PickAreaID] = CreateDynamicSphere(-340.7132,1537.9485,75.5625, 1.0, 0, 0);
	Pickups[ArmyHealth][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Аптечки", -1, -340.7132,1537.9485,75.5625+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArmyHealth][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyHealth][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyHealth][PickAreaID],  E_STREAMER_INDX, ArmyHealth);

	Pickups[ArmyArmor][PickJob] = Job_None;
	Pickups[ArmyArmor][PickFraction] = Fraction_Army;
	Pickups[ArmyArmor][PickID] = CreateDynamicPickup(1242, 1, -340.6736,1539.0010,75.5625, 0, 0);
	Pickups[ArmyArmor][PickAreaID] = CreateDynamicSphere(-340.6736,1539.0010,75.5625, 1.0, 0, 0);
	Pickups[ArmyArmor][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Бронежилеты", -1, -340.6736,1539.0010,75.5625+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArmyArmor][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyArmor][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyArmor][PickAreaID],  E_STREAMER_INDX, ArmyArmor);

	Pickups[ArmyWeapon][PickJob] = Job_None;
	Pickups[ArmyWeapon][PickFraction] = Fraction_Army;
	Pickups[ArmyWeapon][PickID] = CreateDynamicPickup(2061, 1, -340.6360,1540.6460,75.5625, 0, 0);
	Pickups[ArmyWeapon][PickAreaID] = CreateDynamicSphere(-340.6360,1540.6460,75.5625, 1.0, 0, 0);
	Pickups[ArmyWeapon][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Оружие", -1, -340.6360,1540.6460,75.5625+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArmyWeapon][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyWeapon][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyWeapon][PickAreaID],  E_STREAMER_INDX, ArmyWeapon);

	Pickups[FBIHealth][PickJob] = Job_None;
	Pickups[FBIHealth][PickFraction] = Fraction_FBI;
	Pickups[FBIHealth][PickID] = CreateDynamicPickup(1240, 1, -1603.3821,673.3832,-5.2422, 0, 0);
	Pickups[FBIHealth][PickAreaID] = CreateDynamicSphere(-1603.3821,673.3832,-5.2422, 1.0, 0, 0);
	Pickups[FBIHealth][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Аптечки", -1, -1603.3821,673.3832,-5.2422+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FBIHealth][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIHealth][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIHealth][PickAreaID],  E_STREAMER_INDX, FBIHealth);

	Pickups[FBIArmor][PickJob] = Job_None;
	Pickups[FBIArmor][PickFraction] = Fraction_FBI;
	Pickups[FBIArmor][PickID] = CreateDynamicPickup(1242, 1, -1604.4351,673.3789,-5.2422, 0, 0);
	Pickups[FBIArmor][PickAreaID] = CreateDynamicSphere(-1604.4351,673.3789,-5.2422, 1.0, 0, 0);
	Pickups[FBIArmor][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Бронежилеты", -1, -1604.4351,673.3789,-5.2422+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FBIArmor][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIArmor][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIArmor][PickAreaID],  E_STREAMER_INDX, FBIArmor);

	Pickups[FBIWeapon][PickJob] = Job_None;
	Pickups[FBIWeapon][PickFraction] = Fraction_FBI;
	Pickups[FBIWeapon][PickID] = CreateDynamicPickup(2061, 1, -1605.5668,673.3743,-5.2422, 0, 0);
	Pickups[FBIWeapon][PickAreaID] = CreateDynamicSphere(-1605.5668,673.3743,-5.2422, 1.0, 0, 0);
	Pickups[FBIWeapon][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Оружие", -1, -1605.5668,673.3743,-5.2422+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FBIWeapon][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIWeapon][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FBIWeapon][PickAreaID],  E_STREAMER_INDX, FBIWeapon);

	Pickups[ArrestPickup][PickJob] = Job_None;
	Pickups[ArrestPickup][PickFraction] = Fraction_None;
	Pickups[ArrestPickup][PickID] = CreateDynamicPickup(1314, 1, 144.3278,1918.0723,18.9930, 0, 0);
	Pickups[ArrestPickup][PickAreaID] = CreateDynamicSphere(144.3278,1918.0723,18.9930, 5.0, 0, 0);
	Pickups[ArrestPickup][PickTextID] = CreateDynamic3DTextLabel(Main_Color"/arrest "Color_White"- Чтобы задержать преступника", -1, 144.3278,1918.0723,18.9930+0.5, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArrestPickup][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArrestPickup][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArrestPickup][PickAreaID],  E_STREAMER_INDX, ArrestPickup);

	Pickups[PoliceEnterRoof][PickJob] = Job_None;
	Pickups[PoliceEnterRoof][PickFraction] = Fraction_Police;
	Pickups[PoliceEnterRoof][PickID] = CreateDynamicPickup(1318, 1, 246.4296,88.1521,1003.6406, 1, 6);
	Pickups[PoliceEnterRoof][PickAreaID] = CreateDynamicSphere(246.4296,88.1521,1003.6406, 2.0, 1, 6);
	Pickups[PoliceEnterRoof][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 246.4296,88.1521,1003.6406+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
	Pickups[PoliceEnterRoof][PickAngle] = 179.7212;
	Pickups[PoliceEnterRoof][IsPickTP] = true;
	Pickups[PoliceEnterRoof][PickTpPickID] = PoliceExitRoof;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceEnterRoof][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceEnterRoof][PickAreaID],  E_STREAMER_INDX, PoliceEnterRoof);

	Pickups[PoliceExitRoof][PickJob] = Job_None;
	Pickups[PoliceExitRoof][PickFraction] = Fraction_Police;
	Pickups[PoliceExitRoof][PickID] = CreateDynamicPickup(1318, 1, 1564.1764,-1666.9120,28.3956, 0, 0);
	Pickups[PoliceExitRoof][PickAreaID] = CreateDynamicSphere(1564.1764,-1666.9120,28.3956, 2.0, 0, 0);
	Pickups[PoliceExitRoof][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 1564.1764,-1666.9120,28.3956+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[PoliceExitRoof][PickAngle] = 5.6354;
	Pickups[PoliceExitRoof][IsPickTP] = true;
	Pickups[PoliceExitRoof][PickTpPickID] = PoliceEnterRoof;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceExitRoof][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[PoliceExitRoof][PickAreaID],  E_STREAMER_INDX, PoliceExitRoof);

	Pickups[HospitalExit][PickJob] = Job_None;
	Pickups[HospitalExit][PickFraction] = Fraction_None;
	Pickups[HospitalExit][PickID] = CreateDynamicPickup(1318, 1, -319.3812,1052.8435,1028.0284, 4, 5);
	Pickups[HospitalExit][PickAreaID] = CreateDynamicSphere(-319.3812,1052.8435,1028.0284, 2.0, 4, 5);
	Pickups[HospitalExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -319.3812,1052.8435,1028.0284+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Pickups[HospitalExit][PickAngle] = 179.3749;
	Pickups[HospitalExit][IsPickTP] = true;
	Pickups[HospitalExit][PickTpPickID] = HospitalEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalExit][PickAreaID],  E_STREAMER_INDX, HospitalExit);

	Pickups[HospitalEnter][PickJob] = Job_None;
	Pickups[HospitalEnter][PickFraction] = Fraction_None;
	Pickups[HospitalEnter][PickID] = CreateDynamicPickup(1318, 1, -318.7607,1048.2343,20.3403, 0, 0);
	Pickups[HospitalEnter][PickAreaID] = CreateDynamicSphere(-318.7607,1048.2343,20.3403, 2.0, 0, 0);
	Pickups[HospitalEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -318.7607,1048.2343,20.3403+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HospitalEnter][PickAngle] = 357.2018;
	Pickups[HospitalEnter][IsPickTP] = true;
	Pickups[HospitalEnter][PickTpPickID] = HospitalExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalEnter][PickAreaID],  E_STREAMER_INDX, HospitalEnter);

	Pickups[HospitalPickCard][PickJob] = Job_None;
	Pickups[HospitalPickCard][PickID] = CreateDynamicPickup(1581, 1, -320.3462,1039.5522,1028.0284, 4, 5);
	Pickups[HospitalPickCard][PickAreaID] = CreateDynamicSphere(-320.3462,1039.5522,1028.0284, 1.0, 4, 5);
	Pickups[HospitalPickCard][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Покупка медицинской карты", -1, -320.3462,1039.5522,1028.0284+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Pickups[HospitalPickCard][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalPickCard][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalPickCard][PickAreaID],  E_STREAMER_INDX, HospitalPickCard);

	Pickups[CommandHelpPolice][PickJob] = Job_None;
	Pickups[CommandHelpPolice][PickID] = CreateDynamicPickup(1239, 1, 256.0681,74.0647,1003.6406, 1, 6);
	Pickups[CommandHelpPolice][PickAreaID] = CreateDynamicSphere(256.0681,74.0647,1003.6406, 1.0, 1, 6);
	Pickups[CommandHelpPolice][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, 256.0681,74.0647,1003.6406+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
	Pickups[CommandHelpPolice][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpPolice][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpPolice][PickAreaID],  E_STREAMER_INDX, CommandHelpPolice);

	Pickups[CommandHelpArmy][PickJob] = Job_None;
	Pickups[CommandHelpArmy][PickID] = CreateDynamicPickup(1239, 1, 151.2900,1874.5391,2049.2261, 2, 1);
	Pickups[CommandHelpArmy][PickAreaID] = CreateDynamicSphere(151.2900,1874.5391,2049.2261, 1.0, 2, 1);
	Pickups[CommandHelpArmy][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, 151.2900,1874.5391,2049.2261+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 1);
	Pickups[CommandHelpArmy][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpArmy][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpArmy][PickAreaID],  E_STREAMER_INDX, CommandHelpArmy);

	Pickups[CommandHelpFBI][PickJob] = Job_None;
	Pickups[CommandHelpFBI][PickID] = CreateDynamicPickup(1239, 1, 326.9827,306.6900,999.1484, 3, 5);
	Pickups[CommandHelpFBI][PickAreaID] = CreateDynamicSphere(326.9827,306.6900,999.1484, 1.0, 3, 5);
	Pickups[CommandHelpFBI][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, 326.9827,306.6900,999.1484+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 5);
	Pickups[CommandHelpFBI][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpFBI][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpFBI][PickAreaID],  E_STREAMER_INDX, CommandHelpFBI);

	Pickups[CommandHelpHospital][PickJob] = Job_None;
	Pickups[CommandHelpHospital][PickID] = CreateDynamicPickup(1239, 1, -325.7807,1034.2782,1028.0475, 4, 5);
	Pickups[CommandHelpHospital][PickAreaID] = CreateDynamicSphere(-325.7807,1034.2782,1028.0475, 1.0, 4, 5);
	Pickups[CommandHelpHospital][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, -325.7807,1034.2782,1028.0475+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Pickups[CommandHelpHospital][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpHospital][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpHospital][PickAreaID],  E_STREAMER_INDX, CommandHelpHospital);

	Pickups[HospitalSperm][PickJob] = Job_None;
	Pickups[HospitalSperm][PickID] = CreateDynamicPickup(11747, 1, -314.4957,1043.6464,1028.0461, 4, 5);
	Pickups[HospitalSperm][PickAreaID] = CreateDynamicSphere(-314.4957,1043.6464,1028.0461, 1.0, 4, 5);
	Pickups[HospitalSperm][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Сдача спермы", -1, -314.4957,1043.6464,1028.0461+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Pickups[HospitalSperm][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalSperm][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalSperm][PickAreaID],  E_STREAMER_INDX, HospitalSperm);

	Pickups[HospitalBlood][PickJob] = Job_None;
	Pickups[HospitalBlood][PickID] = CreateDynamicPickup(1580, 1, -306.9997,1052.5337,1028.0485, 4, 5);
	Pickups[HospitalBlood][PickAreaID] = CreateDynamicSphere(-306.9997,1052.5337,1028.0485, 1.0, 4, 5);
	Pickups[HospitalBlood][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Сдача пакетов с кровью", -1, -306.9997,1052.5337,1028.0485+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);
	Pickups[HospitalBlood][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalBlood][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HospitalBlood][PickAreaID],  E_STREAMER_INDX, HospitalBlood);

	Pickups[TaxiExit][PickJob] = Job_None;
	Pickups[TaxiExit][PickFraction] = Fraction_None;
	Pickups[TaxiExit][PickID] = CreateDynamicPickup(1318, 1, -2029.7529,-119.6229,1035.1719, 5, 3);
	Pickups[TaxiExit][PickAreaID] = CreateDynamicSphere(-2029.7529,-119.6229,1035.1719, 2.0, 5, 3);
	Pickups[TaxiExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2029.7529,-119.6229,1035.1719+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 3);
	Pickups[TaxiExit][PickAngle] = 357.7379;
	Pickups[TaxiExit][IsPickTP] = true;
	Pickups[TaxiExit][PickTpPickID] = TaxiEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TaxiExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TaxiExit][PickAreaID],  E_STREAMER_INDX, TaxiExit);

	Pickups[TaxiEnter][PickJob] = Job_None;
	Pickups[TaxiEnter][PickFraction] = Fraction_Taxi;
	Pickups[TaxiEnter][PickID] = CreateDynamicPickup(1318, 1, -539.9884,-506.4533,25.5234, 0, 0);
	Pickups[TaxiEnter][PickAreaID] = CreateDynamicSphere(-539.9884,-506.4533,25.5234, 2.0, 0, 0);
	Pickups[TaxiEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -539.9884,-506.4533,25.5234+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[TaxiEnter][PickAngle] = 356.8785;
	Pickups[TaxiEnter][IsPickTP] = true;
	Pickups[TaxiEnter][PickTpPickID] = TaxiExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TaxiEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[TaxiEnter][PickAreaID],  E_STREAMER_INDX, TaxiEnter);

	Pickups[CommandHelpTaxi][PickJob] = Job_None;
	Pickups[CommandHelpTaxi][PickID] = CreateDynamicPickup(1239, 1, -2035.3624,-119.0075,1035.1719, 5, 3);
	Pickups[CommandHelpTaxi][PickAreaID] = CreateDynamicSphere(-2035.3624,-119.0075,1035.1719, 1.0, 5, 3);
	Pickups[CommandHelpTaxi][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, -2035.3624,-119.0075,1035.1719+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 3);
	Pickups[CommandHelpTaxi][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpTaxi][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpTaxi][PickAreaID],  E_STREAMER_INDX, CommandHelpTaxi);

	Pickups[SanNewsExit][PickJob] = Job_None;
	Pickups[SanNewsExit][PickFraction] = Fraction_None;
	Pickups[SanNewsExit][PickID] = CreateDynamicPickup(1318, 1, 162.3705,-121.8512,1071.3750, 6, 6);
	Pickups[SanNewsExit][PickAreaID] = CreateDynamicSphere(162.3705,-121.8512,1071.3750, 2.0, 6, 6);
	Pickups[SanNewsExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 162.3705,-121.8512,1071.3750+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 6);
	Pickups[SanNewsExit][PickAngle] = 179.1911;
	Pickups[SanNewsExit][IsPickTP] = true;
	Pickups[SanNewsExit][PickTpPickID] = SanNewsEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsExit][PickAreaID],  E_STREAMER_INDX, SanNewsExit);

	Pickups[SanNewsEnter][PickJob] = Job_None;
	Pickups[SanNewsEnter][PickFraction] = Fraction_SanNews;
	Pickups[SanNewsEnter][PickID] = CreateDynamicPickup(1318, 1, -2521.0850,-624.9506,132.7842, 0, 0);
	Pickups[SanNewsEnter][PickAreaID] = CreateDynamicSphere(-2521.0850,-624.9506,132.7842, 2.0, 0, 0);
	Pickups[SanNewsEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2521.0850,-624.9506,132.7842+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[SanNewsEnter][PickAngle] = 3.1872;
	Pickups[SanNewsEnter][IsPickTP] = true;
	Pickups[SanNewsEnter][PickTpPickID] = SanNewsExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsEnter][PickAreaID],  E_STREAMER_INDX, SanNewsEnter);

	Pickups[CommandHelpSanNews][PickJob] = Job_None;
	Pickups[CommandHelpSanNews][PickID] = CreateDynamicPickup(1239, 1, 167.9450,-116.3253,1076.5938, 6, 6);
	Pickups[CommandHelpSanNews][PickAreaID] = CreateDynamicSphere(167.9450,-116.3253,1076.5938, 1.0, 6, 6);
	Pickups[CommandHelpSanNews][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Команды организации", -1, 167.9450,-116.3253,1076.5938+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 6);
	Pickups[CommandHelpSanNews][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpSanNews][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[CommandHelpSanNews][PickAreaID],  E_STREAMER_INDX, CommandHelpSanNews);

	Pickups[HangarOneExit][PickJob] = Job_None;
	Pickups[HangarOneExit][PickFraction] = Fraction_None;
	Pickups[HangarOneExit][PickID] = CreateDynamicPickup(1318, 1, 390.7688,173.8386,1008.3828, 2, 3);
	Pickups[HangarOneExit][PickAreaID] = CreateDynamicSphere(390.7688,173.8386,1008.3828, 2.0, 2, 3);
	Pickups[HangarOneExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 390.7688,173.8386,1008.3828+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 3);
	Pickups[HangarOneExit][PickAngle] = 92.0090;
	Pickups[HangarOneExit][IsPickTP] = true;
	Pickups[HangarOneExit][PickTpPickID] = HangarOneEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarOneExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarOneExit][PickAreaID],  E_STREAMER_INDX, HangarOneExit);

	Pickups[HangarOneEnter][PickJob] = Job_None;
	Pickups[HangarOneEnter][PickFraction] = Fraction_None;
	Pickups[HangarOneEnter][PickID] = CreateDynamicPickup(1318, 1, 901.2533,-1202.6208,16.9832, 0, 0);
	Pickups[HangarOneEnter][PickAreaID] = CreateDynamicSphere(901.2533,-1202.6208,16.9832, 2.0, 0, 0);
	Pickups[HangarOneEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №1\nСтатус: "Color_Red"Закрыт", -1, 901.2533,-1202.6208,16.9832+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarOneEnter][PickAngle] = 177.6956;
	Pickups[HangarOneEnter][IsPickTP] = true;
	Pickups[HangarOneEnter][PickTpPickID] = HangarOneExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarOneEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarOneEnter][PickAreaID],  E_STREAMER_INDX, HangarOneEnter);

	Pickups[HangarTwoExit][PickJob] = Job_None;
	Pickups[HangarTwoExit][PickFraction] = Fraction_None;
	Pickups[HangarTwoExit][PickID] = CreateDynamicPickup(1318, 1, -1128.6901,1066.2426,1345.7438, 2, 10);
	Pickups[HangarTwoExit][PickAreaID] = CreateDynamicSphere(-1128.6901,1066.2426,1345.7438, 2.0, 2, 10);
	Pickups[HangarTwoExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1128.6901,1066.2426,1345.7438+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 10);
	Pickups[HangarTwoExit][PickAngle] = -92.0090;
	Pickups[HangarTwoExit][IsPickTP] = true;
	Pickups[HangarTwoExit][PickTpPickID] = HangarTwoEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarTwoExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarTwoExit][PickAreaID],  E_STREAMER_INDX, HangarTwoExit);

	Pickups[HangarTwoEnter][PickJob] = Job_None;
	Pickups[HangarTwoEnter][PickFraction] = Fraction_None;
	Pickups[HangarTwoEnter][PickID] = CreateDynamicPickup(1318, 1, 867.4136,-1202.6198,16.9766, 0, 0);
	Pickups[HangarTwoEnter][PickAreaID] = CreateDynamicSphere(867.4136,-1202.6198,16.9766, 2.0, 0, 0);
	Pickups[HangarTwoEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №2\nСтатус: "Color_Red"Закрыт", -1, 867.4136,-1202.6198,16.9766+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarTwoEnter][PickAngle] = 176.4423;
	Pickups[HangarTwoEnter][IsPickTP] = true;
	Pickups[HangarTwoEnter][PickTpPickID] = HangarTwoExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarTwoEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarTwoEnter][PickAreaID],  E_STREAMER_INDX, HangarTwoEnter);

	Pickups[HangarThreeExit][PickJob] = Job_None;
	Pickups[HangarThreeExit][PickFraction] = Fraction_None;
	Pickups[HangarThreeExit][PickID] = CreateDynamicPickup(1318, 1, 772.3735,-5.5129,1000.7286, 2, 5);
	Pickups[HangarThreeExit][PickAreaID] = CreateDynamicSphere(772.3735,-5.5129,1000.7286, 2.0, 2, 5);
	Pickups[HangarThreeExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 772.3735,-5.5129,1000.7286+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 5);
	Pickups[HangarThreeExit][PickAngle] = 4.3973;
	Pickups[HangarThreeExit][IsPickTP] = true;
	Pickups[HangarThreeExit][PickTpPickID] = HangarThreeEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarThreeExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarThreeExit][PickAreaID],  E_STREAMER_INDX, HangarThreeExit);

	Pickups[HangarThreeEnter][PickJob] = Job_None;
	Pickups[HangarThreeEnter][PickFraction] = Fraction_None;
	Pickups[HangarThreeEnter][PickID] = CreateDynamicPickup(1318, 1, 830.9946,-1202.6180,16.9766, 0, 0);
	Pickups[HangarThreeEnter][PickAreaID] = CreateDynamicSphere(830.9946,-1202.6180,16.9766, 2.0, 0, 0);
	Pickups[HangarThreeEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №3\nСтатус: "Color_Red"Закрыт", -1, 830.9946,-1202.6180,16.9766+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarThreeEnter][PickAngle] = 179.2391;
	Pickups[HangarThreeEnter][IsPickTP] = true;
	Pickups[HangarThreeEnter][PickTpPickID] = HangarThreeExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarThreeEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarThreeEnter][PickAreaID],  E_STREAMER_INDX, HangarThreeEnter);

	Pickups[HangarFourExit][PickJob] = Job_None;
	Pickups[HangarFourExit][PickFraction] = Fraction_None;
	Pickups[HangarFourExit][PickID] = CreateDynamicPickup(1318, 1, -1497.2578,1605.8265,1052.5313, 2, 14);
	Pickups[HangarFourExit][PickAreaID] = CreateDynamicSphere(-1497.2578,1605.8265,1052.5313, 2.0, 2, 14);
	Pickups[HangarFourExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1497.2578,1605.8265,1052.5313+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 14);
	Pickups[HangarFourExit][PickAngle] = 269.1431;
	Pickups[HangarFourExit][IsPickTP] = true;
	Pickups[HangarFourExit][PickTpPickID] = HangarFourEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFourExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFourExit][PickAreaID],  E_STREAMER_INDX, HangarFourExit);

	Pickups[HangarFourEnter][PickJob] = Job_None;
	Pickups[HangarFourEnter][PickFraction] = Fraction_None;
	Pickups[HangarFourEnter][PickID] = CreateDynamicPickup(1318, 1, 860.8143,-1245.2002,14.7578, 0, 0);
	Pickups[HangarFourEnter][PickAreaID] = CreateDynamicSphere(860.8143,-1245.2002,14.7578, 2.0, 0, 0);
	Pickups[HangarFourEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №4\nСтатус: "Color_Red"Закрыт", -1, 860.8143,-1245.2002,14.7578+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarFourEnter][PickAngle] = 277.3134;
	Pickups[HangarFourEnter][IsPickTP] = true;
	Pickups[HangarFourEnter][PickTpPickID] = HangarFourExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFourEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFourEnter][PickAreaID],  E_STREAMER_INDX, HangarFourEnter);

	Pickups[HangarFiveExit][PickJob] = Job_None;
	Pickups[HangarFiveExit][PickFraction] = Fraction_None;
	Pickups[HangarFiveExit][PickID] = CreateDynamicPickup(1318, 1, 2214.3848,-1150.4180,1025.7969, 2, 15);
	Pickups[HangarFiveExit][PickAreaID] = CreateDynamicSphere(2214.3848,-1150.4180,1025.7969, 2.0, 2, 15);
	Pickups[HangarFiveExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2214.3848,-1150.4180,1025.7969+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 15);
	Pickups[HangarFiveExit][PickAngle] = 269.1431;
	Pickups[HangarFiveExit][IsPickTP] = true;
	Pickups[HangarFiveExit][PickTpPickID] = HangarFiveEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFiveExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFiveExit][PickAreaID],  E_STREAMER_INDX, HangarFiveExit);

	Pickups[HangarFiveEnter][PickJob] = Job_None;
	Pickups[HangarFiveEnter][PickFraction] = Fraction_None;
	Pickups[HangarFiveEnter][PickID] = CreateDynamicPickup(1318, 1, 860.8149,-1255.5018,14.7578, 0, 0);
	Pickups[HangarFiveEnter][PickAreaID] = CreateDynamicSphere(860.8149,-1255.5018,14.7578, 2.0, 0, 0);
	Pickups[HangarFiveEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №5\nСтатус: "Color_Red"Закрыт", -1, 860.8149,-1255.5018,14.7578+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarFiveEnter][PickAngle] = 270.1067;
	Pickups[HangarFiveEnter][IsPickTP] = true;
	Pickups[HangarFiveEnter][PickTpPickID] = HangarFiveExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFiveEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarFiveEnter][PickAreaID],  E_STREAMER_INDX, HangarFiveEnter);

	Pickups[HangarSixExit][PickJob] = Job_None;
	Pickups[HangarSixExit][PickFraction] = Fraction_None;
	Pickups[HangarSixExit][PickID] = CreateDynamicPickup(1318, 1, -1444.2249,929.7787,1036.4819, 3, 15);
	Pickups[HangarSixExit][PickAreaID] = CreateDynamicSphere(-1444.2249,929.7787,1036.4819, 2.0, 3, 15);
	Pickups[HangarSixExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1444.2249,929.7787,1036.4819+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 15);
	Pickups[HangarSixExit][PickAngle] = 355.3575;
	Pickups[HangarSixExit][IsPickTP] = true;
	Pickups[HangarSixExit][PickTpPickID] = HangarSixEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarSixExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarSixExit][PickAreaID],  E_STREAMER_INDX, HangarSixExit);

	Pickups[HangarSixEnter][PickJob] = Job_None;
	Pickups[HangarSixEnter][PickFraction] = Fraction_None;
	Pickups[HangarSixEnter][PickID] = CreateDynamicPickup(1318, 1, 845.1177,-1293.0297,13.6500, 0, 0);
	Pickups[HangarSixEnter][PickAreaID] = CreateDynamicSphere(845.1177,-1293.0297,13.6500, 2.0, 0, 0);
	Pickups[HangarSixEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Ангар №6\nСтатус: "Color_Red"Закрыт", -1, 845.1177,-1293.0297,13.6500+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[HangarSixEnter][PickAngle] = 271.3600;
	Pickups[HangarSixEnter][IsPickTP] = true;
	Pickups[HangarSixEnter][PickTpPickID] = HangarSixExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarSixEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[HangarSixEnter][PickAreaID],  E_STREAMER_INDX, HangarSixEnter);

	Pickups[SanNewsRoofExit][PickJob] = Job_None;
	Pickups[SanNewsRoofExit][PickFraction] = Fraction_SanNews;
	Pickups[SanNewsRoofExit][PickID] = CreateDynamicPickup(1318, 1, 161.1399,-116.0658,1076.5938, 6, 6);
	Pickups[SanNewsRoofExit][PickAreaID] = CreateDynamicSphere(161.1399,-116.0658,1076.5938, 2.0, 6, 6);
	Pickups[SanNewsRoofExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 161.1399,-116.0658,1076.5938+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 6);
	Pickups[SanNewsRoofExit][PickAngle] = 272.7104;
	Pickups[SanNewsRoofExit][IsPickTP] = true;
	Pickups[SanNewsRoofExit][PickTpPickID] = SanNewsRoofEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsRoofExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsRoofExit][PickAreaID],  E_STREAMER_INDX, SanNewsRoofExit);

	Pickups[SanNewsRoofEnter][PickJob] = Job_None;
	Pickups[SanNewsRoofEnter][PickFraction] = Fraction_SanNews;
	Pickups[SanNewsRoofEnter][PickID] = CreateDynamicPickup(1318, 1, -2539.4661,-683.5377,147.9063, 0, 0);
	Pickups[SanNewsRoofEnter][PickAreaID] = CreateDynamicSphere(-2539.4661,-683.5377,147.9063, 2.0, 0, 0);
	Pickups[SanNewsRoofEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2539.4661,-683.5377,147.9063+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[SanNewsRoofEnter][PickAngle] = 359.3066;
	Pickups[SanNewsRoofEnter][IsPickTP] = true;
	Pickups[SanNewsRoofEnter][PickTpPickID] = SanNewsRoofExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsRoofEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[SanNewsRoofEnter][PickAreaID],  E_STREAMER_INDX, SanNewsRoofEnter);

	Pickups[FillBarrel][PickJob] = Job_None;
	Pickups[FillBarrel][PickFraction] = Fraction_None;
	Pickups[FillBarrel][PickID] = CreateDynamicPickup(935, 1, 250.7609,1382.8529,10.7075, 0, 0);
	Pickups[FillBarrel][PickAreaID] = CreateDynamicSphere(250.7609,1382.8529,10.7075, 2.0, 0, 0);
	Pickups[FillBarrel][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Наполннить бочку", -1, 250.7609,1382.8529,10.7075+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FillBarrel][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FillBarrel][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FillBarrel][PickAreaID],  E_STREAMER_INDX, FillBarrel);

	Pickups[RawMateriallTransfer][PickJob] = Job_None;
	Pickups[RawMateriallTransfer][PickFraction] = Fraction_None;
	Pickups[RawMateriallTransfer][PickID] = CreateDynamicPickup(2040, 1, -2492.4646,2363.1980,10.2773, 0, 0);
	Pickups[RawMateriallTransfer][PickAreaID] = CreateDynamicSphere(-2492.4646,2363.1980,10.2773, 2.0, 0, 0);
	Pickups[RawMateriallTransfer][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Обмен на необработанные материалы", -1, -2492.4646,2363.1980,10.2773+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[RawMateriallTransfer][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RawMateriallTransfer][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RawMateriallTransfer][PickAreaID],  E_STREAMER_INDX, RawMateriallTransfer);

	Pickups[MateriallTransfer][PickJob] = Job_None;
	Pickups[MateriallTransfer][PickFraction] = Fraction_None;
	Pickups[MateriallTransfer][PickID] = CreateDynamicPickup(2040, 1, 2442.8247,-1981.2161,13.5469, 0, 0);
	Pickups[MateriallTransfer][PickAreaID] = CreateDynamicSphere(2442.8247,-1981.2161,13.5469, 2.0, 0, 0);
	Pickups[MateriallTransfer][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Обмен на материалы", -1, 2442.8247,-1981.2161,13.5469+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[MateriallTransfer][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MateriallTransfer][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[MateriallTransfer][PickAreaID],  E_STREAMER_INDX, MateriallTransfer);

	Pickups[DrugsTransfer][PickJob] = Job_None;
	Pickups[DrugsTransfer][PickFraction] = Fraction_None;
	Pickups[DrugsTransfer][PickID] = CreateDynamicPickup(1575, 1, 2165.9641,-1671.1626,15.0732, 0, 0);
	Pickups[DrugsTransfer][PickAreaID] = CreateDynamicSphere(2165.9641,-1671.1626,15.0732, 2.0, 0, 0);
	Pickups[DrugsTransfer][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Обмен на наркотики", -1, 2165.9641,-1671.1626,15.0732+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[DrugsTransfer][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[DrugsTransfer][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[DrugsTransfer][PickAreaID],  E_STREAMER_INDX, DrugsTransfer);

	Pickups[ArmyUnload][PickJob] = Job_None;
	Pickups[ArmyUnload][PickFraction] = Fraction_Army;
	Pickups[ArmyUnload][PickID] = CreateDynamicPickup(1254, 1, -307.9075,1538.8247,75.5625, 0, 0);
	Pickups[ArmyUnload][PickAreaID] = CreateDynamicSphere(-307.9075,1538.8247,75.5625, 2.0, 0, 0);
	Pickups[ArmyUnload][PickTextID] = CreateDynamic3DTextLabel(Main_Color"Пункт сдачи ящиков", -1, -307.9075,1538.8247,75.5625+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[ArmyUnload][IsPickTP] = false;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyUnload][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[ArmyUnload][PickAreaID],  E_STREAMER_INDX, ArmyUnload);

	Pickups[StashExit][PickJob] = Job_None;
	Pickups[StashExit][PickFraction] = Fraction_None;
	Pickups[StashExit][PickID] = CreateDynamicPickup(1318, 1, -236.2969,-14.6626,1046.3240, 1, 17);
	Pickups[StashExit][PickAreaID] = CreateDynamicSphere(-236.2969,-14.6626,1046.3240, 2.0, 1, 17);
	Pickups[StashExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -236.2969,-14.6626,1046.3240+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 17);
	Pickups[StashExit][PickAngle] = 0.9817;
	Pickups[StashExit][IsPickTP] = true;
	Pickups[StashExit][PickTpPickID] = StashEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StashExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StashExit][PickAreaID],  E_STREAMER_INDX, StashExit);

	Pickups[StashEnter][PickJob] = Job_None;
	Pickups[StashEnter][PickFraction] = Fraction_None;
	Pickups[StashEnter][PickID] = CreateDynamicPickup(1318, 1, -2106.8921,-194.4499,35.3203, 0, 0);
	Pickups[StashEnter][PickAreaID] = CreateDynamicSphere(-2106.8921,-194.4499,35.3203, 2.0, 0, 0);
	Pickups[StashEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2106.8921,-194.4499,35.3203+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[StashEnter][PickAngle] = 175.6169;
	Pickups[StashEnter][IsPickTP] = true;
	Pickups[StashEnter][PickTpPickID] = StashExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StashEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StashEnter][PickAreaID],  E_STREAMER_INDX, StashEnter);

	Pickups[VagosExit][PickJob] = Job_None;
	Pickups[VagosExit][PickFraction] = Fraction_None;
	Pickups[VagosExit][PickID] = CreateDynamicPickup(1318, 1, 309.3895,311.7142,1003.3047, 1, 4);
	Pickups[VagosExit][PickAreaID] = CreateDynamicSphere(309.3895,311.7142,1003.3047, 2.0, 1, 4);
	Pickups[VagosExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 309.3895,311.7142,1003.3047+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 4);
	Pickups[VagosExit][PickAngle] = 177.9381;
	Pickups[VagosExit][IsPickTP] = true;
	Pickups[VagosExit][PickTpPickID] = VagosEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[VagosExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[VagosExit][PickAreaID],  E_STREAMER_INDX, VagosExit);

	Pickups[VagosEnter][PickJob] = Job_None;
	Pickups[VagosEnter][PickFraction] = Fraction_Vagos;
	Pickups[VagosEnter][PickID] = CreateDynamicPickup(1318, 1, 2770.6865,-1628.7218,12.1775, 0, 0);
	Pickups[VagosEnter][PickAreaID] = CreateDynamicSphere(2770.6865,-1628.7218,12.1775, 2.0, 0, 0);
	Pickups[VagosEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2770.6865,-1628.7218,12.1775+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[VagosEnter][PickAngle] = 356.2637;
	Pickups[VagosEnter][IsPickTP] = true;
	Pickups[VagosEnter][PickTpPickID] = VagosExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[VagosEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[VagosEnter][PickAreaID],  E_STREAMER_INDX, VagosEnter);

	Pickups[BallasExit][PickJob] = Job_None;
	Pickups[BallasExit][PickFraction] = Fraction_None;
	Pickups[BallasExit][PickID] = CreateDynamicPickup(1318, 1, -68.8422,1351.1971,1080.2109, 1, 6);
	Pickups[BallasExit][PickAreaID] = CreateDynamicSphere(-68.8422,1351.1971,1080.2109, 2.0, 1, 6);
	Pickups[BallasExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -68.8422,1351.1971,1080.2109+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 6);
	Pickups[BallasExit][PickAngle] = 359.7001;
	Pickups[BallasExit][IsPickTP] = true;
	Pickups[BallasExit][PickTpPickID] = BallasEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BallasExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BallasExit][PickAreaID],  E_STREAMER_INDX, BallasExit);

	Pickups[BallasEnter][PickJob] = Job_None;
	Pickups[BallasEnter][PickFraction] = Fraction_Ballas;
	Pickups[BallasEnter][PickID] = CreateDynamicPickup(1318, 1, 2324.4167,-1218.8423,27.9766, 0, 0);
	Pickups[BallasEnter][PickAreaID] = CreateDynamicSphere(2324.4167,-1218.8423,27.9766, 2.0, 0, 0);
	Pickups[BallasEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2324.4167,-1218.8423,27.9766+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[BallasEnter][PickAngle] = 182.3986;
	Pickups[BallasEnter][IsPickTP] = true;
	Pickups[BallasEnter][PickTpPickID] = BallasExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BallasEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BallasEnter][PickAreaID],  E_STREAMER_INDX, BallasEnter);

	Pickups[AztecasExit][PickJob] = Job_None;
	Pickups[AztecasExit][PickFraction] = Fraction_None;
	Pickups[AztecasExit][PickID] = CreateDynamicPickup(1318, 1, 422.4292,2536.4910,10.0000, 1, 10);
	Pickups[AztecasExit][PickAreaID] = CreateDynamicSphere(422.4292,2536.4910,10.0000, 2.0, 1, 10);
	Pickups[AztecasExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 422.4292,2536.4910,10.0000+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 10);
	Pickups[AztecasExit][PickAngle] = 91.9571;
	Pickups[AztecasExit][IsPickTP] = true;
	Pickups[AztecasExit][PickTpPickID] = AztecasEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[AztecasExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[AztecasExit][PickAreaID],  E_STREAMER_INDX, AztecasExit);

	Pickups[AztecasEnter][PickJob] = Job_None;
	Pickups[AztecasEnter][PickFraction] = Fraction_Aztecas;
	Pickups[AztecasEnter][PickID] = CreateDynamicPickup(1318, 1, 1804.1490,-2124.9016,13.9424, 0, 0);
	Pickups[AztecasEnter][PickAreaID] = CreateDynamicSphere(1804.1490,-2124.9016,13.9424, 2.0, 0, 0);
	Pickups[AztecasEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 1804.1490,-2124.9016,13.9424+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[AztecasEnter][PickAngle] = 4.4149;
	Pickups[AztecasEnter][IsPickTP] = true;
	Pickups[AztecasEnter][PickTpPickID] = AztecasExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[AztecasEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[AztecasEnter][PickAreaID],  E_STREAMER_INDX, AztecasEnter);

	Pickups[GroveExit][PickJob] = Job_None;
	Pickups[GroveExit][PickFraction] = Fraction_None;
	Pickups[GroveExit][PickID] = CreateDynamicPickup(1318, 1, 2524.0283,-1679.3945,1015.4986, 1, 1);
	Pickups[GroveExit][PickAreaID] = CreateDynamicSphere(2524.0283,-1679.3945,1015.4986, 2.0, 1, 1);
	Pickups[GroveExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2524.0283,-1679.3945,1015.4986+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 1);
	Pickups[GroveExit][PickAngle] = 262.2298;
	Pickups[GroveExit][IsPickTP] = true;
	Pickups[GroveExit][PickTpPickID] = GroveEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GroveExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GroveExit][PickAreaID],  E_STREAMER_INDX, GroveExit);

	Pickups[GroveEnter][PickJob] = Job_None;
	Pickups[GroveEnter][PickFraction] = Fraction_Grove;
	Pickups[GroveEnter][PickID] = CreateDynamicPickup(1318, 1, 2523.2708,-1679.3291,15.4970, 0, 0);
	Pickups[GroveEnter][PickAreaID] = CreateDynamicSphere(2523.2708,-1679.3291,15.4970, 2.0, 0, 0);
	Pickups[GroveEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, 2523.2708,-1679.3291,15.4970+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[GroveEnter][PickAngle] = 93.6783;
	Pickups[GroveEnter][IsPickTP] = true;
	Pickups[GroveEnter][PickTpPickID] = GroveExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GroveEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[GroveEnter][PickAreaID],  E_STREAMER_INDX, GroveEnter);

	Pickups[RifaExit][PickJob] = Job_None;
	Pickups[RifaExit][PickFraction] = Fraction_None;
	Pickups[RifaExit][PickID] = CreateDynamicPickup(1318, 1, -229.2149,1401.1981,27.7656, 1, 18);
	Pickups[RifaExit][PickAreaID] = CreateDynamicSphere(-229.2149,1401.1981,27.7656, 2.0, 1, 18);
	Pickups[RifaExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -229.2149,1401.1981,27.7656+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 18);
	Pickups[RifaExit][PickAngle] = 265.1119;
	Pickups[RifaExit][IsPickTP] = true;
	Pickups[RifaExit][PickTpPickID] = RifaEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RifaExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RifaExit][PickAreaID],  E_STREAMER_INDX, RifaExit);

	Pickups[RifaEnter][PickJob] = Job_None;
	Pickups[RifaEnter][PickFraction] = Fraction_Rifa;
	Pickups[RifaEnter][PickID] = CreateDynamicPickup(1318, 1, -2454.6731,-135.9262,26.1888, 0, 0);
	Pickups[RifaEnter][PickAreaID] = CreateDynamicSphere(-2454.6731,-135.9262,26.1888, 2.0, 0, 0);
	Pickups[RifaEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2454.6731,-135.9262,26.1888+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[RifaEnter][PickAngle] = 89.6844;
	Pickups[RifaEnter][IsPickTP] = true;
	Pickups[RifaEnter][PickTpPickID] = RifaExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RifaEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RifaEnter][PickAreaID],  E_STREAMER_INDX, RifaEnter);

	Pickups[StreetRacersExit][PickJob] = Job_None;
	Pickups[StreetRacersExit][PickFraction] = Fraction_None;
	Pickups[StreetRacersExit][PickID] = CreateDynamicPickup(1318, 1, -2670.7085,599.9630,375.1918, 2, 18);
	Pickups[StreetRacersExit][PickAreaID] = CreateDynamicSphere(-2670.7085,599.9630,375.1918, 2.0, 2, 18);
	Pickups[StreetRacersExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -2670.7085,599.9630,375.1918+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 18);
	Pickups[StreetRacersExit][PickAngle] = 1.5771;
	Pickups[StreetRacersExit][IsPickTP] = true;
	Pickups[StreetRacersExit][PickTpPickID] = StreetRacersEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StreetRacersExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StreetRacersExit][PickAreaID],  E_STREAMER_INDX, StreetRacersExit);

	Pickups[StreetRacersEnter][PickJob] = Job_None;
	Pickups[StreetRacersEnter][PickFraction] = Fraction_StreetRacers;
	Pickups[StreetRacersEnter][PickID] = CreateDynamicPickup(1318, 1,-1715.8240, 1018.1724, 17.9178, 0, 0);
	Pickups[StreetRacersEnter][PickAreaID] = CreateDynamicSphere(-1715.8240,1018.1724,17.9178, 2.0, 0, 0);
	Pickups[StreetRacersEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1715.8240,1018.1724,17.9178+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[StreetRacersEnter][PickAngle] = 95.5062;
	Pickups[StreetRacersEnter][IsPickTP] = true;
	Pickups[StreetRacersEnter][PickTpPickID] = StreetRacersExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StreetRacersEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[StreetRacersEnter][PickAreaID],  E_STREAMER_INDX, StreetRacersEnter);

	Pickups[BikersExit][PickJob] = Job_None;
	Pickups[BikersExit][PickFraction] = Fraction_None;
	Pickups[BikersExit][PickID] = CreateDynamicPickup(1318, 1, -229.2149,1401.1981,27.7656, 3, 18);
	Pickups[BikersExit][PickAreaID] = CreateDynamicSphere(-229.2149,1401.1981,27.7656, 2.0, 3, 18);
	Pickups[BikersExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -229.2149,1401.1981,27.7656+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 18);
	Pickups[BikersExit][PickAngle] = 265.1119;
	Pickups[BikersExit][IsPickTP] = true;
	Pickups[BikersExit][PickTpPickID] = BikersEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BikersExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BikersExit][PickAreaID],  E_STREAMER_INDX, BikersExit);

	Pickups[BikersEnter][PickJob] = Job_None;
	Pickups[BikersEnter][PickFraction] = Fraction_Bikers;
	Pickups[BikersEnter][PickID] = CreateDynamicPickup(1318, 1, -300.4522,2658.2339,63.1989, 0, 0);
	Pickups[BikersEnter][PickAreaID] = CreateDynamicSphere(-300.4522,2658.2339,63.1989, 2.0, 0, 0);
	Pickups[BikersEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -300.4522,2658.2339,63.1989+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[BikersEnter][PickAngle] = 4.2553;
	Pickups[BikersEnter][IsPickTP] = true;
	Pickups[BikersEnter][PickTpPickID] = BikersExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BikersEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[BikersEnter][PickAreaID],  E_STREAMER_INDX, BikersEnter);

	Pickups[FarmOfTruthExit][PickJob] = Job_None;
	Pickups[FarmOfTruthExit][PickFraction] = Fraction_None;
	Pickups[FarmOfTruthExit][PickID] = CreateDynamicPickup(1318, 1, -229.2149,1401.1981,27.7656, 4, 18);
	Pickups[FarmOfTruthExit][PickAreaID] = CreateDynamicSphere(-229.2149,1401.1981,27.7656, 2.0, 4, 18);
	Pickups[FarmOfTruthExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -229.2149,1401.1981,27.7656+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 18);
	Pickups[FarmOfTruthExit][PickAngle] = 265.1119;
	Pickups[FarmOfTruthExit][IsPickTP] = true;
	Pickups[FarmOfTruthExit][PickTpPickID] = FarmOfTruthEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmOfTruthExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmOfTruthExit][PickAreaID],  E_STREAMER_INDX, FarmOfTruthExit);

	Pickups[FarmOfTruthEnter][PickJob] = Job_None;
	Pickups[FarmOfTruthEnter][PickFraction] = Fraction_FarmOfTruth;
	Pickups[FarmOfTruthEnter][PickID] = CreateDynamicPickup(1318, 1, -1061.4097,-1205.4667,129.7565, 0, 0);
	Pickups[FarmOfTruthEnter][PickAreaID] = CreateDynamicSphere(-1061.4097,-1205.4667,129.7565, 2.0, 0, 0);
	Pickups[FarmOfTruthEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -1061.4097,-1205.4667,129.7565+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[FarmOfTruthEnter][PickAngle] = 270.2953;
	Pickups[FarmOfTruthEnter][IsPickTP] = true;
	Pickups[FarmOfTruthEnter][PickTpPickID] = FarmOfTruthExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmOfTruthEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[FarmOfTruthEnter][PickAreaID],  E_STREAMER_INDX, FarmOfTruthEnter);

    Pickups[RussiaMafiaExit][PickJob] = Job_None;
	Pickups[RussiaMafiaExit][PickFraction] = Fraction_None;
	Pickups[RussiaMafiaExit][PickID] = CreateDynamicPickup(1318, 1, -229.2149,1401.1981,27.7656, 5, 18);
	Pickups[RussiaMafiaExit][PickAreaID] = CreateDynamicSphere(-229.2149,1401.1981,27.7656, 2.0, 5, 18);
	Pickups[RussiaMafiaExit][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы выйти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -229.2149,1401.1981,27.7656+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 18);
	Pickups[RussiaMafiaExit][PickAngle] = 265.1119;
	Pickups[RussiaMafiaExit][IsPickTP] = true;
	Pickups[RussiaMafiaExit][PickTpPickID] = RussiaMafiaEnter;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RussiaMafiaExit][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RussiaMafiaExit][PickAreaID],  E_STREAMER_INDX, RussiaMafiaExit);

	Pickups[RussiaMafiaEnter][PickJob] = Job_None;
	Pickups[RussiaMafiaEnter][PickFraction] = Fraction_RussiaMafia;
	Pickups[RussiaMafiaEnter][PickID] = CreateDynamicPickup(1318, 1, -683.9308,939.5360,13.6328, 0, 0);
	Pickups[RussiaMafiaEnter][PickAreaID] = CreateDynamicSphere(-683.9308,939.5360,13.6328, 2.0, 0, 0);
	Pickups[RussiaMafiaEnter][PickTextID] = CreateDynamic3DTextLabel(Color_White"Чтобы войти нажмите "Main_Color"["Color_White"~k~~SNEAK_ABOUT~"Main_Color"]", -1, -683.9308,939.5360,13.6328+1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	Pickups[RussiaMafiaEnter][PickAngle] = 270.2953;
	Pickups[RussiaMafiaEnter][IsPickTP] = true;
	Pickups[RussiaMafiaEnter][PickTpPickID] = RussiaMafiaExit;
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RussiaMafiaEnter][PickAreaID],  E_STREAMER_ARRAY_TYPE, Array_Type_Pickups);
	Streamer_SetIntData(STREAMER_TYPE_AREA, Pickups[RussiaMafiaEnter][PickAreaID],  E_STREAMER_INDX, RussiaMafiaEnter);
	return 1;
}

stock CreateBusStop()
{
	CreateDynamicObject(1257, -2207.72583, -2261.08472, 30.87967,   0.00000, 0.00000, 51.48004, 0, 0); //Остановка деревня новичков
	CreateDynamic3DTextLabel(Main_Color"Остановка: Деревня новичков", -1, -2207.72583, -2261.08472, 30.87967, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, -2758.03003, 397.50015, 4.54662,   0.00000, 0.00000, 180.00000, 0, 0); //Остановка мэрия
	CreateDynamic3DTextLabel(Main_Color"Остановка: Мэрия", -1, -2758.03003, 397.50015, 4.54662, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, -303.85297, 1072.27563, 19.89271,   0.00000, 0.00000, 90.00000, 0, 0); //Остановка больница
	CreateDynamic3DTextLabel(Main_Color"Остановка: Больница", -1, -303.85297, 1072.27563, 19.89271, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, -293.20959, 1481.95935, 75.80553,   2.56560, -6.73470, 4.38000, 0, 0); //Остановка армия
	CreateDynamic3DTextLabel(Main_Color"Остановка: Армия", -1, -293.20959, 1481.95935, 75.80553, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, 111.34648, -220.71567, 1.82980,   0.00000, 0.00000, -90.00000, 0, 0); //Остановка завод
	CreateDynamic3DTextLabel(Main_Color"Остановка: Завод", -1, 111.34648, -220.71567, 1.82980, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, -775.95282, 1528.56860, 27.53100,   0.00000, 0.00000, -90.00000, 0, 0); //Остановка шахта
	CreateDynamic3DTextLabel(Main_Color"Остановка: Шахта", -1, -775.95282, 1528.56860, 27.53100, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, -647.78687, -1518.48840, 22.37073,   0.00000, 0.00000, -3.60000, 0, 0); //Остановка ферма
	CreateDynamic3DTextLabel(Main_Color"Остановка: Ферма", -1, -647.78687, -1518.48840, 22.37073, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, 2727.79590, -2414.01978, 13.85571,   0.00000, 0.00000, -90.00000, 0, 0); //Остановка грузчики
	CreateDynamic3DTextLabel(Main_Color"Остановка: Грузчики", -1, 2727.79590, -2414.01978, 13.85571, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	CreateDynamicObject(1257, 2422.60327, -2076.66724, 13.75021,   0.00000, 0.00000, 0.00000, 0, 0); //Остановка водитель погрузчика
	CreateDynamic3DTextLabel(Main_Color"Остановка: Водитель погрузчика", -1, 2422.60327, -2076.66724, 13.75021, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	return 1;
}

stock FillLeaderBoard()
{
	new str[1000];
	strcat(str, Main_Color"Лидеры онлайн\n"Color_White);
	foreach(new i: Player)
	{
		if(pInfo[i][pAuth] && pInfo[i][pMembers] != Fraction_None && pInfo[i][pRank] >= FractionMaxRank) format(str, sizeof(str), "%s%s[%d] - %s\n", str, pInfo[i][pName], i, FractionName[pInfo[i][pMembers]]);
	}
	SetDynamicObjectMaterialText(LeaderBoard, 0, str, 140, "Calibri", 26, 1, 0xFFFFFFFF, 0, 1);
	return 1;
}

forward FillAdminBoard();
public FillAdminBoard()
{
	new row = cache_num_rows();
	new str[500];
	strcat(str, Main_Color"Модераторы\n"Color_White);
	if(row)
	{
		for(new i = 0; i < row; i++)
		{
			new Name[MAX_PLAYER_NAME+1], adminlevel;
			cache_get_value_name(i, "Name", Name);
			cache_get_value_name_int(i, "Admin", adminlevel);
			format(str, sizeof(str), "%s%d. %s - %s\n", str, i+1, Name, AdminNames[adminlevel]);
		}
		SetDynamicObjectMaterialText(AdminBoard, 0, str, 140, "Calibri", 26, 1, 0xFFFFFFFF, 0, 1);
	}
	return 1;
}

forward FillPlayerBoard();
public FillPlayerBoard()
{
	new row = cache_num_rows();
	new str[500];
	strcat(str, Main_Color"Топ игроков\n");
	if(row)
	{
		for(new i = 0; i < row; i++)
		{
			new Name[MAX_PLAYER_NAME+1], money, level;
			cache_get_value_name(i, "Name", Name);
			cache_get_value_name_int(i, "Level", level);
			cache_get_value_name_int(i, "Money", money);
			format(str, sizeof(str), "%s"Color_White"%d. %s %d Уровень "Color_Green"%d$\n", str, i+1, Name, level, money);
		}
		SetDynamicObjectMaterialText(PlayerBoard, 0, str, 140, "Calibri", 26, 1, 0xFFFFFFFF, 0, 1);
	}
	return 1;
}

stock PreloadAnimLib(playerid, const animlib[])
{
   ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0, true);
   return 1;
}

stock PreloadAllAnimLibs(playerid)
{
	PreloadAnimLib(playerid,"AIRPORT");
	PreloadAnimLib(playerid,"Attractors");
	PreloadAnimLib(playerid,"BAR");
	PreloadAnimLib(playerid,"BASEBALL");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"benchpress");
	PreloadAnimLib(playerid,"BF_injection");
	PreloadAnimLib(playerid,"BIKED");
	PreloadAnimLib(playerid,"BIKEH");
	PreloadAnimLib(playerid,"BIKELEAP");
	PreloadAnimLib(playerid,"BIKES");
	PreloadAnimLib(playerid,"BIKEV");
	PreloadAnimLib(playerid,"BIKE_DBZ");
	PreloadAnimLib(playerid,"BLOWJOBZ");
	PreloadAnimLib(playerid,"BMX");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"BOX");
	PreloadAnimLib(playerid,"BSKTBALL");
	PreloadAnimLib(playerid,"BUDDY");
	PreloadAnimLib(playerid,"BUS");
	PreloadAnimLib(playerid,"CAMERA");
	PreloadAnimLib(playerid,"CAR");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"CAR_CHAT");
	PreloadAnimLib(playerid,"CASINO");
	PreloadAnimLib(playerid,"CHAINSAW");
	PreloadAnimLib(playerid,"CHOPPA");
	PreloadAnimLib(playerid,"CLOTHES");
	PreloadAnimLib(playerid,"COACH");
	PreloadAnimLib(playerid,"COLT45");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"COP_DVBYZ");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CRIB");
	PreloadAnimLib(playerid,"DAM_JUMP");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"DILDO");
	PreloadAnimLib(playerid,"DODGE");
	PreloadAnimLib(playerid,"DOZER");
	PreloadAnimLib(playerid,"DRIVEBYS");
	PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"FIGHT_B");
	PreloadAnimLib(playerid,"FIGHT_C");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"FIGHT_E");
	PreloadAnimLib(playerid,"FINALE");
	PreloadAnimLib(playerid,"FINALE2");
	PreloadAnimLib(playerid,"FLAME");
	PreloadAnimLib(playerid,"Flowers");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"Freeweights");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"GHETTO_DB");
	PreloadAnimLib(playerid,"goggles");
	PreloadAnimLib(playerid,"GRAFFITI");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"GRENADE");
	PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"HAIRCUTS");
	PreloadAnimLib(playerid,"HEIST9");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"INT_OFFICE");
	PreloadAnimLib(playerid,"INT_SHOP");
	PreloadAnimLib(playerid,"JST_BUISNESS");
	PreloadAnimLib(playerid,"KART");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"KNIFE");
	PreloadAnimLib(playerid,"LAPDAN1");
	PreloadAnimLib(playerid,"LAPDAN2");
	PreloadAnimLib(playerid,"LAPDAN3");
	PreloadAnimLib(playerid,"LOWRIDER");
	PreloadAnimLib(playerid,"MD_CHASE");
	PreloadAnimLib(playerid,"MD_END");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"MTB");
	PreloadAnimLib(playerid,"MUSCULAR");
	PreloadAnimLib(playerid,"NEVADA");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"OTB");
	PreloadAnimLib(playerid,"PARACHUTE");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"PAULNMAC");
	PreloadAnimLib(playerid,"ped");
	PreloadAnimLib(playerid,"PLAYER_DVBYS");
	PreloadAnimLib(playerid,"PLAYIDLES");
	PreloadAnimLib(playerid,"POLICE");
	PreloadAnimLib(playerid,"POOL");
	PreloadAnimLib(playerid,"POOR");
	PreloadAnimLib(playerid,"PYTHON");
	PreloadAnimLib(playerid,"QUAD");
	PreloadAnimLib(playerid,"QUAD_DBZ");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"RIFLE");
	PreloadAnimLib(playerid,"RIOT");
	PreloadAnimLib(playerid,"ROB_BANK");
	PreloadAnimLib(playerid,"ROCKET");
	PreloadAnimLib(playerid,"RUSTLER");
	PreloadAnimLib(playerid,"RYDER");
	PreloadAnimLib(playerid,"SCRATCHING");
	PreloadAnimLib(playerid,"SHAMAL");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"SHOTGUN");
	PreloadAnimLib(playerid,"SILENCED");
	PreloadAnimLib(playerid,"SKATE");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"SNIPER");
	PreloadAnimLib(playerid,"SPRAYCAN");
	PreloadAnimLib(playerid,"STRIP");
	PreloadAnimLib(playerid,"SUNBATHE");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"SWIM");
	PreloadAnimLib(playerid,"SWORD");
	PreloadAnimLib(playerid,"TANK");
	PreloadAnimLib(playerid,"TATTOOS");
	PreloadAnimLib(playerid,"TEC");
	PreloadAnimLib(playerid,"TRAIN");
	PreloadAnimLib(playerid,"TRUCK");
	PreloadAnimLib(playerid,"UZI");
	PreloadAnimLib(playerid,"VAN");
	PreloadAnimLib(playerid,"VENDING");
	PreloadAnimLib(playerid,"VORTEX");
	PreloadAnimLib(playerid,"WAYFARER");
	PreloadAnimLib(playerid,"WEAPONS");
	PreloadAnimLib(playerid,"WUZI");
	pInfo[playerid][pAnimLoad] = true;
	return 1;
}
